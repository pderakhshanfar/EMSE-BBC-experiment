/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:34:45 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.backticked("Cannot call setValue() on constructor parameter of ");
      ClassUtil.nonNullString("2HhHm5a#V9 }}'");
      ClassUtil.nonNullString("no String-argument constructor/factory method to deserialize from String value ('%s')");
      ClassUtil.backticked("net.sf.cglib.proxy.com.fasterxml.jackson.core.ObjectCodec");
      Class<Double> class0 = Double.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findClassAnnotations(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.isJacksonStdImpl(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-691022612), objectMapper1, byteArrayOutputStream0);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 262144, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "com.fasterxml.jackson.databind.util.NameTransformer$2", jsonLocation0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Character> class0 = Character.class;
      ClassUtil.hasEnclosingMethod(class0);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findSuperTypes(class2, class2, list0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.verifyMustOverride(class0, object0, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message (getMessage() has thrown an exception)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLDataException sQLDataException0 = new SQLDataException("WO*e~u;3i'?&%cA[H@", "WO*e~u;3i'?&%cA[H@", mockRuntimeException0);
      mockRuntimeException0.initCause(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(vFEQah}2yW4x", sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference", (String) null, sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException1 = new SQLDataException("org.hibernate.proxy.", sQLNonTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLDataException1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.createInstance(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.readerForUpdating(iOContext0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("JSON", "JSON");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // JSON
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SQLWarning sQLWarning0 = new SQLWarning("(", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("g\u0000w", sQLTransactionRollbackException0);
      enumMap0.put(clientInfoStatus0, (RuntimeException) mockRuntimeException0);
      ClassUtil.findEnumType(enumMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class1);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ArrayType arrayType2 = arrayType1.withValueHandler(class0);
      ClassUtil.rawClass(arrayType2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      JsonInclude.Value[] jsonInclude_ValueArray0 = new JsonInclude.Value[0];
      JsonInclude.Value.mergeAll(jsonInclude_ValueArray0);
      JsonInclude.Value.merge((JsonInclude.Value) null, (JsonInclude.Value) null);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion((JsonInclude.Value) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper4 = objectMapper3.enable(jsonParser_FeatureArray0);
      File file0 = MockFile.createTempFile("JSON", "JSON", (File) null);
      objectMapper3.writeValue(file0, (Object) jsonInclude_Include0);
      ObjectMapper objectMapper5 = objectMapper4.enableDefaultTyping();
      TypeReference<RuntimeException> typeReference0 = (TypeReference<RuntimeException>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectMapper5.readerFor(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      PropertyName propertyName0 = new PropertyName("Input end (%d) may not be before start (%d)");
      ObjectReader objectReader2 = objectReader1.withRootName(propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader2);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      JsonFactory jsonFactory1 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, (String) null);
      objectMapper1.readerForUpdating(jsonMappingException0);
      Class<String> class1 = String.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<Object>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class0);
      ClassUtil.findEnumType(enumMap0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      mockError0.toString();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "\"");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.isLocalType(class4, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "net.sf.cglib.proxy.java.sql.ClientInfoStatus");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "net.sf.cglib.proxy.java.sql.ClientInfoStatus");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // net.sf.cglib.proxy.java.sql.ClientInfoStatus
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[TokenBuffer: ", "o`3lxn7E", (Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1037));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      enumMap0.put(clientInfoStatus0, (RuntimeException) mockRuntimeException0);
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "i_.$% FDZ.W0bYu;G?");
      MockIOException mockIOException0 = new MockIOException(sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("i_.$% FDZ.W0bYu;G?", "tyW],p", mockIOException0);
      SQLDataException sQLDataException0 = new SQLDataException("tyW],p", "non-static member class", (-1297), sQLIntegrityConstraintViolationException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class1, "non-static member class");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.sql.ClientInfoStatus` from number 1: non-static member class
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "#", jsonLocation0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLTransientException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "G");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "j>L`}s1VI");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase", "org.hibernate.proxy.java.lang.Double", (-4));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations", "org.hibernate.proxy.java.lang.Double", "org.hibernate.proxy.", (-1808662384));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("TSbz\"9_wCQ1/", "com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase", "org.hibernate.proxy.java.lang.String", 1536);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("TSbz\"9_wCQ1/", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "org.hibernate.proxy.java.lang.String", (-1744094291));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("lz}npC1`EbOsFhoyO)%", "org.hibernate.proxy.java.lang.String", "vj*Mo~", (-6));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("org.hibernate.proxy.", "vj*Mo~", "com.fasterxml.jacks", 1713);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "j>L`}s1VI", "vj*Mo~", (-1808662384));
      stackTraceElementArray0[6] = stackTraceElement6;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException0.clearLocation();
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // j>L`}s1VI
//         //
//         verifyException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("x#B1ql$=Ds+g@nx~F(", "x#B1ql$=Ds+g@nx~F(", 5, sQLDataException0);
      sQLDataException0.initCause(sQLTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class1);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "annotation");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class1);
      POJONode pOJONode0 = new POJONode(enumMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Sub-class %s (of class %s) must override method '%s'");
      ClassUtil.findEnumType(enumMap0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K6Nw> kA,G|r{Z{&", "Sub-class %s (of class %s) must override method '%s'");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, "O\u0000RACsRT][pV~Ce8I");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // O\u0000RACsRT][pV~Ce8I
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      // Undeclared exception!
//      try { 
        objectReader0.treeAsTokens((TreeNode) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern1);
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNull((Void) null, (Void) null);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Void> class1 = Void.class;
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.nonNullString((String) null);
      System.setCurrentTimeMillis(1007L);
      Class<Module> class0 = Module.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findRawSuperTypes(class0, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.TreeCodec");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<Long> class0 = Long.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.nameOf((Named) null);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      ClassUtil.nameOf((Named) null);
      Float float0 = new Float((-1.0F));
      ClassUtil.getClassDescription(float0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
//      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.emptyIterator();
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<?> class2 = ClassUtil.classOf(list0);
      ClassUtil.nullOrToString((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal((-9.223372036854776E18));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class2, (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.util.ArrayList` from number -9223372036854775808: null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getStackTrace();
      ClassUtil.classNameOf(mockIOException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayOutputStream0, byteArray0, 66, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-49));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("wTA/)A:#|y9'68ua", "wTA/)A:#|y9'68ua", 2);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLIntegrityConstraintViolationException: wTA/)A:#|y9'68ua
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      ClassUtil.primitiveType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getOuterClass(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockRuntimeException0, (Object) null, 96);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class1);
      Character character0 = new Character('E');
      POJONode pOJONode0 = new POJONode(character0);
      Object object0 = ClassUtil.defaultValue(class0);
      enumMap0.containsValue(object0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.isNonStaticInnerClass(class1);
      POJONode pOJONode1 = new POJONode(character0);
      ClassUtil.getClassDescription(pOJONode1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockError mockError0 = new MockError("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      mockError0.getStackTrace();
      ClassUtil.classNameOf(mockError0);
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, true);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isConcrete(class0);
      Class<Character> class2 = Character.class;
      mockError0.fillInStackTrace();
      ClassUtil.canBeABeanType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Error> class1 = Error.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.isNonStaticInnerClass(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getDeclaringClass(class0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "org.hibernate.proxy.java.sql.ClientInfoStatus";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.sql.ClientInfoStatus");
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("No current event to copy", class0, "uLOl;IBI0<xn");
      enumMap0.containsValue(jsonMappingException0);
      ClassUtil.findEnumType(enumMap0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<POJONode> class3 = POJONode.class;
      ClassUtil.getEnclosingClass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findRawSuperTypes(class4, class3, false);
      Class<ReferenceType> class5 = ReferenceType.class;
      ClassUtil.getPackageName(class5);
      ClassUtil.emptyIterator();
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class1 = HashMap.class;
      // Undeclared exception!
//      try { 
        typeFactory1.constructRawMapType(class1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // TypeModifier Mock for TypeModifier, hashCode: 935763555 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1167943097) return null for type [simple type, class java.lang.Object]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 758, sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, sQLTimeoutException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("W");
      enumMap0.put(clientInfoStatus0, (RuntimeException) mockRuntimeException0);
      enumMap0.containsValue(sQLTimeoutException0);
      ClassUtil.findEnumType(enumMap0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class3, true);
      ClassUtil.backticked("net.sf.cglib.proxy.");
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<String> class3 = String.class;
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.java.lang.RuntimeException", "\"/C?\"\"M$(jg3,N5");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.java.lang.RuntimeException", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class1);
      enumMap0.containsValue(sQLIntegrityConstraintViolationException0);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.findEnumType(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class3, class2, true);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.java.lang.RuntimeException", "\"/C?\"\"M$(jg3,N5");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.java.lang.RuntimeException", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class1);
      enumMap0.containsValue(sQLIntegrityConstraintViolationException0);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.findEnumType(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class3, class2, true);
      ClassUtil.backticked("\"/C?\"\"M$(jg3,N5");
      ClassUtil.emptyIterator();
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("sKT", "sKT", 2572);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      IOContext iOContext0 = null;
      int int0 = (-1807771059);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection((ObjectReader[]) null);
      Class<IOException> class1 = IOException.class;
      // Undeclared exception!
//      try { 
        objectReader1.forType(class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.primitiveType(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.isProxyType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      ClassUtil.quotedOr(collectionType0, "JSON");
      Class<Object> class3 = Object.class;
      ClassUtil.canBeABeanType(class3);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      MockIOException mockIOException0 = new MockIOException(sQLClientInfoException1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockIOException0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      // Undeclared exception!
//      try { 
        objectReader0.treeAsTokens((TreeNode) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      constructor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<Byte> class1 = Byte.class;
      Class<Error> class2 = Error.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<Float> class3 = Float.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class4, false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type");
      mockError0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.quotedOr((Object) null, "USE_BASE_TYPE_AS_DEFAULT_IMPL");
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class2, class0, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Float float0 = new Float((-9.223372036854776E18));
      Float float1 = ClassUtil.nonNull((Float) null, float0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, float1, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Float (of class java.lang.Short) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      ClassUtil.getClassDescription((Object) null);
      Class<Byte> class0 = Byte.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.nullOrToString((Object) null);
      System.setCurrentTimeMillis(0L);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '+';
      charArray0[2] = ';';
      charArray0[3] = '\"';
      charArray0[4] = '$';
      charArray0[5] = 'K';
      charArray0[6] = 'I';
      charArray0[7] = 'E';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: JSON
//         //  at [Source: (char[])\";+;\"$KIE\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "\"H?FCr!UOI%\"", "Invalid input: JSON Pointer expression must start with '/': \"");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from String \"\"H?FCr!UOI%\"\": Invalid input: JSON Pointer expression must start with '/': \"
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nameOf((Class<?>) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      MockException mockException0 = new MockException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ua8%n", mockException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "hm2D", 330, sQLTransientConnectionException0);
      MockThrowable.getDefaultStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.printStackTrace();
      MockThrowable.getDefaultStackTrace();
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<Integer> class3 = Integer.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaredFields(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.createInstance(class4, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hm2D");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nameOf((Class<?>) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "[null]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD");
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)117, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      MockIOException mockIOException0 = new MockIOException("; failed to set access: ");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec((ObjectCodec) null);
      jsonFactory2.enable(jsonParser_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) null, jsonEncoding0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      jsonGenerator0.writeBoolean(true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      sQLRecoverableException0.setNextException(sQLFeatureNotSupportedException0);
      sQLRecoverableException0.spliterator();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLRecoverableException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.printStackTrace();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("jKW^5{2+", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(mockRuntimeException0);
      MockThrowable.getDefaultStackTrace();
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType";
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      jsonFactory1.setCodec((ObjectCodec) null);
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.getOuterClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class3, "g1=Bm)cy3", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String \"g1=Bm)cy3\": net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.quotedOr(iterator0, "rgg-k9>\"~^NJ");
      Class<Float> class1 = Float.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 2);
      Class<Short> class3 = Short.class;
      classArray0[0] = class3;
      Class<Short> class4 = Short.class;
      classArray0[1] = class4;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.findSuperClasses(class0, class0, false);
      boolean boolean0 = new Boolean("@k}3@ux");
      ClassUtil.quotedOr((Object) null, "@k}3@ux");
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("Failed copy(): ");
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.defaultValue(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.primitiveType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isBogusClass(class0);
      Class<IOException> class1 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class1, true);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) iOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isBogusClass(class0);
      SQLWarning sQLWarning0 = new SQLWarning("No 'injectableValues' configured, cannot inject value with id [%s]", (Throwable) null);
      sQLWarning0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLWarning0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.nullOrToString(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLDataException sQLDataException0 = new SQLDataException("+K2HtesYe9Fb`0>RT", "\".-C|x}y$]}2kw2=8x", (-2303), mockError0);
      SQLWarning sQLWarning0 = new SQLWarning("+K2HtesYe9Fb`0>RT", "", 3, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      sQLSyntaxErrorException0.getStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString(sQLInvalidAuthorizationSpecException0);
      ClassUtil.nonNullString("Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Throwable throwable0 = null;
      MockError mockError0 = new MockError((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockError0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("W)RM9)fgjrRy'TX\"P", "net.sf.cglib.proxy.java.lang.Integer", sQLNonTransientConnectionException0);
      sQLSyntaxErrorException0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "net.sf.cglib.proxy.java.lang.Integer");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short)1444);
      ClassUtil.nullOrToString(short0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, (short)1444);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(bufferedOutputStream0).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("java.lang.Short@0000000001");
      MockFile mockFile1 = new MockFile(mockFile0, "z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getPackageName(class0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLFeatureNotSupportedException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
      Boolean boolean0 = new Boolean("primitive");
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
      boolean boolean0 = new Boolean("primitive");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
      Class<String> class1 = String.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Integer");
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.hasClass((Object) null, (Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isJacksonStdImpl(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      Class<String> class4 = String.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.ser.impl.WritableObjectId");
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Short short0 = new Short((short) (-1337));
      Class<Short> class0 = Short.class;
      ClassUtil.hasClass(short0, class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isProxyType(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      ClassUtil classUtil0 = new ClassUtil();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      MockIOException mockIOException0 = new MockIOException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      DataTruncation dataTruncation0 = new DataTruncation((-393805500), false, true, (-2364), (-661868634));
      dataTruncation0.getNextWarning();
      ClassUtil.throwIfIOE((Throwable) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", (Throwable) null);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getParameterTypes();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredFields(class1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "mS", sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Character> class0 = Character.TYPE;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      ClassUtil.isBogusClass(class1);
      ClassUtil.findEnumType(class0);
      ClassUtil.findConstructor(class0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e*@ /7e1");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNull((Void) null, (Void) null);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Character> class0 = Character.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      Float float0 = new Float(0.0F);
      ClassUtil.classNameOf(float0);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaredFields(class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.primitiveType(class4);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      sQLNonTransientException0.addSuppressed(sQLClientInfoException0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getGenericSuperclass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", (Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      ClassUtil.classNameOf(defaultSerializerProvider_Impl0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredFields(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", intArray0, (Throwable) null);
      ClassUtil.throwIfRTE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "LA$l7w:@q";
      String string1 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Character> class0 = Character.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getOuterClass(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.findEnumType(class3);
      ClassUtil.findConstructor(class0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LA$l7w:@q");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapType> class1 = MapType.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperTypes((Class<?>) null, class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class3 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getGenericSuperclass(class0);
      Class<Double> class1 = Double.class;
      Class<Integer> class2 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getOuterClass(class1);
      Class<Double> class3 = Double.class;
      ClassUtil.findEnumType(class3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("elementType");
      Class<Float> class4 = Float.class;
      ClassUtil.primitiveType(class4);
      ClassUtil.nullOrToString(class4);
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.findConstructor(class5, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Byte byte0 = new Byte((byte) (-49));
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getDeclaringClass(class0);
      Short short0 = new Short((short)8107);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("was expecting either '*' or '/' for a comment");
      Object object0 = new Object();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, true);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.getOuterClass(class0);
      Class<Double> class4 = Double.class;
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      ClassUtil.findEnumType(class5);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("elementType");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2%[H wdYg2gU", "2%[H wdYg2gU", (-637), mockThrowable0);
      Class<String> class6 = String.class;
      ClassUtil.primitiveType(class6);
      ClassUtil.nullOrToString(class4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, class0, "a9/LT:g1*wQt\"\"%_}");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.Float) must override method 'a9/LT:g1*wQt\"\"%_}'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      jsonFactory2.setRootValueSeparator("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      Class<Float> class0 = Float.class;
      Class<Module> class1 = Module.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.isConcrete(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.createInstance(class3, true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.backticked("-leuC2ZvyNqY79");
      Class<String> class2 = String.class;
      ClassUtil.getGenericSuperclass(class2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed", "-leuC2ZvyNqY79", (-684));
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getConstructors(class1);
      ClassUtil.backticked("-leuC2ZvyNqY79");
      Class<String> class2 = String.class;
      ClassUtil.getGenericSuperclass(class2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed", "-leuC2ZvyNqY79", (-684));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("keyUniverse", (String) null, (-684), sQLRecoverableException0);
      sQLTimeoutException0.spliterator();
      sQLRecoverableException0.addSuppressed(sQLTimeoutException0);
      sQLRecoverableException0.spliterator();
      sQLRecoverableException0.forEach(consumer0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLRecoverableException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Double> class2 = Double.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class3, true);
      Class<Integer> class4 = Integer.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.getOuterClass(class2);
      Class<Double> class5 = Double.class;
      ClassUtil.findEnumType(class5);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("elementType");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.", "elementType", 56, mockThrowable0);
      Class<Float> class6 = Float.class;
      ClassUtil.primitiveType(class6);
      ClassUtil.nullOrToString(class6);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassMethods(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.quotedOr(class0, "size");
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class3 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      JsonFactory jsonFactory2 = jsonFactory1.setCodec((ObjectCodec) null);
      jsonFactory2.enable(jsonParser_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) null, jsonEncoding0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      sQLRecoverableException0.setNextException(sQLFeatureNotSupportedException0);
      sQLRecoverableException0.spliterator();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLRecoverableException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      System.setCurrentTimeMillis((-3250L));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      MockFile mockFile0 = new MockFile("object", "FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS");
      File file0 = MockFile.createTempFile("JSON", "-wrB)nr6$KJ", (File) mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator(file0, jsonEncoding0);
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(922);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      jsonGeneratorDelegate0.writeString((Reader) pushbackReader0, 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLClientInfoException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredFields(class2);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern1, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("UzbdE;{Sy>,'dDB", "mS", (byte)55);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.Integer", "mS", (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.Integer", (Map<String, ClientInfoStatus>) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "mS", sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLClientInfoException1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ClassUtil.getClassDescription(byte0);
      Class<String> class0 = String.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.quotedOr((Object) null, "`java.lang.Byte`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNullString("/");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException(byte0, class3, "size");
      ClassUtil.isJacksonStdImpl((Object) invalidFormatException0);
      Class<MapType> class4 = MapType.class;
//      try { 
        ClassUtil.createInstance(class4, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = "";
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getClassDescription((Object) null);
      MockIOException mockIOException0 = new MockIOException("*5`y)'gshY");
      mockIOException0.getSuppressed();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredMethods(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("``", hashMap0);
      Character character0 = new Character('8');
      ClassUtil.quotedOr(character0, (String) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.nonNullString((String) null);
      ClassUtil.isJacksonStdImpl((Object) character0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.quotedOr((Object) null, "@k}3@ux");
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("Failed copy(): ");
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.nonNullString("");
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getPackageName(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2051);
      Object object0 = new Object();
      ClassUtil.nullOrToString(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("``", "", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[null]", sQLWarning0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.cfg.BaseSettings", sQLSyntaxErrorException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.hasClass(mockRuntimeException0, class3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[null]");
      ClassUtil.classNameOf((Object) null);
      ClassUtil.isNonStaticInnerClass(class1);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.getDeclaredFields(class4);
      Class<Double> class5 = Double.class;
      ClassUtil.primitiveType(class5);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.backticked("org.hibernate.proxy.java.lang.Character");
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.findClassAnnotations(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap1);
      SQLWarning sQLWarning0 = new SQLWarning("", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLClientInfoException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", sQLWarning0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.hasClass("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Character");
      ClassUtil.classNameOf((Object) null);
      Class<Float> class3 = Float.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<MapLikeType> class4 = MapLikeType.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getDeclaredFields(class4);
      Class<Error> class5 = Error.class;
      ClassUtil.primitiveType(class5);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ClassUtil.getClassDescription(byte0);
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`java.lang.Byte`", "`java.lang.Byte`");
      sQLSyntaxErrorException0.printStackTrace();
      SQLException sQLException0 = null;
      sQLSyntaxErrorException0.setNextException((SQLException) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`java.lang.Byte`", "`java.lang.Byte`", (byte)0);
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Short> class2 = Short.class;
      ClassUtil.isBogusClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "`java.lang.Byte`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<Short> class0 = Short.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.Module");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.canBeABeanType(class0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "=NrK.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isBogusClass(class0);
      String string0 = "";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.createInstance(class2, false);
      Class<HashMap> class3 = HashMap.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        objectMapper1.readerFor(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Integer> class1 = Integer.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[2];
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext defaultDeserializationContext0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      objectMapper1.readerFor(typeReference0);
      Locale locale0 = null;
//      try {
        locale0 = new Locale("JSON", "%Q", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Locale", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1458));
      ClassUtil.quotedOr(placeholderForType0, "x45F|.K-M^+MAgGSG");
      ClassUtil.nonNullString("x45F|.K-M^+MAgGSG");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      System.setCurrentTimeMillis((-1458));
      Class<IOException> class1 = IOException.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperTypes(class1, class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Integer> class3 = Integer.class;
      Class<Long> class4 = Long.class;
      ClassUtil.primitiveType(class4);
      ClassUtil.nullOrToString(class3);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1458));
      ClassUtil.quotedOr(placeholderForType0, "x45F|.K-M^+MAgGSG");
      ClassUtil.nonNullString("x45F|.K-M^+MAgGSG");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      System.setCurrentTimeMillis((-1458));
      Class<IOException> class1 = IOException.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperTypes(class1, class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"$-1457\"", "x45F|.K-M^+MAgGSG", (-1246572939));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // \"$-1457\"
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<RuntimeException> linkedList0 = new LinkedList<RuntimeException>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Efe9");
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.toString();
      mockRuntimeException0.fillInStackTrace();
      linkedList0.addLast(mockRuntimeException0);
      ClassUtil.nonNull(linkedList0, linkedList0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nonNull("Efe9", "Efe9");
      ClassUtil.isLocalType(class0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("N");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Efe9", "Rc39yQ", "N", (-151));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("VlABE),ks+0K{", "Rc39yQ", "org.evosuite.runtime.mock.java.lang.MockThrowable: Efe9", (-151));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("L5mN2@v4F,", "Failed to find default constructor of class ", "Efe9", (-151));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("\"%s\"", "net.sf.cglib.proxy.", (String) null, (-151));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("7CCLF)k`{=~", "Efe9", "org.evosuite.runtime.mock.java.lang.MockThrowable: Efe9", (-1331));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("VlABE),ks+0K{", "Failed to find default constructor of class ", "7CCLF)k`{=~", (-151));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("org.evosuite.runtime.mock.java.lang.MockThrowable: Efe9", "org.evosuite.runtime.mock.java.lang.MockThrowable: Efe9", "E7y!1~=dy`RAt|D", (-1508));
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockException mockException0 = new MockException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o<SKzoF-", "o<SKzoF-", mockException0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      JsonFactory jsonFactory2 = jsonFactory1.setCodec((ObjectCodec) null);
      jsonFactory2.enable(jsonParser_Feature0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isProxyType(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockException mockException0 = new MockException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"<SKzoF-", "\"<SKzoF-", mockException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findClassAnnotations(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, sQLClientInfoException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", sQLWarning0);
      SQLWarning sQLWarning1 = new SQLWarning("Failed to find default constructor of class ", "rL~70#j%2Y", (-1244651605));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 187, mockRuntimeException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter1);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) stringWriter1, (Exception) sQLClientInfoException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLClientInfoException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredMethods(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      ClassUtil.nameOf(class2);
      Class<String> class3 = String.class;
      ClassUtil.isNonStaticInnerClass(class3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredMethods(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, sQLClientInfoException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", sQLWarning0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.hasClass("``", class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ClassUtil.classNameOf("");
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaredFields(class2);
      Class<Error> class3 = Error.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.throwIfRTE(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "0[Mbl]R8", (-5));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(">L", "", "ZERO_LENGTH_ENUM_ARRAY", 256);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("0[Mbl]R8", "", "; failed to set access: ", 256);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, 256);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (was java.sql.SQLNonTransientConnectionException) (through reference chain: java.sql.SQLNonTransientConnectionException[256])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredMethods(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, sQLClientInfoException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", sQLWarning0);
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      mockRuntimeException0.getSuppressed();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "vals", (Throwable) mockRuntimeException0);
      Class<String> class1 = String.class;
      ClassUtil.hasClass(jsonMappingException0, class1);
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.nonNullString("@k}3@ux");
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("@k}3@ux", "@k}3@ux");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "koukSp}:dq");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // koukSp}:dq
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.backticked("<");
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.backticked("java.io.IOException");
      Class<Byte> class1 = Byte.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Float> class2 = Float.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.getDeclaredMethods(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer", hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("", "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer", sQLClientInfoException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer", sQLClientInfoException0);
      ClassUtil.isJacksonStdImpl((Object) sQLWarning0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`<`", (Throwable) mockRuntimeException0);
      ClassUtil.hasClass(hashMap0, class0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<String> class3 = String.class;
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        typeResolutionContext_Basic0.resolveType((Type) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassMethods(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.quotedOr(class0, "size");
      ClassUtil.isProxyType(class1);
      ClassUtil.nonNullString("size");
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Short> class2 = Short.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "F(", 3);
      String string0 = "r&{=2wP[ypG=J:s(";
      SQLException sQLException0 = new SQLException("r&{=2wP[ypG=J:s(", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 3, sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("r&{=2wP[ypG=J:s(", "r&{=2wP[ypG=J:s(");
      sQLNonTransientConnectionException0.setNextException(sQLRecoverableException0);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.getRootCause(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassDescription(class0);
      MockIOException mockIOException0 = new MockIOException("`java.lang.RuntimeException`");
      Throwable[] throwableArray0 = mockIOException0.getSuppressed();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockIOException0);
      MockFile mockFile0 = new MockFile("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("`java.lang.RuntimeException`", (Object[]) throwableArray0);
      mockRuntimeException0.printStackTrace(printWriter0);
      Class<String> class1 = String.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.getRootCause(mockRuntimeException0);
      Class<Short> class3 = Short.class;
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.getOuterClass(class2);
      Class<Short> class4 = Short.class;
      ClassUtil.hasEnclosingMethod(class4);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "Y2Us>cY(r(zf`y SNH8";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("elementType", "Y2Us>cY(r(zf`y SNH8");
      SQLDataException sQLDataException0 = new SQLDataException("Az", "", 0, sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfIOE(sQLDataException0);
      Class<Float> class0 = Float.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-.9In");
      mockPrintWriter0.close();
      sQLTransactionRollbackException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("-.9In", "-.9In", 0, sQLTransactionRollbackException0);
      String string0 = "mqB5,1";
      String string1 = "}#^";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("mqB5,1", "}#^");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // }#^
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("[null]", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put((String) null, clientInfoStatus1);
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put((String) null, clientInfoStatus2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[null]", hashMap0);
      hashMap0.replace("vals", clientInfoStatus1);
      sQLClientInfoException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ms7~", "ZERO_LENGTH_ENUM_ARRAY", (-2527));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Double> class2 = Double.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class3, true);
      Class<Integer> class4 = Integer.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.getOuterClass(class2);
      Class<Double> class5 = Double.class;
      ClassUtil.findEnumType(class5);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ZERO_LENGTH_ENUM_ARRAY", hashMap0, sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ms7~
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.nonNullString("Cannot call getValue() on constructor of ");
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ClassUtil.getClassDescription(byte0);
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class2, class2, true);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.getOuterClass(class2);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ClassUtil.getClassDescription(byte0);
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class2, class2, true);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.getOuterClass(class2);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      SQLWarning sQLWarning0 = new SQLWarning("}Y@", "", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "elementType", 0, sQLWarning0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransactionRollbackException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil$Ctor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      SQLException sQLException0 = new SQLException();
      File file0 = MockFile.createTempFile("3zB3~aR", "3zB3~aR");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      String string0 = "p";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "p");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // p
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("lt;k&", "lt;k&");
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.printStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=m9p,uGx!kz$", "lt;k&", 3);
      sQLRecoverableException0.initCause(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLRecoverableException0);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UaJ", "UaJ");
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, ";)3KZ~eyug");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.nonNullString("@k}3@ux");
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      // Undeclared exception!
//      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, placeholderForType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLNonTransientException0.initCause(sQLNonTransientConnectionException0);
      ClassUtil.getRootCause(sQLNonTransientException0);
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.nonNullString("@k}3@ux");
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3568);
      ClassUtil.nullOrToString(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 0, hashMap0);
      sQLClientInfoException0.getSuppressed();
      sQLClientInfoException0.getSuppressed();
      Throwable throwable0 = ClassUtil.throwIfError(sQLClientInfoException0);
      ClassUtil.throwIfError(throwable0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class1, false);
      boolean boolean1 = true;
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.type", (String) null);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "NULL");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // NULL
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      ClassUtil.classNameOf(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<CollectionType> class3 = CollectionType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.backticked("");
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredMethods(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, sQLClientInfoException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", sQLWarning0);
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "vals", (Throwable) mockRuntimeException0);
      Class<String> class1 = String.class;
      ClassUtil.hasClass(jsonMappingException0, class1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      Byte byte0 = new Byte((byte) (-42));
      ClassUtil.classOf(byte0);
      ClassUtil.nameOf(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getGenericSuperclass(class1);
      // Undeclared exception!
//      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getClassMethods(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      deserializerFactoryConfig0.deserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLWarning sQLWarning0 = new SQLWarning("enum", "Failed to find default constructor of class ");
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class1, (Throwable) sQLWarning0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassDescription(class0);
      MockIOException mockIOException0 = new MockIOException("`java.lang.RuntimeException`");
      mockIOException0.getSuppressed();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockIOException0);
      mockRuntimeException0.getStackTrace();
      ClassUtil.nonNull((Object) mockRuntimeException0, (Object) class0);
      ClassUtil.throwIfIOE(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<Float> class2 = Float.class;
      ClassUtil.isLocalType(class2, false);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0, accessPattern0);
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = true;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classOf(class0);
      Class<Short> class1 = Short.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.primitiveType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.classNameOf(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getClassMethods(class1);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings.create(class0, javaTypeArray0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findMethod("", (Class<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mhA~", "ZERO_LENGTH_ENUM_ARRAY", (-2527));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      sQLSyntaxErrorException0.printStackTrace();
      sQLSyntaxErrorException0.setNextException((SQLException) null);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "mhA~");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // mhA~
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte byte0 = (byte)67;
      Byte byte1 = new Byte((byte)67);
      Class<?> class0 = ClassUtil.classOf(byte1);
      ClassUtil.classOf(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.createInstance(class1, false);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
//      try { 
        ClassUtil.createInstance(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockError mockError0 = new MockError();
      ClassUtil.nullOrToString(mockError0);
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("org.evosuite.runtime.mock.java.lang.MockError@0000000001");
      Class<Long> class1 = Long.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Double> class2 = Double.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Integer> class1 = Integer.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[2];
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectMapper1.readerFor(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }
}
