/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:16:03 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.reflect.Field;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLSyntaxErrorException;
import java.time.chrono.ChronoLocalDate;
import java.time.format.FormatStyle;
import java.util.HashMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      KeyDeserializer keyDeserializer0 = stdKeyDeserializers0.findKeyDeserializer(resolvedRecursiveType0, (DeserializationConfig) null, basicBeanDescription0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, keyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.core.TreeCodec");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class2);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
//      try { 
        settableAnyProperty0._throwAsIOE(sQLIntegrityConstraintViolationException0, classNameIdResolver0, objectReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // com.fasterxml.jackson.core.TreeCodec
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, (String) null, (JavaType) null);
      Class<HashMap> class1 = HashMap.class;
      Class<SimpleModule> class2 = SimpleModule.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertSame(mapType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "?icV'6IIO", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, (String) null, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertFalse(javaType1.isArrayType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertSame(beanProperty0, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<PropertyName> class1 = PropertyName.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "2OX|<2", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-892));
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set((Object) null, virtualAnnotatedMember0, coreXMLDeserializers_Std0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<InputStream> class0 = InputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Module> class0 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "|=]*QlN_Avb^H", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonLocation jsonLocation0 = new JsonLocation(settableAnyProperty0, 0L, 0, 1);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "Boj@O@`+'}Q", jsonLocation0, (ReadableObjectId) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(unresolvedForwardReference0);
      Throwable throwable0 = unresolvedForwardReference0.initCause(sQLSyntaxErrorException0);
      MockException mockException0 = new MockException("Boj@O@`+'}Q", throwable0);
      // Undeclared exception!
      settableAnyProperty0._throwAsIOE(mockException0, jsonLocation0, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      // Undeclared exception!
//      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, jsonFactory0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockIOException mockIOException0 = new MockIOException("bP[X9", sQLIntegrityConstraintViolationException0);
//      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, "bP[X9", annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, (String) null, "type to register key serializer for");
//      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, resolvedRecursiveType0, defaultSerializerProvider_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'null' as a subtype of [recursive type; UNRESOLVED: type to register key serializer for
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      Class<ShortNode> class0 = ShortNode.class;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, " (no error message provided)");
//      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, (Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_EMBEDDED_OBJECT:  (no error message provided)
//         //  at [Source: (char[])\"\u0000\u0000\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "(", false, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserialize(jsonParser0, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<FormatStyle> class0 = FormatStyle.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "property", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      Integer integer0 = new Integer(0);
//      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, integer0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing \"any\" property '0' of class java.time.format.FormatStyle (expected type: null; actual type: [null]) (no error message provided)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set(annotatedField0, typeBindings0, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      Integer integer0 = new Integer((-31));
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set(integer0, (Object) null, vector0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "'{Oo.>x>]A", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserialize(jsonParser0, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "WTC1", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TEXT_BUFFER, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 19, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserializeAndSet(readerBasedJsonParser0, (DeserializationContext) null, iOContext0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      Class<FormatStyle> class1 = FormatStyle.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
      boolean boolean0 = settableAnyProperty1.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, (String) null, (JavaType) null);
      Class<HashMap> class1 = HashMap.class;
      Class<SimpleModule> class2 = SimpleModule.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.readResolve();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing method (broken JDK (de)serialization?)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<JsonNode> class0 = JsonNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.readResolve();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing method (broken JDK (de)serialization?)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1157));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      Class<String> class0 = String.class;
      Class<NamedType> class1 = NamedType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "e,jn<of^C", false, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionType0, typeResolutionContext_Basic0, annotationMap0, 14);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), placeholderForType0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, annotatedParameter0, placeholderForType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
      CreatorProperty creatorProperty1 = (CreatorProperty)settableAnyProperty0.getProperty();
      assertFalse(creatorProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "?icV'6IIO", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class java.time.chrono.ChronoLocalDate]", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<FormatStyle> class0 = FormatStyle.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "property", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("property");
      Integer integer0 = new Integer(0);
//      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, integer0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing \"any\" property '0' of class java.time.format.FormatStyle (expected type: null; actual type: [null]), problem: property
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }
}
