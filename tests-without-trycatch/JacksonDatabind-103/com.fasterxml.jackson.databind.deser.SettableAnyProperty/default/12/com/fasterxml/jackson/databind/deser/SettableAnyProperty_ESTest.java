/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 05:50:57 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Field;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransientConnectionException;
import java.time.chrono.IsoEra;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, propertyName0, "JSON");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "7%I9_{|vD~9+~iG", false, simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, simpleType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Class<Integer> class1 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "#DzMssL2'CH])", false, simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, simpleType0, stdKeyDeserializer0, jsonDeserializer0, asWrapperTypeDeserializer0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertFalse(deserializationConfig0.requiresFullValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
//      try { 
        settableAnyProperty0._throwAsIOE(sQLNonTransientConnectionException0, (Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, (Object) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "7%I9_{|vD~9+~iG", simpleType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "7%I9_{|vD~9+~iG", true, simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, simpleType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("7%I9_{|vD~9+~iG", "#DMssL2'CH])");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Missing method (broken JDK (de)serialization?)", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Boolean boolean0 = new Boolean("S+Q)`azQ7[0FxSHJFt");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", integer0, (String) null);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, annotatedField0, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, ") as character #", false, simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, simpleType0, stdKeyDeserializer0, jsonDeserializer0, asWrapperTypeDeserializer0);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class java.lang.Object]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("7%I9_{|vD~9+~iG", "#DMssL2'CH])");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Missing method (broken JDK (de)serialization?)", simpleType1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Boolean boolean0 = new Boolean("S+Q)`azQ7[0FxSHJFt");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", integer0, (String) null);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType1, propertyName0, annotatedField0, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType1, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType1, classNameIdResolver0, ") as character #", false, simpleType1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, simpleType1, stdKeyDeserializer0, jsonDeserializer0, asWrapperTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "(mG.jgqg", simpleType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "(mG.jgqg", false, simpleType0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, collectionType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(javaType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("7%I9_{|vD~9+~iG", "#DMssL2'CH])");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler("#ILWc");
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Missing method (broken JDK (de)serialization?)", simpleType1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Boolean boolean0 = new Boolean("SQ)`azQ7[0FxSHJFt");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", integer0, (String) null);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType1, propertyName0, annotatedField0, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType1, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType1, classNameIdResolver0, ") as character #", false, simpleType1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, simpleType1, stdKeyDeserializer0, jsonDeserializer0, asWrapperTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertSame(simpleType1, javaType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<IsoEra> class0 = IsoEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "", simpleType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, arrayType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("7%I9_{|vD~9+~iG", "#DMssL2'CH])");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Missing method (broken JDK (de)serialization?)", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Boolean boolean0 = new Boolean("S+Q)`azQ7[0FxSHJFt");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", integer0, (String) null);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, annotatedField0, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, ") as character #", false, simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, simpleType0, stdKeyDeserializer0, jsonDeserializer0, asWrapperTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertEquals("7%I9_{|vD~9+~iG", beanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, simpleType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set(virtualAnnotatedMember0, "", (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("7%I9_{|vD~9+~iG", "J#DMssL2CH])");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Boolean boolean0 = new Boolean("S+Q)`azQ7[0FxSHJFt");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", integer0, (String) null);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, annotatedField0, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "n2d\"A2]", false, simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, simpleType0, stdKeyDeserializer0, jsonDeserializer0, asArrayTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      IsoEra isoEra0 = IsoEra.BCE;
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, isoEra0, "70]7Z*;RkZ#");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'java.lang.Object' as a subtype of [simple type, class java.lang.Object]: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, jsonParser0, "JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserialize((JsonParser) null, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, jsonDeserializer0, mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, ")", ")");
//      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, (Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id ')' as a subtype of null: )
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON");
//      try { 
        settableAnyProperty0._throwAsIOE(unresolvedForwardReference0, jsonParser0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set((Object) null, (Object) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set((Object) null, (Object) null, jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "JSON", false, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, stdKeyDeserializer0, jsonDeserializer0, asPropertyTypeDeserializer0);
      Object object0 = settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "_wO{O[^rpzxYn", simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, simpleType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_wO{O[^rpzxYn");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLTransientConnectionException0);
//      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, class0, virtualAnnotatedMember0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing \"any\" property 'class java.lang.Object' of class java.lang.Object (expected type: [simple type, class java.lang.Object]; actual type: `com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember`), problem: java.sql.SQLTransientConnectionException: _wO{O[^rpzxYn
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "_wO{O[^rpzxYn", simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, simpleType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
//      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, class0, virtualAnnotatedMember0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing \"any\" property 'class java.lang.Object' of class java.lang.Object (expected type: [simple type, class java.lang.Object]; actual type: `com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember`) (no error message provided)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = new PropertyName("c\"1;H ");
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<ObjectNode> jsonDeserializer0 = (JsonDeserializer<ObjectNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedParameter0, (JavaType) null, jsonDeserializer1, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("F");
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, annotationMap0, (String) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.introspect.AnnotatedParameter cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = new PropertyName("c\"1;H ");
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedParameter0, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("F");
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, annotationMap0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "JSON", false, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, stdKeyDeserializer0, jsonDeserializer0, asPropertyTypeDeserializer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, jsonFactory0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("7%I9_{|vD~9+~iG", "#DMssL2'CH])");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Missing method (broken JDK (de)serialization?)", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Boolean boolean0 = new Boolean("S+Q)`azQ7[0FxSHJFt");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", integer0, (String) null);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, annotatedField0, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", false, simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, simpleType0, stdKeyDeserializer0, jsonDeserializer0, asWrapperTypeDeserializer0);
      boolean boolean1 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", simpleType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, simpleType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.readResolve();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing method (broken JDK (de)serialization?)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.readResolve();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing method (broken JDK (de)serialization?)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }
}
