/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:13:29 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "VD2m)", javaType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults(virtualAnnotatedMember0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "VD2m)", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, propertyMetadata_MergeInfo0.getter, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[23];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "/[yst,8YLIW5BhEL", true, javaTypeArray0[2]);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaTypeArray0[1], jsonDeserializer0, asWrapperTypeDeserializer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("bL>0}!qFW/y", "", hashMap0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
//      try { 
        settableAnyProperty0._throwAsIOE(sQLClientInfoException0, virtualAnnotatedMember0, resolvedRecursiveType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // bL>0}!qFW/y
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[23];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "/[yst,8YLIW5BhEL", true, javaTypeArray0[2]);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaTypeArray0[1], jsonDeserializer0, asWrapperTypeDeserializer0);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Class<InputStream> class2 = InputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[2] = (JavaType) collectionType0;
      javaTypeArray0[4] = (JavaType) collectionType1;
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionType0, javaTypeArray0, javaTypeArray0[4], javaTypeArray0[2]);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, (TypeIdResolver) null, "skebB=6'GaI", false, mapType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType1, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertSame(collectionType1, javaType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) collectionType0;
      CollectionType collectionType1 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, javaTypeArray0, javaTypeArray0[1]);
      Class<InputStream> class2 = InputStream.class;
      JavaType[] javaTypeArray1 = new JavaType[8];
      javaTypeArray1[2] = (JavaType) collectionType0;
      javaTypeArray1[4] = (JavaType) collectionType1;
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionType0, javaTypeArray1, javaTypeArray1[4], javaTypeArray1[2]);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, (TypeIdResolver) null, "skebB=6'GaI", false, mapType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType1, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class1, class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults(virtualAnnotatedMember0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "/[yst,8YLIW5BhEL", true, javaTypeArray0[2]);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, propertyMetadata_MergeInfo0.getter, mapType0, (KeyDeserializer) null, jsonDeserializer0, asWrapperTypeDeserializer0);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertTrue(javaType1.isContainerType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      MapperFeature mapperFeature0 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      SimpleType simpleType1 = simpleType0.withValueHandler(mapperFeature0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, simpleType1, jsonDeserializer0, (TypeDeserializer) null);
      SimpleType simpleType2 = (SimpleType)settableAnyProperty0.getType();
      assertSame(simpleType1, simpleType2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("expected a hex-digit for character escape sequence", "1Bz'!){T8t2<");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 39, propertyName0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, simpleType0, jsonDeserializer0, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(javaType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "VD2m", javaType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults(virtualAnnotatedMember0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "VD2m", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, propertyMetadata_MergeInfo0.getter, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      PropertyName propertyName0 = new PropertyName("VD2m)", (String) null);
      Class<InputStream> class0 = InputStream.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = mock(CreatorProperty.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2996, creatorProperty1, (PropertyMetadata) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty2, (AnnotatedMember) null, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertFalse(beanProperty0.isRequired());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("ALLOW_UNQUOTED_FIELD_NAMES");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "%cd1nNu91&", false, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, asPropertyTypeDeserializer0);
      Object object0 = settableAnyProperty0.deserialize(jsonParser0, deserializationContext0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) referenceType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, " ~b,bX/o([L", true, arrayType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<HashMap> class0 = HashMap.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
      Class<Module> class2 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, " 0k??vOx%'\"2'7!", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, collectionLikeType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set("[simple type, class ", " 0k??vOx%'\"2'7!", (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults(virtualAnnotatedMember0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "/[yst,8YLIW5BhEL", true, javaTypeArray0[2]);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, propertyMetadata_MergeInfo0.getter, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "/[yst,8YLIW5BhEL", true, javaTypeArray0[2]);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaTypeArray0[1], jsonDeserializer0, asWrapperTypeDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, beanDeserializerFactory0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Module> class0 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, (String) null, javaType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "JSON", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaType0, jsonDeserializer0, asExternalTypeDeserializer0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, deserializationContext0, pushbackInputStream0, (String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'java.lang.Object' as a subtype of [simple type, class java.lang.Object]: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "/[yst,8YLIW5BhEL", true, javaTypeArray0[2]);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaTypeArray0[1], jsonDeserializer0, asWrapperTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserialize(jsonParser0, deserializationContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "9}\"<`y 2VxJCOI .u`", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, javaType0, jsonDeserializer0, asPropertyTypeDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonDeserializer0, false);
      StringReader stringReader0 = new StringReader("wW96:oipYl~j");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 2, 2, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<HashMap> class0 = HashMap.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
      Class<Module> class2 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, " 0k??vOx%'\"2'7!", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, collectionLikeType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      Integer integer0 = new Integer(408);
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      // Undeclared exception!
//      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, integer0, linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((Throwable) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
//      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, mockIllegalArgumentException0, simpleObjectIdResolver0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "/[yst,8YLIW5BhEL", true, javaTypeArray0[2]);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaTypeArray0[1], jsonDeserializer0, asWrapperTypeDeserializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(javaTypeArray0[0], "", "wZVu'Rtk0F&X");
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("", jsonMappingException0);
//      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, simpleObjectIdResolver0, mockIllegalArgumentException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '' as a subtype of null: wZVu'Rtk0F&X
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType0, jsonToken0, "JSON");
//      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NULL: JSON
//         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "VD2XNm", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set((Object) null, propertyMetadata_MergeInfo0, simpleObjectIdResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, settableAnyProperty0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 1024, 3, true);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
//      try { 
        settableAnyProperty0.deserialize(readerBasedJsonParser0, deserializationContext0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "p^", javaType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("p^");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "]{4*-l", true, collectionLikeType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, collectionLikeType0, jsonDeserializer0, asExternalTypeDeserializer0);
//      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'java.lang.Object' as a subtype of [simple type, class java.lang.Object]: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "VD2m", javaType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults(virtualAnnotatedMember0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "VD2m", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, propertyMetadata_MergeInfo0.getter, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
//      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null, mockIllegalArgumentException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing \"any\" property 'null' of class com.fasterxml.jackson.databind.introspect.AnnotatedMethod (expected type: [simple type, class java.lang.Object]; actual type: `org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException`) (no error message provided)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "VD2m", javaType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults(virtualAnnotatedMember0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "VD2m", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, propertyMetadata_MergeInfo0.getter, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("VD2m");
//      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, virtualAnnotatedMember0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing \"any\" property '[virtual com.fasterxml.jackson.databind.introspect.AnnotatedMethod#VD2m]' of class com.fasterxml.jackson.databind.introspect.AnnotatedMethod (expected type: [simple type, class java.lang.Object]; actual type: [null]), problem: VD2m
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        settableAnyProperty0.set(typeBindings0, (Object) null, simpleObjectIdResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("ALLOW_UNQUOTED_FIELD_NAMES");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "%cd1nNu91&", false, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, asPropertyTypeDeserializer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, deserializationContext0, (Object) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, javaType0, stdKeyDeserializer0, jsonDeserializer0, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 5, (-179));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      LocalDate localDate0 = MockLocalDate.now();
//      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, localDate0, "JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "VD2m)", javaType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults(virtualAnnotatedMember0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "VD2m)", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, propertyMetadata_MergeInfo0.getter, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.readResolve();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing method (broken JDK (de)serialization?)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "eS", false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      // Undeclared exception!
//      try { 
        settableAnyProperty0.readResolve();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing method (broken JDK (de)serialization?)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      PropertyName propertyName0 = new PropertyName("Missing method (broken JDK (de)serialization?)");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, typeResolutionContext_Basic0, annotationMap0, 1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, annotatedParameter0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedParameter0, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNotNull(beanProperty0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, " 0k??vOx%'\"2'7!", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<HashMap> class0 = HashMap.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
      Class<Module> class2 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, " 0k??vOx%'\"2'7!", collectionLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, " 0k??vOx%'\"2'7!", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, collectionLikeType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class com.fasterxml.jackson.databind.Module]", string0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }
}
