/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:55:57 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.sql.ClientInfoStatus;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSerializerProvider_ESTest extends DefaultSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
//      try { 
        defaultSerializerProvider_Impl0._serializeNull(jsonGeneratorDelegate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1);
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId(serializerFactoryConfig0, objectIdGenerators_IntSequenceGenerator0);
      Integer integer0 = new Integer(1701);
      WritableObjectId writableObjectId1 = serializerProvider0.findObjectId(integer0, objectIdGenerators_IntSequenceGenerator0);
      assertNotSame(writableObjectId1, writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      defaultSerializerProvider_Impl0._serializeNull(writerBasedJsonGenerator0);
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectNode0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2456, objectMapper0, byteArrayBuilder0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer(beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) uTF8JsonGenerator0, (JavaType) null, jsonSerializer0);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      Class<Object> class2 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (JavaType[]) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(265);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) placeholderForType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(collectionType0, jsonFormatVisitorWrapper_Base0);
      assertFalse(collectionType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = (ObjectIdGenerators.IntSequenceGenerator)serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) dataOutputStream0);
      MockIOException mockIOException0 = new MockIOException();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      defaultSerializerProvider_Impl0.serializePolymorphic(uTF8JsonGenerator0, mockIOException0, simpleType0, jsonSerializer0, (TypeSerializer) null);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)defaultSerializerProvider_Impl0.getGenerator();
      assertEquals(4, uTF8JsonGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) jsonEncoding0);
      assertEquals(10, writerBasedJsonGenerator0.getOutputBuffered());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)defaultSerializerProvider_Impl0.getGenerator();
      assertEquals(10, writerBasedJsonGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.createInstance(serializationConfig0, beanSerializerFactory0);
      assertTrue(defaultSerializerProvider0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Map<Object, WritableObjectId> map0 = defaultSerializerProvider_Impl0._createObjectIdMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, placeholderForType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0, (JavaType) null, (JsonSerializer<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(936);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) placeholderForType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) objectMapper0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_UUIDGenerator0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2727, objectMapper0, mockFileOutputStream0, byteArray0, 1, true);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) objectIdGenerators_StringIdGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) byteArrayOutputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class java.io.ByteArrayOutputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      ObjectIdGenerator<ObjectNode> objectIdGenerator0 = (ObjectIdGenerator<ObjectNode>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<ObjectNode> objectIdGenerator1 = (ObjectIdGenerator<ObjectNode>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(hashMap0, objectIdGenerator1);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findObjectId(hashMap0, writableObjectId0.generator);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.createInstance((SerializationConfig) null, beanSerializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(collectionType0, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(referenceType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(referenceType1, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.type.ReferenceType cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaType0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2070), objectMapper0, dataOutputStream0, byteArray0, 22, true);
//      try { 
        defaultSerializerProvider_Impl0._serializeNull(uTF8JsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0._createObjectIdMap();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // A class must be provided
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, (JavaType) null, (JavaType) null);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(mapLikeType0, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(filteringGeneratorDelegate0, objectIdGenerators_IntSequenceGenerator0, simpleType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(filteringGeneratorDelegate0, objectIdGenerators_IntSequenceGenerator0, (JavaType) null, (JsonSerializer<Object>) null, (TypeSerializer) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      Class<DOMSerializer> class1 = DOMSerializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, defaultSerializerProvider_Impl0, collectionLikeType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectNode> class3 = ObjectNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class3);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) mapLikeType0, (JavaType[]) null, (JavaType) mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, " would not be serialized as a JSON object and therefore has no schema");
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, collectionLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([collection-like type; class com.fasterxml.jackson.databind.ser.BeanPropertyWriter, contains [map-like type; class com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator, [simple type, class com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator] -> [simple type, class com.fasterxml.jackson.databind.node.ObjectNode]]]) vs `com.fasterxml.jackson.databind.ser.impl.FailingSerializer`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, (OutputStream) null);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      Class<IOException> class1 = IOException.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) objectIdGenerators_UUIDGenerator0, (JavaType) mapLikeType0, (JsonSerializer<Object>) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([map-like type; class com.fasterxml.jackson.databind.ext.DOMSerializer, [simple type, class java.io.IOException] -> [simple type, class java.io.IOException]]) vs `com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1540);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[2]);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(referenceType0, propertyName0, objectIdGenerator0, true);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) objectIdWriter0, (JavaType) placeholderForType0, (JsonSerializer<Object>) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, (OutputStream) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      Class<String> class1 = String.class;
      Class<Object> class2 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class2);
      Class<Vector> class3 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class3, (JavaType) mapLikeType0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null, (JavaType) collectionType0, (JsonSerializer<Object>) null);
      assertFalse(collectionType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON", "(/42QG6W^.cLQ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2));
      Class<JsonSerializer> class0 = JsonSerializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, resolvedRecursiveType0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) mockFile0, (JavaType) referenceType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class org.evosuite.runtime.mock.java.io.MockFile and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      JavaType javaType0 = typeFactory0.constructReferenceType(class0, placeholderForType0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) placeholderForType0, javaType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([reference type, class com.fasterxml.jackson.databind.deser.AbstractDeserializer<$2><$2>]) vs `com.fasterxml.jackson.databind.type.PlaceholderForType`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) null, (JavaType) null);
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) class0, (JavaType) placeholderForType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null);
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-232), false);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) jsonEncoding0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // -232
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockIOException mockIOException0 = new MockIOException();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockIOException0);
      Class<String> class0 = String.class;
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      ObjectIdGenerator<ObjectNode> objectIdGenerator0 = (ObjectIdGenerator<ObjectNode>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<ObjectNode> objectIdGenerator1 = (ObjectIdGenerator<ObjectNode>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectIdGenerator1).canUseFor(any(com.fasterxml.jackson.annotation.ObjectIdGenerator.class));
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator1).newForSerialization(any());
      ObjectIdGenerator<ObjectNode> objectIdGenerator2 = (ObjectIdGenerator<ObjectNode>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator1).when(objectIdGenerator2).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(hashMap0, objectIdGenerator2);
      WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl0.findObjectId(writableObjectId0, writableObjectId0.generator);
      assertNotSame(writableObjectId1, writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId((Object) null, objectIdGenerators_StringIdGenerator0);
      WritableObjectId writableObjectId1 = serializerProvider0.findObjectId((Object) null, objectIdGenerators_StringIdGenerator0);
      assertSame(writableObjectId1, writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      ObjectIdGenerator<NioPathSerializer> objectIdGenerator0 = (ObjectIdGenerator<NioPathSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId((Object) null, objectIdGenerator0);
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(writableObjectId0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object object0 = defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, (Class<?>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
//      try { 
        serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.time.chrono.ChronoLocalDate has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
//      try { 
        serializerProvider0.serializerInstance((Annotated) null, class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.ser.BeanSerializer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<WritableObjectId> class0 = WritableObjectId.class;
      Class<NioPathSerializer> class1 = NioPathSerializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "g6 U.5", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
//      try { 
        serializerProvider0.serializerInstance(virtualAnnotatedMember0, annotatedField0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.databind.introspect.AnnotatedField; expected type JsonSerializer or Class<JsonSerializer> instead
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, dOMSerializer0);
      assertSame(dOMSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      Class<Object> class2 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (JavaType[]) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(265);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) placeholderForType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "", collectionType0);
//      try { 
        serializerProvider0.serializerInstance(virtualAnnotatedMember0, class1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned Class com.fasterxml.jackson.databind.jsontype.TypeIdResolver; expected Class<JsonSerializer>
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.flushCachedSerializers();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "JSON");
      defaultSerializerProvider_Impl0.serializePolymorphic(writerBasedJsonGenerator0, (Object) null, resolvedRecursiveType0, beanSerializer0, asPropertyTypeSerializer0);
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) defaultSerializerProvider_Impl0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
  }
}
