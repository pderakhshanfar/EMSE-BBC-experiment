/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:47:23 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.sql.SQLIntegrityConstraintViolationException;
import java.time.Clock;
import java.time.chrono.JapaneseDate;
import java.time.format.ResolverStyle;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSerializerProvider_ESTest extends DefaultSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
      defaultSerializerProvider_Impl0._serializeNull(jsonGenerator0);
      assertEquals(4, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonFactory jsonFactory0 = new JsonFactory();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      MockFile mockFile0 = new MockFile("JSON", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "JSON");
      defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, (Object) null, javaType0, (JsonSerializer<Object>) null, asExternalTypeSerializer0);
      assertEquals(31, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      jsonGenerator0.overrideStdFeatures((-9999), 15711167);
      defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) null, (JavaType) null, (JsonSerializer<Object>) null);
      JsonGenerator jsonGenerator1 = defaultSerializerProvider_Impl0.getGenerator();
      assertEquals(4, jsonGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.createInstance(serializationConfig0, beanSerializerFactory0);
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertFalse(boolean0);
      
      int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      Map<Object, WritableObjectId> map0 = defaultSerializerProvider_Impl1._createObjectIdMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializeValue(jsonGenerator0, (Object) beanProperty_Bogus0, javaType0, (JsonSerializer<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("AnnotationIntrospector returned Class ");
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) sQLIntegrityConstraintViolationException0, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) "a~o [aP=GHXY=7A>", javaType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1495, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1495, true);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentTypeHandler(objectMapper0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) uTF8JsonGenerator0, (JavaType) referenceType1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.ObjectMapper cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2818, objectMapper0, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) objectMapper0);
//        fail("Expecting exception: NoClassDefFoundError");
      
//      } catch(NoClassDefFoundError e) {
//         //
//         // com/fasterxml/jackson/databind/JsonMappingException$Reference
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) rootNameLookup0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class com.fasterxml.jackson.databind.util.RootNameLookup and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
//      try { 
        serializerProvider0.includeFilterInstance(pOJOPropertyBuilder0, class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.ser.BeanSerializer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_UUIDGenerator0, objectIdGenerators_UUIDGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.createInstance((SerializationConfig) null, (SerializerFactory) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(collectionLikeType0, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.acceptJsonFormatVisitor(javaType0, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = objectIdGenerators_UUIDGenerator0.key(dataInputStream0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(objectIdGenerator_IdKey0.type);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(objectIdGenerators_UUIDGenerator0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(referenceType1, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
//      try { 
        defaultSerializerProvider_Impl0._serializeNull(jsonGeneratorDelegate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0._createObjectIdMap();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // A class must be provided
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = objectIdGenerators_UUIDGenerator0.key(dataInputStream0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(objectIdGenerator_IdKey0.type);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(referenceType0, jsonFormatVisitorWrapper_Base0);
      assertTrue(referenceType0.isReferenceType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, (BeanProperty) null);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic((JsonGenerator) null, beanSerializer0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, (BeanProperty) null);
//      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic((JsonGenerator) null, beanSerializer0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<IOException> class0 = IOException.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<DataInputStream> class2 = DataInputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class1, class2);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, objectIdGenerators_IntSequenceGenerator0, mapLikeType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Fs[ui`6esD;");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, objectIdGenerators_StringIdGenerator0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      Clock clock0 = MockClock.systemDefaultZone();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      MockFile mockFile0 = new MockFile("dLmc-3I3},8Lt!xd^8", "AnnotationIntrospector returned Class ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "JSON");
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, clock0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([simple type, class java.util.List]) vs `org.evosuite.runtime.mock.java.time.MockClock$MockSystemClock`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, classNameIdResolver0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 212, objectMapper0, (Writer) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(jsonGeneratorDelegate0, bufferRecycler0, (JavaType) null, (JsonSerializer<Object>) null, (TypeSerializer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaType0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2529), objectMapper0, (OutputStream) null, byteArray0, 0, true);
      Clock clock0 = MockClock.systemDefaultZone();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(classNameIdResolver0, beanPropertyWriter0, ")gp");
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(uTF8JsonGenerator0, japaneseDate0, javaType0, (JsonSerializer<Object>) null, asPropertyTypeSerializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, (ConfigOverrides) null);
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) beanPropertyWriter0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) simpleMixInResolver0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, (SerializerFactory) null);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      defaultSerializerProvider_Impl1.serializeValue(jsonGenerator0, (Object) beanSerializer0, javaType0, (JsonSerializer<Object>) beanSerializer0);
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Throwable> class0 = Throwable.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(resolvedRecursiveType0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) typeBindings0, (JavaType) resolvedRecursiveType0, (JsonSerializer<Object>) beanSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([recursive type; UNRESOLVED) vs `com.fasterxml.jackson.databind.type.TypeBindings`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) null, (JavaType) null, (JsonSerializer<Object>) null);
      JsonGenerator jsonGenerator1 = defaultSerializerProvider_Impl0.getGenerator();
      assertEquals(0, jsonGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) typeFactory0, (JavaType) collectionLikeType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([collection-like type; class java.lang.String, contains [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.type.TypeFactory`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) jsonGeneratorDelegate0, (Object) null, (JavaType) null);
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) byteArrayOutputStream0, (JavaType) mapLikeType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class java.io.ByteArrayOutputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("R?}Rsjy.PV6[i+_!e", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) null);
      JsonGenerator jsonGenerator1 = defaultSerializerProvider_Impl0.getGenerator();
      assertEquals(0, jsonGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ResolverStyle> class0 = ResolverStyle.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature1;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeatureArray0[1];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl1.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
      assertNotNull(writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId(objectMapper0, objectIdGenerators_IntSequenceGenerator0);
      WritableObjectId writableObjectId1 = serializerProvider0.findObjectId(configOverrides0, objectIdGenerators_IntSequenceGenerator0);
      assertNotSame(writableObjectId1, writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl(serializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(stdSubtypeResolver0, objectIdGenerators_UUIDGenerator0);
      WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl0.findObjectId(stdSubtypeResolver0, writableObjectId0.generator);
      assertSame(writableObjectId1, writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectIdGenerator1).canUseFor(any(com.fasterxml.jackson.annotation.ObjectIdGenerator.class));
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator1).newForSerialization(any());
      ObjectIdGenerator<Annotation> objectIdGenerator2 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator1).when(objectIdGenerator2).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl1.findObjectId(objectIdGenerators_UUIDGenerator0, objectIdGenerator2);
      WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl1.findObjectId(serializationFeatureArray0[0], writableObjectId0.generator);
      assertNotSame(writableObjectId1, writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) objectMapper0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, true, propertyName0);
      Class<String> class0 = String.class;
      Object object0 = serializerProvider0.includeFilterInstance(pOJOPropertyBuilder0, class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, (TypeResolutionContext) null, annotationMap0, 1204);
//      try { 
        serializerProvider0.serializerInstance(annotatedParameter0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned Class com.fasterxml.jackson.databind.deser.SettableBeanProperty; expected Class<JsonSerializer>
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, nioPathSerializer0);
      assertSame(nioPathSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<String> class0 = String.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", (JavaType) null);
      MockThrowable mockThrowable0 = new MockThrowable("URxpb[/_}2)bEW.");
//      try { 
        defaultSerializerProvider_Impl0.serializerInstance(virtualAnnotatedMember0, mockThrowable0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned serializer definition of type org.evosuite.runtime.mock.java.lang.MockThrowable; expected type JsonSerializer or Class<JsonSerializer> instead
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.flushCachedSerializers();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, filterOutputStream0, byteArray0, 3, false);
//      try { 
        defaultSerializerProvider_Impl0._serializeNull(uTF8JsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.core.util.BufferRecyclers");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) stdSubtypeResolver0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) charArrayWriter0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      objectMapper0.writeValue(jsonGenerator0, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0);
      assertEquals(90, charArrayWriter0.size());
      assertEquals("{\"delegatee\":{\"unwrappingSerializer\":false,\"delegatee\":null},\"unwrappingSerializer\":false}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
  }
}
