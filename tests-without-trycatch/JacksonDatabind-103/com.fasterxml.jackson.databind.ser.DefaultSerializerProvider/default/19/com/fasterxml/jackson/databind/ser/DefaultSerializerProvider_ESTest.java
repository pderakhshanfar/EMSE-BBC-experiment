/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:37:56 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalUnit;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSerializerProvider_ESTest extends DefaultSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      defaultSerializerProvider_Impl0.getGenerator();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-638));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getDelegateCreator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, (-638));
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      Integer integer0 = new Integer((-3200));
//      try { 
        defaultSerializerProvider_Impl0.serializerInstance(annotatedParameter1, integer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned serializer definition of type java.lang.Integer; expected type JsonSerializer or Class<JsonSerializer> instead
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<ObjectNode> class1 = ObjectNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      defaultSerializerProvider_Impl0.copy();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "e#y7N>p#i>%G{Go:G");
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler(basicBeanDescription0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "e#y7N>p#i>%G{Go:G", mapLikeType0);
      resolvedRecursiveType0.isReferenceType();
      virtualAnnotatedMember0.getFullName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      annotationMap0.annotations();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
//      try { 
        defaultSerializerProvider_Impl1.serializerInstance(annotated0, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.databind.introspect.AnnotationMap; expected type JsonSerializer or Class<JsonSerializer> instead
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "f>XR");
      AsExternalTypeSerializer asExternalTypeSerializer1 = asExternalTypeSerializer0.forProperty(beanProperty_Bogus0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("f>XR");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonFactory2.enable(jsonParser_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("f>XR");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (JavaType) null, (JsonSerializer<Object>) null, asExternalTypeSerializer1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "4-M0c0l'FYG");
      AsExternalTypeSerializer asExternalTypeSerializer1 = asExternalTypeSerializer0.forProperty(beanPropertyWriter0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, "4-M0c0l'FYG", (JavaType) null, (JsonSerializer<Object>) null, asExternalTypeSerializer1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "4-M0c0l'FYG");
      asExternalTypeSerializer0.forProperty(beanPropertyWriter0);
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      mapType0.withTypeHandler(typeFactory0);
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
//      try { 
        defaultSerializerProvider0.serializePolymorphic((JsonGenerator) null, nioPathSerializer0, mapType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.ext.NioPathSerializer`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      mapType0.withTypeHandler(typeFactory0);
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
//      try { 
        defaultSerializerProvider0.serializePolymorphic((JsonGenerator) null, nioPathSerializer0, mapType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.ext.NioPathSerializer`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory1.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 2, 96);
      dataTruncation0.getNextWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "DefaultSerializerProvider sub-class not overriding copy()");
      AsExternalTypeSerializer asExternalTypeSerializer1 = asExternalTypeSerializer0.forProperty(beanProperty_Bogus0);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, jsonEncoding0, (JavaType) null, jsonSerializer0, asExternalTypeSerializer1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<Throwable> class0 = Throwable.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned serializer definition of type ", "AnnotationIntrospector returned serializer definition of type ");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      BeanPropertyWriter beanPropertyWriter2 = new BeanPropertyWriter(beanPropertyWriter1);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter2, "AnnotationIntrospector returned serializer definition of type ");
      AsExternalTypeSerializer asExternalTypeSerializer1 = asExternalTypeSerializer0.forProperty(beanPropertyWriter2);
      AsExternalTypeSerializer asExternalTypeSerializer2 = asExternalTypeSerializer1.forProperty(beanPropertyWriter1);
      asExternalTypeSerializer2.forProperty(beanPropertyWriter1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, asExternalTypeSerializer1, placeholderForType0, defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "4-M0c0l'FYG");
      AsExternalTypeSerializer asExternalTypeSerializer1 = asExternalTypeSerializer0.forProperty(beanPropertyWriter0);
      asExternalTypeSerializer1.forProperty(beanPropertyWriter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
//      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic((JsonGenerator) null, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "4-M0c0l'FYG");
      AsExternalTypeSerializer asExternalTypeSerializer1 = asExternalTypeSerializer0.forProperty(beanPropertyWriter0);
      asExternalTypeSerializer1.forProperty(beanPropertyWriter0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, defaultSerializerProvider_Impl0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      DataTruncation dataTruncation0 = new DataTruncation(2, false, true, 2, 0);
      dataTruncation0.getNextWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "JSON");
      AsExternalTypeSerializer asExternalTypeSerializer1 = asExternalTypeSerializer0.forProperty(beanProperty_Bogus0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.serializePolymorphic(jsonGenerator0, batchUpdateException0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-3988), (-3988)).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.createInstance(serializationConfig1, beanSerializerFactory0);
      ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator> objectIdGenerator1 = (ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
      defaultSerializerProvider_Impl1._createObjectIdMap();
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl1.findObjectId(rootNameLookup0, objectIdGenerator1);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) writableObjectId0, (JavaType) null, defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      objectMapper0.canSerialize(class0);
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // A class must be provided
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper3);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      objectMapper3.canSerialize(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "sr'[f?/1YT3~w=1Kp");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      ObjectNode objectNode0 = objectMapper1.createObjectNode();
      NumericNode numericNode0 = objectNode0.numberNode((byte)3);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      objectMapper2.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      objectMapper2.writeTree(jsonGenerator0, (TreeNode) numericNode0);
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      Class<NioPathSerializer> class1 = NioPathSerializer.class;
      // Undeclared exception!
//      try { 
        simpleModule0.addAbstractTypeMapping(class1, (Class<? extends NioPathSerializer>) class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot add mapping from class to itself
//         //
//         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0._createObjectIdMap();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withOverrides((ClassIntrospector.MixInResolver) null);
      SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withoutLocalDefinitions();
      SimpleMixInResolver simpleMixInResolver3 = simpleMixInResolver2.copy();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver3, rootNameLookup0, configOverrides0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      defaultSerializerProvider_Impl0.createInstance(serializationConfig1, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.findObjectId("]", (ObjectIdGenerator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.createInstance(serializationConfig1, beanSerializerFactory0);
      ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider0.findObjectId(rootNameLookup0, objectIdGenerator0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) writableObjectId0, (JavaType) null, defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) nioPathSerializer0, (JavaType) null, (JsonSerializer<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      JsonGenerator jsonGenerator0 = null;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      JsonDeserializer<NioPathSerializer> jsonDeserializer0 = (JsonDeserializer<NioPathSerializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends NioPathSerializer>) jsonDeserializer0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<DOMSerializer> class1 = DOMSerializer.class;
      Class<ObjectIdGenerators.StringIdGenerator> class2 = ObjectIdGenerators.StringIdGenerator.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), objectReader0, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      defaultSerializerProvider0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null, (JavaType) resolvedRecursiveType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//      try { 
        defaultSerializerProvider0.serializeValue(jsonGenerator0, (Object) uTF8JsonGenerator0, (JavaType) resolvedRecursiveType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([recursive type; UNRESOLVED) vs `com.fasterxml.jackson.core.json.UTF8JsonGenerator`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) bufferedWriter0);
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl2.serializeValue(jsonGenerator0, (Object) nioPathSerializer0, javaType0, defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      JsonDeserializer<NioPathSerializer> jsonDeserializer0 = (JsonDeserializer<NioPathSerializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends NioPathSerializer>) jsonDeserializer0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<DOMSerializer> class1 = DOMSerializer.class;
      Class<ObjectIdGenerators.StringIdGenerator> class2 = ObjectIdGenerators.StringIdGenerator.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-627), objectReader0, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) resolvedRecursiveType0, (JavaType) null, defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JavaType javaType0 = null;
      Class<Integer> class0 = Integer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) objectIdGenerators_IntSequenceGenerator0, (JavaType) null, (JsonSerializer<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      MapType mapType1 = mapType0.withValueHandler(class0);
      MapType mapType2 = mapType1.withTypeHandler(typeFactory0);
//      try { 
        defaultSerializerProvider0.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0, (JavaType) mapType2, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      JsonDeserializer<NioPathSerializer> jsonDeserializer0 = (JsonDeserializer<NioPathSerializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends NioPathSerializer>) jsonDeserializer0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<DOMSerializer> class1 = DOMSerializer.class;
      Class<ObjectIdGenerators.StringIdGenerator> class2 = ObjectIdGenerators.StringIdGenerator.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-627), objectReader0, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) simpleModule0, (JavaType) resolvedRecursiveType0, defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([recursive type; UNRESOLVED) vs `com.fasterxml.jackson.databind.module.SimpleModule`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      ObjectIdGenerator<JsonDeserializer<Throwable>> objectIdGenerator0 = (ObjectIdGenerator<JsonDeserializer<Throwable>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<JsonDeserializer<Throwable>> objectIdGenerator1 = (ObjectIdGenerator<JsonDeserializer<Throwable>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(dOMSerializer0, objectIdGenerator1);
      hashMap0.put(defaultSerializerProvider_Impl0, writableObjectId0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper3);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      objectMapper3.canSerialize(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      ObjectNode objectNode0 = objectMapper1.createObjectNode();
      NumericNode numericNode0 = objectNode0.numberNode((byte)3);
      objectMapper2.writeTree(jsonGenerator0, (TreeNode) numericNode0);
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      Class<NioPathSerializer> class1 = NioPathSerializer.class;
      // Undeclared exception!
//      try { 
        simpleModule0.addAbstractTypeMapping(class1, (Class<? extends NioPathSerializer>) class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot add mapping from class to itself
//         //
//         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper3);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      objectMapper3.canSerialize(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      objectMapper1.createObjectNode();
      File file0 = MockFile.createTempFile("JSON", "R/BQnIH$T+$&XCc");
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream(file0, "R/BQnIH$T+$&XCc");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // R/BQnIH$T+$&XCc
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      ObjectIdGenerator<JsonDeserializer<Throwable>> objectIdGenerator0 = (ObjectIdGenerator<JsonDeserializer<Throwable>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectIdGenerator0).canUseFor(any(com.fasterxml.jackson.annotation.ObjectIdGenerator.class));
      ObjectIdGenerator<JsonDeserializer<Throwable>> objectIdGenerator1 = (ObjectIdGenerator<JsonDeserializer<Throwable>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(dOMSerializer0, objectIdGenerator1);
      hashMap0.put(defaultSerializerProvider_Impl0, writableObjectId0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_StringIdGenerator0);
      BiFunction<WritableObjectId, Object, WritableObjectId> biFunction0 = (BiFunction<WritableObjectId, Object, WritableObjectId>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(objectIdGenerators_StringIdGenerator0, writableObjectId0, biFunction0);
      defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
      defaultSerializerProvider_Impl0.copy();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      ObjectIdGenerator<JsonDeserializer<Throwable>> objectIdGenerator0 = (ObjectIdGenerator<JsonDeserializer<Throwable>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(dOMSerializer0, objectIdGenerator0);
      hashMap0.put(defaultSerializerProvider_Impl0, writableObjectId0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdGenerator<Integer> objectIdGenerator0 = objectIdGenerators_IntSequenceGenerator0.newForSerialization(dOMSerializer0);
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(dOMSerializer0, objectIdGenerator0);
      WritableObjectId writableObjectId1 = new WritableObjectId(writableObjectId0.generator);
      hashMap0.put(objectIdGenerator0, writableObjectId1);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      defaultSerializerProvider_Impl0.findObjectId(nioPathSerializer0, objectIdGenerators_IntSequenceGenerator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      ObjectMapper objectMapper5 = objectMapper4.enableDefaultTyping();
      objectMapper5.writeValueAsBytes(serializationFeature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      objectMapper0.canSerialize(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) null, javaType0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.getGenerator();
      defaultSerializerProvider_Impl1.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
//      try { 
        objectMapper0.writeValueAsBytes(dataOutputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class java.io.DataOutputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
//      try { 
        objectMapper0.writeValueAsBytes(dataOutputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class java.io.DataOutputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(serializers_Base0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1, serializationConfig1, serializerFactory0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl2.copy();
      defaultSerializerProvider0.createInstance(serializationConfig0, beanSerializerFactory0);
      Class<JavaType> class0 = JavaType.class;
      Class<NioPathSerializer> class1 = NioPathSerializer.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospector0, false, (PropertyName) null);
      pOJOPropertyBuilder0.getPrimaryMember();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      // Undeclared exception!
//      try { 
        ArrayType.construct((JavaType) null, typeBindings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 34);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      PrintStream printStream0 = mockPrintStream0.append('^');
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0);
      defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.getGenerator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<IOException> class0 = IOException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([recursive type; UNRESOLVED) vs `com.fasterxml.jackson.databind.type.ResolvedRecursiveType`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Throwable> class1 = Throwable.class;
      simpleType0.findSuperType(class1);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) thaiBuddhistEra0, (JavaType) simpleType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([simple type, class com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator]) vs `java.time.chrono.ThaiBuddhistEra`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(711);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) nioPathSerializer0, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultSerializerProvider_Impl0.copy();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // A class must be provided
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // A class must be provided
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0, javaType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<IOException> class0 = IOException.class;
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      sQLWarning0.getStackTrace();
      MockException mockException0 = new MockException("", sQLWarning0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockException0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class1 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) dOMSerializer0, (JavaType) resolvedRecursiveType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.getContentType();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) placeholderForType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<IOException> class0 = IOException.class;
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      sQLWarning0.getStackTrace();
      MockException mockException0 = new MockException("", sQLWarning0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockException0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<ObjectNode> class1 = ObjectNode.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) sQLSyntaxErrorException0, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, dOMSerializer0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      defaultSerializerProvider_Impl0.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      defaultSerializerProvider_Impl2.includeFilterSuppressNulls(defaultSerializerProvider_Impl1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory2.enable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vlZS|&5NTr<j|,PD bd", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "/l3*U~7z";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "/l3*U~7z";
      objectArray0[1] = (Object) mockFileOutputStream0;
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      objectMapper0.canSerialize(class0);
      objectArray0[2] = (Object) jsonGenerator_Feature0;
      objectArray0[3] = (Object) "JSON";
      Class<DOMSerializer> class1 = DOMSerializer.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class1, "JSON", (Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerBuilder beanSerializerBuilder0 = beanSerializerFactory0.constructBeanSerializerBuilder((BeanDescription) null);
      AnnotatedMember annotatedMember0 = beanSerializerBuilder0._typeId;
      defaultSerializerProvider_Impl0.converterInstance((Annotated) null, (Object) null);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider0.copy();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializerBuilder0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      Class<NioPathSerializer> class1 = NioPathSerializer.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0, class1, class0);
      JsonInclude.Value jsonInclude_Value1 = JsonInclude.Value.merge(jsonInclude_Value0, jsonInclude_Value0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, (OutputStream) null, byteArray0, (byte)4, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonpCharacterEscapes0.getEscapeSequence(32);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1);
//      try { 
        defaultSerializerProvider_Impl1._serializeNull(uTF8JsonGenerator1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(defaultSerializerProvider0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      defaultSerializerProvider_Impl0._serializeNull(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("TY3w(", "\"ZSs");
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLSyntaxErrorException0);
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("TY3w(", "_yakIV", sQLSyntaxErrorException0);
      sQLNonTransientException0.spliterator();
      atomicReference0.weakCompareAndSet((Throwable) null, sQLNonTransientException0);
      sQLSyntaxErrorException0.initCause(sQLNonTransientException0);
      sQLSyntaxErrorException0.printStackTrace();
      UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      Class<Object> class0 = Object.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.includeFilterInstance((BeanPropertyDefinition) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = (CollectionType)collectionType0.withValueHandler(class0);
      CollectionType collectionType2 = (CollectionType)collectionType1.withStaticTyping();
      CollectionLikeType.upgradeFrom(collectionType1, collectionType2);
      CollectionType collectionType3 = (CollectionType)collectionType2.withContentValueHandler(collectionType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(collectionType3, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(javaType0, jsonFormatVisitorWrapper_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      Throwable throwable0 = sQLSyntaxErrorException0.fillInStackTrace();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "$roV8", 0, hashMap0, sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      BinaryOperator<Throwable> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Throwable>) comparator0);
      AtomicReference<Throwable> atomicReference1 = new AtomicReference<Throwable>();
      atomicReference1.getAndAccumulate(throwable0, binaryOperator0);
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      Integer integer0 = Integer.getInteger("", 0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) jsonGeneratorDelegate0, (Object) integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      dOMSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, dOMSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.copy();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.enable(jsonFactory_Feature0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.copy();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider0.cachedSerializersCount();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.createInstance((SerializationConfig) null, beanSerializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "\"ZSs";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("TY3w(", "\"ZSs");
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLSyntaxErrorException0);
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("TY3w(", "_yakIV", sQLSyntaxErrorException0);
      atomicReference0.weakCompareAndSet((Throwable) null, sQLNonTransientException0);
      sQLSyntaxErrorException0.initCause(sQLNonTransientException0);
      sQLSyntaxErrorException0.printStackTrace();
      UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLSerializers_XMLGregorianCalendarSerializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      // Undeclared exception!
//      try { 
        objectMapper0.reader(deserializationFeature0, (DeserializationFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<Throwable> class0 = Throwable.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf("");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      objectMapper2.getSerializerProviderInstance();
      SerializationConfig serializationConfig0 = null;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      // Undeclared exception!
//      try { 
        serializerFactoryConfig0.withSerializerModifier((BeanSerializerModifier) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null modifier
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
//      try { 
        defaultSerializerProvider_Impl0._serializeNull((JsonGenerator) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.flushCachedSerializers();
      defaultSerializerProvider_Impl0.copy();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.flushCachedSerializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, objectMapper1, byteArrayBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      objectMapper0.canSerialize(class0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      
      boolean boolean0 = defaultSerializerProvider0.includeFilterSuppressNulls(defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonFactory2.enable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vlZS|&5NTr<j|,PD bd", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "/l3*U~7z";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "/l3*U~7z";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) jsonGenerator_Feature0;
      objectArray0[3] = (Object) "vlZS|&5NTr<j|,PD bd";
      Class<DOMSerializer> class0 = DOMSerializer.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "JSON", (Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(defaultSerializerProvider_Impl0._seenObjectIds.isEmpty());
      assertEquals(0, defaultSerializerProvider_Impl0._seenObjectIds.size());
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-1397));
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_IntSequenceGenerator0);
      
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertNotNull(coreXMLSerializers_XMLGregorianCalendarSerializer0);
      
      ObjectIdGenerator<Integer> objectIdGenerator0 = objectIdGenerators_IntSequenceGenerator0.newForSerialization(coreXMLSerializers_XMLGregorianCalendarSerializer0);
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(objectIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerator0);
      assertNotSame(objectIdGenerators_IntSequenceGenerator0, objectIdGenerator0);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.findObjectId(defaultSerializerProvider_Impl0, objectIdGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }
}
