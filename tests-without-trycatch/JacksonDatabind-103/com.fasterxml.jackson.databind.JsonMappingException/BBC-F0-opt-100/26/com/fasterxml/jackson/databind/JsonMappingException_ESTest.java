/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:02:01 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "H", "H");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      InvalidFormatException invalidFormatException1 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) beanDeserializerFactory0, 1458);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      Object object0 = new Object();
      InvalidFormatException invalidFormatException2 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, object0, 1458);
      invalidFormatException1.prependPath(jsonMappingException_Reference0);
      invalidFormatException2.prependPath(jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException3 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException2, jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException4 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) "Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"H\": H", "Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"H\": H");
      InvalidFormatException invalidFormatException5 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException3, jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException6 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) "H", 1458);
      InvalidFormatException invalidFormatException7 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException6, (Object) fileSystemHandling0, "Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"H\": H");
      invalidFormatException7.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) invalidFormatException1, 1458);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException5, jsonMappingException_Reference0);
      invalidFormatException6.prependPath(jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException8 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException8, (Object) invalidFormatException6, 1458);
      invalidFormatException7.prependPath(jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      invalidFormatException3.prependPath((JsonMappingException.Reference) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1458);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException4, (Object) pipedInputStream0, "Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"H\": H");
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException5, jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"H\": H");
      jsonMappingException_Reference1.getDescription();
      // Undeclared exception!
//      try { 
        invalidFormatException6.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "ZfEyB8{<nJ'd", (int[]) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[11];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      String string0 = null;
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      InvalidFormatException invalidFormatException0 = InvalidFormatException.from(jsonParser0, (String) null, (Object) jsonParser0, (Class<?>) class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, "");
      // Undeclared exception!
//      try { 
        invalidFormatException0.prependPath((Object) jsonMappingException0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "H");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      InvalidFormatException invalidFormatException1 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) beanDeserializerFactory0, 1458);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      Object object0 = new Object();
      InvalidFormatException invalidFormatException2 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, object0, 1458);
      invalidFormatException1.prependPath(jsonMappingException_Reference0);
      invalidFormatException2.toString();
      invalidFormatException2.prependPath(jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException3 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException2, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) "com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"\": H (through reference chain: UNKNOWN[?]->java.lang.Object[1458]->UNKNOWN[?]->com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[1458])", "com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"\": H (through reference chain: UNKNOWN[?]->java.lang.Object[1458]->UNKNOWN[?]->com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[1458])");
      InvalidFormatException invalidFormatException4 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException3, jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException5 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) "H", 1458);
      InvalidFormatException invalidFormatException6 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException5, (Object) fileSystemHandling0, "Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"\": H");
      invalidFormatException6.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) invalidFormatException1, 1458);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException4, jsonMappingException_Reference0);
      invalidFormatException5.prependPath(jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException7 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException7, (Object) invalidFormatException5, 1458);
      invalidFormatException6.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException4, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException6, jsonMappingException_Reference0);
      invalidFormatException4.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(class0, 1458);
      jsonMappingException_Reference1.getDescription();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException1.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "Already had POJO for id (");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "Already had POJO for id (");
      int int0 = 1451;
      InvalidFormatException invalidFormatException1 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) beanDeserializerFactory0, 1451);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      Object object0 = new Object();
      InvalidFormatException invalidFormatException2 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, object0, 1451);
      invalidFormatException1.prependPath(jsonMappingException_Reference0);
      invalidFormatException2.toString();
      invalidFormatException2.prependPath(jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException3 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException2, jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException4 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException3, jsonMappingException_Reference0);
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      jsonMappingException_Reference0.getDescription();
      InvalidFormatException invalidFormatException5 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) "H", 1451);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (JsonMappingException.Reference) null);
      InvalidFormatException invalidFormatException6 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException5, (Object) fileSystemHandling0, "Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String \"\": Already had POJO for id (");
      invalidFormatException4.getPath();
      invalidFormatException6.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) invalidFormatException1, 1451);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(invalidFormatException1);
      invalidFormatException5.prependPath(jsonMappingException_Reference1);
      FloatNode floatNode0 = new FloatNode(1451);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(floatNode0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException1, jsonMappingException_Reference2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
//      try { 
        invalidFormatException3.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = '0';
      charArray1[1] = '9';
      charArray1[2] = 'l';
      JsonParser jsonParser1 = jsonFactory0.createParser(charArray1);
      Class<String> class0 = String.class;
      InvalidFormatException invalidFormatException0 = new InvalidFormatException(jsonParser1, "JSON", (Object) null, class0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "Jp?e.{(bo>o(ev}j4w8");
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      MockFile mockFile0 = new MockFile("`:44CKx(DR`O", ") to output");
      MockFile.createTempFile("JSON", ") to output", (File) mockFile0);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      FloatNode floatNode0 = new FloatNode(3474.0F);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      invalidFormatException0.toString();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.from(jsonParser0, "soy+sWDm5", (Throwable) invalidFormatException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = new JsonMappingException("JSON");
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonParser jsonParser0 = null;
      String string0 = "b[,X,J9$LR>";
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      Throwable throwable0 = null;
      boolean boolean0 = false;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      int int0 = 44;
      JsonMappingException jsonMappingException0 = null;
//      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "b[,X,J9$LR>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 908;
      intArray0[1] = 820;
      intArray0[2] = (-951);
      intArray0[3] = 51;
      intArray0[4] = 1442;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(")", "Y,.:4", intArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, ")", (Throwable) batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonParser jsonParser0 = null;
      String string0 = "b[,X,J9$LR>";
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      Throwable throwable0 = null;
      boolean boolean0 = false;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "b[,X,J9$LR>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0._buildMessage();
      jsonMappingException0.getLocalizedMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Unexpected end-of-input within/between ", "");
      JsonMappingException.from(deserializationContext0, ").", (Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H");
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "";
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "Already had POJO for id (");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "Already had POJO for id (");
      InvalidFormatException invalidFormatException1 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) deserializerFactory0, 1451);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      Object object0 = new Object();
      InvalidFormatException invalidFormatException2 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, object0, 2713);
      invalidFormatException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setFieldName("Already had POJO for id (");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "H");
      invalidFormatException2.toString();
      invalidFormatException2.prependPath(jsonMappingException_Reference0);
      InvalidFormatException invalidFormatException3 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException2, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException3, jsonMappingException_Reference0);
      SQLException sQLException0 = new SQLException("->", "->", jsonMappingException0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLException0);
      // Undeclared exception!
//      try { 
        invalidFormatException0.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "[]");
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "Already had POJO for id (");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "Already had POJO for id (");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      InvalidFormatException invalidFormatException1 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) deserializerFactory0, 1451);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      Object object0 = new Object();
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, object0, 2713);
      invalidFormatException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setFieldName("Already had POJO for id (");
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Dj5Uh7!YzUT@SA{>&)'");
      jsonMappingException_Reference0.setIndex((-349));
      jsonMappingException_Reference0.setFieldName("q)0=0pNv#g%j");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-349));
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileInputStream0, "q)0=0pNv#g%j", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(12L);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "UNKNOWN");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("~1SWz[rD1avu", "i[I\".J0hN -!n", hashMap0, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "UNKNOWN", (Throwable) sQLTimeoutException0);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-105);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTimeoutException0, (int) (byte) (-24));
      JsonMappingException jsonMappingException2 = new JsonMappingException(jsonParser0, "", jsonMappingException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLNonTransientConnectionException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, jsonMappingException_Reference0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) filteringParserDelegate0, ";\"PSn+rC{13@Gu");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 248);
      jsonMappingException_Reference1.writeReplace();
      Throwable throwable0 = null;
      jsonMappingException_Reference0._fieldName = "(was ";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "(was ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(was ");
      Locale locale0 = Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jsonMappingException_Reference0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "(was ", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectReader0, printStream0, byteArray0, 681, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonMappingException.from(jsonGenerator0, "(was ", (Throwable) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException_Reference1, (-928));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "Unexpected IOException (of type %s): %s", (Throwable) null);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      objectReader0.createDeserializationContext(jsonParser0);
      String string0 = "UNKNOWN";
      String string1 = "~1SWz[rD1avu";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "UNKNOWN");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("~1SWz[rD1avu", "i[I\".J0hN -!n", hashMap0, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Bg", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i[I\".J0hN -!n", "JSON", sQLNonTransientConnectionException1);
      PropertyName propertyName0 = new PropertyName("UNKNOWN", ": ");
      ObjectIdGenerator<MockPrintStream> objectIdGenerator0 = (ObjectIdGenerator<MockPrintStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonMappingException.Reference> jsonDeserializer0 = (JsonDeserializer<JsonMappingException.Reference>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      objectIdReader0.getIdType();
      defaultDeserializationContext_Impl0.constructType((Type) null);
//      try { 
        objectMapper0.readValue(jsonParser0, (ResolvedType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (String)\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("q)0=0pNv#g%j", "SCALAR");
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("$%u4y}5!,Y7xq?z{X{", sQLTimeoutException0);
      String string0 = "Cannot pass null KeyDeserializers";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Cannot pass null KeyDeserializers", true);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockFileWriter0, (-1));
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder("SCALAR");
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      stringBuilder0.append(charArray0);
      jsonMappingException0.getPathReference(stringBuilder0);
      URL uRL0 = MockURL.getHttpExample();
//      try { 
        MockURL.openStream(uRL0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.constructType((Type) null);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "", "In@");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "In@");
      jsonMappingException1.getPathReference();
      jsonMappingException0.toString();
      JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      jsonMappingException0.getPathReference();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) byteArrayInputStream0, 19);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter(3699);
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringWriter0, "", (Throwable) null);
      jsonMappingException0.getMessage();
      jsonMappingException0.toString();
      StringWriter stringWriter1 = new StringWriter();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonFactory0.configure(jsonParser_Feature0, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("~1SWz[rD1avu", "~1SWz[rD1avu");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")I\"&K\"Ms'O`0!>9h ", (String) null, hashMap0, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("JSON");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON");
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "~1SWz[rD1avu", (Throwable) sQLTimeoutException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "SCALAR";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("q)0=0pNv#g%j", "SCALAR");
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "N dJg@opt.;hW");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "", "->");
      ((JsonMappingException)invalidTypeIdException0)._buildMessage();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) invalidTypeIdException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      MockIOException mockIOException0 = new MockIOException("rvtSpG/'bpF_t", sQLTransactionRollbackException0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('v');
      stringWriter2.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter2, "rvtSpG/'bpF_t");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("q)0=0pNv#g%j", "SCALAR");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
//      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JsonMappingException.from((JsonParser) null, (String) null, (Throwable) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      objectReader0.createDeserializationContext(jsonParser0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.configure(jsonFactory_Feature0, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = 'H';
      charArray0[4] = 'W';
      charArray0[5] = '+';
      charArray0[6] = '}';
      charArray0[7] = '1';
      jsonFactory1.createParser(charArray0);
      JsonMappingException.from(jsonParser0, "date");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 3635);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3719);
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringWriter0, "", (Throwable) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, 712);
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLTimeoutException) (through reference chain: java.sql.SQLTimeoutException[712])", "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "");
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Wc1o", map0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLWarning sQLWarning0 = new SQLWarning("`9^'/Q15|nby", (String) null, 18, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", (String) null, map1, sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" type parameter", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null, sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLClientInfoException2);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactory0, " type parameter");
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, ")");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("q)0=0pNv#g%j", "SCALAR");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jsonMappingException0.prependPath((Object) byteArrayInputStream0, "!}u]HAfVzq");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "UNKNOWN");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("~1SWz[rD1avu", "i[I\".J0hN -!n", hashMap0, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Bg", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i[I\".J0hN -!n", "JSON", sQLNonTransientConnectionException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "UNKNOWN", (Throwable) sQLTimeoutException0);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, "");
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, 712);
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonFactory1, 1454);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("bl]NVPD'dc", "bl]NVPD'dc");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // bl]NVPD'dc
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "FI6zPyc-HU}low";
      JsonMappingException jsonMappingException0 = new JsonMappingException("FI6zPyc-HU}low", (JsonLocation) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FI6zPyc-HU}low", false);
      int int0 = 23;
      SequenceInputStream sequenceInputStream0 = null;
//      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(8232);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "java.io.PipedWriter[?]");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "java.io.PipedWriter[?]", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(objectMapper0, (Object) null);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "J9roi;PJ:,4Hf");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._desc = "UNKNOWN[?]";
      jsonMappingException_Reference0._from = (Object) "UNKNOWN[?]";
      jsonMappingException_Reference0._index = (-255);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 41);
      jsonMappingException_Reference1._from = (Object) jsonMappingException_Reference0;
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference1.writeReplace();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "euvFgmNm$+7";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "euvFgmNm$+7");
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      jsonMappingException0.clearLocation();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl1, "euvFgmNm$+7");
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getDescription();
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3719);
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringWriter0, "", (Throwable) null);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._desc = "UNKNOWN[?]";
      jsonMappingException_Reference0._index = 127;
      SQLException sQLException0 = new SQLException("Q;0zaI[!ZG[+L=+#8", "->", (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("Q;0zaI[!ZG[+L=+#8", sQLException0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0._path = linkedList0;
      jsonMappingException0.getLocalizedMessage();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)8, 2133);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(byteArrayInputStream0);
      linkedList0.add(jsonMappingException_Reference1);
      sQLException0.printStackTrace();
      jsonMappingException_Reference0.setIndex(0);
      sQLException0.getSuppressed();
      sQLException0.getLocalizedMessage();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      String string0 = "";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext_Impl0, 0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      jsonMappingException0.getPathReference(stringBuilder0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SequenceInputStream sequenceInputStream0 = null;
//      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6{<");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0);
      jsonMappingException_Reference0.setIndex(0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("p`yVUn9rfN");
      sQLFeatureNotSupportedException0.spliterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      MockIOException mockIOException0 = new MockIOException(")s:`1Sw@fD", sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0.getMessage();
      jsonMappingException0._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, "Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): )s:`1Sw@fD");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)44;
      mockFileOutputStream0.write(byteArray0, 0, (int) (byte)41);
      jsonMappingException_Reference0.setIndex(2331);
      jsonMappingException0._buildMessage();
      JsonMappingException.from((JsonGenerator) null, "m");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "Problem accessing property '");
      jsonMappingException_Reference0.getIndex();
      String string0 = null;
      SQLException sQLException0 = new SQLException((String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLDataException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<PipedOutputStream> class1 = PipedOutputStream.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      mapType0.withStaticTyping();
      Class<UTF8DataInputJsonParser> class2 = UTF8DataInputJsonParser.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      MapType mapType1 = mapType0.withStaticTyping();
      javaTypeArray0[0] = (JavaType) mapType1;
      javaTypeArray0[1] = (JavaType) mapType0;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class2, javaTypeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.core.json.UTF8DataInputJsonParser with 2 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      sQLTransientConnectionException0.initCause(sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLTransientConnectionException0);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((Object) "", 3176);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      String string0 = "";
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(192);
      // Undeclared exception!
//      try { 
        placeholderForType0.getErasedSignature((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      String string0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, (String) null);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (Throwable) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      jsonMappingException0._appendPathDesc(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, 712);
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '+';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      JsonMappingException.from(jsonParser0, (String) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'g';
      charArray0[3] = 'k';
      charArray0[4] = 'P';
      charArray0[5] = '!';
      charArray0[6] = '>';
      charArray0[7] = 'e';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(">GgkP!>e", stringBuilder0.toString());
      assertEquals(">GgkP!>e", stringBuilder1.toString());
      assertArrayEquals(new char[] {'>', 'G', 'g', 'k', 'P', '!', '>', 'e'}, charArray0);
      assertEquals(8, charArray0.length);
      
      StringBuilder stringBuilder2 = jsonMappingException1.getPathReference(stringBuilder0);
      assertNotNull(stringBuilder2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(">GgkP!>e", stringBuilder0.toString());
      assertEquals(">GgkP!>e", stringBuilder2.toString());
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException jsonMappingException2 = new JsonMappingException((Closeable) null, "", jsonMappingException1);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      
      List<JsonMappingException.Reference> list0 = jsonMappingException2.getPath();
      assertNotNull(list0);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertNotNull(string0);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): ", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      assertNotNull(jsonMappingException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedWriter0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, (-1119));
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1119), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1119), jsonMappingException_Reference0.getIndex());
      assertEquals("java.lang.Object[?]", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference2);
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      
      String string1 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertNotNull(objectReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
//      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, (-1119), stringReader0, objectReader0, charsToNameCanonicalizer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      assertNotNull(filteringParserDelegate0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isNaN());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(filteringParserDelegate0, 46);
      assertNotNull(jsonMappingException_Reference1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isNaN());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(46, jsonMappingException_Reference1.getIndex());
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals(0, charArray0.length);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(jsonMappingException_Reference0, "|kd");
      assertNotNull(jsonMappingException_Reference2);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertEquals("|kd", jsonMappingException_Reference2.getFieldName());
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      
      JsonMappingException.Reference jsonMappingException_Reference3 = (JsonMappingException.Reference)jsonMappingException_Reference2.writeReplace();
      assertNotNull(jsonMappingException_Reference3);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference3);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference3);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference3, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference3, jsonMappingException_Reference2);
      assertNotSame(jsonMappingException_Reference3, jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertEquals("|kd", jsonMappingException_Reference2.getFieldName());
      assertEquals("|kd", jsonMappingException_Reference3.getFieldName());
      assertEquals((-1), jsonMappingException_Reference3.getIndex());
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference1));
      
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      assertNotNull(dupDetector0);
      
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      assertNull(jsonLocation0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON", (JsonLocation) null, (Throwable) null);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference4 = new JsonMappingException.Reference(readerBasedJsonParser0);
      assertNotNull(jsonMappingException_Reference4);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(jsonMappingException_Reference4.getFieldName());
      assertEquals((-1), jsonMappingException_Reference4.getIndex());
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference3));
      assertEquals(0, charArray0.length);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference4);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference2);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(jsonMappingException_Reference4.getFieldName());
      assertEquals((-1), jsonMappingException_Reference4.getIndex());
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference3));
      assertEquals(0, charArray0.length);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("|kd", "CL/h J!Pny^oAUq0<I ", (Throwable) null);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: |kd", sQLRecoverableException0.toString());
      assertEquals("|kd", sQLRecoverableException0.getMessage());
      assertEquals("CL/h J!Pny^oAUq0<I ", sQLRecoverableException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("7IhUa,Vp6w*w", "Internal error: constructor for %s has mismatch: %d parameters; %d sets of annotations", 500, sQLRecoverableException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: |kd", sQLRecoverableException0.toString());
      assertEquals("|kd", sQLRecoverableException0.getMessage());
      assertEquals("CL/h J!Pny^oAUq0<I ", sQLRecoverableException0.getSQLState());
      assertEquals("7IhUa,Vp6w*w", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: 7IhUa,Vp6w*w", sQLNonTransientConnectionException0.toString());
      assertEquals("Internal error: constructor for %s has mismatch: %d parameters; %d sets of annotations", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(500, sQLNonTransientConnectionException0.getErrorCode());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLNonTransientConnectionException0);
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: |kd", sQLRecoverableException0.toString());
      assertEquals("|kd", sQLRecoverableException0.getMessage());
      assertEquals("CL/h J!Pny^oAUq0<I ", sQLRecoverableException0.getSQLState());
      assertEquals("7IhUa,Vp6w*w", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: 7IhUa,Vp6w*w", sQLNonTransientConnectionException0.toString());
      assertEquals("Internal error: constructor for %s has mismatch: %d parameters; %d sets of annotations", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(500, sQLNonTransientConnectionException0.getErrorCode());
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "(|z(~";
      String string1 = "";
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLDataException sQLDataException1 = new SQLDataException("", "", sQLDataException0);
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals("", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("(|z(~", (JsonLocation) null, sQLDataException1);
      assertNotNull(jsonMappingException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertNotNull(jsonParserDelegate0);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      
      // Undeclared exception!
//      try { 
        jsonParserDelegate0.getTextLength();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = "";
      jsonMappingException_Reference0.setFieldName("");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("", jsonMappingException_Reference1.getFieldName());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("Parameter #0 type for factory method (");
      assertNotNull(jsonMappingException0);
      
      jsonMappingException_Reference0.setDescription("Parameter #0 type for factory method (");
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      assertNotNull(collectionLikeType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        collectionLikeType0.withContentValueHandler(object0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("AbRVHkkjtH3#*(YIW)", "AbRVHkkjtH3#*(YIW)", 1082);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(1082, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("AbRVHkkjtH3#*(YIW)", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: AbRVHkkjtH3#*(YIW)", sQLFeatureNotSupportedException0.toString());
      assertEquals("AbRVHkkjtH3#*(YIW)", sQLFeatureNotSupportedException0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "AbRVHkkjtH3#*(YIW)", 1082);
      assertNotNull(jsonMappingException0);
      assertEquals(1082, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("AbRVHkkjtH3#*(YIW)", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: AbRVHkkjtH3#*(YIW)", sQLFeatureNotSupportedException0.toString());
      assertEquals("AbRVHkkjtH3#*(YIW)", sQLFeatureNotSupportedException0.getMessage());
      
      MockFileReader mockFileReader0 = null;
//      try {
        mockFileReader0 = new MockFileReader("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "(was ");
      assertNotNull(jsonMappingException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.write(0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream0, 0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertEquals(0, jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "(was ", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "[]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }
}
