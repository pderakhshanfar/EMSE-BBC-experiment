/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:08:33 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.Writer;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
//        try {
          MockIOException mockIOException0 = new MockIOException();
          JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
          JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
          JsonFactory jsonFactory0 = new JsonFactory();
          JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
          jsonFactory0.configure(jsonGenerator_Feature0, false);
          MockRandomAccessFile mockRandomAccessFile0 = null;
//          try {
            mockRandomAccessFile0 = new MockRandomAccessFile("JSON", ">{zHuC)O%j3:");
//            fail("Expecting exception: IllegalArgumentException");
          
//          } catch(IllegalArgumentException e) {
//             //
//             // Illegal mode \">{zHuC)O%j3:\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//             //
//             verifyException("java.io.RandomAccessFile", e);
//          }
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("PHg}1\"HPaa2JXNT6A");
      jsonMappingException0.prependPath((Object) bufferRecycler0, 2);
      jsonMappingException0.prependPath((Object) byteArrayBuilder0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("PHg}1\"HPaa2JXNT6A");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockPrintStream0, "PHg}1\"HPaa2JXNT6A");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sQLNonTransientConnectionException0, "PHg}1\"HPaa2JXNT6A");
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException0, 1);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException6.prependPath(jsonMappingException_Reference0);
      jsonMappingException5.prependPath((Object) objectOutputStream0, "PHg}1\"HPaa2JXNT6A");
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException4, "PHg}1\"HPaa2JXNT6A (through reference chain: UNKNOWN[?]->UNKNOWN[?]->org.evosuite.runtime.mock.java.io.MockPrintStream[\"PHg}1\"HPaa2JXNT6A\"]->com.fasterxml.jackson.core.util.ByteArrayBuilder[1]->com.fasterxml.jackson.core.util.BufferRecycler[2])");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jsonMappingException6.prependPath((Object) pipedOutputStream0, "PHg}1\"HPaa2JXNT6A (through reference chain: UNKNOWN[?]->UNKNOWN[?]->org.evosuite.runtime.mock.java.io.MockPrintStream[\"PHg}1\"HPaa2JXNT6A\"]->com.fasterxml.jackson.core.util.ByteArrayBuilder[1]->com.fasterxml.jackson.core.util.BufferRecycler[2])");
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      jsonMappingException6.prependPath((Object) objectIdGenerators_StringIdGenerator0, 1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException4, 2);
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      jsonMappingException8.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "PHg}1\"HPaa2JXNT6A", "PHg}1\"HPaa2JXNT6A (through reference chain: UNKNOWN[?]->UNKNOWN[?]->org.evosuite.runtime.mock.java.io.MockPrintStream[\"PHg}1\"HPaa2JXNT6A\"]->com.fasterxml.jackson.core.util.ByteArrayBuilder[1]->com.fasterxml.jackson.core.util.BufferRecycler[2])");
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException8, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException9, (Object) jsonMappingException1, "PHg}1\"HPaa2JXNT6A");
      jsonMappingException7.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 777, objectReader0, pipedOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)12;
      objectMapper0.valueToTree((Object) jsonFactory0);
      byte byte0 = (byte)48;
      byteArray0[4] = byte0;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, bufferRecycler0.CHAR_TOKEN_BUFFER, jsonpCharacterEscapes0.ESCAPE_NONE);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, jsonFactory0.FORMAT_NAME_JSON);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, jsonFactory0.FORMAT_NAME_JSON, (Throwable) jsonMappingException0);
      jsonMappingException1.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.JsonMappingException$Reference", "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.FilterOutputStream[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((byte)91, class0, "");
      JsonMappingException jsonMappingException1 = new JsonMappingException(byteArrayInputStream0, "JSON", jsonMappingException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.jsontype.TypeIdResolver[?]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper_DefaultTyping0, 40);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer", ">u(E)B", 40);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer", sQLTransientException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) objectReader0, 40);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, ">u(E)B");
      jsonMappingException_Reference0.setFieldName("");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        jsonMappingException2.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", (-137));
      SQLDataException sQLDataException1 = new SQLDataException((String) null, (String) null, (-137), sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot pass null fieldName");
      int int0 = (-3242);
      jsonMappingException0.prependPath((Object) "Q9", (-3242));
      jsonMappingException0.prependPath((Object) null, 5);
      MockPrintStream mockPrintStream0 = new MockPrintStream("n6cs]Bv==?c$");
      StringReader stringReader0 = new StringReader("Cannot pass null fieldName");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringReader0, "Q9");
      String string0 = "9)=U:EHDgF";
      MockIOException mockIOException0 = new MockIOException("9)=U:EHDgF");
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Cannot pass null fieldName", "");
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) jsonMappingException_Reference0, "");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      JsonParser jsonParser0 = null;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonParserDelegate0, (-3242));
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = null;
//      try {
        jsonMappingException4 = new JsonMappingException(jsonParserDelegate0, "9)=U:EHDgF");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", "");
      // Undeclared exception!
//      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<LineNumberReader> class0 = LineNumberReader.class;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "0fR", "348e");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "0fR", (Throwable) jsonMappingException0);
      PipedReader pipedReader0 = new PipedReader(5);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedWriter0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException2, "348e");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference1);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) "", 5);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference2);
      JsonMappingException jsonMappingException4 = new JsonMappingException(pipedReader0, "0fR");
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException1.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "Unexpected IOException (of type %s): %s");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper_DefaultTyping0, 40);
      jsonMappingException_Reference0.getDescription();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping[40]", "com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping[40]", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping[40]", map0, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping[40]", (Throwable) sQLClientInfoException1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.checkError();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "P", "P");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "^t`BPIJg =x{");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("xY/o$", "Cannot pass null fieldName", (-1729));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, "Z'dOB53?2{?x8ly");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Zu");
      jsonMappingException0.prependPath((Object) bufferRecycler0, 2);
      jsonMappingException0.prependPath((Object) byteArrayBuilder0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Zu");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockPrintStream0, "Zu");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sQLNonTransientConnectionException0, "Zu");
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException0, 1);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException6.prependPath(jsonMappingException_Reference0);
      jsonMappingException5.prependPath((Object) objectOutputStream0, "Zu");
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException4, "Zu (through reference chain: UNKNOWN[?]->UNKNOWN[?]->org.evosuite.runtime.mock.java.io.MockPrintStream[\"Zu\"]->com.fasterxml.jackson.core.util.ByteArrayBuilder[1]->com.fasterxml.jackson.core.util.BufferRecycler[2])");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jsonMappingException6.prependPath((Object) pipedOutputStream0, "Zu (through reference chain: UNKNOWN[?]->UNKNOWN[?]->org.evosuite.runtime.mock.java.io.MockPrintStream[\"Zu\"]->com.fasterxml.jackson.core.util.ByteArrayBuilder[1]->com.fasterxml.jackson.core.util.BufferRecycler[2])");
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      jsonMappingException6.prependPath((Object) objectIdGenerators_StringIdGenerator0, 1);
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException4, 2);
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      jsonMappingException9.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "Zu", "Zu (through reference chain: UNKNOWN[?]->UNKNOWN[?]->org.evosuite.runtime.mock.java.io.MockPrintStream[\"Zu\"]->com.fasterxml.jackson.core.util.ByteArrayBuilder[1]->com.fasterxml.jackson.core.util.BufferRecycler[2])");
      JsonMappingException jsonMappingException10 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException9, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException10, (Object) jsonMappingException1, "Zu");
      jsonMappingException7.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException8, (Object) pipedOutputStream0, "Zu (through reference chain: UNKNOWN[?]->UNKNOWN[?]->org.evosuite.runtime.mock.java.io.MockPrintStream[\"Zu\"]->com.fasterxml.jackson.core.util.ByteArrayBuilder[1]->com.fasterxml.jackson.core.util.BufferRecycler[2])");
      // Undeclared exception!
//      try { 
        jsonMappingException9.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper_DefaultTyping0, 40);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping[40]", string0);
      assertNotNull(string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null, sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.getMessage();
      String string1 = jsonMappingException0._buildMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 2991);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "");
      JsonFactory jsonFactory0 = new JsonFactory();
      MockURL.getHttpExample();
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", sQLFeatureNotSupportedException1);
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLFeatureNotSupportedException1);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("JSON\n at [Source: (String)\"\"; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath((Object) bufferRecycler0, (-3242));
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 182, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("aNC1vREKhJ%}5{a)m:");
      Throwable throwable0 = null;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping1 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) objectMapper_DefaultTyping1, "aNC1vREKhJ%}5{a)m:");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 2991);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = new JsonMappingException("");
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "D7xM!d7i$VtD~`Hb", (Throwable) sQLFeatureNotSupportedException0);
      String string0 = jsonMappingException1.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ")";
      JsonLocation jsonLocation0 = new JsonLocation(")", 0L, 0L, (-3117), 3042);
      JsonMappingException jsonMappingException0 = new JsonMappingException(")", jsonLocation0);
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getMessage();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, ")", (Throwable) jsonMappingException1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2);
      jsonMappingException0.prependPath((Object) pushbackInputStream0, 0);
      jsonMappingException0.prependPath((Object) objectOutputStream0, 2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder1.NO_BYTES, 0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(was ");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) mockPrintStream0, "u:N9!)Dg`!K7");
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(2, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      PipedReader pipedReader0 = new PipedReader();
      String string0 = jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._from = (Object) pipedReader0;
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, (String) null);
      String string1 = jsonMappingException0.getPathReference();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, 2);
      jsonMappingException_Reference0.getFieldName();
      assertEquals(2, jsonMappingException_Reference0.getIndex());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("->");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientException0, "dndBx");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.sql.SQLNonTransientException[\"dndBx\"]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 51;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(51);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "_F+.%RH{:S$M");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      jsonMappingException_Reference0._from = (Object) pipedReader0;
      pipedReader0.markSupported();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference1.getFieldName();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.JsonMappingException", (String) null, 16, hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, "", sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "Y7z21'90", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath((Object) bufferRecycler0, (-3242));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("<+\"AwxqGzEkYD}#E");
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArrayBuilder0.NO_BYTES);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, true, true);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, "<+\"AwxqGzEkYD}#E");
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, true);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockPrintWriter0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "9YH#{XYg~r[Nza^N");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putNull("");
      HashMap<String, BooleanNode> hashMap0 = new HashMap<String, BooleanNode>();
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      hashMap0.put("/.l;;{2B~}", booleanNode0);
      JsonNode jsonNode0 = objectNode1.setAll((Map<String, ? extends JsonNode>) hashMap0);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(jsonNode0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLWarning0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "com.fasterxml.jackson.databind.JsonMappingException");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RRF=)bu5m4B-oN");
      Locale locale0 = new Locale(")~zB.", "C");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "RRF=)bu5m4B-oN";
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) ")~zB.";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      objectArray0[5] = (Object) jsonEncoding0;
      objectArray0[6] = (Object) jsonEncoding0;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3906, objectMapper0, printWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, "T69++y", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectArray0[1], 3);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(3, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 316);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putNull("");
      HashMap<String, BooleanNode> hashMap0 = new HashMap<String, BooleanNode>();
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      hashMap0.put("/.l;;{2B~}", booleanNode0);
      JsonNode jsonNode0 = objectNode1.setAll((Map<String, ? extends JsonNode>) hashMap0);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(jsonNode0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLWarning0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 326);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, "", 326);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getLocalizedMessage();
      PipedReader pipedReader0 = new PipedReader();
      jsonMappingException_Reference0.setDescription("YMz>@<]>]");
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jsonMappingException0.prependPath((Object) sQLTransactionRollbackException0, 3482);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException2 = new JsonMappingException(pipedWriter0, "");
      Object object0 = jsonMappingException2.getProcessor();
      assertSame(object0, pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      jsonMappingException_Reference0._from = (Object) pipedReader0;
      pipedReader0.markSupported();
      jsonMappingException_Reference0.writeReplace();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1037), byteArrayInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 10, (-1037), true);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, " Xo>A.7~2}oV", jsonLocation0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.prependPath((Object) pipedReader0, "");
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper0);
      objectMapper0.getSerializerProviderInstance();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, " with format auto-detection: must be byte- not char-based", (Throwable) jsonMappingException0);
      Object object1 = jsonMappingException2.getProcessor();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 326);
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, "", 326);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "No 'injectableValues' configured, cannot inject value with id [%s]", 70);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLRecoverableException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      int[] intArray0 = new int[7];
      intArray0[0] = 1797;
      intArray0[1] = 1797;
      intArray0[2] = 26;
      intArray0[3] = 1000;
      intArray0[4] = 1797;
      intArray0[5] = 1797;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 1797, intArray0);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) jsonMappingException_Reference0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 326);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getLocalizedMessage();
      PipedReader pipedReader0 = new PipedReader();
      jsonMappingException_Reference0.setDescription("AnnotationIntrospector returned serializer definition of type ");
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jsonMappingException0.prependPath((Object) pipedWriter0, 2637);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-64);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Throwable throwable0 = sQLTransientConnectionException0.fillInStackTrace();
      JsonMappingException.wrapWithPath(throwable0, (Object) sQLTransientConnectionException0, "");
      String string0 = "";
      jsonMappingException0.prependPath((Object) sQLTransientConnectionException0, "");
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      Class<BufferedReader> class1 = BufferedReader.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)61);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      // Undeclared exception!
//      try { 
        collectionType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" ");
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(mockFile0, "dRO;");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference2);
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      
      String string0 = jsonMappingException0._buildMessage();
      assertEquals(" (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\"dRO;\"])", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nARG0YAX]1i4?gk");
      JsonMappingException jsonMappingException0 = new JsonMappingException("Q:fnR", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "Q:fnR");
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 326);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getLocalizedMessage();
      PipedReader pipedReader0 = new PipedReader();
      jsonMappingException_Reference0.setDescription("AnnotationIntrospector returned serializer definition of type ");
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jsonMappingException0.prependPath((Object) pipedWriter0, 326);
      jsonMappingException1.prependPath((Object) sQLFeatureNotSupportedException0, " Xo>A.7~2}oV");
      jsonMappingException0.getMessage();
      String string0 = "+@#IF2Y0CX|K#%";
      jsonMappingException1.prependPath((Object) "", "+@#IF2Y0CX|K#%");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProvider();
      String string1 = "2pwj#YbAV?";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      // Undeclared exception!
//      try { 
        MockURI.resolve((URI) null, (URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = "=_\"hv\"}G3";
      jsonMappingException_Reference0.writeReplace();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot pass null fieldName", "Cannot pass null fieldName", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(A^xw/6]!t2.", "Cannot pass null fieldName");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot pass null fieldName", (String) null, 0, sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("(A^xw/6]!t2.", sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")", "@:y3+lN", 0, sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("@:y3+lN", ")");
      MockFile mockFile0 = new MockFile("dQ~&bXY", "; id-resolver: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("((JDsKHRP$ HS*^tLx");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "T7CbD", sQLNonTransientConnectionException0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) mockFile0, "vj$");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "@:y3+lN");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("tiT)?T", "JsonFormat.Value(pattern=%s,shape=%s,lenient=%s,locale=%s,timezone=%s)");
      MockFile mockFile1 = new MockFile(mockFile0, "JsonFormat.Value(pattern=%s,shape=%s,lenient=%s,locale=%s,timezone=%s)");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile1, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "_");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int[] intArray0 = new int[9];
      intArray0[0] = 4000;
      intArray0[1] = 4000;
      intArray0[2] = 4000;
      intArray0[3] = 4000;
      intArray0[4] = 4000;
      intArray0[5] = 4000;
      intArray0[6] = 4000;
      intArray0[7] = 4000;
      intArray0[8] = 4000;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      MockIOException mockIOException0 = new MockIOException("\nRequest payload : ", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockIOException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 4000, sQLSyntaxErrorException0);
      SQLWarning sQLWarning0 = new SQLWarning("\nRequest payload : ", sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "f6&6>V@y v~<Ccnpjg?", (Throwable) sQLWarning0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) byteArrayOutputStream0, "\nRequest payload : ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(4000);
      assertEquals(4000, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) jsonMappingException0, 4000);
      assertNotSame(jsonMappingException0, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "~abX${Q75W<", 0, sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("Ma%i,&+8XY:u", sQLRecoverableException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(beanDeserializerFactory0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference1);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 1240);
      jsonMappingException_Reference0.setFieldName("");
      assertEquals(1240, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, (-1077));
      jsonMappingException_Reference0.getDescription();
      String string0 = "com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations";
      jsonMappingException_Reference0.setIndex((-2429));
      String string1 = "SimpleModule-";
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = "JPO@p0(";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "JPO@p0(");
      jsonMappingException_Reference0.getDescription();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      // Undeclared exception!
//      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "cX|,*UiMD+z";
      JsonMappingException jsonMappingException0 = new JsonMappingException("cX|,*UiMD+z", (JsonLocation) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-2098));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        deserializerFactoryConfig0.withValueInstantiators((ValueInstantiators) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null resolver
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 56319);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      jsonMappingException_Reference0._from = (Object) pipedReader0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pipedWriter0);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, (String) null);
      jsonMappingException0.toString();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "com.fasterxml.jackson.databind.JsonMappingException: N/A");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Class<PipedReader> class0 = PipedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(dataInputStream0, class0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.io.PipedReader` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.io.DataInputStream`: incompatible types", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "No 'injectableValues' configured, cannot inject value with id [%s]");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) beanDeserializerFactory0, "No 'injectableValues' configured, cannot inject value with id [%s]");
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex((-5032));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.JsonMappingException", hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.JsonMappingException", (Throwable) sQLClientInfoException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter1);
      jsonMappingException_Reference0._desc = " ";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._desc = null;
      jsonMappingException_Reference0.getFrom();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(mockPrintWriter1);
      jsonMappingException_Reference0.getIndex();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, ">[35d");
      StringBuilder stringBuilder0 = new StringBuilder("jP3}Q");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      int int0 = 3482;
      jsonMappingException_Reference0.setIndex(3482);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._desc = "[]";
      jsonMappingException_Reference0.setFieldName("[]");
      jsonMappingException_Reference0.setIndex((-3613));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s}`O~q", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      File file0 = MockFile.createTempFile("US-ASCII", "US-ASCII");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(bufferedWriter0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Jz+'jq", "u;WvW/c2(o-rt", 492);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Jz+'jq", "", 2577, sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("US-ASCII", jsonLocation0, sQLRecoverableException0);
      Integer integer0 = new Integer(500);
      jsonMappingException0.prependPath((Object) integer0, 2577);
      JsonMappingException.from((JsonGenerator) null, "Jz+'jq");
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '*';
      charArray0[2] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = null;
//      try {
        pushbackReader0 = new PushbackReader(charArrayReader0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size <= 0
//         //
//         verifyException("java.io.PushbackReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[?]", (Throwable) null);
      jsonMappingException0.getPath();
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMaxInputLookahead(64);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat(byteArray0, 1000, 0);
      dataFormatReaders_Match0.createParserWithMatch();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "%Saz]p(", (Throwable) null);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 326);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): (was java.sql.SQLFeatureNotSupportedException) (through reference chain: UNKNOWN[?])", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      jsonMappingException_Reference0.setDescription("AnnotationIntrospector returned serializer definition of type ");
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jsonMappingException0.prependPath((Object) pipedWriter0, 326);
      jsonMappingException1.prependPath((Object) sQLFeatureNotSupportedException0, " Xo>A.7~2}oV");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "NDS4=kR", (Throwable) jsonMappingException1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Closeable closeable0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "<^W,o-wuWLQj");
      jsonMappingException0.getMessage();
      String string0 = "0r8zXi7ZtTx};w";
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("<^W,o-wuWLQj", "0r8zXi7ZtTx};w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"0r8zXi7ZtTx};w\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'B~i3eo\u0002Ua8)R9%hg", false);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "'B~i3eo\u0002Ua8)R9%hg");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null resolver
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "[collection-like type; class ");
      File file0 = MockFile.createTempFile("[collection-like type; class ", "", (File) mockFile1);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileInputStream0, "[collection-like type; class ");
      jsonMappingException0.prependPath((Object) null, 0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot pass null fieldName", "Cannot pass null fieldName", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.getPath();
      jsonMappingException1.getProcessor();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(1071);
      assertEquals(1071, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "Tq0vwp1caW?(d\\E^]%";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "Tq0vwp1caW?(dE^]%");
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null KeyDeserializers
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }
}
