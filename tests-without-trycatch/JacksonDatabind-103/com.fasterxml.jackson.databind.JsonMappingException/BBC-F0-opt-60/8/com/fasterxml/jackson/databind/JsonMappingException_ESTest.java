/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 04:08:50 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("g37U={[}N.^IX:");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "g37U={[}N.^IX:", "g37U={[}N.^IX:");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedOutputStream0, 32);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedOutputStream0, 32);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException4.prependPath((Object) "g37U={[}N.^IX:", "g37U={[}N.^IX:");
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException7, (Object) byteArrayInputStream0, "g37U={[}N.^IX:");
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException8, (Object) jsonMappingException8, "g37U={[}N.^IX:");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException9, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException10 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException6, "g37U={[}N.^IX:");
      JsonMappingException jsonMappingException11 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException10, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException11, (Object) jsonMappingException3, 0);
      JsonMappingException jsonMappingException12 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException8, jsonMappingException_Reference0);
      jsonMappingException8.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException2, (-1));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException8, jsonMappingException_Reference0);
      jsonMappingException6.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException12, jsonMappingException_Reference0);
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference0);
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      jsonMappingException3.toString();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException11);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator((InputDecorator) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.ser.BeanSerializerModifier", "JSON");
      File file0 = MockFile.createTempFile("tmn&Gp1[dBrC", "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory4.createParser(file0);
      objectMapper0.writeValueAsBytes(jsonFactory3);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      String string0 = "u8|\"/N0o'";
      JsonMappingException.from(jsonGenerator0, string0);
      JsonMappingException.from(jsonParser0, jsonFactory2.FORMAT_NAME_JSON, (Throwable) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MockFileReader> class0 = MockFileReader.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0L);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(numericNode0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 6);
      JsonLocation jsonLocation0 = new JsonLocation(jsonMappingException_Reference0, 1445L, (-2781L), 6, 6);
      JsonMappingException jsonMappingException0 = new JsonMappingException("2DUr", jsonLocation0);
      JsonMappingException.from(jsonParser0, "->", (Throwable) jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonLocation0, "");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("org.evosuite.runtime.mock.java.io.MockFileReader[6]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<PipedReader> class0 = PipedReader.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException(simpleAbstractTypeResolver0, class0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 542);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder("Fbq%lw;Gj9sW7Qj");
      ((JsonMappingException)invalidFormatException0)._appendPathDesc(stringBuilder0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Fbq%lw;Gj9sW7Qj");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "g37U={[}N.^IX:";
      JsonMappingException jsonMappingException0 = new JsonMappingException("g37U={[}N.^IX:");
      String string1 = " s ";
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "g37U={[}N.^IX:", " s ");
      jsonMappingException1.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedOutputStream0, 0);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedOutputStream0, 0);
      JsonpCharacterEscapes.instance();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      String string2 = null;
      // Undeclared exception!
//      try { 
        jsonMappingException3.prependPath((Object) " s ", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      String string0 = "u&-?bbB\"";
      JsonParser jsonParser0 = null;
      String string1 = ")+!%fmD4_[ <;eBo6fw";
      int int0 = (-279);
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, (-279), 0L, (-279), (-279));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Ct]8K /[5.", jsonLocation0, sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException1 = null;
//      try {
        jsonMappingException1 = new JsonMappingException(jsonParserDelegate0, ")+!%fmD4_[ <;eBo6fw", jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
//      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-47);
      jsonNodeFactory0.binaryNode(byteArray0, 24, (int) (byte)0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "serialization type ");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3715;
      Random.setNextRandom(3715);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" (through reference chain: ", " (through reference chain: ");
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      SQLException sQLException0 = new SQLException(":jW,TnPqfAFnBm", ":jW,TnPqfAFnBm");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLException0, (-1841));
      SQLException sQLException1 = new SQLException(":jW,TnPqfAFnBm", ":jW,TnPqfAFnBm");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonLocation jsonLocation0 = new JsonLocation(" following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM", (-1151L), 508L, 9999, 9999);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, " following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM", jsonLocation0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals(" following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM\n at [Source: (String)\" following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM\"; line: 9999, column: 9999]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("gz79={[}N.^IX:");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "gz79={[}N.^IX:", " as ");
      jsonMappingException1.printStackTrace();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("gz79={[}N.^IX:", "gz79={[}N.^IX:");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedOutputStream0, 0);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = new JsonMappingException("gz79={[}N.^IX:");
      jsonMappingException_Reference0._fieldName = null;
      JsonpCharacterEscapes.instance();
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "java.lang.String[?]", (Throwable) jsonMappingException5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      SQLException sQLException0 = new SQLException("", "com.fasterxml.jackson.annotation.ObjectIdGenerators$Base", (-1));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.annotation.ObjectIdGenerators$Base", (String) null, 3, sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, ": ", sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException1.getMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "", (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "cM@,Bni");
      JsonMappingException jsonMappingException3 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "d<8(w4&");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 2566);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      JsonMappingException.from((JsonParser) null, "");
      JsonMappingException.from((JsonGenerator) null, "");
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) "cM@,Bni", "");
      assertNotSame(jsonMappingException4, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      jsonNodeFactory0.arrayNode();
      MockIOException mockIOException0 = new MockIOException();
      DataTruncation dataTruncation0 = new DataTruncation(16777215, true, true, 16777215, 16777215, mockIOException0);
      dataTruncation0.getNextWarning();
      JsonMappingException jsonMappingException0 = new JsonMappingException("}//Fh>skr", dataTruncation0);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException0, "V]|=U /|dc*");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g79={[}N.W^IX:");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      jsonNodeFactory0.arrayNode();
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-2918));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "", (-2918));
      jsonMappingException0.getPath();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPathReference();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "(was ", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "T");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "\"tX$V_\u0001*D]m");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("\"tX$V_\u0001*D]m\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
      
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 6);
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.Object[6]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "UNKNOWN", "UNKNOWN");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-24), (byte) (-24));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "UNKNOWN");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('{');
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter2, (byte)13);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      JsonMappingException.from(jsonParser0, "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", (Throwable) jsonMappingException1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) bufferedWriter0, "oLUU%gT{");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1, "UNKNOWN");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: UNKNOWN (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"UNKNOWN\"]->java.io.BufferedWriter[\"oLUU%gT{\"]->java.lang.String[\"UNKNOWN\"])", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", "{'V,(Q%5gEbb*5{=");
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1, 451);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-485), 451);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "UNKNOWN", "");
      JsonMappingException jsonMappingException2 = new JsonMappingException("UNKNOWN");
      jsonMappingException0.getPath();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)19, (-793));
      jsonMappingException1.prependPath((Object) byteArrayInputStream0, (int) (byte)6);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException3 = JsonMappingException.from(deserializationContext0, "");
      jsonMappingException3._appendPathDesc((StringBuilder) null);
      assertNotSame(jsonMappingException3, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, true);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) mockPrintWriter0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "JSON", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", sQLClientInfoException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("JSON", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      mockPrintWriter0.print('X');
      mockPrintWriter0.print((-1.0F));
      JsonMappingException jsonMappingException0 = new JsonMappingException(printWriter0, "");
      Object object0 = jsonMappingException0.getProcessor();
      assertSame(mockPrintWriter0, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "UNKNOWN", "UNKNOWN");
      jsonMappingException0._buildMessage();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      String string0 = jsonMappingException1.getMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): UNKNOWN (through reference chain: java.lang.Object[0]->java.lang.String[\"UNKNOWN\"])", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f#\"V^j@`xzR*h", "", 1924, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "f#\"V^j@`xzR*h", (Throwable) sQLClientInfoException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "f#\"V^j@`xzR*h", "UNKNOWN", 1924);
      stackTraceElementArray0[0] = stackTraceElement0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", 1924);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("f#\"V^j@`xzR*h", "f#\"V^j@`xzR*h", "", 100);
      stackTraceElementArray0[2] = stackTraceElement2;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, "f#\"V^j@`xzR*h");
      jsonMappingException_Reference0.setIndex(1924);
      JsonMappingException.from((JsonGenerator) null, "UNKNOWN");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransactionRollbackException0, 1924);
      jsonMappingException1.getProcessor();
      jsonMappingException0.prependPath((Object) stackTraceElement1, "UNKNOWN");
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getDescription();
      assertEquals(1924, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "", "(g{iaN");
      SQLTransientException sQLTransientException0 = new SQLTransientException("zS[a+Pc]", "(g{iaN", 35, jsonMappingException0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g79={[}N.W^IX:");
      JsonMappingException jsonMappingException0 = new JsonMappingException("g79={[}N.W^IX:");
      jsonMappingException0.getPath();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, 13);
      // Undeclared exception!
//      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g79={[}N.W^IX:");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "g79={[}N.W^IX:");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "g79={[}N.W^IX:");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      jsonMappingException1.getLocalizedMessage();
      Object object0 = new Object();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParserSequence0, 1);
      Object object1 = jsonMappingException2.getProcessor();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'T';
      jsonFactory0.createParser(charArray0);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonFactory0, 19);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._index = 1000;
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.setFieldName("J#hltM");
      jsonMappingException_Reference0.getFrom();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getCause();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) null, 1000);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonFactory0.enable(jsonParser_Feature0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[1000]->UNKNOWN[\"J#hltM\"]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "d)Y", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, 1768);
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException1.getPathReference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "", "(g{iaN");
      SQLTransientException sQLTransientException0 = new SQLTransientException("zS[a+Pc]", "(g{iaN", 35, jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException0.getLocalizedMessage();
      Object object0 = new Object();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "(g{iaN", 35);
      assertSame(jsonMappingException1, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g79={[}N.W^IX:");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "g79={[}N.W^IX:", 0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileReader0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("g79={[}N.W^IX: (through reference chain: org.evosuite.runtime.mock.java.io.MockFileReader[\"\"]->java.lang.String[0])", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException.from(jsonParser0, "\"tX$V_\u0001*D]m");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "UNKNOWN", "");
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "UNKNOWN");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getPath();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object1 = new Object();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(object1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jsonMappingException_Reference0._from = (Object) pipedOutputStream0;
      jsonMappingException_Reference0.getDescription();
      Object object0 = new Object();
      int int0 = 0;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) pipedOutputStream1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      Class<CharArrayReader> class0 = CharArrayReader.class;
      Class<OutputStreamWriter> class1 = OutputStreamWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[2], javaTypeArray0[2]);
      MapType mapType1 = mapType0.withValueHandler(jsonFactory2);
      MapType mapType2 = mapType1.withStaticTyping();
      MapType mapType3 = mapType2.withKeyType(mapType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2));
      StringBuilder stringBuilder0 = new StringBuilder("java.io.PipedOutputStream[?]");
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = mapType3.getGenericSignature(stringBuilder1);
      jsonMappingException0.getPathReference(stringBuilder2);
      MockFileWriter mockFileWriter0 = null;
//      try {
        mockFileWriter0 = new MockFileWriter("", true);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      
      Object object0 = new Object();
      MockFileWriter mockFileWriter0 = new MockFileWriter("UNKNOWN[?]", true);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, 0);
      assertEquals(0, jsonMappingException_Reference1.getIndex());
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "`n;sD1L+8</i", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "UNKNOWN[?]", 0);
      jsonMappingException0.getPath();
      String string1 = jsonMappingException0.getPathReference();
      assertEquals("java.lang.String[0]", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = '|';
      charArray0[2] = 'T';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonMappingException.from((JsonParser) jsonParserSequence0, "JSON");
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "", "(g{iaN");
      SQLTransientException sQLTransientException0 = new SQLTransientException("zS[a+Pc]", "(g{iaN", 35, jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException1._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      int int0 = 1000;
      jsonMappingException_Reference0._index = 1000;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.setFieldName("J#hltM");
      jsonMappingException_Reference0.getFrom();
      MockIOException mockIOException0 = new MockIOException();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FAIL_ON_MISSING_CREATOR_PROPERTIES");
      mockIOException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) null, 1000);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonFactory0.enable(jsonParser_Feature0);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
//      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._index = 1000;
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.setFieldName("J#hltM");
      jsonMappingException_Reference0.getFrom();
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) null, 1000);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.InputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      // Undeclared exception!
//      try { 
        jsonFactory3.createParser((InputStream) bufferedInputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g79={[}N.W^IX:");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("g79={[}N.W^IX:");
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g79={[}N.W^IX:");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "g79={[}N.W^IX:", 0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
      
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.lang.String[0]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("s{$l!f[TyGR\"K");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", (-967));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("(was ", "s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("(was ", "s{$l!f[TyGR\"K", "", (-967));
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) null, 0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "s{$l!f[TyGR\"K");
      jsonMappingException1._buildMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) null, (String) null, (Throwable) jsonMappingException0);
      jsonMappingException2.clearLocation();
      jsonMappingException1.getPathReference((StringBuilder) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, objectMapper0, (OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "CUSTOM");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) null, jsonEncoding0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "UNKNOWN", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName(";");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";", (String) null, (int[]) null);
      batchUpdateException0.getLocalizedMessage();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ";", (Throwable) batchUpdateException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      int int0 = 2826;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
//      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(collectionType0, "#z'ild", "");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)2);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(pushbackInputStream0, class0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0, (byte) (-63));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-63), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("s{$l!f[TyGR\"K");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", (-967));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("(was ", "s{$l!f[TyGR\"K", "s{$l!f[TyGR\"K", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("(was ", "s{$l!f[TyGR\"K", "", (-967));
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) null, 0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "s{$l!f[TyGR\"K");
      jsonMappingException1._buildMessage();
      JsonMappingException.from((JsonParser) null, (String) null, (Throwable) jsonMappingException0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, objectMapper0, (OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      JsonMappingException jsonMappingException0 = new JsonMappingException(printWriter0, "");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.JsonMappingException$Reference";
      SQLDataException sQLDataException0 = new SQLDataException("%{Xd", "6+o", 72);
      SQLException sQLException0 = new SQLException("%{Xd", "com.fasterxml.jackson.databind.JsonMappingException$Reference", 72, sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.JsonMappingException$Reference", "com.fasterxml.jackson.databind.JsonMappingException$Reference", sQLException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference", (JsonLocation) null, sQLTransactionRollbackException0);
      jsonMappingException0.addSuppressed(sQLTransactionRollbackException0);
      jsonMappingException0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string1 = ": ";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      objectMapper1.readerWithView(class0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(": ", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f#\"V^j@`xzR*h", "", 1924, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "f#\"V^j@`xzR*h", (Throwable) sQLClientInfoException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "f#\"V^j@`xzR*h", "UNKNOWN", 1924);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", 1924);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("f#\"V^j@`xzR*h", "f#\"V^j@`xzR*h", "", 100);
      stackTraceElementArray0[2] = stackTraceElement2;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, "f#\"V^j@`xzR*h");
      jsonMappingException_Reference0.setIndex(1924);
      JsonMappingException.from((JsonGenerator) null, "UNKNOWN");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransactionRollbackException0, 1924);
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 70);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0);
      String string0 = "{lz-W5DgYDe";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      // Undeclared exception!
//      try { 
        jsonFactory1.createParser(byteArrayBuilder0.NO_BYTES, (-2378), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2378
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(862);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "L .f6kEjKfq?df7N]", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, (String) null, (Throwable) sQLNonTransientException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getIndex();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)0;
//      try { 
        objectReader0.readValues(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid UTF-8 start byte 0xfa
//         //  at [Source: (byte[])\"\uFFFD\uFFFD\u0000\uFFFD\u0000\"; line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null);
      jsonMappingException0._buildMessage();
      String string0 = "";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      jsonMappingException_Reference0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 0, hashMap0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLClientInfoException0, false);
      int int0 = 57;
      Reader reader0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      // Undeclared exception!
//      try { 
        filteringParserDelegate0.getCodec();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0._from = (Object) "pT";
      jsonMappingException_Reference0._fieldName = "pT";
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setOutputDecorator(outputDecorator0);
//      try { 
        MockURL.URL("", "", "");
//        fail("Expecting exception: MalformedURLException");
      
//      } catch(MalformedURLException e) {
//         //
//         // unknown protocol: 
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = null;
      jsonMappingException_Reference0._desc = null;
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      SerializerProvider serializerProvider0 = null;
      String string1 = "=-Np'1V!.;";
      MockThrowable mockThrowable0 = new MockThrowable("UNKNOWN[?]");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UNKNOWN[?]", (String) null, (-1838), mockThrowable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      String string2 = "C]w:XLOmpgAy+s";
      File file0 = MockFile.createTempFile("UNKNOWN[?]", "C]w:XLOmpgAy+s");
//      try { 
        MockFile.createTempFile("d29", "d29", file0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      MockFile mockFile0 = new MockFile("MJQL/yjkuz-y|>!A]TI", "");
      File file0 = MockFile.createTempFile("MJQL/yjkuz-y|>!A]TI", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      sQLSyntaxErrorException0.printStackTrace((PrintStream) mockPrintStream0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "MJQL/yjkuz-y|>!A]TI", (Throwable) sQLSyntaxErrorException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("' has value that is not of type ArrayNode (but ", "' has value that is not of type ArrayNode (but ");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLDataException0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JavaType javaType0 = null;
      // Undeclared exception!
//      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int int0 = (-681);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLClientInfoException0, (-681));
      sQLClientInfoException0.getSuppressed();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
//      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
//      try { 
        MockURI.URI("", "", "", "");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Expected scheme name at index 0: ://#
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.withStaticTyping();
//      try { 
        defaultDeserializationContext_Impl0.reportBadDefinition((JavaType) resolvedRecursiveType0, "");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "(v~`{dq3Rb):<Z[";
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "(v~`{dq3Rb):<Z[");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string1 = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
      // Undeclared exception!
//      try { 
        sQLFeatureNotSupportedException0.initCause(jsonMappingException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with com.fasterxml.jackson.databind.JsonMappingException: 
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = "G";
      jsonMappingException_Reference0.setFieldName("5Sw_8");
      jsonMappingException_Reference0._index = (-749);
      jsonMappingException_Reference0._fieldName = null;
      jsonMappingException_Reference0.setDescription("USE_STD_BEAN_NAMING");
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getDescription();
      IOContext iOContext0 = null;
      int int0 = 3215;
      Reader reader0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((String) null, "G", false, 'O', 1811);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 1)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator((String) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      objectMapper0.enable(jsonParser_FeatureArray0);
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 4000, (DataInput) null, objectMapper0, (ByteQuadsCanonicalizer) null, 2);
      JsonLocation jsonLocation0 = uTF8DataInputJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, jsonLocation0, (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "UNKNOWN", "");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("UNKNOWN (through reference chain: java.lang.String[\"\"])", string0);
      
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
  }
}
