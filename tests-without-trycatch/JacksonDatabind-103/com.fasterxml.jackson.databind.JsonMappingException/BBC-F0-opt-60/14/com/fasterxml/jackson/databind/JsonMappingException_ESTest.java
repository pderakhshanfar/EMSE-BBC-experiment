/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:34:16 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      String string0 = "";
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl1.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl2, defaultDeserializationContext_Impl0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, (JsonParser) treeTraversingParser0);
      objectMapper1.updateValue(jsonParserSequence0, (Object) jsonFactory1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProvider();
      ObjectMapper.findModules();
      String string1 = "";
      JsonMappingException jsonMappingException1 = new JsonMappingException(treeTraversingParser0, string1, jsonMappingException0);
      int int0 = 1000000;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl3, int0);
      JsonMappingException jsonMappingException2 = new JsonMappingException(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) jsonMappingException_Reference0, "vw|Y;seDq9J");
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) null, "(was java.sql.SQLSyntaxErrorException)");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "vw|Y;seDq9J", "vw|Y;seDq9J");
      jsonMappingException1.getCause();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "(was java.sql.SQLSyntaxErrorException)", 2);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      jsonMappingException2.getPath();
      jsonMappingException4.toString();
      jsonMappingException5.prependPath((Object) jsonMappingException2, 2);
      jsonMappingException4.getLocalizedMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) "(was java.sql.SQLSyntaxErrorException)", (int) (byte)68);
      jsonMappingException6.printStackTrace();
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      jsonMappingException6.prependPath(jsonMappingException_Reference0);
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockFileReader0, class0);
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("?MTP05X!30v^tJjsJye!", true);
      jsonMappingException0.prependPath((Object) mockFileWriter0, "Cannot deserialize value of type `java.io.BufferedInputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `org.evosuite.runtime.mock.java.io.MockFileReader`: incompatible types");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockFileWriter0, 2);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      jsonMappingException2.prependPath(jsonMappingException_Reference1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      List<JsonMappingException.Reference> list0 = new ArrayList<JsonMappingException.Reference>();
      jsonMappingException1.toString();
      jsonMappingException0.prependPath((Object) "#&S:f\"GTS+.yR]9b", 32);
      jsonMappingException1.getLocalizedMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference1);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) jsonMappingException_Reference0, (-1));
      jsonMappingException4.printStackTrace();
      jsonMappingException4.prependPath(jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl1.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl2, defaultDeserializationContext_Impl0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, (JsonParser) treeTraversingParser0);
      objectMapper1.updateValue(jsonParserSequence0, (Object) jsonFactory1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "", 16777217);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("}");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "}", "}");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "}", (Throwable) jsonMappingException1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      MockThrowable mockThrowable0 = new MockThrowable(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException1._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, "", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("", 37);
      JsonMappingException jsonMappingException2 = new JsonMappingException("");
      jsonMappingException2.prependPath((Object) "", "");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.add(false);
      arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = new JsonMappingException("QwyB9/,(}xd]w~H}<A");
      jsonMappingException0.getProcessor();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "QwyB9/,(}xd]w~H}<A");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(filteringParserDelegate0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException1.toString();
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, true);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate1, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = new JsonMappingException("QwyB9/,(}xd]w~H}<A");
      jsonMappingException0.getProcessor();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      jsonMappingException0.getProcessor();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParser0, "");
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
//      try { 
        jsonMappingException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException.from(jsonParser0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", (-683));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(687);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo", (JsonLocation) null);
      Throwable throwable0 = jsonMappingException0.fillInStackTrace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("g", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo", 687, throwable0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, 4250);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo (through reference chain: UNKNOWN[4250])", string0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      jsonMappingException0._processor = (Closeable) jsonParser0;
      jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      objectMapper1.getSerializerProvider();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(simpleKeyDeserializers0, 13);
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SQLTransientException sQLTransientException0 = new SQLTransientException("4rie3eCcn*@VdQoz3&", "4rie3eCcn*@VdQoz3&", (-5265));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.JsonMappingException", sQLTransientException0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('E');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "4rie3eCcn*@VdQoz3&");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) stringWriter2, 16);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.io.StringWriter[16]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      jsonMappingException_Reference0.getFieldName();
      Object object0 = new Object();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) "UNKNOWN[?]", "UNKNOWN[?]");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '8';
      charArray0[2] = 'w';
      charArray0[3] = '@';
      charArray0[4] = '[';
      charArray0[5] = 'w';
      charArray0[6] = '4';
      charArray0[7] = 'b';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 2877, 2877);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      jsonMappingException1._buildMessage();
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) bufferedOutputStream0, (int) (byte) (-14));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Y\"NB#MAiV>&Awx>h_", (Map<String, ClientInfoStatus>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLClientInfoException1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      System.setCurrentTimeMillis(1052L);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was java.sql.SQLClientInfoException) (through reference chain: UNKNOWN[?])", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]9f", false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 93, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("]9f", jsonLocation0);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "d`e", (JsonLocation) null);
      jsonMappingException0.fillInStackTrace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException.from((JsonParser) null, "d`e");
      StringWriter stringWriter0 = new StringWriter(41);
      stringWriter0.write(41);
      stringWriter0.append((CharSequence) "d`e");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, (-13));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.BufferedReader[?]", string0);
      assertEquals((-13), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory2.createParser((InputStream) byteArrayInputStream0);
      SQLException sQLException0 = new SQLException((String) null, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, (String) null, (Throwable) sQLException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-47);
      JsonMappingException.from((JsonParser) null, "7 R(^0g0G1~");
      StringWriter stringWriter0 = new StringWriter((byte)68);
      stringWriter0.append((CharSequence) "7 R(^0g0G1~");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (byte)68);
      jsonMappingException_Reference0.setFieldName("7 R(^0g0G1~");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[\"7 R(^0g0G1~\"]", string0);
      assertNotNull(string0);
      assertEquals(68, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN[?]", "UNKNOWN[?]");
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "UNKNOWN[?]", (Throwable) sQLTransactionRollbackException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      BinaryNode.valueOf(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Nq;R7KgQsR~", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) bufferedInputStream0, "Unexpected IOException (of type %s): %s");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      BinaryNode.valueOf(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "JSON", (JsonLocation) null);
      jsonMappingException0.getLocalizedMessage();
      IOContext iOContext0 = null;
      MockFile mockFile0 = new MockFile("kE~eCT19f");
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonLocation jsonLocation0 = new JsonLocation(jsonMappingException_Reference0, 1L, (-2026), (-5010));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "com.fasterxml.jackson.core.filter.TokenFilterContext");
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[?]", jsonLocation0, sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "gwV);Nr;Hv#";
      jsonMappingException_Reference0._index = 0;
      jsonMappingException_Reference0.setFieldName("");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference1);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5tDba5rzsp7n(-$&mm#");
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      Object object0 = jsonMappingException0.getProcessor();
      assertNotNull(object0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      Object object0 = jsonMappingException0.getProcessor();
      assertNotNull(object0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n}/btr*cDBx)j=ce");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, (-3764));
      jsonMappingException_Reference0.getFieldName();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("java.io.StringReader[?]", string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("n}/btr*cDBx)j=ce", "", (-3311));
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "java.io.StringReader[?]", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-3764), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      jsonMappingException0._buildMessage();
      jsonMappingException0.getProcessor();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1497);
      jsonMappingException_Reference0.getFieldName();
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileReader> class0 = MockFileReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class1 = HashSet.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, javaType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = collectionType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = jsonMappingException0.getPathReference(stringBuilder1);
      jsonMappingException0.getPathReference(stringBuilder2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, typeFactory0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "ye=(n~3Aj}e*C`c)&k");
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl1.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl2, defaultDeserializationContext_Impl0);
      objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException1 = new JsonMappingException(treeTraversingParser0, "", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory0, 37);
      JsonMappingException jsonMappingException2 = new JsonMappingException("JSON");
      jsonMappingException2.prependPath((Object) arrayNode0, "2.2250738585072012e-308");
      assertEquals("", arrayNode0.asText());
      
      // Undeclared exception!
//      try { 
        jsonMappingException2.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN[?]", "UNKNOWN[?]");
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      sQLRecoverableException0.spliterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, 56);
      SequenceInputStream sequenceInputStream0 = null;
//      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1768);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 1768, jsonMappingException0);
      sQLFeatureNotSupportedException0.printStackTrace();
      JsonMappingException jsonMappingException1 = new JsonMappingException(pushbackInputStream0, "", sQLFeatureNotSupportedException0);
      jsonMappingException1.getLocalizedMessage();
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)jsonMappingException0.getProcessor();
      assertNotNull(treeTraversingParser0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException1.printStackTrace();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl1.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl2, defaultDeserializationContext_Impl0);
      objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException2 = new JsonMappingException(treeTraversingParser0, "", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory0, 37);
      assertEquals(37, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException3 = new JsonMappingException("JSON");
      jsonMappingException3.prependPath((Object) arrayNode0, "2.2250738585072012e-308");
      String string0 = jsonMappingException1.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "(was ");
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-14);
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "(was ", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedReader pipedReader0 = new PipedReader();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedReader0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("DK0*F43");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "DK0*F43");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, objectReader0, printStream0, byteArray0, (-535), false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "Cannot construct SimpleType for an array (class: ");
      jsonMappingException0.getMessage();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      jsonMappingException0.prependPath((Object) jsonMappingException1, 1418);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1768);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 1768, jsonMappingException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(pushbackInputStream0, "", sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 1768);
      jsonMappingException_Reference0.getFieldName();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, (String) null);
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.getDescription();
      SQLDataException sQLDataException0 = new SQLDataException("", "", 180);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLDataException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)63;
      byte byte0 = (byte)24;
      byteArray0[3] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, (String) null);
      jsonMappingException0.getMessage();
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("{n TC<Pc5o#g,", "N/A");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"N/A\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      String string0 = "MINIMAL_CLASS";
      PipedInputStream pipedInputStream0 = new PipedInputStream(1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = null;
//      try {
        uTF8StreamJsonParser0 = new UTF8StreamJsonParser((IOContext) null, 1000, pipedInputStream0, objectMapper1, byteQuadsCanonicalizer0, byteArray0, (byte) (-1), 17, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1768);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException_Reference0.getFieldName();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3206);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      byteArrayBuilder0.release();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream0, "NWz=!t&MZ<rtbEXOc");
      Object object0 = jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("yR`IYtxw5.`s`X'<9_");
      jsonMappingException_Reference0.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      Class<DataInputStream> class0 = DataInputStream.class;
      objectMapper0.readValues((JsonParser) null, class0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, objectReader0, (Writer) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("~7$A]BU", "(was ", 8);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, "8^{", (Throwable) sQLRecoverableException0);
      assertNotNull(jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(3600);
      jsonMappingException_Reference0.setIndex((-1221));
      jsonMappingException_Reference0.getIndex();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      // Undeclared exception!
//      try { 
        MapLikeType.upgradeFrom((JavaType) null, resolvedRecursiveType0, resolvedRecursiveType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) jsonParser0, "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0, jsonMappingException1);
      JsonMappingException.from(serializerProvider0, "", (Throwable) sQLSyntaxErrorException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("bg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.KOREAN;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "&+Ou'7zX90g_", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, printStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 946);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "\\(*ki;MK|BX:QTib_";
      int[] intArray0 = new int[3];
      intArray0[0] = (-783);
      intArray0[1] = 33;
      intArray0[2] = 16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getSuppressed();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(*ki;MK|BX:QTib_", batchUpdateException0);
      batchUpdateException0.getSuppressed();
      batchUpdateException0.addSuppressed(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) batchUpdateException0, (-1));
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.setAttribute((Object) null, batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Closeable closeable0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, (String) null);
      int int0 = 0;
      jsonMappingException0.getStackTrace();
      IntNode intNode0 = IntNode.valueOf(0);
      intNode0.fields();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(intNode0, 0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.node.IntNode[0]", (-1152));
      Throwable throwable0 = null;
      jsonMappingException1.printStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(1798);
      assertEquals(1798, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.deepCopy();
      ObjectNode objectNode2 = objectNode1.put("Unexpected IOException (of type %s): %s", (-600.046075));
      RawValue rawValue0 = new RawValue(objectNode2);
      jsonNodeFactory0.rawValueNode(rawValue0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      int int0 = 4;
      arrayNode0.arrayNode(4);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParser0, "");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException1._path = linkedList0;
      jsonMappingException0.getLocalizedMessage();
      IOContext iOContext0 = null;
      MockFile mockFile0 = new MockFile("");
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      int[] intArray0 = new int[9];
      intArray0[0] = 93;
      intArray0[1] = 0;
      intArray0[2] = 255;
      intArray0[3] = 1236;
      intArray0[4] = 93;
      intArray0[5] = 619;
      intArray0[6] = (-1042);
      intArray0[7] = (-1885);
      intArray0[8] = 200;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) batchUpdateException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n}/btr*cDBx)j=ce");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, (-3764));
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.toString();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("n}/btr*cDBx)j=ce", "", (-3302));
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "java.io.StringReader[?]", sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLNonTransientConnectionException0, 9);
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) jsonMappingException_Reference1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "6YNmBT_`u{f+wPkJ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("Cannot deserialize instance of %s out of %s token", (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot deserialize instance of %s out of %s token", mockThrowable0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Cannot deserialize instance of %s out of %s token", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSON", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "JSON");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectReader0, stringWriter2);
      String string0 = "com.fasterxml.jackson.annotation.ObjectIdGenerators$None";
      JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, "com.fasterxml.jackson.annotation.ObjectIdGenerators$None");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, 985);
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("java.io.ObjectOutputStream[985]", string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<Map> class0 = Map.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      CollectionType collectionType0 = CollectionType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[1]);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionType0, javaType0, javaType0);
      MapType mapType0 = typeFactory1.constructMapType((Class<? extends Map>) class0, (JavaType) mapLikeType0, (JavaType) mapLikeType0);
      MapType mapType1 = mapType0.withKeyTypeHandler(collectionType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType1, "java.io.ObjectOutputStream[985]", "com.fasterxml.jackson.core.io.InputDecorator");
      String string1 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'java.io.ObjectOutputStream[985]' as a subtype of [map type; class java.util.Map, [map-like type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [map-like type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]: com.fasterxml.jackson.core.io.InputDecorator", string1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      charArrayWriter0.writeTo(bufferedWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._index = 0;
      jsonMappingException_Reference0.setFieldName("");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "No injectable id with value '");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(stdKeyDeserializers0, class0);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) beanDeserializerFactory0, 321);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      jsonMappingException1.toString();
      DeserializationConfig deserializationConfig0 = null;
      SimpleMixInResolver simpleMixInResolver0 = null;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig1 = null;
//      try {
        deserializationConfig1 = new DeserializationConfig((DeserializationConfig) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfigBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = ")";
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, ")");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      String string0 = null;
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) batchUpdateException0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      defaultDeserializationContext_Impl0.weirdNativeValueException(bufferedInputStream0, class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = null;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      // Undeclared exception!
//      try { 
        ReferenceType.construct(class0, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[2]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 2);
      jsonMappingException_Reference0.setFieldName(": ");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(jsonMappingException_Reference1);
      jsonMappingException_Reference2.setDescription("&!|'W-ed!\u0005s)");
      JsonMappingException.Reference jsonMappingException_Reference3 = (JsonMappingException.Reference)jsonMappingException_Reference2.writeReplace();
      assertEquals(2, jsonMappingException_Reference1.getIndex());
      assertEquals((-1), jsonMappingException_Reference3.getIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("l+6*lx4;sa1_)VGArP", (String) null, 1);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("2zH)n", jsonLocation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2zH)n", jsonMappingException0);
      jsonLocation0.sourceDescription();
      jsonMappingException0._buildMessage();
      sQLTransactionRollbackException0.fillInStackTrace();
      jsonLocation0.toString();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "R/T", (Throwable) sQLTransactionRollbackException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }
}
