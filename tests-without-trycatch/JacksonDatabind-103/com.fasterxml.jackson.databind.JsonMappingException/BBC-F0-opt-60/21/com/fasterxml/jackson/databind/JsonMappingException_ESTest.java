/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:44:07 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.DayOfWeek;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      
      MockThrowable mockThrowable0 = new MockThrowable("Cannot pass null fieldName");
      assertNotNull(mockThrowable0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
      assertEquals("Cannot pass null fieldName", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot pass null fieldName", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.write((-642));
//      try { 
        objectMapper1.writeValue((OutputStream) mockFileOutputStream0, (Object) jsonFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertNotNull(jsonParserDelegate0);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      
      // Undeclared exception!
//      try { 
        jsonMappingException0._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2268);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "com.fasterxml.jackson.databind.util.NameTransformer$2");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedWriter0, 74);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNotNull(jsonMappingException2);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) arrayNode0, 74);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertNotNull(jsonMappingException3);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertNotNull(jsonMappingException4);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (JsonMappingException.Reference) null);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException5);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertNotNull(jsonMappingException5);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (JsonMappingException.Reference) null);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException2);
      assertSame(jsonMappingException6, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException0);
      assertSame(jsonMappingException6, jsonMappingException1);
      assertSame(jsonMappingException6, jsonMappingException5);
      assertSame(jsonMappingException6, jsonMappingException4);
      assertNotNull(jsonMappingException6);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertNotNull(jsonMappingException7);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "JSON");
      assertNotNull(stringBuilder0);
      assertEquals("JSON", stringBuilder0.toString());
      
      // Undeclared exception!
//      try { 
        jsonMappingException7.getPathReference(stringBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Throwable throwable0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) pipedInputStream0, (-1108));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "|");
      assertNotNull(jsonMappingException0);
      
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
      
      jsonMappingException0._appendPathDesc((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertNotNull(jsonLocation0);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      String string0 = "";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "null array");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("null array", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("!5)G%*", jsonLocation0, sQLRecoverableException0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) mockFileInputStream0, 500);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("null array", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(fileDescriptor0.valid());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "null array");
      assertNotNull(stringBuilder0);
      assertEquals("null array", stringBuilder0.toString());
      
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("null array", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("null array", stringBuilder0.toString());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      String string1 = jsonMappingException0.getMessage();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string1);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("null array", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("!5)G%*\n at [Source: UNKNOWN; line: -1, column: -1]", string1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string1.equals((Object)string0));
      
      File file0 = MockFile.createTempFile("null array", "!+{r&tQG\":DvP");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/null array0!+{r&tQG\":DvP", file0.toString());
      assertEquals("null array0!+{r&tQG\":DvP", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "-wj,b ?]x&7");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"-wj,b ?]x&7\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(pushbackInputStream0, class0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(string0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("Cannot deserialize value of type `org.evosuite.runtime.mock.java.io.MockFileOutputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.io.PushbackInputStream`: incompatible types", string0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      String string1 = jsonMappingException1.getMessage();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(string1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidFormatException): Cannot deserialize value of type `org.evosuite.runtime.mock.java.io.MockFileOutputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.io.PushbackInputStream`: incompatible types", string1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = jsonMappingException1.getPathReference();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(string2);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, "");
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      String string3 = jsonMappingException0.toString();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(string3);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `org.evosuite.runtime.mock.java.io.MockFileOutputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.io.PushbackInputStream`: incompatible types (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"\"]->org.evosuite.runtime.mock.java.io.MockFileOutputStream[\"\"])", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-2461));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("U&:( =gYQ@F=sy");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: U&:( =gYQ@F=sy", sQLDataException0.toString());
      assertEquals("U&:( =gYQ@F=sy", sQLDataException0.getMessage());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: U&:( =gYQ@F=sy", sQLDataException0.toString());
      assertEquals("U&:( =gYQ@F=sy", sQLDataException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath((Object) "9+pxsw4;:b!P]Q[5t", "U&:( =gYQ@F=sy");
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: U&:( =gYQ@F=sy", sQLDataException0.toString());
      assertEquals("U&:( =gYQ@F=sy", sQLDataException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLDataException sQLDataException1 = new SQLDataException();
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: U&:( =gYQ@F=sy", sQLDataException0.toString());
      assertEquals("U&:( =gYQ@F=sy", sQLDataException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: U&:( =gYQ@F=sy", sQLDataException0.toString());
      assertEquals("U&:( =gYQ@F=sy", sQLDataException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: U&:( =gYQ@F=sy", sQLDataException0.toString());
      assertEquals("U&:( =gYQ@F=sy", sQLDataException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: U&:( =gYQ@F=sy", sQLDataException0.toString());
      assertEquals("U&:( =gYQ@F=sy", sQLDataException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentName());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNull(jsonParser0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9+pxsw4;:b!P]Q[5t");
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("9+pxsw4;:b!P]Q[5t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: 9+pxsw4;:b!P]Q[5t", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      assertEquals(DayOfWeek.SUNDAY, dayOfWeek0);
      
      int int0 = dayOfWeek0.getValue();
      assertEquals(7, int0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) dayOfWeek0, "9+pxsw4;:b!P]Q[5t");
      assertNotNull(jsonMappingException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("9+pxsw4;:b!P]Q[5t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: 9+pxsw4;:b!P]Q[5t", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "9+pxsw4;:b!P]Q[5t", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper0, 0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.ObjectMapper[0]", string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.ObjectMapper[0]");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      assertNotNull(tokenFilterContext0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(tokenFilterContext0.inArray());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(tokenFilter0);
      assertNotNull(jsonLocation0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(tokenFilterContext0.inArray());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(500);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, (String) null, (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      StringBuilder stringBuilder0 = new StringBuilder(500);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNull(jsonParser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      assertNotNull(tokenFilterContext0);
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertFalse(tokenFilterContext0.inArray());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.hasCurrentName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(object0);
      assertNotNull(jsonLocation0);
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertFalse(tokenFilterContext0.inArray());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "g", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      StringBuilder stringBuilder0 = null;
//      try {
        stringBuilder0 = new StringBuilder((-642));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      assertNotNull(jsonMappingException0);
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "");
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._fieldName = "";
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals("java.io.DataOutputStream[\"\"]", string0);
      
      SQLDataException sQLDataException1 = new SQLDataException();
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException1.getMessage());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      String string1 = jsonMappingException_Reference0.toString();
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals("java.io.DataOutputStream[\"\"]", string1);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "U^@3`._U2:ljO=VM");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      System.setCurrentTimeMillis(3403L);
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("u2Ve8u*u!g6j$8", "com.fasterxml.jackson.databind.type.MapLikeType", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("com.fasterxml.jackson.databind.type.MapLikeType", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: u2Ve8u*u!g6j$8", sQLClientInfoException0.toString());
      assertEquals("u2Ve8u*u!g6j$8", sQLClientInfoException0.getMessage());
      
      Throwable throwable0 = jsonMappingException0.initCause(sQLClientInfoException0);
      assertNotNull(throwable0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("com.fasterxml.jackson.databind.type.MapLikeType", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: u2Ve8u*u!g6j$8", sQLClientInfoException0.toString());
      assertEquals("u2Ve8u*u!g6j$8", sQLClientInfoException0.getMessage());
      assertEquals("", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", throwable0.toString());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 3468);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(3468, jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(3468, jsonMappingException_Reference0.getIndex());
      assertEquals("java.lang.String[3468]", string0);
      
      String string1 = jsonMappingException0._buildMessage();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = jsonMappingException0.toString();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string2);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException jsonMappingException2 = defaultDeserializationContext_Impl0.weirdStringException("u2Ve8u*u!g6j$8", class0, "");
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotNull(jsonMappingException2);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotNull(jsonMappingException3);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(3468, jsonMappingException_Reference0.getIndex());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      
      JsonMappingException jsonMappingException4 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException4);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException4);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      String string3 = jsonMappingException4.getPathReference();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException4);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      String string4 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(dataOutputStream0, "", sQLDataException0);
      assertNotNull(jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertNotNull(list0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      String string0 = " for format ";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, " for format ");
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("UNKNOWN[?]", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(readerBasedJsonParser0, (String) null, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      String string1 = jsonMappingException1.toString();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(string1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A\n at [Source: (String)\"JSON\"; line: 1, column: 0]", string1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = jsonMappingException1.getPathReference();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(string2);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals("", string2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonMappingException1.getProcessor();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotNull(readerBasedJsonParser1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(8321, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertNotNull(string0);
      assertEquals("N/A", string0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("UNKNOWN[?]", string1);
      assertFalse(string1.equals((Object)string0));
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "a^cI9=S~7H");
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLDataException0, 681);
      assertNotNull(jsonMappingException_Reference1);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(681, jsonMappingException_Reference1.getIndex());
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      String string2 = jsonMappingException0.toString();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string2);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A (through reference chain: UNKNOWN[?]->UNKNOWN[?])", string2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotNull(jsonFactory3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotNull(jsonFactory4);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotNull(jsonFactory5);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory6 = jsonFactory5.enable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory4, jsonFactory6);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory2);
      assertSame(jsonFactory6, jsonFactory3);
      assertSame(jsonFactory6, jsonFactory5);
      assertNotNull(jsonFactory6);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertTrue(jsonFactory6.canParseAsync());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotNull(readerBasedJsonParser0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "JSON", sQLDataException0);
      assertNotNull(jsonMappingException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "Cannot update Map.Entry values");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Cannot update Map.Entry values", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(jsonMappingException1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Cannot update Map.Entry values", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      StringBuilder stringBuilder0 = new StringBuilder(1000);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = jsonMappingException1.getPathReference(stringBuilder0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(stringBuilder1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Cannot update Map.Entry values", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[\"Cannot update Map.Entry values\"]", stringBuilder0.toString());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[\"Cannot update Map.Entry values\"]", stringBuilder1.toString());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotNull(jsonFactory4);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotNull(jsonFactory5);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory6 = jsonFactory5.enable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory5);
      assertSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory3);
      assertSame(jsonFactory6, jsonFactory2);
      assertNotNull(jsonFactory6);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertTrue(jsonFactory6.canParseAsync());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory6);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, (String) null, (Throwable) sQLDataException0);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory6);
      assertNotNull(jsonMappingException0);
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "EuO@@$<eq");
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "JSON");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, ", generatorType=");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotNull(jsonFactory3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotNull(jsonFactory4);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertNotNull(jsonFactory5);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertTrue(jsonFactory5.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory6 = jsonFactory5.enable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory6);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory6, jsonFactory3);
      assertSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory2);
      assertSame(jsonFactory6, jsonFactory5);
      assertNotNull(jsonFactory6);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertTrue(jsonFactory6.canParseAsync());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "JSON", sQLDataException0);
      assertNotNull(jsonMappingException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "Cannot update Map.Entry values");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Cannot update Map.Entry values", jsonMappingException_Reference0.getFieldName());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      assertNotNull(jsonParserDelegate0);
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8321, jsonParserDelegate0.getFeatureMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) jsonParserDelegate0, "# |10_:oa1r!xw3B|");
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8321, jsonParserDelegate0.getFeatureMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Cannot update Map.Entry values", jsonMappingException_Reference0.getFieldName());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8321, jsonParserDelegate0.getFeatureMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8321, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = 91;
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference1);
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(91, jsonMappingException_Reference1.getIndex());
      
      jsonMappingException_Reference0._from = null;
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference((Object) null, "");
      assertNotNull(jsonMappingException_Reference2);
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("au#G@)|L#mp5ktu", sQLClientInfoException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("au#G@)|L#mp5ktu", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: au#G@)|L#mp5ktu", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(91, jsonMappingException_Reference1.getIndex());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("au#G@)|L#mp5ktu", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: au#G@)|L#mp5ktu", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference2));
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8195, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, charArray0.length);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "JSON");
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jsonMappingException1);
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8195, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, charArray0.length);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(2597, true, false, 53, 0, sQLWarning0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      SQLWarning sQLWarning1 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      sQLWarning0.setNextWarning((SQLWarning) null);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) dataTruncation0, 3456);
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("au(.Z@AeDx P<aBb", (-642));
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-642), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-642), jsonMappingException_Reference0.getIndex());
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      // Undeclared exception!
//      try { 
        jsonMappingException1._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      Class<PipedInputStream> class0 = PipedInputStream.class;
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class0, (KeyDeserializer) null);
      assertSame(simpleKeyDeserializers0, simpleKeyDeserializers1);
      assertSame(simpleKeyDeserializers1, simpleKeyDeserializers0);
      assertNotNull(simpleKeyDeserializers1);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleKeyDeserializers0, simpleKeyDeserializers1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleKeyDeserializers0, simpleKeyDeserializers1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.DatabindContext");
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleKeyDeserializers0, simpleKeyDeserializers1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.DatabindContext");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.DatabindContext", jsonMappingException_Reference0.getFieldName());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleKeyDeserializers0, simpleKeyDeserializers1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotNull(string0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.DatabindContext", jsonMappingException_Reference0.getFieldName());
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"com.fasterxml.jackson.databind.DatabindContext\"]", string0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]yfU--}%y,'w");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ]yfU--}%y,'w", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("]yfU--}%y,'w", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLRecoverableException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals("java.sql.SQLRecoverableException: ]yfU--}%y,'w", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("]yfU--}%y,'w", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLRecoverableException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleKeyDeserializers0, simpleKeyDeserializers1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotNull(jsonMappingException2);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("java.sql.SQLRecoverableException: ]yfU--}%y,'w", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("]yfU--}%y,'w", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      
      String string1 = jsonMappingException1.getMessage();
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(string1);
      assertEquals("java.sql.SQLRecoverableException: ]yfU--}%y,'w", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("]yfU--}%y,'w", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", string1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (Throwable) null);
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.getMessage());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "mw)hAm%v`:(", sQLTransientConnectionException0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertNotNull(string0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.getMessage());
      assertEquals("mw)hAm%v`:(", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0, "");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.getMessage());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      sQLInvalidAuthorizationSpecException1.setNextException(sQLNonTransientException0);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException1, jsonMappingException_Reference0);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.getMessage());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(2597, true, false, 53, 0, sQLWarning0);
      assertNotNull(dataTruncation0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      SQLWarning sQLWarning1 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning1);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      sQLWarning0.setNextWarning((SQLWarning) null);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      SQLWarning sQLWarning2 = new SQLWarning("Ae9T*", "au(.Z@AeDx P<aBb");
      assertNotNull(sQLWarning2);
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("Ae9T*", sQLWarning2.getMessage());
      assertEquals("java.sql.SQLWarning: Ae9T*", sQLWarning2.toString());
      assertEquals("au(.Z@AeDx P<aBb", sQLWarning2.getSQLState());
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      
      sQLWarning0.setNextWarning(sQLWarning2);
      assertNotSame(sQLWarning0, sQLWarning2);
      assertNotSame(sQLWarning2, sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("Ae9T*", sQLWarning2.getMessage());
      assertEquals("java.sql.SQLWarning: Ae9T*", sQLWarning2.toString());
      assertEquals("au(.Z@AeDx P<aBb", sQLWarning2.getSQLState());
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, "qR&!9BsH?w<+%<Y+JM");
      assertNotSame(sQLWarning0, sQLWarning2);
      assertNotNull(jsonMappingException0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      
      Class<PipedReader> class0 = PipedReader.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      IntNode intNode0 = new IntNode(0);
      assertNotNull(intNode0);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((short)0, intNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isDouble());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(0L, intNode0.longValue());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      
      Number number0 = intNode0.numberValue();
      assertNotNull(number0);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((short)0, intNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isDouble());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(0L, intNode0.longValue());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertEquals(0, number0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNumberException(number0, class0, "&.9<cfo");
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException1);
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((short)0, intNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isDouble());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(0L, intNode0.longValue());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException2);
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((short)0, intNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isDouble());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(0L, intNode0.longValue());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      String string0 = jsonMappingException0._buildMessage();
      assertNotSame(sQLWarning0, sQLWarning2);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotNull(string0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("(was java.sql.SQLWarning) (through reference chain: java.sql.SQLWarning[\"qR&!9BsH?w<+%<Y+JM\"])", string0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException3);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException3);
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((short)0, intNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isDouble());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(0L, intNode0.longValue());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("0");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("0", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 0", sQLDataException0.toString());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((Object) "0", "HgF1JcX.n2R%WfE^u");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "<F52q\u0006P9HN");
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("N@w");
      assertNotNull(sQLDataException0);
      assertEquals("N@w", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: N@w", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("N@w", "");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string1);
      
      jsonMappingException_Reference0.setIndex(1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(1, jsonMappingException_Reference0.getIndex());
      
      // Undeclared exception!
//      try { 
        MockURL.openStream((URL) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = 91;
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference1);
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(91, jsonMappingException_Reference1.getIndex());
      
      jsonMappingException_Reference0._from = null;
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = 63;
      assertEquals(63, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "");
      assertNotNull(jsonMappingException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(jsonMappingException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.JsonMappingException: ", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      String string1 = "^;?Dx^l$8 G";
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string1 = " (through reference chain: ";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0, " (through reference chain: ");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(" (through reference chain: ", jsonMappingException_Reference0.getFieldName());
      
      String string2 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string2);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(" (through reference chain: ", jsonMappingException_Reference0.getFieldName());
      assertEquals("java.io.CharArrayWriter[\" (through reference chain: \"]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 1;
      jsonMappingException_Reference0.setIndex(934);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals(" (through reference chain: ", jsonMappingException_Reference0.getFieldName());
      assertEquals(934, jsonMappingException_Reference0.getIndex());
      
      // Undeclared exception!
//      try { 
        MockURL.openStream((URL) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      assertNotNull(jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath((Object) "", "HgF1JcX.n2R%WfE^u");
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals("", string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "<F52q\u0006P9HN");
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UNKNOWN[?]");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "UNKNOWN[?]");
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNull(object0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      MockFile mockFile0 = new MockFile("UNKNOWN[?]");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      assertNotNull(iOContext0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("UNKNOWN[?]", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("UNKNOWN[?]", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(11L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(11, mockFileInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AUTO_DETECT_FIELDS");
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1880, objectMapper0, mockFileOutputStream0, byteArray0, (byte)0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1880, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("UNKNOWN[?]", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("UNKNOWN[?]", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(11L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(11, mockFileInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(3, byteArray0.length);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1880, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(1880, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("UNKNOWN[?]", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("UNKNOWN[?]", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(11L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(11, mockFileInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(3, byteArray0.length);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator1, "UNKNOWN[?]");
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonMappingException0);
      assertEquals(3, byteArray0.length);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      String string1 = jsonMappingException0.toString();
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1880, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(1880, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("UNKNOWN[?]", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("UNKNOWN[?]", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(11L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(11, mockFileInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: UNKNOWN[?]", string1);
      assertEquals(3, byteArray0.length);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)4, (byte)54, (byte)0, (byte)35}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, (byte)54);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)4, (byte)54, (byte)0, (byte)35}, byteArray0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(54, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (Throwable) null);
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "mw)tAm%v`:(", sQLTransientConnectionException0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertNotNull(string0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("mw)tAm%v`:(", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("mw)tAm%v`:(");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8201, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, (String) null, (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8201, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'G';
      charArray0[2] = '[';
      charArray0[3] = 'N';
      charArray0[4] = '=';
      BigDecimal bigDecimal0 = null;
//      try {
        bigDecimal0 = new BigDecimal(charArray0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer((-300));
      assertNotNull(integer0);
      assertEquals((-300), (int)integer0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "{PGNLm";
      SQLException sQLException0 = new SQLException("{PGNLm");
      assertNotNull(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: {PGNLm", sQLException0.toString());
      assertEquals("{PGNLm", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("{PGNLm", sQLException0);
      assertNotNull(jsonMappingException0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: {PGNLm", sQLException0.toString());
      assertEquals("{PGNLm", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "0", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: {PGNLm", sQLException0.toString());
      assertEquals("{PGNLm", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Integer integer0 = new Integer(41);
      assertNotNull(integer0);
      assertEquals(41, (int)integer0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(integer0);
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, (Map<String, JsonNode>) null);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      
      // Undeclared exception!
//      try { 
        objectReader0.treeAsTokens(objectNode0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertNotNull(string0);
      assertEquals("N/A", string0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, (String) null);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException jsonMappingException2 = new JsonMappingException("N/A", sQLDataException0);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      
      String string1 = jsonMappingException2.getPathReference();
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotNull(string1);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals("", string1);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(212);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = "m`6P|_5s%~B.f>8";
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      jsonMappingException_Reference0.setDescription("m`6P|_5s%~B.f>8");
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setIndex(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pipedInputStream0);
      assertNotNull(jsonMappingException_Reference1);
      assertEquals(0, pipedInputStream0.available());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
//      try { 
        jsonFactory1.createParser((InputStream) pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      assertNotNull(sQLTransientException0);
      assertEquals("", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, sQLTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) pipedWriter0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      String string0 = "SO9e)";
      String string1 = ";{{[]+3A\\4}4a";
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException(";{{[]+3A\u0004}4a", class0, "SO9e)");
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotNull(jsonMappingException0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      sQLTransactionRollbackException0.printStackTrace();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "SO9e)", (Throwable) sQLTransactionRollbackException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(jsonMappingException1);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0);
      assertNotNull(inputStreamReader0);
      assertFalse(fileDescriptor0.valid());
      
      int int0 = 35;
      boolean boolean0 = inputStreamReader0.ready();
      assertFalse(fileDescriptor0.valid());
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException2 = defaultDeserializationContext_Impl0.weirdStringException("|`E=_K4r", class0, "|`E=_K4r");
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotNull(jsonMappingException2);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      
//      try { 
        fileDescriptor0.sync();
//        fail("Expecting exception: SyncFailedException");
      
//      } catch(SyncFailedException e) {
//         //
//         // sync failed
//         //
//         verifyException("java.io.FileDescriptor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._fieldName = "[-)|-Tx{Es'9ZFoY.z0";
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("[-)|-Tx{Es'9ZFoY.z0", jsonMappingException_Reference0.getFieldName());
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("[-)|-Tx{Es'9ZFoY.z0", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), int0);
      
      String string0 = "`uj;y4L1\\0&L4]f";
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      assertNotNull(tokenFilterContext0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertFalse(tokenFilterContext0.inArray());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertNotNull(byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      String string1 = byteQuadsCanonicalizer0.toString();
      assertNotNull(string1);
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", string1);
      assertFalse(string1.equals((Object)string0));
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = null;
//      try {
        uTF8StreamJsonParser0 = new UTF8StreamJsonParser((IOContext) null, (-1), (InputStream) null, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (byte)93, (byte)93, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("8RA.", "8RA.");
      assertNotNull(sQLTransientException0);
      assertEquals("8RA.", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("8RA.", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 8RA.", sQLTransientException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Cannot construct SimpleType for an array (class: ", "Cannot construct SimpleType for an array (class: ", 1817, hashMap0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("8RA.", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("8RA.", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 8RA.", sQLTransientException0.toString());
      assertEquals("Cannot construct SimpleType for an array (class: ", sQLClientInfoException0.getSQLState());
      assertEquals("Cannot construct SimpleType for an array (class: ", sQLClientInfoException0.getMessage());
      assertEquals(1817, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: Cannot construct SimpleType for an array (class: ", sQLClientInfoException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "Cannot construct SimpleType for an array (class: ", (Throwable) sQLClientInfoException0);
      assertNotNull(jsonMappingException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("8RA.", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("8RA.", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 8RA.", sQLTransientException0.toString());
      assertEquals("Cannot construct SimpleType for an array (class: ", sQLClientInfoException0.getSQLState());
      assertEquals("Cannot construct SimpleType for an array (class: ", sQLClientInfoException0.getMessage());
      assertEquals(1817, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: Cannot construct SimpleType for an array (class: ", sQLClientInfoException0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      MockFile mockFile0 = new MockFile("UNKNOWN[?]");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature1, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((OutputStream) pipedOutputStream0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(543, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "com.fasterxml.jackson.databind.type.TypeBindings");
      assertNotNull(jsonMappingException0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(filteringGeneratorDelegate0, "");
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.printStackTrace();
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      String string0 = jsonMappingException0.getPathReference();
      assertNotNull(string0);
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals("", string0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertNotNull(list0);
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((Object) null, 91);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withDeserializerModifier((BeanDeserializerModifier) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null modifier
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) "", "HgF1JcX.n2R%WfE^u");
      jsonMappingException_Reference0.writeReplace();
      SQLDataException sQLDataException1 = new SQLDataException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(jsonMappingException0);
      jsonMappingException_Reference0.toString();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(batchUpdateException0, (-1201));
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference2);
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      
      jsonMappingException_Reference1.setFieldName("");
      JsonMappingException.Reference jsonMappingException_Reference3 = new JsonMappingException.Reference("HgF1JcX.n2R%WfE^u", "");
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLDataException) (through reference chain: java.lang.String[\"HgF1JcX.n2R%WfE^u\"]->java.io.DataOutputStream[\"\"])", batchUpdateException0.getMessage());
      assertEquals((-1201), jsonMappingException_Reference1.getIndex());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLDataException) (through reference chain: java.lang.String[\"HgF1JcX.n2R%WfE^u\"]->java.io.DataOutputStream[\"\"])", batchUpdateException0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = new JsonMappingException(filteringGeneratorDelegate0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      sQLClientInfoException0.spliterator();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 91, sQLClientInfoException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = new ShortNode((short)1);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "UNKNOWN[?]", (Throwable) sQLClientInfoException1);
      jsonMappingException1.prependPath((Object) sQLDataException0, "LU|ld[vl)=");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("UNKNOWN[?]");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = jsonMappingException2.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      jsonMappingException2.getProcessor();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "LU|ld[vl)=", (int) (short)1);
      MockIOException mockIOException0 = new MockIOException("@$z5#[z-_J;:Z{2m", sQLClientInfoException0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (JsonLocation) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      String string0 = "";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("|M(=o25EIljCqD u", class0, "");
      jsonMappingException0.prependPath((Object) deserializerFactory0, 3099);
      jsonMappingException0.getProcessor();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "|M(=o25EIljCqD u");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0);
      jsonMappingException_Reference0.setFieldName("SETTER");
      jsonMappingException1.getProcessor();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "|M(=o25EIljCqD u");
      jsonMappingException0.getPath();
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException_Reference0._index = 3099;
      jsonMappingException3.getLocalizedMessage();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(15);
      // Undeclared exception!
//      try { 
        placeholderForType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(2597, true, false, 53, 0, sQLWarning0);
      dataTruncation0.getNextWarning();
      sQLWarning0.setNextWarning((SQLWarning) null);
      SQLWarning sQLWarning1 = new SQLWarning("Ae9T*", "au(.Z@AeDx P<aBb");
      sQLWarning0.setNextWarning(sQLWarning1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, "qR&!9BsH?w<+%<Y+JM");
      jsonMappingException0.printStackTrace();
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.sql.SQLWarning[\"qR&!9BsH?w<+%<Y+JM\"]", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0.getPathReference();
      jsonMappingException1.getLocalizedMessage();
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile("", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      filteringParserDelegate0.enable(jsonParser_Feature0);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("$Xsf<33&a*(j", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = ", static serializer of type ";
      int int0 = 8000;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", static serializer of type ", ", static serializer of type ", 8000);
      sQLTimeoutException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, ", static serializer of type ", (Throwable) sQLTimeoutException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._index = 91;
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._from = null;
      jsonMappingException_Reference0._index = 63;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(1);
      // Undeclared exception!
//      try { 
        MockURL.openStream((URL) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.util.AccessPattern", "", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "com.fasterxml.jackson.databind.util.AccessPattern", (Throwable) sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 2321);
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<DataOutputStream> class0 = DataOutputStream.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getAttribute(jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }
}
