/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 05:13:27 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      Class<HashMap> class0 = HashMap.class;
      Class<SequenceInputStream> class1 = SequenceInputStream.class;
      typeFactory0.constructMapType(class0, class1, class1);
      byte[] byteArray0 = null;
      int int0 = 1844;
      int int1 = 4636;
      ByteArrayInputStream byteArrayInputStream0 = null;
//      try {
        byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<SequenceInputStream> class1 = SequenceInputStream.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withValueHandler((Object) null);
      MapType mapType2 = mapType1.withTypeHandler(mapType0);
//      try { 
        objectMapper1._convert(jsonFactory0, mapType2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"characterEscapes\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = new Byte((byte) (-46));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(byte0, class0, "j8n'S3O{C:KK5_f6");
      jsonMappingException0.getMessage();
      Boolean boolean0 = new Boolean("j8n'S3O{C:KK5_f6");
      jsonMappingException0.prependPath((Object) jsonMappingException0, "j8n'S3O{C:KK5_f6");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(valueInstantiators_Base0, "Cannot deserialize value of type `java.io.BufferedInputStream` from number -46: j8n'S3O{C:KK5_f6");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "Cannot deserialize value of type `java.io.BufferedInputStream` from number -46: j8n'S3O{C:KK5_f6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      MismatchedInputException mismatchedInputException0 = MismatchedInputException.from((JsonParser) null, class0, "Psf`{yu((g");
      mismatchedInputException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        mismatchedInputException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "+0000", (Throwable) mockIOException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Cannot pass null fieldName");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null, batchUpdateException0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
      
      jsonMappingException0.getPath();
      jsonMappingException0.getPathReference((StringBuilder) null);
      String string1 = jsonMappingException0.getLocalizedMessage();
      String string2 = jsonMappingException0.getPathReference();
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = new Byte((byte) (-46));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("java.io.BufferedInputStream[?]");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException_Reference0.getDescription();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException0.getMessage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonMappingException0.prependPath((Object) null, "");
      jsonMappingException0.getMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      MockFile mockFile0 = new MockFile(" (through reference chain: UNKNOWN[\"\"])");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
//      try { 
        jsonFactory2.createParser((InputStream) mockFileInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      StringBuilder stringBuilder0 = new StringBuilder("f,");
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference(stringBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory0, 0);
      jsonMappingException_Reference0.getDescription();
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      URI uRI0 = MockURI.aFileURI;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "UO&PE#<Wy");
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      JsonMappingException.from(serializerProvider0, "UO&PE#<Wy", (Throwable) sQLNonTransientConnectionException1);
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, (-1), (-1158));
      JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.JsonFactory[0]");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1158));
      assertFalse(placeholderForType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0.toString();
      jsonMappingException0.getCause();
      jsonMappingException0.printStackTrace();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException1);
      jsonMappingException0.getLocalizedMessage();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2415);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      stringBuilder0.append(0L);
      StringBuilder stringBuilder2 = jsonMappingException2.getPathReference(stringBuilder1);
      jsonMappingException2._appendPathDesc(stringBuilder2);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonParserSequence0, 2415);
      assertNotSame(jsonMappingException0, jsonMappingException3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLNonTransientConnectionException0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null, (Throwable) sQLDataException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = ')';
      charArray0[2] = 'v';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, 91, (-11));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", sQLDataException0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: JSON\n at [Source: UNKNOWN; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, ",;5iR'Iu\"`Jn:E(9?o", ",;5iR'Iu\"`Jn:E(9?o");
      jsonMappingException0.getPathReference();
      SQLDataException sQLDataException0 = new SQLDataException("", ",;5iR'Iu\"`Jn:E(9?o", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException1.getMessage();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "/@[{", (Throwable) jsonMappingException0);
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("(was java.sql.SQLDataException) (through reference chain: UNKNOWN[?])", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory0.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, (-1158), 3);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "JSON", jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException1);
      String string0 = jsonMappingException2._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) null);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.from(jsonParser0, (String) null);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Byte byte0 = new Byte((byte) (-66));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(byte0, class0, "PHR\"_&QQ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(valueInstantiators_Base0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, (byte) (-66));
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) "Cannot deserialize value of type `java.io.BufferedInputStream` from number -66: PHR\"_&QQ (through reference chain: com.fasterxml.jackson.databind.deser.ValueInstantiators$Base[?])", "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      mockFile0.getCanonicalFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getCanonicalPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      mockFile0.getCanonicalFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      mockFile0.getCanonicalPath();
      mockFile0.getAbsoluteFile();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "->", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      mockFile0.getCanonicalFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      mockFile0.getCanonicalPath();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("", class0, ",)%#!HN");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/experiment/com.fasterxml.jackson.databind.JsonMappingException$Reference", "->", invalidFormatException0);
      sQLSyntaxErrorException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(65);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "T{eV~4`/.GO2uWrM~?");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Byte byte0 = new Byte((byte) (-66));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(byte0, class0, "PHR\"_&QQ");
      jsonMappingException0.prependPath((Object) defaultDeserializationContext_Impl0, 2071);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockFile mockFile0 = new MockFile((File) null, "PHR\"_&QQ");
      File file0 = MockFile.createTempFile("R!pFD", "R!pFD", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createParser((char[]) null, (-1158), 3);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "JSON", jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<LineNumberReader> class0 = LineNumberReader.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(javaType0, "Unexpected IOException (of type %s): %s", ",;5iR'Iu\"`Jn:E(9?o");
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "hQhCMMW)0");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, false);
      InvalidFormatException invalidFormatException0 = null;
//      try {
        invalidFormatException0 = new InvalidFormatException(filteringParserDelegate0, "", "hQhCMMW)0", class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "6*ET#MJ&,", "6*ET#MJ&,");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Byte byte0 = new Byte((byte) (-66));
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("UNKNOWN[?]", "nX GCN");
      jsonMappingException_Reference0.getDescription();
      SQLWarning sQLWarning0 = new SQLWarning("nX GCN");
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference2);
      URI uRI0 = MockURI.aFileURI;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UNKNOWN[?]", "UNKNOWN[?]");
      sQLNonTransientConnectionException0.getSuppressed();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) "nX GCN", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getLocalizedMessage();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.JsonMappingException");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[7] = (byte) (-50);
      byteArray0[2] = (byte)42;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AYqX");
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-106);
      mockFileOutputStream0.write(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "nX GCN");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(dataOutputStream0, class0);
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) "nX GCN", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("(was java.sql.SQLTransientConnectionException) (through reference chain: UNKNOWN[?]->UNKNOWN[?])", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<LineNumberReader> class0 = LineNumberReader.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings.createIfNeeded(class0, javaTypeArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter(1180);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      DupDetector dupDetector0 = DupDetector.rootDetector(jsonGenerator0);
      DupDetector dupDetector1 = dupDetector0.child();
      dupDetector1.child();
      dupDetector1.findLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      assertNotNull(jsonMappingException0);
      
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectReader0, byteQuadsCanonicalizer1, byteArray0, 1850, 788, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":", "Gkqa  kD<0>!T2G8");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "Gkqa  kD<0>!T2G8", (Throwable) sQLNonTransientConnectionException0);
      MockFile mockFile0 = new MockFile("Gkqa  kD<0>!T2G8", ")if^}");
      mockFile0.setExecutable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "UNKNOWN");
      jsonMappingException0.getMessage();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader1, pipedOutputStream0, byteArray0, (byte)16, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(2448, (-1681));
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "UNKNOWN", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectReader0, byteQuadsCanonicalizer1, byteArray0, 1850, 788, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5 7", "Gkqa  kD<0>!T2G8");
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "Gkqa  kD<0>!T2G8", (Throwable) sQLNonTransientConnectionException0);
      MockFile mockFile0 = new MockFile("Gkqa  kD<0>!T2G8", ")if}");
      MockFile mockFile1 = new MockFile(mockFile0, "UNKNOWN");
      mockFile1.getAbsolutePath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteQuadsCanonicalizer1, 3);
      jsonMappingException_Reference0.getDescription();
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "+34");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"+34\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(")", 957);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[957]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ", ": ");
      mockFile0.getAbsolutePath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, ": ");
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(": ", 0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "/experiment/: /: ");
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, 80);
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Byte byte0 = new Byte((byte) (-66));
      String string0 = "nX GCN";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("nX GCN", "nX GCN");
      jsonMappingException_Reference0.getDescription();
      SQLWarning sQLWarning0 = new SQLWarning("nX GCN");
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      // Undeclared exception!
//      try { 
        mockFileOutputStream0.write(byteArray0, (-1620), 164);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1620
//         //
//         verifyException("org.evosuite.runtime.vfs.VFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0.prependPath((Object) mockIOException0, ", static serializer of type ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, ",;5iR'Iu\"`Jn:E(9?o", ",;5iR'Iu\"`Jn:E(9?o");
      jsonMappingException0.getPathReference();
      SQLDataException sQLDataException0 = new SQLDataException(": ", ",;5iR'Iu\"`Jn:E(9?o", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) simpleAbstractTypeResolver0, "n{N&}_c(RQzQ-bCj");
      String string0 = jsonMappingException1.getMessage();
      assertEquals(":  (through reference chain: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver[\"n{N&}_c(RQzQ-bCj\"])", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "e");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      String string0 = "[]";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "[]");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1000);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[]");
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      StringBuilder stringBuilder3 = jsonMappingException0.getPathReference(stringBuilder2);
      // Undeclared exception!
//      try { 
        stringBuilder3.insert((-64), (double) 1000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: -64
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1), pipedInputStream0, objectReader0, byteQuadsCanonicalizer1, byteArray0, 1850, 788, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":");
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "Gkqa  kD<0>!T2G8", (Throwable) sQLNonTransientConnectionException0);
      MockFile mockFile0 = new MockFile("Gkqa  kD<0>!T2G8", ")if^}");
      MockFile mockFile1 = new MockFile(mockFile0, "UNKNOWN");
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "+34");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"+34\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(485);
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.from((JsonParser) null, "", (Throwable) mockIOException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, deserializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(jsonMappingException_Reference0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("C[Pr|~t`)+LPL=<4b9", (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("C[Pr|~t`)+LPL=<4b9", jsonLocation0, sQLNonTransientException0);
      jsonMappingException0._buildMessage();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "C[Pr|~t`)+LPL=<4b9\n at [Source: UNKNOWN; line: -1, column: -1]", (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)120;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)120, (-1485));
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser1, "XrS^[d[Nq");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      String string1 = "com.fasterxml.jackson.databind.JsonMappingException";
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, (JavaType) null, jsonToken0, "com.fasterxml.jackson.databind.JsonMappingException");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex((-961));
      jsonMappingException_Reference0.getDescription();
      assertEquals((-961), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (JsonMappingException.Reference) null);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(3985);
      jsonMappingException_Reference0.setIndex(1609);
      jsonMappingException_Reference0._index = 0;
      jsonMappingException_Reference0.setIndex(2816);
      assertEquals(2816, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      StringReader stringReader0 = new StringReader("V7T~_^NzV");
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = '<';
      charArray0[2] = '7';
      charArray0[3] = 'D';
      stringReader0.read(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(stringReader0, 2816);
      JsonLocation jsonLocation0 = new JsonLocation("V7T~_^NzV", (-3093L), (-1L), 0, 3985);
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("}3Jp[wotu&WEw1%qh", jsonLocation0);
      jsonMappingException0.prependPath((Object) "(String)\"V7T~_^NzV\"", 3985);
      jsonMappingException0.getPath();
      jsonMappingException_Reference2.setFieldName((String) null);
      assertEquals(2816, jsonMappingException_Reference2.getIndex());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, jsonLocation0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("N/A\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      int int0 = 60;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(60);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('J');
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(charArrayWriter1, class0);
      jsonMappingException0.getProcessor();
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      Class<FilteringParserDelegate> class2 = FilteringParserDelegate.class;
      // Undeclared exception!
//      try { 
        simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends JsonParserDelegate>) class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot add mapping from class com.fasterxml.jackson.core.util.JsonParserDelegate since it is not abstract
//         //
//         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(")^Ts7 w;");
      mockPrintStream0.println(0.0F);
      mockPrintStream0.format(")^Ts7 w;", (Object[]) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "ScSE}wYOmA364f~)~kG");
      jsonMappingException0.getProcessor();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "ScSE}wYOmA364f~)~kG");
      // Undeclared exception!
//      try { 
        charArrayWriter1.append((CharSequence) null, 0, (-191));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, ",;5iR'Iu\"`Jn:E(9?o", ",;5iR'Iu\"`Jn:E(9?o");
      jsonMappingException0.getPathReference();
      SQLDataException sQLDataException0 = new SQLDataException(": ", ",;5iR'Iu\"`Jn:E(9?o", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) simpleAbstractTypeResolver0, "n{N&}_c(RQzQ-bCj");
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<V6*8K~#~=", "<V6*8K~#~=");
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      mockFile0.getCanonicalFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      mockFile0.getCanonicalPath();
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "->", (Throwable) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      jsonMappingException1.getPath();
      InputStreamReader inputStreamReader0 = null;
//      try {
        inputStreamReader0 = new InputStreamReader((InputStream) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Reader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Byte byte0 = new Byte((byte) (-66));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(byte0, class0, "PHR\"_&QQ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(valueInstantiators_Base0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) null, "Cannot deserialize value of type `java.io.BufferedInputStream` from number -66: PHR\"_&QQ (through reference chain: com.fasterxml.jackson.databind.deser.ValueInstantiators$Base[?])");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("Cannot deserialize value of type `java.io.BufferedInputStream` from number -66: PHR\"_&QQ (through reference chain: com.fasterxml.jackson.databind.deser.ValueInstantiators$Base[?]->UNKNOWN[\"Cannot deserialize value of type `java.io.BufferedInputStream` from number -66: PHR\"_&QQ (through reference chain: com.fasterxml.jackson.databind.deser.ValueInstantiators$Base[?])\"]->com.fasterxml.jackson.databind.deser.ValueInstantiators$Base[?])", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was org.evosuite.runtime.mock.java.io.MockIOException) (through reference chain: UNKNOWN[?])", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("%");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      ObjectMapper objectMapper0 = null;
//      try {
        objectMapper0 = new ObjectMapper((ObjectMapper) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      jsonMappingException0.getPathReference();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null, (Throwable) sQLNonTransientConnectionException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, (String) null, (Throwable) jsonMappingException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      dupDetector0.findLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "[PreAndSuffixTransformer('", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      DupDetector dupDetector1 = dupDetector0.child();
      dupDetector1.findLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "[PreAndSuffixTransformer('", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = new Byte((byte) (-79));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      Double double0 = new Double((byte) (-46));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(double0, class0, "?S&jy.=?o(PI,vn1xKq");
      jsonMappingException0.getMessage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonMappingException0.prependPath((Object) class0, "PHR\"_&QQ");
      jsonMappingException0.getMessage();
      LongNode longNode0 = LongNode.valueOf(0L);
      jsonMappingException0.prependPath((Object) longNode0, "lAL#[{YUTi@s'ao;");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("14p&C+v_.1xR'P");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[\"14p&C+v_.1xR'P\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getLocalizedMessage();
      String string0 = "com.fasterxml.jackson.databind.JsonMappingException";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.JsonMappingException");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-106);
      mockFileOutputStream0.write(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "nX GCN");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      byte[] byteArray1 = new byte[0];
//      try { 
        mockFileOutputStream0.write(byteArray1, 1940, 1410);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("java.lang.String[?]");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      jsonMappingException0.prependPath((Object) jsonParser0, 2440);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("0s@,)1KixQ0mQ[", jsonLocation0, (Throwable) null);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: 0s@,)1KixQ0mQ[\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation("2;NF~vS-,#M$V");
      tokenFilterContext0.toString();
      SQLWarning sQLWarning0 = new SQLWarning("|. ]f.1 [QV9>!8V", (String) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("2;NF~vS-,#M$V", jsonLocation0, jsonMappingException0);
      jsonMappingException0.getMessage();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      jsonMappingException_Reference0._fieldName = "|. ]f.1 [QV9>!8V";
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null, (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getFieldName();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JavaType javaType0 = null;
      // Undeclared exception!
//      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 50);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "2DM~|.hj9g");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, "/:UakdH-}yn0dQdvM?");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) sQLRecoverableException0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      Throwable throwable0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 0, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException1, (Object) sQLInvalidAuthorizationSpecException0, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<SequenceInputStream> class1 = SequenceInputStream.class;
      Class<MockRandomAccessFile> class2 = MockRandomAccessFile.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      mapType0.withValueHandler((Object) null);
      MapType mapType1 = mapType0.withTypeHandler(sQLWarning0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("5qt4d");
//      try { 
        objectMapper1._convert(jsonMappingException_Reference0, mapType1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot find a (Map) Key deserializer for type [simple type, class java.io.SequenceInputStream]
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("uowO");
      jsonMappingException_Reference0.setDescription("uowO");
      JsonMappingException jsonMappingException0 = new JsonMappingException("uowO");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("ALWAYS");
      jsonMappingException_Reference0.getDescription();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      jsonMappingException_Reference0._from = (Object) byteArrayOutputStream0;
      jsonMappingException_Reference0.setFieldName("IYsIn6tPe");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._index = 0;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("NZ}xDXF*");
      jsonMappingException_Reference0.getIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException("ALWAYS", class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Internal error: total len assumed to be ", 1349, jsonMappingException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }
}
