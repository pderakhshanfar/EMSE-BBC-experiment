/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:04:00 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vfmSu#n");
      LongNode longNode0 = new LongNode((-94L));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) longNode0, "");
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientConnectionException0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, (String) null, (Throwable) sQLNonTransientConnectionException0);
      jsonMappingException1.getMessage();
      jsonMappingException1.toString();
      // Undeclared exception!
//      try { 
        jsonMappingException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON");
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 41;
      intArray0[1] = 41;
      intArray0[2] = (-2038);
      intArray0[3] = 41;
      intArray0[4] = 41;
      intArray0[5] = 41;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "t\"su", 41, intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      String string0 = "II}u\\_n.:=#aFyv&?";
      MockFile mockFile0 = new MockFile("II}u_n.:=#aFyv&?", "[Hz@s3HDd");
      File file0 = MockFile.createTempFile("II}u_n.:=#aFyv&?", "[Hz@s3HDd", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockPrintWriter0, "[Hz@s3HDd");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, 2);
      jsonMappingException1.prependPath(jsonMappingException_Reference1);
      // Undeclared exception!
//      try { 
        jsonMappingException1._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "h|v[lCbOPif!psN>~", sQLTransactionRollbackException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLTransactionRollbackException0.addSuppressed(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLTransientConnectionException0);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLTransientConnectionException0);
      System.setCurrentTimeMillis(0L);
      jsonMappingException1.getPathReference();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "WG", (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null, sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON", (Throwable) jsonMappingException1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLDataException sQLDataException0 = new SQLDataException("JSON");
      StringReader stringReader0 = new StringReader(".{");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) stringReader0, "JSON");
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("P>^,o3C?ZiT:pj");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.node.NodeCursor$ObjectCursor", (Throwable) sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) jsonMappingException0, "P>^,o3C?ZiT:pj");
      jsonMappingException_Reference0.setFieldName("P>^,o3C?ZiT:pj");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) "P>^,o3C?ZiT:pj", "");
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      jsonMappingException1.prependPath(jsonMappingException_Reference2);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) jsonMappingException4, 262144);
      // Undeclared exception!
//      try { 
        jsonMappingException2.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "", sQLNonTransientConnectionException0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" (through reference chain: ", sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer", (String) null, hashMap0, sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "JSON", sQLClientInfoException0);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) objectMapper0, "");
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLTimeoutException0);
      jsonMappingException0._buildMessage();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 76;
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 76);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLDataException sQLDataException0 = new SQLDataException("JSON");
      StringReader stringReader0 = new StringReader(".{");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) stringReader0, "JSON");
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("P>^,o3C?ZiT:pj");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.node.NodeCursor$ObjectCursor", (Throwable) sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientConnectionException0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StringBuilder stringBuilder0 = new StringBuilder("com.fasterxml.jackson.databind.node.NodeCursor$ObjectCursor");
      jsonMappingException1.getPathReference(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "4Vx(";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4Vx(");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException(" f90&H0>i", " f90&H0>i", sQLClientInfoException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLClientInfoException0.setNextException(sQLDataException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, " f90&H0>i", sQLClientInfoException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
//      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      jsonMappingException_Reference0.getDescription();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I\"Zz:?", "7*snE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(45);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      LongNode longNode0 = new LongNode(45);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(longNode0, 500);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.Reference jsonMappingException_Reference3 = new JsonMappingException.Reference((Object) null, 500);
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference3);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1481), 500);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference4 = new JsonMappingException.Reference(inputStreamReader0);
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLDataException sQLDataException0 = new SQLDataException("JSON");
      StringReader stringReader0 = new StringReader("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "", "");
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) jsonMappingException0, "JSON");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, 39);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = new JsonMappingException("");
      Throwable throwable0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference2 = null;
//      try {
        jsonMappingException_Reference2 = new JsonMappingException.Reference(jsonMappingException2, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      int int0 = (-1496);
      Throwable throwable0 = null;
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) sQLWarning0, "X");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "l^^\\a:1z*";
      jsonMappingException_Reference0._desc = "l^^a:1z*";
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException_Reference0.setIndex(1112);
      int int0 = (-1196);
      jsonMappingException_Reference0.setIndex((-1196));
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "l^^a:1z*");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-859));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1196), (Reader) null, objectMapper0, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      readerBasedJsonParser0.enable(jsonParser_Feature0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      StringReader stringReader0 = new StringReader("JSON");
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "JSON");
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonParser jsonParser0 = null;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "X", (-1496));
      sQLSyntaxErrorException0.printStackTrace();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3716);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) charArrayWriter0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 4);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "X");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-2227);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", "UNKNOWN", (-2227));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("l?>[-", (String) null, 34, sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "ar(4_c+cJ?0h", (-1496));
      sQLSyntaxErrorException0.printStackTrace();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1225);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "X", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "wNzC`?dSjSR~70QP,";
      jsonMappingException_Reference0.setFieldName("<JU: -");
      jsonMappingException0.prependPath(object0, 0);
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0._desc = "<JU: -";
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "java.lang.Object[\"\"]", "<JU: -");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("<JU: -", 0);
      jsonMappingException1.prependPath(jsonMappingException_Reference1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "<JU: -");
      jsonMappingException0._appendPathDesc(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-859));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1196), (Reader) null, objectMapper0, charsToNameCanonicalizer1);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("a<UYyg", sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("a<UYyg", sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) "a<UYyg", "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultSerializerProvider defaultSerializerProvider0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "JSON");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D38bbr;&b", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "X", (-1496));
      sQLSyntaxErrorException0.printStackTrace();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3716);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) charArrayWriter0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 4);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "ZtA~|>Q,\" qmM79?5", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-859));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1196), (Reader) null, objectMapper0, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "y");
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer");
      jsonMappingException_Reference0._from = (Object) "com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer";
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'S';
      charArray0[2] = 'r';
      charArray0[3] = 'o';
      charArray0[4] = 'd';
      charArray0[5] = '&';
      charArray0[6] = '(';
      jsonFactory1.createParser(charArray0, (-2149), (-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0);
      jsonMappingException_Reference0.setIndex((byte)93);
      byteArray0[1] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, ":WR9uoO*kc");
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)29, 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, (-2445));
      jsonMappingException_Reference0.setIndex((byte)53);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put(":H7R~6!dU)~~Xk*pd@", (-2851));
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = objectNode0.findValuesAsText("b@Y(}6NsPyJC~WFzAaN", (List<String>) stack0);
      ObjectNode objectNode2 = objectNode1.remove((Collection<String>) list0);
      ArrayNode arrayNode0 = objectNode2.withArray("b@Y(}6NsPyJC~WFzAaN");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "b@Y(}6NsPyJC~WFzAaN");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (-640));
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.getDescription();
      System.setCurrentTimeMillis((-640));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PipedOutputStream> class0 = PipedOutputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-350), objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(3, (-1076));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&>5", (String) null, 0, sQLDataException0);
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) sQLSyntaxErrorException0, "gvWP~>oyXKPS");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0);
      jsonMappingException_Reference0._fieldName = null;
      jsonMappingException_Reference0.setFieldName("Unsuitable method (");
      jsonMappingException1.getPath();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("array");
      Object[] objectArray0 = new Object[3];
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      mockPrintWriter0.print(charArray0);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("teFUmdY La,Mu0-\"$", objectArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, 0);
      jsonMappingException_Reference0.toString();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      jsonMappingException0.prependPath((Object) "array", 0);
      jsonMappingException_Reference0.getDescription();
      int int0 = JsonMappingException.MAX_REFS_TO_LIST;
      jsonMappingException_Reference0.getIndex();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.evosuite.runtime.mock.java.io.MockPrintWriter[0]", "org.evosuite.runtime.mock.java.io.MockPrintWriter[0]", 0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "UNKNOWN", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+E");
      JsonMappingException jsonMappingException0 = new JsonMappingException("K2EH14v,Xj$", sQLTimeoutException0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParserSequence0, "X");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 2411);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "K2EH14v,Xj$", (-1642));
      JsonMappingException.from(serializerProvider0, "->", (Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "K2EH14v,Xj$";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+E");
      JsonMappingException jsonMappingException0 = new JsonMappingException("K2EH14v,Xj$", sQLTimeoutException0);
      JsonParser jsonParser0 = null;
      JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      IOContext iOContext0 = null;
      int int0 = 2023;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
//      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-484));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe size <= 0
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0._processor = null;
      jsonMappingException0.getCause();
      jsonMappingException0.getPathReference();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (-3249));
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex((-873));
      jsonMappingException_Reference0.getFieldName();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)29, 0);
      assertEquals(8, byteArray0.length);
      assertEquals((-21), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte) (-6), (byte)42, (byte)29, (byte)53, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, (-2445));
      assertEquals(8, byteArray0.length);
      assertEquals((-21), byteArrayInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-2445), jsonMappingException_Reference0.getIndex());
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte) (-6), (byte)42, (byte)29, (byte)53, (byte)0}, byteArray0);
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setIndex((byte)53);
      assertEquals(8, byteArray0.length);
      assertEquals((-21), byteArrayInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(53, jsonMappingException_Reference0.getIndex());
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte) (-6), (byte)42, (byte)29, (byte)53, (byte)0}, byteArray0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put(":H7R~6!dU)~~Xk*pd@", (-2851));
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      List<String> list0 = objectNode0.findValuesAsText("b@Y(}6NsPyJC~WFzAaN", (List<String>) stack0);
      assertFalse(list0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertFalse(stack0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(list0);
      assertSame(objectNode0, objectNode1);
      
      ObjectNode objectNode2 = objectNode1.remove((Collection<String>) list0);
      assertFalse(list0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertFalse(stack0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      
      ArrayNode arrayNode0 = objectNode2.withArray("b@Y(}6NsPyJC~WFzAaN");
      assertFalse(list0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertFalse(stack0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(arrayNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      assertFalse(list0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertFalse(stack0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "b@Y(}6NsPyJC~WFzAaN");
      assertFalse(list0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertFalse(stack0.contains(":H7R~6!dU)~~Xk*pd@"));
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonMappingException0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ":H7R~6!dU)~~Xk*pd@");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+E");
      JsonMappingException jsonMappingException0 = new JsonMappingException("K2EH14v,Xj$", sQLTimeoutException0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParserSequence0, "X");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 2411);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "+E");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "wNzC`?dSjSR~70QP,";
      jsonMappingException_Reference0.setFieldName("<JU: -");
      jsonMappingException0.toString();
      jsonMappingException0.prependPath(object0, 0);
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0._desc = "<JU: -";
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      MockIOException mockIOException0 = new MockIOException(jsonMappingException1);
      jsonMappingException1.prependPath((Object) mockIOException0, "");
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPath();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "", (Throwable) jsonMappingException1);
      jsonMappingException_Reference0.setIndex(0);
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-99);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.createParserWithMatch();
      JsonMappingException.from((JsonParser) null, "<JU: -", (Throwable) jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1126);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, "Cannot pass null fieldName");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-64);
      byteArrayOutputStream0.write(1745);
      jsonMappingException_Reference0.setIndex((-128));
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArrayOutputStream0.write(byteArray0);
      jsonMappingException_Reference0.setDescription("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLTransientException sQLTransientException0 = new SQLTransientException(": ", "Cannot pass null fieldName", (byte) (-5));
      JsonMappingException.from(serializerProvider0, "default", (Throwable) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('8');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) null, 0, 0);
      stringWriter3.append((CharSequence) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter3);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (Throwable) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException_Reference0.setFieldName("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1379);
      jsonMappingException2.prependPath((Object) byteArrayInputStream0, (int) (byte)80);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "no delegate creator specified");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", "UNKNOWN", (-2227));
      assertEquals((-2227), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.toString());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("l?>[-", (String) null, 34, sQLTransactionRollbackException0);
      assertEquals((-2227), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.toString());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: l?>[-", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("l?>[-", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "k2e", (-2227), hashMap0, sQLInvalidAuthorizationSpecException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-2227), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.toString());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: l?>[-", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("l?>[-", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("k2e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals((-2227), sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) "k2e", (-2227));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-2227), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.toString());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: l?>[-", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("l?>[-", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("k2e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals((-2227), sQLClientInfoException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-2227), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.toString());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: l?>[-", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("l?>[-", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("k2e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals((-2227), sQLClientInfoException0.getErrorCode());
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      Throwable[] throwableArray0 = sQLTransactionRollbackException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals((-2227), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.toString());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", sQLTransactionRollbackException0.getMessage());
      assertNotNull(throwableArray0);
      
      jsonMappingException1.getSuppressed();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (-2227));
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("dh6~+.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) mockPrintWriter0);
      JsonMappingException.from(jsonGenerator0, "L", (Throwable) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qG!`,.>+`?bk", true);
      assertNotNull(mockFileOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      assertNotNull(outputStreamWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(outputStreamWriter0, 41);
      assertEquals(41, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonLocation jsonLocation0 = new JsonLocation("8^^I>nDWv~LW2F", 1L, (-194L), 41, (-3807));
      assertEquals(41, jsonLocation0.getLineNr());
      assertEquals((-3807), jsonLocation0.getColumnNr());
      assertEquals((-194L), jsonLocation0.getCharOffset());
      assertEquals(1L, jsonLocation0.getByteOffset());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonLocation0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "8^^I>nDWv~LW2F", jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "f#1@";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "f#1@");
      assertNotNull(jsonMappingException0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1297);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)49;
//      try { 
        pipedInputStream0.read(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._index = 60000;
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(60000, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setFieldName("Y!6m@E");
      assertEquals(60000, jsonMappingException_Reference0.getIndex());
      assertEquals("Y!6m@E", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[\"Y!6m@E\"]", string0);
      assertEquals(60000, jsonMappingException_Reference0.getIndex());
      assertEquals("Y!6m@E", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "UNKNOWN[\"Y!6m@E\"]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(deserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      String string0 = "2W";
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "2W", (Throwable) null);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonMappingException0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("2W", string1);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonFactory0);
      
      ObjectOutputStream objectOutputStream0 = null;
//      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String [N/A]: null", string0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(string0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String [N/A]: null");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName("Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String [N/A]: null");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String [N/A]: null", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(66);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertNotNull(placeholderForType0);
      
      Class<Object> class1 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class0, javaTypeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.core.filter.FilteringParserDelegate with 3 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("SRZ");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("SRZ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: SRZ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null, sQLSyntaxErrorException0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("SRZ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: SRZ", sQLSyntaxErrorException0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("array");
      Object[] objectArray0 = new Object[3];
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      mockPrintWriter0.print(charArray0);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("teFUmdY La,Mu0-\"$", objectArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, 0);
      jsonMappingException_Reference0.toString();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "UNKNOWN");
      jsonMappingException0.prependPath((Object) "array", 0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 35);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedInputStream0, "");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(" has no content");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(" has no content", 110);
      jsonMappingException_Reference0.setIndex(110);
      assertEquals(110, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D38bbr;&b", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotNull(jsonMappingException0);
  }
}
