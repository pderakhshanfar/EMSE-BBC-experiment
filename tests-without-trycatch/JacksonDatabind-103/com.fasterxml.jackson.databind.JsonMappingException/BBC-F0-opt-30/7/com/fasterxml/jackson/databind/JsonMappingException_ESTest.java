/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 04:00:48 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference('Y', 'C');
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.lang.Character[67]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(540);
      assertEquals(540, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "java.io.ByteArrayOutputStream[0]");
      StringBuilder stringBuilder0 = new StringBuilder("");
      ((JsonMappingException)invalidFormatException0)._appendPathDesc(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Ru;DkG:HD5<zM", (Throwable) null);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Ru;DkG:HD5<zM", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.JsonMappingException", "", 2);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLIntegrityConstraintViolationException0);
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonMappingException0.getProcessor();
      assertFalse(readerBasedJsonParser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UNKNOWN");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "No digit following minus sign");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("~*+&nz<D%^K", "[]", 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{g8[gUBb\"vs}3(;2", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", "~*+&nz<D%^K", 0, sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("[]");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.lang.String[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Ru;DkG:HD5<zM", (Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, " (through reference chain: ", (Throwable) jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "java.io.ByteArrayOutputStream[0]");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.io.ByteArrayOutputStream[0]", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.JsonMappingException", "", 2);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLIntegrityConstraintViolationException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("JSON\n at [Source: (String)\"JSON\"; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("~*+&nz<D%^K", "[]", 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{g8[gUBb\"vs}3(;2", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", "~*+&nz<D%^K", 0, sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("[]");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("[] (through reference chain: java.lang.String[?])", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "", "v!P`jhAc ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 3, 3);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonFactory0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(lineNumberReader0, "ybE-x#*g.Qa8");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      StringBuilder stringBuilder0 = new StringBuilder("AmPbQ|>SPe");
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference(stringBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(lineNumberReader0, "ybE-x#*g.Qa8");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(lineNumberReader0, "ybE-x#*g.Qa8");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(lineNumberReader0, "ybE-x#*g.Qa8");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(lineNumberReader0, "ybE-x#*g.Qa8");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, " (through reference chain: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        jsonMappingException1._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(lineNumberReader0, "ybE-x#*g.Qa8");
      jsonMappingException0.prependPath((Object) charArrayReader0, "W~{T\"L\"nDNiLj");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "R!.W:+oQNEXr.RY", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "~d", (Throwable) sQLTransientConnectionException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Cannot deserialize Proxy class ");
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "JSON", jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Could not find DOM LS");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "7hBLdhjs]Alnlsutg/N", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, "");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("~*+&nz<D%^K", "[]", 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{g8[gUBb\"vs}3(;2", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", "~*+&nz<D%^K", 0, sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("[]");
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference("Svf$D", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-578), 3355);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON");
      StringBuilder stringBuilder0 = new StringBuilder("*iRR`B`Oqk9Fk");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "byte[]");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals(" (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[\"byte[]\"]->UNKNOWN[?])", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, 0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.ByteArrayOutputStream[0]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) stringWriter0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "\bcmEcB|eZ.BP{>c9");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      JsonLocation jsonLocation0 = new JsonLocation(object0, 1L, 10, 34);
      MockPrintStream mockPrintStream0 = new MockPrintStream("USE_DEFAULTS");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "Svf$D", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation((Object) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("S|T^xb9#", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "java.io.ByteArrayOutputStream[0]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) bigDecimal0, "java.io.ByteArrayOutputStream[0]");
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(")", "98*[h:w:DcgL<`CDi;x", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("*Xb|$ckDsBK", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("T aWQSZ{F{bDcPA", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+0+b", "T aWQSZ{F{bDcPA", 48, sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 2562, sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null, (Throwable) sQLTransientConnectionException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "j )pE.yI`uEVwRe6_M");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "", hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) jsonFactory0, 2401);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("'_4'#WMq<llz2q!`7");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "(;JX/\"L7?", (Throwable) sQLSyntaxErrorException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      SQLWarning sQLWarning0 = new SQLWarning("", jsonMappingException0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLWarning0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"\"]");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("Deserialization (of %s) with Builder, External type id, @JsonCreator not yet implemented", (-1L), (-230), (-230));
      JsonMappingException jsonMappingException0 = new JsonMappingException("Deserialization (of %s) with Builder, External type id, @JsonCreator not yet implemented", jsonLocation0, (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      jsonMappingException0.prependPath((Object) dataInputStream0, (-559));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, "");
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "W~{T\"L\"nDNiLj");
      jsonMappingException_Reference0.setDescription("W~{T\"L\"nDNiLj");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.Object[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      jsonMappingException_Reference0.setFieldName("kZ^)H<6jvCNx`8");
      assertEquals("kZ^)H<6jvCNx`8", jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "W~{T\"L\"nDNiLj");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }
}
