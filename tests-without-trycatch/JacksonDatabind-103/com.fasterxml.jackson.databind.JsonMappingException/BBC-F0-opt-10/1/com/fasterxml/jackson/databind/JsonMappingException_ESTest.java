/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 03:18:46 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      assertNotNull(jsonMappingException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      String string0 = null;
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, (String) null, (Throwable) jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(jsonMappingException1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
//      try { 
        objectMapper0.writeValue((JsonGenerator) uTF8JsonGenerator0, (Object) jsonFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      String string0 = "' missing from _propsInOrder";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "' missing from _propsInOrder", "' missing from _propsInOrder");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext_Impl0, "' missing from _propsInOrder");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNotNull(jsonMappingException2);
      
      String string1 = jsonMappingException0.getPathReference();
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", string1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertNotNull(string1);
      
      int int0 = 2512;
      long[] longArray0 = new long[4];
      longArray0[0] = 240L;
      longArray0[1] = (long) 2512;
      longArray0[2] = (long) 2512;
      longArray0[3] = (long) 2512;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", 2512, longArray0, jsonMappingException2);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", batchUpdateException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", batchUpdateException0.getSQLState());
      assertEquals(2512, batchUpdateException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", batchUpdateException0.getMessage());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertArrayEquals(new long[] {240L, 2512L, 2512L, 2512L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(batchUpdateException0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) class0, "-Q25IjFm*vt");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", batchUpdateException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", batchUpdateException0.getSQLState());
      assertEquals(2512, batchUpdateException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"' missing from _propsInOrder\"]->UNKNOWN[?]", batchUpdateException0.getMessage());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertArrayEquals(new long[] {240L, 2512L, 2512L, 2512L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(jsonMappingException3);
      
      // Undeclared exception!
//      try { 
        jsonMappingException3._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonParser jsonParser0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNotNull(filteringParserDelegate0);
      
      JsonMappingException jsonMappingException0 = null;
//      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "P@NZUCo ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "I";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("I", "I");
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)jsonMappingException0.getCause();
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException1.toString());
      assertEquals("I", sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("I", sQLSyntaxErrorException1.getMessage());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      jsonMappingException0.prependPath((Object) stringReader0, (-607));
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      
      // Undeclared exception!
//      try { 
        jsonMappingException0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(jsonMappingException_Reference0));
      assertNotNull(stack0);
      
      String string0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("%BM0MF\"n.MZ^hx", (String) null, 44);
      assertEquals(44, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: %BM0MF\"n.MZ^hx", sQLSyntaxErrorException0.toString());
      assertEquals("%BM0MF\"n.MZ^hx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(44, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: %BM0MF\"n.MZ^hx", sQLSyntaxErrorException0.toString());
      assertEquals("%BM0MF\"n.MZ^hx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(jsonMappingException0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "%BM0MF\"n.MZ^hx");
      assertEquals("%BM0MF\"n.MZ^hx", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(44, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: %BM0MF\"n.MZ^hx", sQLSyntaxErrorException0.toString());
      assertEquals("%BM0MF\"n.MZ^hx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("%BM0MF\"n.MZ^hxjava.io.PipedReader[?]", stringBuilder0.toString());
      assertEquals("%BM0MF\"n.MZ^hxjava.io.PipedReader[?]", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) "%BM0MF\"n.MZ^hx", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (JsonMappingException.Reference) null);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLWarning0, "");
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      
      jsonMappingException_Reference1.setIndex(255);
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(255, jsonMappingException_Reference1.getIndex());
      
      // Undeclared exception!
//      try { 
        jsonMappingException0._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 66);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "-S64A#");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(map0);
      
      Throwable[] throwableArray1 = sQLClientInfoException0.getSuppressed();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertSame(throwableArray1, throwableArray0);
      assertEquals(0, throwableArray1.length);
      assertNotNull(throwableArray1);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("JSON", "JSON", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("JSON", sQLClientInfoException1.getSQLState());
      assertEquals("JSON", sQLClientInfoException1.getMessage());
      assertEquals(1, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: JSON", sQLClientInfoException1.toString());
      assertNotNull(sQLClientInfoException1);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(nonBlockingJsonParser0, "JSON", sQLClientInfoException1);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot pass null fieldName");
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot pass null fieldName", sQLSyntaxErrorException0.toString());
      assertEquals("Cannot pass null fieldName", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot pass null fieldName", sQLSyntaxErrorException0.toString());
      assertEquals("Cannot pass null fieldName", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot pass null fieldName", sQLSyntaxErrorException0.toString());
      assertEquals("Cannot pass null fieldName", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("Invalid UTF-8 start byte 0x", "Invalid UTF-8 start byte 0x");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.getName());
      assertEquals("/tmp/Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.release();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.getName());
      assertEquals("/tmp/Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.getName());
      assertEquals("/tmp/Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertNotNull(outputStreamWriter0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(outputStreamWriter0, "Invalid UTF-8 start byte 0x", sQLTransactionRollbackException0);
      assertNotNull(jsonMappingException0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)63, (byte)1, (byte)93, (byte) (-42), (byte)34, (byte) (-27), (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "No FormatFeatures defined for generator of type ", (Throwable) jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.getName());
      assertEquals("/tmp/Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotNull(jsonMappingException1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "y=g/cfN&yjz;OnomQ", (Throwable) null);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotNull(jsonMappingException2);
      
      String string0 = jsonMappingException1._buildMessage();
      assertEquals("No FormatFeatures defined for generator of type ", string0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.getName());
      assertEquals("/tmp/Invalid UTF-8 start byte 0x0Invalid UTF-8 start byte 0x", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0, 82);
      assertEquals(82, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, ")");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0, 82);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(82, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(82, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was org.evosuite.runtime.mock.java.io.MockIOException) (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[82])", string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(82, jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "(was org.evosuite.runtime.mock.java.io.MockIOException) (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[82])", (Throwable) mockIOException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotNull(jsonMappingException0);
      
      MockFile mockFile0 = new MockFile("UNKNOWN[?]");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(mockFileOutputStream0);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals("UNKNOWN[?]", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UNKNOWN[?]", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("UNKNOWN[?]", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UNKNOWN[?]", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)jsonMappingException0.getCause();
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      
      jsonMappingException0.prependPath((Object) "UNKNOWN[?]", (-607));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertNotNull(jsonParserDelegate0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "UNKNOWN[?]", (Throwable) sQLSyntaxErrorException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("", jsonMappingException_Reference1.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "m|AbvkL-8} !");
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(jsonMappingException0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<InputStreamReader> class0 = InputStreamReader.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertNotNull(resolvedRecursiveType0);
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)defaultDeserializationContext_Impl0.constructSpecializedType(resolvedRecursiveType0, class0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotNull(resolvedRecursiveType1);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException(resolvedRecursiveType1, "m|AbvkL-8} !", "un");
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertEquals("m|AbvkL-8} !", invalidTypeIdException0.getTypeId());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotNull(invalidTypeIdException0);
      
      jsonMappingException0.prependPath((Object) invalidTypeIdException0, 54);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertEquals("m|AbvkL-8} !", invalidTypeIdException0.getTypeId());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      
      invalidTypeIdException0.prependPath(jsonMappingException_Reference1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("", jsonMappingException_Reference1.getFieldName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertEquals("m|AbvkL-8} !", invalidTypeIdException0.getTypeId());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, 54);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(54);
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertNotNull(arrayNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getCurrentName());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertNotNull(treeTraversingParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) treeTraversingParser0, (JsonParser) treeTraversingParser0);
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getCurrentName());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.isNaN());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertNotNull(jsonParserSequence0);
      
      JsonLocation jsonLocation0 = jsonParserSequence0.getTokenLocation();
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getCurrentName());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.isNaN());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonLocation0);
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(treeTraversingParser0, "un", jsonLocation0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonMappingException1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getCurrentName());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.isNaN());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("I", "I");
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(jsonMappingException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)jsonMappingException0.getCause();
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertEquals("I", sQLSyntaxErrorException1.getMessage());
      assertEquals("I", sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException1.toString());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      jsonMappingException0.prependPath((Object) stringReader0, (-607));
      assertEquals("java.sql.SQLSyntaxErrorException: I", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("I", sQLSyntaxErrorException0.getMessage());
      assertEquals("I", sQLSyntaxErrorException0.getSQLState());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("I", 26);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(26, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      System.setCurrentTimeMillis((-2470L));
      boolean boolean3 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "[Property '");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "[Property '", (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      SQLWarning sQLWarning0 = new SQLWarning("", "com.fasterxml.jackson.databind.ext.NioPathDeserializer");
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ext.NioPathDeserializer", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      jsonMappingException0.prependPath((Object) sQLWarning0, "[Property '");
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ext.NioPathDeserializer", sQLWarning0.getSQLState());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("[Property ' (through reference chain: java.sql.SQLWarning[\"[Property '\"])", string0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("[Property ' (through reference chain: java.sql.SQLWarning[\"[Property '\"])", string1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string1);
      
      String string2 = jsonMappingException0.getLocalizedMessage();
      assertEquals("[Property ' (through reference chain: java.sql.SQLWarning[\"[Property '\"])", string2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler((Object) null);
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotNull(javaType0);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(javaType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(string0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(string1);
      
      String string2 = jsonMappingException0._buildMessage();
      assertEquals("", string2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      assertNotNull(serializerProvider0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, " {z");
      assertNotNull(jsonMappingException0);
      
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotNull(serializerProvider0);
      
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, objectMapper0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertNotNull(mockFileReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 27, mockFileReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 27, (-2705), true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(27, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(110, (-1729));
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(46, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(46, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser1);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser1, "");
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("\n at [Source: UNKNOWN; line: 1, column: 0]", string0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(46, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(46, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null, (Throwable) null);
      assertNotNull(jsonMappingException0);
      
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 6);
      assertEquals(6, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._index = 68;
      assertEquals(68, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[68]", string0);
      assertEquals(68, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNotNull(jsonParser0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      String string1 = jsonMappingException1.getPathReference();
      assertEquals("", string1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLWarning0.getStackTrace();
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(jsonMappingException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotNull(serializerProvider0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      
      Object object1 = jsonMappingException0.getProcessor();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(object1);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "Q|D}V5^s7g3m/(l0");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      
      Object object1 = jsonMappingException0.getProcessor();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNull(object1);
      
      jsonMappingException0.prependPath((Object) sQLSyntaxErrorException0, (-4231));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((char[]) null, 0, 0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON");
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "JSON", (Throwable) sQLDataException0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonMappingException0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "'Fvq5V{>.TSe -7ChI");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Z @{z_", "00GeJ*:%");
      assertEquals("java.sql.SQLSyntaxErrorException: Z @{z_", sQLSyntaxErrorException0.toString());
      assertEquals("Z @{z_", sQLSyntaxErrorException0.getMessage());
      assertEquals("00GeJ*:%", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLDataException0, 97);
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(97, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(97, jsonMappingException_Reference0.getIndex());
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotNull(jsonMappingException2);
      
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(97, jsonMappingException_Reference0.getIndex());
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonMappingException0.getProcessor();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotNull(readerBasedJsonParser1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-121);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)123);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((byte)0);
      assertEquals(0L, long0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0, 4166);
      assertEquals(6, byteArrayInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(4166, jsonMappingException_Reference0.getIndex());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(jsonMappingException_Reference0);
      
      byteArrayInputStream0.mark((byte)0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      jsonMappingException_Reference0._from = null;
      assertEquals(6, byteArrayInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(4166, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals(6, byteArrayInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(4166, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(4166, jsonMappingException_Reference1.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(jsonMappingException_Reference1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[4166]", string0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(4166, jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      
      String string1 = jsonMappingException0.getPathReference();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals(4166, jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals(4166, jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      jsonMappingException_Reference0.setIndex((-168));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-168), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string2 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-168), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      jsonMappingException_Reference0.setFieldName((String) null);
      assertEquals(6, byteArrayInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-168), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)123, (byte) (-56), (byte)0, (byte) (-121)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string3 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[4166]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(locale_Category0, (-2034));
      assertEquals((-2034), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.util.Locale$Category[?]", string0);
      assertEquals((-2034), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("cmefna9+=['=akN");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("java.util.Locale$Category[?]", sQLNonTransientException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.util.Locale$Category[?]", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLWarning0.getStackTrace();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.util.Locale$Category[?]", sQLWarning0.getMessage());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      assertEquals((-2034), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.util.Locale$Category[?]", sQLWarning0.getMessage());
      assertNotNull(jsonMappingException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotNull(serializerProvider0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("java.util.Locale$Category[?]", "Q!>aG;btyO1lCX", (-2034));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.util.Locale$Category[?]", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.util.Locale$Category[?]", sQLFeatureNotSupportedException1.toString());
      assertEquals((-2034), sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Q!>aG;btyO1lCX", sQLFeatureNotSupportedException1.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertEquals("java.util.Locale$Category[?]", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.util.Locale$Category[?]", sQLFeatureNotSupportedException1.toString());
      assertEquals((-2034), sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Q!>aG;btyO1lCX", sQLFeatureNotSupportedException1.getSQLState());
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      SQLWarning sQLWarning1 = (SQLWarning)sQLWarning0.fillInStackTrace();
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.util.Locale$Category[?]", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning1.toString());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.util.Locale$Category[?]", sQLWarning1.getMessage());
      assertNull(sQLWarning1.getSQLState());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertNotNull(sQLWarning1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertNotSame(defaultSerializerProvider_Impl0, serializerProvider0);
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Q!>aG;btyO1lCX", (Throwable) sQLNonTransientException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(defaultSerializerProvider_Impl0, serializerProvider0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotNull(jsonMappingException2);
      
      StackTraceElement[] stackTraceElementArray1 = sQLFeatureNotSupportedException0.getStackTrace();
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertEquals(13, stackTraceElementArray1.length);
      assertNotNull(stackTraceElementArray1);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from(serializerProvider0, "7wq}:r[gZf1");
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl0);
      assertNotNull(jsonMappingException3);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "java.util.Locale$Category[?]", "");
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertEquals((-2034), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.util.Locale$Category[?]", sQLWarning0.getMessage());
      assertSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotNull(jsonMappingException4);
      
      jsonMappingException_Reference0.setDescription("cmefna9+=['=akN");
      assertEquals((-2034), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertEquals((-2034), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.util.Locale$Category[?]", sQLWarning0.getMessage());
      assertSame(jsonMappingException4, jsonMappingException5);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertNotSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertNotSame(jsonMappingException5, jsonMappingException1);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotNull(jsonMappingException5);
      
      String string1 = jsonMappingException0.getMessage();
      assertEquals("java.util.Locale$Category[?] (through reference chain: cmefna9+=['=akN->java.lang.String[\"\"]->cmefna9+=['=akN)", string1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertEquals((-2034), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: cmefna9+=['=akN", sQLFeatureNotSupportedException0.toString());
      assertEquals("cmefna9+=['=akN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.util.Locale$Category[?]", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.util.Locale$Category[?]", sQLWarning0.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotNull(string1);
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "Q!>aG;btyO1lCX", (Throwable) sQLNonTransientException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      Class<JsonProcessingException>[] classArray0 = (Class<JsonProcessingException>[]) Array.newInstance(Class.class, 6);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      classArray0[0] = class0;
      Class<JsonProcessingException> class1 = JsonProcessingException.class;
      classArray0[1] = class1;
      Class<JsonProcessingException> class2 = JsonProcessingException.class;
      classArray0[2] = class2;
      Class<JsonProcessingException> class3 = JsonProcessingException.class;
      classArray0[3] = class3;
      Class<JsonProcessingException> class4 = JsonProcessingException.class;
      classArray0[4] = class4;
      Class<JsonProcessingException> class5 = JsonProcessingException.class;
      classArray0[5] = class5;
      stdSubtypeResolver0.registerSubtypes(classArray0);
      assertEquals(6, classArray0.length);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNotNull(deserializationConfig0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, contextAttributes0);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNotNull(deserializationConfig1);
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig1);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "/");
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: /", string0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotNull(string0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.JsonMappingException: /", "No current event to copy", 559);
      assertEquals(559, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.getMessage());
      assertEquals("No current event to copy", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(559, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.getMessage());
      assertEquals("No current event to copy", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertEquals(559, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.getMessage());
      assertEquals("No current event to copy", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotNull(jsonMappingException2);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) baseSettings0, "/");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(559, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: /", sQLSyntaxErrorException0.getMessage());
      assertEquals("No current event to copy", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotNull(jsonMappingException3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte) (-88);
      Class<MockPrintStream> class0 = MockPrintStream.class;
//      try { 
        objectMapper2.readValue(byteArray0, 0, (-556), class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (byte[])\"u\uFFFD\r\uFFFD\f\uFFFDLT\uFFFD\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(locale_Category0, (-2034));
      jsonMappingException_Reference0.getDescription();
      String string0 = "cmefna9+=['=akN";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.ser.std.NumbrSerializer");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.ser.std.NumbrSerializer", sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLNonTransientException0);
      SQLWarning sQLWarning1 = new SQLWarning("com.fasterxml.jackson.databind.ser.std.NumbrSerializer", "com.fasterxml.jackson.databind.ser.std.NumbrSerializer", (-2034));
      sQLWarning1.getStackTrace();
      JsonMappingException.wrapWithPath((Throwable) sQLWarning1, jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "DyWHg8}(Z7ic}IUQ>B", (-131));
      JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.databind.ser.std.NumbrSerializer", (Throwable) sQLFeatureNotSupportedException1);
      sQLWarning0.fillInStackTrace();
      objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, (String) null, (Throwable) sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedException1.getStackTrace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) byteArrayOutputStream0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      sQLRecoverableException0.initCause(jsonMappingException0);
      Vector<JsonMappingException.Reference> vector0 = new Vector<JsonMappingException.Reference>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>(vector0);
      jsonMappingException0._path = linkedList0;
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0._desc = "write a null";
      jsonMappingException_Reference0.setIndex(1920);
      jsonMappingException0.fillInStackTrace();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("write a null", "write a null");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // write a null
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", ")");
      jsonMappingException_Reference0.setFieldName("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "pqsE0;|!");
      jsonMappingException_Reference0._desc = "VALUE_NUMBER_INT";
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "TuIRZGZV<?.3s ", (Throwable) sQLSyntaxErrorException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(836);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DataOutputStream> class0 = DataOutputStream.class;
      Class<UTF8StreamJsonParser> class1 = UTF8StreamJsonParser.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      StringBuilder stringBuilder0 = new StringBuilder(836);
      StringBuilder stringBuilder1 = mapLikeType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      StringBuilder stringBuilder3 = jsonMappingException0.getPathReference(stringBuilder2);
      mapLikeType0.getErasedSignature(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(locale_Category0, (-2034));
      jsonMappingException_Reference0.getDescription();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("cmefna9+=['=akN");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning("java.util.Locale$Category[?]", sQLNonTransientException0);
      sQLWarning0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("java.util.Locale$Category[?]", "Q!>aG;btyO1lCX", (-2034));
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLFeatureNotSupportedException1);
      sQLWarning0.fillInStackTrace();
      SerializerProvider serializerProvider1 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider1, "Q!>aG;btyO1lCX", (Throwable) sQLNonTransientException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      JsonMappingException.from(serializerProvider0, "7wq}:r[gZf1");
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "java.util.Locale$Category[?]", "");
      jsonMappingException_Reference0.setDescription("cmefna9+=['=akN");
      jsonMappingException1.toString();
      jsonMappingException3.getLocalizedMessage();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException2.getPath();
      JsonMappingException jsonMappingException4 = JsonMappingException.from(serializerProvider0, "(was ");
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", ")");
      jsonMappingException_Reference0.setFieldName("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "pqsE0;|!");
      jsonMappingException_Reference0._desc = "VALUE_NUMBER_INT";
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals("(was java.sql.SQLSyntaxErrorException) (through reference chain: VALUE_NUMBER_INT)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("H[C{4H~GiI@", "H[C{4H~GiI@");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "u|.&w9[[]Oir", 722);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<UTF8DataInputJsonParser> class1 = UTF8DataInputJsonParser.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withStaticTyping();
      mapType1.withContentTypeHandler(class1);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("JPIC5L[t", (Throwable) null);
      jsonMappingException0.getPath();
      jsonMappingException0.getPathReference();
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("JPIC5L[t", string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, false, true);
      jsonMappingException0._processor = (Closeable) filteringParserDelegate0;
      jsonMappingException0.prependPath((Object) "JPIC5L[t", "SnB2L*n>cpS");
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "SnB2L*n>cpS");
      jsonMappingException_Reference0.setDescription("JPIC5L[t");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createParser((char[]) null, 0, 0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLDataException0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: JSON\n at [Source: UNKNOWN; line: 1, column: 0]", string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2288);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-955));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-100);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectMapper0, byteQuadsCanonicalizer1, byteArray0, 1114111, 18, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(uTF8StreamJsonParser0, "ZyvT$}Vdv#<h\"K\".9Y\"");
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("->");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-98);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLException sQLException0 = new SQLException("->", "/^j{,\"v{");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "->", (Throwable) sQLException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(">[DeK^;<,9'");
      JsonMappingException jsonMappingException0 = new JsonMappingException("kqw7[< f", sQLSyntaxErrorException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)9;
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0, (int) (byte)1, (int) (byte)0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "[cc");
      jsonMappingException0.toString();
      jsonMappingException0.toString();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) ">[DeK^;<,9'", (-539));
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "kqw7[< f", 0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonFactory1, "");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "Y)/enSq;h";
      jsonMappingException_Reference0.setFieldName("Y)/enSq;h");
      jsonMappingException_Reference0._index = 389;
      jsonMappingException_Reference0._fieldName = "Y)/enSq;h";
      jsonMappingException_Reference0.setFieldName("t");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getDescription();
      String string1 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = null;
      int int0 = 0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._desc = "UNKNOWN[0]";
      jsonMappingException_Reference0._from = null;
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 0);
      Integer integer0 = new Integer(0);
      jsonMappingException_Reference1._from = (Object) integer0;
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference1.toString();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      String string0 = "";
      JsonDeserializer<MockPrintStream> jsonDeserializer0 = (JsonDeserializer<MockPrintStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      jsonMappingException_Reference0.writeReplace();
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, (Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      int[] intArray0 = new int[6];
      intArray0[0] = 500;
      intArray0[1] = 500;
      intArray0[2] = 500;
      intArray0[3] = 500;
      intArray0[4] = 500;
      intArray0[5] = 500;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("->", intArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("->", jsonLocation0, batchUpdateException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("->\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(sequenceInputStream1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3170);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1738), sequenceInputStream0, objectReader0, byteQuadsCanonicalizer1, byteArray0, 1, 200, true);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      SQLException sQLException0 = new SQLException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, jsonLocation0, sQLException0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException("): has to be escaped using backslash to be included in ");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) mockIOException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("tL5.:sR~_:", 0L, 1, 0);
      jsonLocation0.toString();
      jsonLocation0.toString();
      JsonMappingException jsonMappingException0 = new JsonMappingException("tL5.:sR~_:", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(151);
      // Undeclared exception!
//      try { 
        placeholderForType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      sQLRecoverableException0.initCause(jsonMappingException0);
      Vector<JsonMappingException.Reference> vector0 = new Vector<JsonMappingException.Reference>();
      // Undeclared exception!
//      try { 
        sQLRecoverableException0.initCause(jsonMappingException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLRecoverableException) (through reference chain: java.sql.SQLRecoverableException[?])
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("s", (Throwable) null);
      jsonMappingException0._buildMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "UNKNOWN");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-121);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)123);
      byteArrayInputStream0.skip((byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0, 4166);
      byteArrayInputStream0.mark((byte)0);
      jsonMappingException_Reference0._from = null;
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException_Reference0.toString();
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.setIndex((-168));
      jsonMappingException0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setFieldName((String) null);
      assertEquals((-168), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, dataInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("UTF-8", (String) null, 3026);
      SQLException sQLException0 = new SQLException("via method ", (String) null, (-776), (Throwable) null);
      sQLTransientConnectionException0.setNextException(sQLException0);
      sQLTransientConnectionException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException(": cannot find property with name '", sQLTransientConnectionException0);
      jsonMappingException0.getSuppressed();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference1.toString();
      jsonMappingException_Reference1.toString();
      SQLDataException sQLDataException0 = new SQLDataException("UTF-8", sQLTransientConnectionException0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) bufferedInputStream0, "com.fasterxml.jackson.databind.JsonMappingException");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "(was ";
      jsonMappingException_Reference0.setFieldName("(was ");
      jsonMappingException_Reference0.getFrom();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("UNKNOWN[\"(was \"]", string0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[\"(was \"]");
      StringReader stringReader0 = new StringReader("lve4D");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringReader0, "");
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "xAcMB\\o#gY2122A";
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "xAcMBo#gY2122A");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      String string0 = "";
      MockFileReader mockFileReader0 = null;
//      try {
        mockFileReader0 = new MockFileReader("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "YZW? 4_?i^|");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException0 = new JsonMappingException("p2G5g{-e.h");
      jsonMappingException0.fillInStackTrace();
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference0.writeReplace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "a", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }
}
