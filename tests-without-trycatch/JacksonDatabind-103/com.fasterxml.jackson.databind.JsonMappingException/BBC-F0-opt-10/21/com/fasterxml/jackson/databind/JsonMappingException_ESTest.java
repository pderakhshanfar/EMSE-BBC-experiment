/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:42:56 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 31);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) jsonMappingException_Reference0, "");
      jsonMappingException1.getMessage();
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      IntNode intNode0 = objectMapper0.valueToTree((Object) objectMapper1);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(intNode0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      jsonFactory1.copy();
      String string0 = "0nATI|i3sgnisSXRw";
      String string1 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0, string1);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, boolean0);
      String string2 = "";
      JsonMappingException.from(jsonParser0, string2, (Throwable) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, "");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "C %iXe&t");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DataOutputStream> class0 = DataOutputStream.class;
      String string0 = "";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
      jsonMappingException0.prependPath((Object) class0, "");
      jsonMappingException0.getPathReference();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      int int0 = (-2339);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      TypeReference<ByteArrayOutputStream> typeReference0 = (TypeReference<ByteArrayOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectMapper1.readerFor(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockThrowable mockThrowable0 = new MockThrowable("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) "", "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException2.getPathReference();
      Vector<JsonMappingException.Reference> vector0 = new Vector<JsonMappingException.Reference>();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath((Object) jsonMappingException3, "UNKNOWN[?]->UNKNOWN[?]->java.lang.String[\"\"]->UNKNOWN[?]->UNKNOWN[?]");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException4);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, vector0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = MockFile.createTempFile("Q0H|9o| `d=.;L\"bv/-", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(0, 242);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 31);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) jsonMappingException_Reference0, "");
      jsonMappingException1.getMessage();
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      IntNode intNode0 = objectMapper0.valueToTree((Object) objectMapper1);
      objectMapper1.treeAsTokens(intNode0);
      String string0 = ": ";
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)35;
      byteArray0[0] = byte0;
      byte byte1 = (byte)100;
      byteArray0[1] = byte1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byteArray0[1], byteArray0[0]);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JsonParser jsonParser0 = jsonFactory3.createParser((InputStream) bufferedInputStream0);
      JsonMappingException.from(jsonParser0, string0, (Throwable) jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "2h";
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) "2h", "2h");
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      jsonMappingException_Reference0.writeReplace();
      String string1 = "P;'|7pDyzMQ3c";
      jsonMappingException1.prependPath((Object) dataOutputStream0, "P;'|7pDyzMQ3c");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        jsonMappingException2.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      String string0 = "A1>GBrr";
      SQLException sQLException0 = new SQLException("A1>GBrr", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("eP", "eP", sQLException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      JsonMappingException jsonMappingException0 = null;
//      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "A1>GBrr", sQLFeatureNotSupportedException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0, 226);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pushbackReader0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "_M";
      JsonMappingException jsonMappingException0 = new JsonMappingException("_M");
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.JsonMappingException", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
      
      String string1 = jsonMappingException0._buildMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[6];
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ijZulk#Bzd-I5p1T");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonLocation jsonLocation0 = jsonParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON", jsonLocation0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) jsonParserDelegate0, "JSON", (Throwable) jsonMappingException0);
      Object object0 = jsonMappingException1.getProcessor();
      assertSame(object0, jsonParserDelegate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("d!m", (JsonLocation) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "d!m");
      char[] charArray0 = new char[3];
      jsonFactory0.createParser(charArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonMappingException jsonMappingException1 = new JsonMappingException("d!m", (JsonLocation) null);
      jsonMappingException0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "", "");
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "LQ.+w?!!&9=oNB";
      SQLException sQLException0 = new SQLException("LQ.+w?!!&9=oNB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z{)QsXCw}");
      sQLException0.printStackTrace((PrintWriter) mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) "LQ.+w?!!&9=oNB", 3);
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      JsonMappingException[] jsonMappingExceptionArray0 = new JsonMappingException[2];
      jsonMappingExceptionArray0[0] = jsonMappingException0;
      jsonMappingException0.prependPath((Object) null, (-441));
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      String string0 = " *n=r$J)B1";
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, (-2390L), (-2390L), 2320, (-3244));
      JsonMappingException jsonMappingException0 = new JsonMappingException(dataInputStream0, " *n=r$J)B1", jsonLocation0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " *n=r$J)B1", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 12000;
      MockFile mockFile0 = new MockFile("xVAt_S/OFr;:kzu");
      MockFileReader mockFileReader0 = null;
//      try {
        mockFileReader0 = new MockFileReader(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (-1000));
      jsonMappingException_Reference0.setIndex((-1000));
      jsonMappingException_Reference0.setFieldName(": ");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0._buildMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, "Es");
      jsonMappingException1.getMessage();
      jsonMappingException2.getPathReference();
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      jsonFactory2.configure(jsonFactory_Feature0, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".#;");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.fillInStackTrace();
      jsonMappingException0.prependPath((Object) ".#;", ".#;");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("UNKNOWN[?]");
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) sQLTimeoutException0, ".#;");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SerializerProvider serializerProvider0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "oLgJtG\\YKu-h?O";
      String string1 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oLgJtGYKu-h?O");
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "oLgJtGYKu-h?O", (Throwable) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("d!m", (JsonLocation) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, " <)", (Throwable) jsonMappingException0);
      jsonMappingException1.prependPath((Object) jsonFactory0, 1111);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) charArrayReader0, "JSON");
      jsonMappingException1.getPath();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) charArrayReader0, 1111);
      assertSame(jsonMappingException3, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Object object0 = new Object();
      jsonMappingException0.prependPath(object0, "");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLWarning) (through reference chain: java.lang.Object[\"\"]->UNKNOWN[\"\"]->UNKNOWN[\"\"])", string0);
      
      jsonMappingException0._buildMessage();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("d!m", (JsonLocation) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
//      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[;UL/.b");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[;UL/.b", sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 479);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      assertEquals(479, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-59);
      dataInputStream0.readFully(byteArray1, (int) (byte)4, (int) (byte)0);
      byteArray0[0] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(dataInputStream0, "jIIV!qH+sMgiO");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".#;");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(".#;", sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException1, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "", "");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      sQLTransientConnectionException0.getStackTrace();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, (-1212));
      assertSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}a;");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTransientConnectionException0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.sql.SQLTransientConnectionException[\"com.fasterxml.jackson.databind.JsonMappingException$Reference\"]", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.JsonMappingException$Reference";
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[\"com.fasterxml.jackson.databind.JsonMappingException$Reference\"]", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      mockThrowable0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) "", "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "{2c'=ql.-D*n+G]AY:j", (Throwable) jsonMappingException0);
      jsonMappingException1.prependPath((Object) mockThrowable0, 12);
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{2c'=ql.-D*n+G]AY:j", "JSON", 12);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "{2c'=ql.-D*n+G]AY:j", (Throwable) jsonMappingException1);
      jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".#;");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(".#;", sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException1, jsonMappingException_Reference0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals(".#; (through reference chain: UNKNOWN[?])", string0);
      
      IntNode intNode0 = new IntNode((-714));
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) intNode0, (-714));
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 115);
      jsonMappingException0.prependPath((Object) bufferedInputStream0, "N7H9");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      String string0 = "";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JSON");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      Class<OutputStreamWriter> class1 = OutputStreamWriter.class;
      InvalidFormatException invalidFormatException0 = InvalidFormatException.from(jsonParser0, "->", (Object) bufferedWriter0, (Class<?>) class1);
      invalidFormatException0.getPath();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper0.getSerializerProvider();
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "->");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) mockThrowable0, "{2c'=ql.-D*n+G]AY:j");
      jsonMappingException0.prependPath((Object) mockThrowable0, 2670);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "JSON");
      jsonFactory3.createGenerator((Writer) charArrayWriter1);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "2");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getPath();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, "JSON");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonMappingException0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "o%kJsfZ_mC-aO}c", 1190);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLTimeoutException0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLInvalidAuthorizationSpecException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLInvalidAuthorizationSpecException0, 1000);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException[1000]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "wY|MyU");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("wY|MyU", sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getMessage();
      String string0 = jsonMappingException0.toString();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLTimeoutException) (through reference chain: java.lang.String[\"wY|MyU\"])", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}a;", "}a;");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException1, jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) null);
      dataFormatReaders_Match0.getReader();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '6';
      charArray0[2] = 'H';
      charArray0[3] = '|';
      charArray0[4] = 'd';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 2110);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, 63);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "wY|MyU");
      jsonMappingException_Reference0.setFieldName("wY|MyU");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setDescription("wY|MyU");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",B#6m>,$gS-.");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, printStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonMappingException_Reference0.toString();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",B#6m>,$gS-.");
      SQLWarning sQLWarning0 = new SQLWarning("", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, ",B#6m>,$gS-.", (Throwable) sQLTransientConnectionException0);
      StringBuilder stringBuilder0 = new StringBuilder("wY|MyU");
      stringBuilder0.deleteCharAt(0);
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder1);
      JsonMappingException.from(jsonGenerator0, ",B#6m>,$gS-.");
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "wY|MyU");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("cU:x3V2UiHLUpj*");
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "cU:x3V2UiHLUpj*", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 41);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".#;");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(".#;", sQLTimeoutException0);
      sQLTimeoutException1.setNextException(sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException1, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ".#;", (Throwable) sQLTimeoutException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "wY|MyU");
      jsonMappingException_Reference0.setFieldName("wY|MyU");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",B#6m>,$gS-.");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setDescription("wY|MyU");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",B#6m>,$gS-.");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, printStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",B#6m>,$gS-.");
      SQLWarning sQLWarning0 = new SQLWarning("", sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, ",B#6m>,$gS-.", (Throwable) sQLTransientConnectionException0);
      StringBuilder stringBuilder0 = new StringBuilder("wY|MyU");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder1);
      JsonMappingException.from(jsonGenerator0, ",B#6m>,$gS-.");
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "wY|MyU");
      jsonMappingException_Reference0.setFieldName("wY|MyU");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setDescription("wY|MyU");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",B#6m>,$gS-.");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, printStream0);
      iOContext0.allocBase64Buffer(1566);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",B#6m>,$gS-.");
      StringBuilder stringBuilder0 = new StringBuilder("wY|MyU");
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) jsonMappingException_Reference0, 1);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}a;");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("}a;", sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException1, jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".#;");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(".#;", sQLTimeoutException0);
      sQLTimeoutException0.spliterator();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException1, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals(".#; (through reference chain: UNKNOWN[?])", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "wY|MyU");
      jsonMappingException_Reference0.setFieldName("wY|MyU");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setDescription("wY|MyU");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",B#6m>,$gS-.");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, printStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",B#6m>,$gS-.");
      SQLWarning sQLWarning0 = new SQLWarning("", sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, ",B#6m>,$gS-.", (Throwable) sQLTransientConnectionException0);
      StringBuilder stringBuilder0 = new StringBuilder("wY|MyU");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder1);
      JsonMappingException.from(jsonGenerator0, ",B#6m>,$gS-.");
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      jsonMappingException_Reference0.setFieldName(",/");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedInputStream0);
      jsonMappingException_Reference0.getFieldName();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)75;
      sequenceInputStream0.read(byteArray0, 689, (int) (byte)0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLException sQLException0 = new SQLException();
      sQLRecoverableException0.initCause(sQLException0);
      sQLRecoverableException0.spliterator();
      JsonMappingException jsonMappingException0 = new JsonMappingException("iPYN/Z$H~%8", sQLRecoverableException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0, (int) (byte) (-24), (int) (byte) (-78));
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)0;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" Rry}IFJ$:ZDoUuQ");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", sQLTimeoutException0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("JSON", " Rry}IFJ$:ZDoUuQ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //  Rry}IFJ$:ZDoUuQ
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("[s2$khn", 1798L, 0, 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("HcPt@`Y&.", jsonLocation0, (Throwable) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".#;", ".#;");
      sQLTimeoutException0.getSuppressed();
      sQLTimeoutException0.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(".#;", sQLTimeoutException0);
      sQLTimeoutException0.spliterator();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(".#;");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: .#;", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("lEdrv;p0Anxb{M?q]@C");
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      jsonFactory0.createParser((InputStream) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "JSON");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("lEdrv;p0Anxb{M?q]@C", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      String string0 = "<Z0b";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "<Z0b");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("<Z0b", 0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      PipedReader pipedReader0 = null;
//      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe size <= 0
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "d!m";
      JsonMappingException jsonMappingException0 = new JsonMappingException("d!m", (JsonLocation) null);
      TextStyle textStyle0 = TextStyle.NARROW;
      TextStyle textStyle1 = textStyle0.asNormal();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(textStyle1, "d!m");
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("d!m", (JsonLocation) null);
      TextStyle textStyle0 = TextStyle.NARROW;
      TextStyle textStyle1 = textStyle0.asNormal();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(textStyle1, "d!m");
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", "");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string1 = "*XUB*a 1";
      String string2 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("*XUB*a 1", "", "", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("*XUB*a 1", "[]", "[]", 63);
      stackTraceElementArray0[1] = stackTraceElement1;
      int int0 = 3302;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", ":SGl35-y@mHAY~VF", "2,:}\b(CQnezdW%M~", 3302);
      stackTraceElementArray0[2] = stackTraceElement2;
      String string3 = null;
      StackTraceElement stackTraceElement3 = null;
//      try {
        stackTraceElement3 = new StackTraceElement((String) null, "", "", 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      String string0 = "(g]ny ";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "(g]ny ");
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, "");
      jsonMappingException_Reference0._fieldName = "(g]ny ";
      jsonMappingException_Reference0.setDescription("");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException_Reference1.setDescription("");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonFactory0.disable(jsonParser_Feature0);
//      try { 
        MockURI.URI("[]", "R'", "[]", 93, ": ", "(g]ny ", "JSON");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: []://R'@[]:93:%20?(g]ny%20#JSON
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "$R");
      jsonMappingException0.getPathReference();
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "$R", "", objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "?4z\"h&ub2~r3%Jh";
      jsonMappingException_Reference0._fieldName = "?4z\"h&ub2~r3%Jh";
      jsonMappingException_Reference0.getDescription();
      IOContext iOContext0 = null;
      int int0 = 839;
      ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) null);
      dataFormatReaders_Match0.getReader();
      MockPrintStream mockPrintStream0 = new MockPrintStream("?4z\"h&ub2~r3%Jh");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      MockFile mockFile0 = new MockFile("Cannot use source of type ", "UNKNOWN[\"?4z\"h&ub2~r3%Jh\"]");
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "Pd:Md_~yi");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"Pd:Md_~yi\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) mockThrowable0, "{2c'=ql.-D*n+G]AY:j");
      jsonMappingException0.prependPath((Object) mockThrowable0, 2670);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "JSON");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) charArrayWriter1);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, (String) null);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      SQLTransientException sQLTransientException0 = new SQLTransientException("mgyfu8u}.z", "mgyfu8u}.z", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) sQLTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      MockFile mockFile0 = new MockFile((File) null, "JSON");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('m');
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) printWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      jsonFactory2.setRootValueSeparator("");
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature1);
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("dvOEWa![nK+A", sQLTransientException0);
      sQLNonTransientException0.getSuppressed();
      jsonFactory3.configure(jsonGenerator_Feature0, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLNonTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON");
      int int0 = 110;
      jsonMappingException_Reference0.setIndex(110);
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException1, "JSON");
      jsonMappingException1._buildMessage();
      String string0 = "gKx";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      Class<UTF8StreamJsonParser> class1 = UTF8StreamJsonParser.class;
      JavaType javaType0 = null;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class1, (JavaType) null, (JavaType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.core.json.UTF8StreamJsonParser with 2 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "7cl}q";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("7cl}q", sQLNonTransientConnectionException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      sQLNonTransientConnectionException0.initCause(jsonMappingException0);
      stringBuilder0.reverse();
      // Undeclared exception!
//      try { 
        stringBuilder0.insert(90, (CharSequence) "7cl}q");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 90
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "2");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "";
      Class<Integer> class0 = Integer.class;
      jsonMappingException_Reference0._fieldName = null;
      // Undeclared exception!
//      try { 
        deserializerFactoryConfig0.withAdditionalDeserializers((Deserializers) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null Deserializers
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }
}
