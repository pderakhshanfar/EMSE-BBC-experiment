/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 04:18:42 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.temporal.ChronoUnit;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      JsonMappingException jsonMappingException0 = null;
//      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      FloatNode floatNode0 = new FloatNode((-32L));
      jsonMappingException0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) "com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLTransactionRollbackException) (through reference chain: UNKNOWN[?])", 23);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, 23);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      jsonMappingException1.prependPath((Object) jsonMappingException0, 23);
      jsonMappingException2.prependPath((Object) sQLTransactionRollbackException0, 23);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) sQLTransactionRollbackException0, "UNKNOWN[?]");
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "UNKNOWN[?]", "UNKNOWN[?]");
      jsonMappingException2.getStackTrace();
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) sQLTransactionRollbackException0, "UNKNOWN[?]");
      jsonMappingException2.prependPath((Object) jsonMappingException0, 23);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      jsonMappingException5.prependPath(jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference1);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, jsonMappingException_Reference1);
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) sQLTransactionRollbackException0, 23);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException4, "com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLTransactionRollbackException) (through reference chain: UNKNOWN[?])");
      jsonMappingException8.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        jsonMappingException7.getPathReference((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException(sQLTransactionRollbackException1);
      JsonMappingException jsonMappingException0 = null;
//      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, (String) null, sQLException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonFactory0, "JSON");
      jsonMappingException2.prependPath((Object) jsonMappingException0, (-2548));
      JsonMappingException jsonMappingException3 = new JsonMappingException("JSON");
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("FdU>_:^k[n 5", "", hashMap0, jsonMappingException2);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      jsonMappingException3.getLocalizedMessage();
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (JsonMappingException.Reference) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException6 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "JSON", "");
      jsonMappingException6.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumSet> class1 = EnumSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      CollectionType collectionType1 = collectionType0.withTypeHandler(jsonMappingException0);
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      JsonMappingException jsonMappingException7 = defaultDeserializationContext_Impl0.missingTypeIdException(collectionType2, "");
      jsonMappingException7.getPathReference();
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      // Undeclared exception!
//      try { 
        jsonMappingException4.getMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("PgKZ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "PgKZ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, dataInputStream0, objectReader0, byteQuadsCanonicalizer1, byteArray0, 5, 1, true);
      jsonMappingException0.prependPath((Object) uTF8StreamJsonParser0, 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockIOException mockIOException0 = new MockIOException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getLocalizedMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLException sQLException0 = new SQLException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      FloatNode floatNode0 = new FloatNode(2351.0F);
      jsonMappingException_Reference0.setIndex(8);
      jsonMappingException0.toString();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getLocalizedMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) "com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLException) (through reference chain: UNKNOWN[?])", 8);
      StringReader stringReader0 = new StringReader("F2U<`<,cQ78{;c]{");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringReader0, "UNKNOWN[?]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) floatNode0, 54);
      // Undeclared exception!
//      try { 
        jsonMappingException1._appendPathDesc((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Integer integer0 = new Integer(2631);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 2631);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0._buildMessage();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "");
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "JSON", (Throwable) jsonMappingException1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jackson.databind.deser.DataFormatReaders$Match");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("F0flr");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "F0flr");
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "");
      jsonMappingException1.getPathReference();
      System.setCurrentTimeMillis(1506L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("a0N(+1(2aQ!DjmJd", class0, "a0N(+1(2aQ!DjmJd");
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        bufferedOutputStream0.write(byteArray0, 2848, 2848);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("a0N(+1(2aQ!DjmJd", class0, "a0N(+1(2aQ!DjmJd");
      jsonMappingException0.getPathReference();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "a0N(+1(2aQ!DjmJd", (Throwable) jsonMappingException0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 3784);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0);
      jsonMappingException_Reference0.getDescription();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "s", (Throwable) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      Class<Integer> class0 = Integer.TYPE;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("a0N(+1(2aQ!DjmJd", class0, "W>cEh<*O");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, (String) null, jsonMappingException0);
      jsonMappingException1._buildMessage();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.TYPE;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      FloatNode.valueOf(0.0F);
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Throwable throwable0 = null;
      int int0 = 1;
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      StringReader stringReader0 = new StringReader("Re;&8]p58ON5S");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(stringReader0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("a0N(+1(2aQ!DjmJd", class0, "W>cEh<*O");
      JsonMappingException jsonMappingException1 = new JsonMappingException(stringReader0, "W>cEh<*O", jsonMappingException0);
      jsonMappingException1._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "Rw)");
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "Ahe3YM<ugeyQ3 zmx");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      jsonMappingException_Reference0._from = (Object) bufferedInputStream0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("\"iU,u#ko~i__@={r+", "\"iU,u#ko~i__@={r+", (-912), hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"iU,u#ko~i__@={r+", sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "\"iU,u#ko~i__@={r+", sQLSyntaxErrorException0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
//      try { 
        charArrayWriter0.append((CharSequence) "\"iU,u#ko~i__@={r+", 99, 1984);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "2+!dC1W6@8Av=(n";
      jsonMappingException_Reference0.getIndex();
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      jsonMappingException_Reference0._desc = "UNKNOWN[?]";
      SQLException sQLException1 = new SQLException("2+!dC1W6@8Av=(n", "2+!dC1W6@8Av=(n", sQLFeatureNotSupportedException0);
      sQLException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException1, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLException1, (Object) "2+!dC1W6@8Av=(n", 414);
      Object object0 = new Object();
      jsonMappingException0.prependPath(object0, "2+!dC1W6@8Av=(n");
      MockFile mockFile0 = new MockFile("2+!dC1W6@8Av=(n");
      SQLException sQLException2 = new SQLException("yf`", sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("c2j'4m", "2+!dC1W6@8Av=(n");
      sQLRecoverableException0.setNextException(sQLException1);
      MockIOException mockIOException0 = new MockIOException("UNKNOWN[?]", sQLException2);
      JsonMappingException jsonMappingException2 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference", mockIOException0);
      jsonMappingException0.prependPath((Object) "UNKNOWN[?]", (-1372));
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException3.getPathReference((StringBuilder) null);
      jsonMappingException1._buildMessage();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException2.getProcessor();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileInputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      DupDetector dupDetector0 = DupDetector.rootDetector(jsonParser0);
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot define Creator parameter %d as `@JsonUnwrapped`: combination not yet supported", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "", 3411);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLDataException0.getStackTrace();
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException1, (Object) spliterator0, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(spliterator0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)2;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Problem deserializing property '");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = jsonMappingException1.getPathReference(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder1);
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "UNKNOWN[?]");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "UNKNOWN[?]", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLException sQLException0 = new SQLException("!}2W*b[4*5(");
      JsonMappingException jsonMappingException0 = new JsonMappingException("!}2W*b[4*5(", sQLException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) simpleAbstractTypeResolver0, "!}2W*b[4*5(");
      JsonMappingException jsonMappingException2 = new JsonMappingException("!}2W*b[4*5(", jsonMappingException1);
      Integer integer0 = new Integer((-2894));
      JsonLocation jsonLocation0 = new JsonLocation(integer0, 2121L, 2121L, 91, (-5171));
      JsonMappingException jsonMappingException3 = new JsonMappingException("!}2W*b[4*5(", jsonLocation0, jsonMappingException2);
      jsonMappingException3.prependPath((Object) jsonMappingException_Reference0, 91);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException3);
      jsonMappingException0._buildMessage();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException3.getProcessor();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "2+!dC1W6@8Av=(n";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "2+!dC1W6@8Av=(n";
      jsonMappingException_Reference0.getIndex();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("UNKNOWN[?]");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException0);
      jsonMappingException_Reference0._desc = "UNKNOWN[?]";
      SQLException sQLException0 = new SQLException("2+!dC1W6@8Av=(n", "2+!dC1W6@8Av=(n", sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
//      try { 
        jsonMappingException0.getPathReference();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, "");
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("~v|d.n_Fd^pIUg;sZ", hashMap0);
      sQLClientInfoException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Pe=", "~v|d.n_Fd^pIUg;sZ", sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "JSON", sQLNonTransientConnectionException0);
      sQLTransientConnectionException0.fillInStackTrace();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1175);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 1175);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(bufferedInputStream0, "Pe=");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "~v|d.n_Fd^pIUg;sZ", 1175);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<LineNumberReader> class0 = LineNumberReader.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair", "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair");
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(pushbackInputStream0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "E");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileInputStream0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileInputStream0, "%#j cdSpA%8-C+`", (JsonLocation) null);
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getIndex();
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      jsonMappingException_Reference0._desc = "UNKNOWN[?]";
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        jsonMappingException0.prependPath(object0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "07,'Ah:%(<}T.{z#5w";
      SQLTransientException sQLTransientException0 = new SQLTransientException("07,'Ah:%(<}T.{z#5w", (String) null, (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("07,'Ah:%(<}T.{z#5w", (String) null, sQLTransientException0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LT'ySB.>");
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) pipedOutputStream0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.toString();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.writeReplace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringReader stringReader0 = new StringReader("UNKNOWN[?]");
      jsonMappingException_Reference0._from = (Object) stringReader0;
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException.from((JsonParser) null, "UNKNOWN[?]");
      jsonMappingException_Reference1.getDescription();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 473);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.getDeserializationContext();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "a0N(+1(2aQ!DjmJd");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, "");
      JsonFactory jsonFactory0 = new JsonFactory();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Pe=", hashMap0);
      sQLClientInfoException0.spliterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "kB3oifV2G^", sQLClientInfoException0);
      sQLTransientConnectionException0.fillInStackTrace();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1175);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pushbackInputStream0, "kB3oifV2G^");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<LineNumberReader> class0 = LineNumberReader.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair");
      jsonMappingException1.getPathReference();
      jsonMappingException0.getPath();
      JsonFactory jsonFactory1 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory1.enable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.getDeserializationContext();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot pass null fieldName", sQLClientInfoException0);
      sQLClientInfoException0.spliterator();
      sQLTransientConnectionException0.fillInStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0, "Pe=");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPath();
      JsonFactory jsonFactory0 = new JsonFactory();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      String string0 = null;
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
//      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(dataInputStream0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot pass null fieldName
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.deepCopy();
      ArrayNode arrayNode0 = objectNode1.putArray("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      objectNode1.bigIntegerValue();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      pipedOutputStream0.close();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "~w$", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "", (Throwable) jsonMappingException3);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-96), (-67));
      String string0 = "p+";
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "p+");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setInputDecorator(inputDecorator0);
      ByteArrayBuilder byteArrayBuilder0 = null;
//      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-67));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("WW2MM");
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.setIndex(0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = null;
//      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
//      try { 
        JsonMappingException.from((DeserializationContext) null, "[no message for ", (Throwable) batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringReader stringReader0 = new StringReader("UNKNOWN[?]");
      jsonMappingException_Reference0._from = (Object) stringReader0;
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException.from((JsonParser) null, "UNKNOWN[?]");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" (through reference chain: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, 2);
      jsonMappingException_Reference0._from = (Object) mockPrintWriter0;
      jsonMappingException_Reference0._index = 226;
      jsonMappingException_Reference0._fieldName = " (through reference chain: ";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(2);
      JsonMappingException jsonMappingException0 = new JsonMappingException(" (through reference chain: ", (Throwable) null);
      jsonMappingException0.toString();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0.setDescription("UTF-16BE");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot pass null fieldName", sQLClientInfoException1);
      sQLClientInfoException0.spliterator();
      sQLTransientConnectionException0.fillInStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0, "Pe=");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPath();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.enable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis(2900L);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)93;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 0, (byte) (-24), true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      JsonParser jsonParser0 = jsonParserSequence0.skipChildren();
      JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", (Throwable) sQLException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Vk{6?f");
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, "");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("rFb~2?:M6|;(\"M$i");
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) sequenceInputStream0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLSyntaxErrorException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException_Reference0.writeReplace();
      jsonFactory1.setRootValueSeparator("");
      MockFile mockFile0 = new MockFile("6ggyvZK}/ZC})M");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "JSON");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringReader stringReader0 = new StringReader("UNKNOWN[?]");
      jsonMappingException_Reference0._from = (Object) stringReader0;
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[?]");
      JsonMappingException.from((JsonParser) null, "tA.+%M_i$7r9", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "7wb(3`sU4+z-l");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 1109);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte)0;
      sequenceInputStream0.read(byteArray0, 8232, (int) (byte) (-36));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sequenceInputStream0, "");
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 473);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("a0N(+1(2aQ!DjmJd", class0, (String) null);
      ((JsonMappingException)invalidFormatException0)._buildMessage();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "", 3411);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLDataException0.getStackTrace();
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException1, (Object) spliterator0, "");
      jsonMappingException0.getStackTrace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      System.setCurrentTimeMillis(3411);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "2+!dC1W6@8Av=(n";
      jsonMappingException_Reference0.getIndex();
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      jsonMappingException_Reference0._desc = "UNKNOWN[?]";
      SQLException sQLException1 = new SQLException("2+!dC1W6@8Av=(n", "2+!dC1W6@8Av=(n", sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException1, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLException1, (Object) "2+!dC1W6@8Av=(n", 414);
      Object object0 = new Object();
      jsonMappingException0.prependPath(object0, "2+!dC1W6@8Av=(n");
      MockFile mockFile0 = new MockFile("2+!dC1W6@8Av=(n");
      SQLException sQLException2 = new SQLException("yf`", sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("c2j4m", "2+!dC1W6@8Av=(n");
      sQLRecoverableException0.setNextException(sQLException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException2);
      MockIOException mockIOException0 = new MockIOException("UNKNOWN[?]", sQLException2);
      JsonMappingException jsonMappingException2 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference", mockIOException0);
      jsonMappingException0.prependPath((Object) "UNKNOWN[?]", (-1372));
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException1._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference1.getFieldName();
      jsonMappingException2.getProcessor();
      jsonMappingException0.getPathReference();
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "Obp>?Jn4 'iu");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"Obp>?Jn4 'iu\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "Out~tY0Ww`g ywg$");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "Out~tY0Ww`g ywg$", (Throwable) jsonMappingException0);
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("YHn}}@Q4MHX");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      String string0 = "MWu;$";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "MWu;$", "5hA[W?VN*!>oFk=geEt");
      StringReader stringReader0 = new StringReader("5hA[W?VN*!>oFk=geEt");
      stringReader0.skip(1L);
      jsonMappingException0.prependPath((Object) stringReader0, "|NV-]H>D>y&*");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, "|NV-]H>D>y&*");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      // Undeclared exception!
//      try { 
        lineNumberReader0.read((char[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Reader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "WW2MM";
      jsonMappingException_Reference0.setDescription("WW2MM");
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.setIndex(0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      int int0 = 128;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) "", 128);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      IOContext iOContext0 = null;
      ObjectReader objectReader0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = null;
//      try {
        objectReader1 = new ObjectReader((ObjectReader) null, tokenFilter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      jsonFactory0.setRootValueSeparator("");
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      MockFile mockFile0 = new MockFile("}V", "VZQHki(1K~Yw>1mU");
      File file0 = MockFile.createTempFile("VZQHki(1K~Yw>1mU", "JSON", (File) mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator(file0, jsonEncoding0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory0.disable(jsonGenerator_Feature1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("}V", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "", (Throwable) sQLSyntaxErrorException0);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex((-2039));
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath((Object) jsonFactory0, 93);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) sQLSyntaxErrorException0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) batchUpdateException0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) jsonGenerator_Feature1;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "VZQHki(1K~Yw>1mU", objectArray0);
      sQLSyntaxErrorException0.printStackTrace(printStream0);
      jsonMappingException_Reference0.setFieldName("JSON");
      Object object2 = new Object();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, object2, 2516);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0, 2334);
      jsonMappingException_Reference0.setDescription("(was ");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3445;
      SQLDataException sQLDataException0 = new SQLDataException("", "", 3445);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      sQLDataException0.getStackTrace();
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      Throwable throwable0 = sQLDataException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) sQLDataException0, 3445);
      jsonMappingException0.prependPath((Object) throwable0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath(throwable0, (Object) spliterator0, "");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "Problem deserializing property '";
      jsonMappingException_Reference0.setDescription("Problem deserializing property '");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "(was java.sql.SQLDataException) (through reference chain: java.sql.SQLDataException[\"\"]->java.sql.SQLDataException[3445])");
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      IOContext iOContext0 = null;
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe Size <= 0
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "2+!dC1W6@8Av=(n";
      jsonMappingException_Reference0.getIndex();
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      jsonMappingException_Reference0._desc = "UNKNOWN[?]";
      SQLException sQLException1 = new SQLException("2+!dC1W6@8Av=(n", "2+!dC1W6@8Av=(n", sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException1, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      JsonMappingException.wrapWithPath((Throwable) sQLException1, (Object) "2+!dC1W6@8Av=(n", 414);
      Object object0 = new Object();
      jsonMappingException0.prependPath(object0, "2+!dC1W6@8Av=(n");
      MockFile mockFile0 = new MockFile("2+!dC1W6@8Av=(n");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("]~0}dZgk", "UNKNOWN[?]", "2+!dC1W6@8Av=(n", (-736));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("UNKNOWN[?]", "'Hgq.SN+,]Y", "NS:u/*gtdbw<QH4a:)o", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("]~0}dZgk", "NS:u/*gtdbw<QH4a:)o", "com.fasterxml.jackson.databind.JsonMappingException$Reference", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("+Dk60,Q5>F*Ug=M1", "UNKNOWN[?]", "", (-1));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("UNKNOWN[?]", "+Dk60,Q5>F*Ug=M1", "NS:u/*gtdbw<QH4a:)o", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      sQLException0.getStackTrace();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("2+!dC1W6@8Av=(n");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      sQLException1.printStackTrace((PrintStream) mockPrintStream1);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(mockFileWriter0);
      JsonMappingException.wrapWithPath((Throwable) sQLException1, jsonMappingException_Reference1);
      jsonMappingException_Reference0.getFieldName();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "[]");
      jsonMappingException_Reference0.getIndex();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Throwable throwable0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      jsonMappingException_Reference0.writeReplace();
      // Undeclared exception!
//      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(" (through reference chain: ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLFeatureNotSupportedException0, 91);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFrom();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getCause();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, referenceType0);
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0, (Object) "D_1b#n-GG AOsb#_<", object0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler("");
      ArrayType arrayType2 = ArrayType.construct((JavaType) arrayType1, typeBindings0);
      StringBuilder stringBuilder0 = new StringBuilder(91);
      StringBuilder stringBuilder1 = jsonMappingException1.getPathReference(stringBuilder0);
      StringBuilder stringBuilder2 = arrayType2.getErasedSignature(stringBuilder1);
      jsonMappingException1.getPathReference(stringBuilder2);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "D_1b#n-GG AOsb#_<", (Throwable) jsonMappingException0);
      jsonMappingException1.toString();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getFieldName();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      String string0 = "c_\" YUK)ePymL b";
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "c_\" YUK)ePymL b", "c_\" YUK)ePymL b");
      JsonMappingException.fromUnexpectedIOE(invalidFormatException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) "c_\" YUK)ePymL b");
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream("c_\" YUK)ePymL b");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
//      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = "";
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNotNull(arrayNode0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.currentToken());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      assertNotNull(jsonParserSequence0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      
      JsonLocation jsonLocation0 = jsonParserSequence0.getCurrentLocation();
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      
      String string1 = "@";
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("+rD2MH:", (Object) "@");
      assertNotNull(injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("@", "@");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // @
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      String string0 = "";
      jsonMappingException_Reference0.setFieldName("");
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._from = (Object) jsonMappingException_Reference1;
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("", jsonMappingException_Reference1.getFieldName());
      
      jsonMappingException_Reference0._fieldName = "UNKNOWN";
      assertEquals("UNKNOWN", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      int int0 = (-3538);
      jsonMappingException_Reference0.setIndex((-3538));
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertEquals("UNKNOWN", jsonMappingException_Reference0.getFieldName());
      assertEquals((-3538), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference2);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      
      int int1 = Integer.MIN_VALUE;
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter(Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "Pm5.4e");
      assertNotNull(jsonMappingException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jsonMappingException0;
      objectArray0[3] = (Object) jsonMappingException0;
      objectArray0[4] = (Object) jsonMappingException0;
      mockPrintWriter0.write(3126);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("Pm5.4e", objectArray0);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      jsonMappingException0.printStackTrace(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      Object object1 = jsonMappingException_Reference0.getFrom();
      assertNull(object1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      String string0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      jsonMappingException0.getPath();
      int int0 = 3760;
      PipedReader pipedReader0 = new PipedReader(3760);
      LineNumberReader lineNumberReader0 = null;
//      try {
        lineNumberReader0 = new LineNumberReader(pipedReader0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Buffer size <= 0
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }
}
