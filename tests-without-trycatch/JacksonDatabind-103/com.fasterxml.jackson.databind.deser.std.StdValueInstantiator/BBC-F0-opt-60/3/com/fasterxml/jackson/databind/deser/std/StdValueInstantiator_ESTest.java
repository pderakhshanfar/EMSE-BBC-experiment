/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:00:49 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4Z");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1081L));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      LongNode longNode0 = LongNode.valueOf((-1081L));
      ArrayType arrayType2 = arrayType1.withContentTypeHandler(longNode0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType2);
      stdValueInstantiator0.getValueClass();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromDoubleCreator;
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      DeserializationContext deserializationContext0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayType0;
      objectArray0[1] = (Object) arrayType1;
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, "4Z");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for [array type, component type: [simple type, class com.fasterxml.jackson.core.JsonFactory$Feature]]
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[4];
      stdValueInstantiator1._constructorArguments = settableBeanPropertyArray0;
      stdValueInstantiator1._delegateCreator = null;
      stdValueInstantiator1.getFromObjectArguments((DeserializationConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializationContext deserializationContext0 = null;
      double double0 = Double.NaN;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, (JavaType) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      SimpleType simpleType0 = referenceType0.withContentValueHandler((Object) null);
      StdValueInstantiator stdValueInstantiator1 = null;
//      try {
        stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("No delegate constructor for ");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ht2L$i`l&JUES-+?=oS", "ht2L$i`l&JUES-+?=oS", sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLTransactionRollbackException0.initCause(sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Jl+/H(lg1,%lS", sQLSyntaxErrorException1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Jl+/H(lg1,%lS", "Jl+/H(lg1,%lS", sQLTransactionRollbackException1);
      // Undeclared exception!
      stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      stdValueInstantiator0.canCreateFromBoolean();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for UNKNOWN TYPE
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      hashMap0.remove((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("No delegate constructor for ", "No delegate constructor for ", (-781), hashMap0);
      stdValueInstantiator0.wrapException(sQLClientInfoException0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      beanProperty_Bogus0.findAliases((MapperConfig<?>) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator1.createFromString((DeserializationContext) null, "1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1._fromLongCreator;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("", "");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withSimpleName("");
      POJOPropertyBuilder pOJOPropertyBuilder2 = pOJOPropertyBuilder1.withName(propertyName0);
      pOJOPropertyBuilder2.getGetter();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator1.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator1.createUsingDelegate(defaultDeserializationContext0, objectMapper_DefaultTypeResolverBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for `java.io.InputStream`
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromLongCreator;
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      SQLException sQLException0 = new SQLException("$-Ru9;", ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", (-273));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLException0);
      sQLException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      stdValueInstantiator0.wrapException(sQLException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ObjectMapper.DefaultTypeResolverBuilder> class0 = ObjectMapper.DefaultTypeResolverBuilder.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializationContext deserializationContext0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class2, class2);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactoryConfig0, mapType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      defaultDeserializationContext_Impl0.getConfig();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      System.setCurrentTimeMillis(1L);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLRecoverableException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setMixInResolver((ClassIntrospector.MixInResolver) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, true);
      JavaType javaType0 = objectMapper3.constructType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      objectMapper2.canDeserialize(javaType0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingArrayDelegate(defaultDeserializationContext_Impl0, exceptionInInitializerError0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for [simple type, class java.lang.ExceptionInInitializerError]
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canInstantiate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactoryConfig0, objectReader1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      ObjectReader objectReader2 = objectReader1.withRootName("JSON");
      ObjectReader objectReader3 = objectReader2.withoutRootName();
      TypeFactory typeFactory0 = objectReader3.getTypeFactory();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1591));
      placeholderForType0.getContentType();
      typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromLongCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getWithArgsCreator();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Nulls nulls0 = Nulls.SET;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      Class<ObjectReader> class2 = ObjectReader.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class2);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapType0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) null, (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromBooleanCreator;
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getValueClass();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._withArgsCreator;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Instantiation of ");
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      objectMapper1.configure(jsonParser_Feature0, false);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      beanProperty_Bogus0.findAliases((MapperConfig<?>) null);
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      ObjectMapper objectMapper2 = objectMapper0.disable(jsonParser_FeatureArray0);
      objectMapper2.getDeserializationContext();
      Object object0 = new Object();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canInstantiate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("A", "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", (-1363), sQLFeatureNotSupportedException0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLFeatureNotSupportedException1);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext0, exceptionInInitializerError0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializationContext deserializationContext0 = null;
      double double0 = 1008.0519307;
      MockException mockException0 = new MockException();
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, exceptionInInitializerError0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.findAliases((MapperConfig<?>) null);
      JavaType javaType0 = beanProperty_Bogus0.getType();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator1._constructorArguments = settableBeanPropertyArray0;
      stdValueInstantiator1._delegateCreator = null;
      stdValueInstantiator1.getFromObjectArguments((DeserializationConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
//      try { 
        stdValueInstantiator1.createFromDouble(defaultDeserializationContext0, 0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.canInstantiate();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext0, sQLTransientException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class1);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLTransientException0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("vUu(+MEu~%9", "com.fasterxml.jackson.core.Base64Variants", 1, longArray0, jsonMappingException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, batchUpdateException0);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      stdValueInstantiator0.getDefaultCreator();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<JavaType> class0 = JavaType.class;
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, stdValueInstantiator0);
      deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators1);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.configureFromStringCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromLongCreator;
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromString((DeserializationContext) null, "%9\"O");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, "Instantiation of ");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<NamedType> class1 = NamedType.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class1);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, invocationTargetException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "UNKNOWN TYPE");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN TYPE", jsonMappingException0);
      MockException mockException0 = new MockException(sQLRecoverableException0);
      stdValueInstantiator0.wrapException(mockException0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      assertNull(annotatedWithParams0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      assertNotNull(annotationMap1);
      assertSame(annotationMap0, annotationMap1);
      assertSame(annotationMap1, annotationMap0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap1, (-16));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-16), annotatedParameter0.getIndex());
      
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      assertSame(annotationMap0, annotationMap1);
      assertSame(annotationMap1, annotationMap0);
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-16), annotatedParameter0.getIndex());
      
      stdValueInstantiator0.getIncompleteParameter();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator");
      stdValueInstantiator0.wrapException(jsonMappingException0);
      stdValueInstantiator0.canInstantiate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1369, (Throwable) null);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", (Throwable) null);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLFeatureNotSupportedException0, "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", 0, invocationTargetException0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext0, invocationTargetException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._withArgsCreator;
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateFromBoolean();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, (PropertyName) null);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName((PropertyName) null);
      pOJOPropertyBuilder1.getGetter();
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, deserializerFactoryConfig0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for [simple type, class java.lang.Object]
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransientException0);
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLTransientException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, jsonMappingException0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, jsonMappingException0);
      stdValueInstantiator0.getValueClass();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransientException0);
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLTransientException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, jsonMappingException0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1070, mockThrowable0);
      stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._withArgsCreator;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Instantiation of ");
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      objectMapper1.configure(jsonParser_Feature0, false);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      beanProperty_Bogus0.findAliases((MapperConfig<?>) null);
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      ObjectMapper objectMapper2 = objectMapper0.disable(jsonParser_FeatureArray0);
      objectMapper2.getDeserializationContext();
      Object object0 = new Object();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      String string0 = "";
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransientException0);
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JsonMappingException jsonMappingException0 = stdValueInstantiator1.wrapException(sQLTransientException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext0, jsonMappingException0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      ValueInstantiator.Base valueInstantiator_Base1 = null;
//      try {
        valueInstantiator_Base1 = new ValueInstantiator.Base((JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator$Base", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockThrowable mockThrowable0 = new MockThrowable("y't!}<", sQLTransientException0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext0, mockThrowable0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      Class<JsonFactory.Feature> class1 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature1;
      objectMapper3.disable(jsonParser_FeatureArray0);
      objectMapper0.getDeserializationContext();
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromLongCreator;
      stdValueInstantiator2.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.getValueTypeDesc();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.getValueClass();
      System.setCurrentTimeMillis(771L);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getType();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromInt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1.getWithArgsCreator();
      assertNull(annotatedWithParams0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      
      JavaType javaType0 = stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertNull(javaType0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      defaultDeserializationContext_Impl0.getConfig();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      System.setCurrentTimeMillis(1L);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLRecoverableException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setMixInResolver((ClassIntrospector.MixInResolver) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, true);
      JavaType javaType0 = objectMapper3.constructType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingArrayDelegate(defaultDeserializationContext_Impl0, exceptionInInitializerError0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for [simple type, class java.lang.ExceptionInInitializerError]
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2228;
      intArray0[1] = 2228;
      int int0 = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 2228;
      intArray0[4] = 2228;
      intArray0[5] = 2228;
      intArray0[6] = 2228;
      intArray0[7] = 2228;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer", 2228, intArray0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext0, batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateFromLong();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDefault(defaultDeserializationContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)1;
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.canCreateFromLong();
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator2.createFromDouble(defaultDeserializationContext_Impl0, 0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1._withArgsCreator;
      stdValueInstantiator1.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator1.canCreateFromBoolean();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      stdValueInstantiator1.canCreateUsingDelegate();
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator1);
      stdValueInstantiator2.getArrayDelegateCreator();
      stdValueInstantiator1.getDefaultCreator();
      stdValueInstantiator2.canCreateUsingArrayDelegate();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.createInstance((DeserializationConfig) null, (JsonParser) null, (InjectableValues) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNull(deserializationConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromObjectWith();
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(boolean0);
      
      JavaType javaType0 = stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertNull(javaType0);
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      Class<InvocationTargetException> class1 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class1);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError("Null constructor not allowed");
      assertNotNull(exceptionInInitializerError0);
      assertEquals("java.lang.ExceptionInInitializerError: Null constructor not allowed", exceptionInInitializerError0.toString());
      assertEquals("Null constructor not allowed", exceptionInInitializerError0.getMessage());
      
      MockIOException mockIOException0 = new MockIOException(exceptionInInitializerError0);
      assertNotNull(mockIOException0);
      
      SQLException sQLException0 = new SQLException("Null constructor not allowed", "Null constructor not allowed", mockIOException0);
      assertNotNull(sQLException0);
      assertEquals("java.lang.ExceptionInInitializerError: Null constructor not allowed", exceptionInInitializerError0.toString());
      assertEquals("Null constructor not allowed", exceptionInInitializerError0.getMessage());
      assertEquals("java.sql.SQLException: Null constructor not allowed", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Null constructor not allowed", sQLException0.getMessage());
      assertEquals("Null constructor not allowed", sQLException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = stdValueInstantiator1.wrapException(sQLException0);
      assertNotNull(jsonMappingException0);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("java.lang.ExceptionInInitializerError: Null constructor not allowed", exceptionInInitializerError0.toString());
      assertEquals("Null constructor not allowed", exceptionInInitializerError0.getMessage());
      assertEquals("java.sql.SQLException: Null constructor not allowed", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Null constructor not allowed", sQLException0.getMessage());
      assertEquals("Null constructor not allowed", sQLException0.getSQLState());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getWithArgsCreator();
      assertNull(annotatedWithParams0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      JavaType javaType1 = stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertNull(javaType1);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromObjectWith();
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      MockThrowable mockThrowable0 = new MockThrowable("y't!}<", sQLTransientException0);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext0, mockThrowable0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertNotSame(simpleType0, javaType0);
      assertFalse(simpleType0.equals((Object)javaType0));
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(javaType0.equals((Object)simpleType0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      assertNotSame(javaType0, simpleType0);
      assertFalse(javaType0.equals((Object)simpleType0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getWithArgsCreator();
      assertNull(annotatedWithParams0);
      assertNotSame(javaType0, simpleType0);
      assertFalse(javaType0.equals((Object)simpleType0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      JavaType javaType1 = stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertNull(javaType1);
      assertNotSame(javaType0, simpleType0);
      assertFalse(javaType0.equals((Object)simpleType0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDefault();
      assertNotSame(javaType0, simpleType0);
      assertFalse(javaType0.equals((Object)simpleType0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      JavaType javaType0 = stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertNull(javaType0);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromBoolean();
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext_Impl0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("MY9D");
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: MY9D", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("MY9D", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) "MY9D", "MY9D");
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLTransientException: MY9D", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("MY9D", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "MY9D", true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertNotNull(byteQuadsCanonicalizer0);
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3852));
      assertNotNull(byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectReader0, byteQuadsCanonicalizer1, (byte[]) null, 2, 1431, true);
      assertNotNull(uTF8StreamJsonParser0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "MY9D", (Throwable) sQLTransientException0);
      assertNotNull(jsonMappingException1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals("java.sql.SQLTransientException: MY9D", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("MY9D", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      
      Throwable throwable0 = jsonMappingException1.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, throwable0);
      assertSame(throwable0, jsonMappingException1);
      assertNotSame(throwable0, jsonMappingException0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException0));
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals("java.sql.SQLTransientException: MY9D", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("MY9D", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException2 = stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext0, throwable0);
      assertNotNull(jsonMappingException2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, throwable0);
      assertSame(throwable0, jsonMappingException1);
      assertSame(throwable0, jsonMappingException2);
      assertNotSame(throwable0, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, throwable0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("java.sql.SQLTransientException: MY9D", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("MY9D", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDelegateCreator();
      assertNull(annotatedWithParams0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(boolean0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      
      boolean boolean1 = stdValueInstantiator1.canCreateFromDouble();
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertTrue(boolean1 == boolean0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(boolean1);
      
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator1.getDelegateCreator();
      assertNull(annotatedWithParams1);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      
      boolean boolean2 = stdValueInstantiator0.canInstantiate();
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(boolean0);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getArrayDelegateCreator();
      assertNull(annotatedWithParams0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0.getDefaultCreator();
      assertNull(annotatedWithParams1);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<ObjectMapper.DefaultTypeResolverBuilder> class1 = ObjectMapper.DefaultTypeResolverBuilder.class;
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator((DeserializationConfig) null, class1);
      assertNotNull(stdValueInstantiator2);
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator2.canCreateFromDouble());
      assertFalse(stdValueInstantiator2.canCreateFromString());
      assertEquals("`com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder`", stdValueInstantiator2.getValueTypeDesc());
      assertFalse(stdValueInstantiator2.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator2.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator2.canCreateUsingDefault());
      assertFalse(stdValueInstantiator2.canCreateFromInt());
      assertFalse(stdValueInstantiator2.canCreateFromBoolean());
      assertFalse(stdValueInstantiator2.canInstantiate());
      assertFalse(stdValueInstantiator2.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator2.canCreateFromLong());
      
      StdValueInstantiator stdValueInstantiator3 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator3);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator2));
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator2));
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator3.canCreateUsingDefault());
      assertFalse(stdValueInstantiator3.canInstantiate());
      assertFalse(stdValueInstantiator3.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator3.canCreateFromString());
      assertFalse(stdValueInstantiator3.canCreateFromInt());
      assertFalse(stdValueInstantiator3.canCreateFromLong());
      assertFalse(stdValueInstantiator3.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.String`", stdValueInstantiator3.getValueTypeDesc());
      assertFalse(stdValueInstantiator3.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator3.canCreateFromBoolean());
      assertFalse(stdValueInstantiator3.canCreateFromDouble());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1.getWithArgsCreator();
      assertNull(annotatedWithParams0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator2);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator3);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator3);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator2);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator2));
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator3));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator3));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator2));
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      
      boolean boolean0 = stdValueInstantiator1.canCreateFromDouble();
      assertNotSame(stdValueInstantiator0, stdValueInstantiator2);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator3);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator3);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator2);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator2));
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator3));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator3));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator2));
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(boolean0);
      
      stdValueInstantiator2.configureFromDoubleCreator((AnnotatedWithParams) null);
      assertNotSame(stdValueInstantiator2, stdValueInstantiator3);
      assertNotSame(stdValueInstantiator2, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator2, stdValueInstantiator0);
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator3));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator2.canCreateFromDouble());
      assertFalse(stdValueInstantiator2.canCreateFromString());
      assertEquals("`com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder`", stdValueInstantiator2.getValueTypeDesc());
      assertFalse(stdValueInstantiator2.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator2.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator2.canCreateUsingDefault());
      assertFalse(stdValueInstantiator2.canCreateFromInt());
      assertFalse(stdValueInstantiator2.canCreateFromBoolean());
      assertFalse(stdValueInstantiator2.canInstantiate());
      assertFalse(stdValueInstantiator2.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator2.canCreateFromLong());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._withArgsCreator;
      assertNull(annotatedWithParams0);
      
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromBoolean();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0.getArrayDelegateCreator();
      assertNull(annotatedWithParams1);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("lo", "");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: lo", sQLRecoverableException0.toString());
      assertEquals("lo", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("lo", sQLRecoverableException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: lo", sQLRecoverableException0.toString());
      assertEquals("lo", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: lo", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("lo", sQLDataException0.getMessage());
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext0, sQLDataException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNull(deserializationConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(")i(qh", "Null constructor not allowed", 0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: )i(qh", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Null constructor not allowed", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(")i(qh", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Null constructor not allowed", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: )i(qh", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Null constructor not allowed", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(")i(qh", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, 0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: )i(qh", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Null constructor not allowed", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(")i(qh", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromObjectWith();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stdValueInstantiator0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) ")i(qh";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "Null constructor not allowed";
//      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((Class<?>) class0, ")i(qh", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // )i(qh
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(8, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(8, jsonParser_FeatureArray0.length);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(8, jsonParser_FeatureArray0.length);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(8, jsonParser_FeatureArray0.length);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromString(deserializationContext0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      Class<ObjectMapper.DefaultTypeResolverBuilder> class1 = ObjectMapper.DefaultTypeResolverBuilder.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      assertNotNull(typeBindings0);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      assertNotNull(referenceType0);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) stdValueInstantiator0;
      // Undeclared exception!
//      try { 
        stdValueInstantiator1.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1._withArgsCreator;
      assertNull(annotatedWithParams0);
      
      stdValueInstantiator1.configureFromIntCreator((AnnotatedWithParams) null);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      
      boolean boolean0 = stdValueInstantiator1.canCreateFromBoolean();
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromDouble(defaultDeserializationContext_Impl0, 1.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getArrayDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNull(deserializationConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(")i(qh", "Null constructor not allowed", 0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: )i(qh", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(")i(qh", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Null constructor not allowed", sQLIntegrityConstraintViolationException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Null constructor not allowed", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: )i(qh", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(")i(qh", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Null constructor not allowed", sQLIntegrityConstraintViolationException0.getSQLState());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, 0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: )i(qh", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(")i(qh", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Null constructor not allowed", sQLIntegrityConstraintViolationException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDelegate(defaultDeserializationContext_Impl0, jsonMappingException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for `com.fasterxml.jackson.databind.MapperFeature`
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      
      stdValueInstantiator1._delegateArguments = null;
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      JsonMappingException jsonMappingException0 = stdValueInstantiator1.wrapException(dataTruncation0);
      assertNotNull(jsonMappingException0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator1.createFromDouble((DeserializationContext) null, 0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      Class<ObjectMapper.DefaultTypeResolverBuilder> class1 = ObjectMapper.DefaultTypeResolverBuilder.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      assertNotNull(typeBindings0);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      assertNotNull(referenceType0);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isAbstract());
      
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      JavaType javaType0 = resolvedRecursiveType0.refine(class1, typeBindings0, referenceType0, javaTypeArray0);
      assertNull(javaType0);
      assertEquals(1, javaTypeArray0.length);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isAbstract());
      
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      assertNotNull(stdValueInstantiator2);
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator2.canCreateFromLong());
      assertFalse(stdValueInstantiator2.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator2.canCreateUsingDefault());
      assertFalse(stdValueInstantiator2.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator2.canCreateFromInt());
      assertFalse(stdValueInstantiator2.canCreateFromDouble());
      assertFalse(stdValueInstantiator2.canCreateFromString());
      assertEquals("UNKNOWN TYPE", stdValueInstantiator2.getValueTypeDesc());
      assertFalse(stdValueInstantiator2.canCreateFromBoolean());
      assertFalse(stdValueInstantiator2.canInstantiate());
      assertFalse(stdValueInstantiator2.canCreateUsingDelegate());
      
      // Undeclared exception!
//      try { 
        stdValueInstantiator2.createFromInt(defaultDeserializationContext_Impl0, 835);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      assertNotNull(valueInstantiator_Base0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      stdValueInstantiator0.configureIncompleteParameter((AnnotatedParameter) null);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Object> class1 = Object.class;
      typeFactory0.constructMapType(class0, class0, class1);
      Class<InvocationTargetException> class2 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class2);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator1.unwrapAndWrapException(defaultDeserializationContext_Impl0, (Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getIncompleteParameter();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null resolver
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.canCreateFromString();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext_Impl0, 1L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[8];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      formatFeatureArray0[6] = formatFeature0;
      formatFeatureArray0[7] = formatFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(formatFeature0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationConfig deserializationConfig3 = deserializationConfig2.without(deserializationFeature0);
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig3, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromString();
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = null;
//      try {
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.getValueClass();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<String> class1 = String.class;
      JavaType javaType0 = simpleType0.findSuperType(class1);
      simpleType0.isTypeOrSuperTypeOf(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType1);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getWithArgsCreator();
      stdValueInstantiator0._fromStringCreator = null;
      stdValueInstantiator0.canCreateFromBoolean();
      // Undeclared exception!
//      try { 
        simpleType1.withContentType(javaType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Simple types have no content types; cannot call withContentType()
//         //
//         verifyException("com.fasterxml.jackson.databind.type.SimpleType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = null;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }
}
