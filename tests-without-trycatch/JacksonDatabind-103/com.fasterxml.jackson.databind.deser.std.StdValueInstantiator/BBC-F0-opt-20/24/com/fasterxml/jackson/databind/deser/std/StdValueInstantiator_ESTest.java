/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:59:27 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.BatchUpdateException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.util.Enumeration;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("7Y=i18LrLE&2OJ", class0, "7Y=i18LrLE&2OJ");
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<WbfXP5ah", "7Y=i18LrLE&2OJ", 1206, jsonMappingException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLTimeoutException0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(exceptionInInitializerError0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, (long[]) null, sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) null, "CsYIfPCkWq1");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException1 = stdValueInstantiator0.wrapException(exceptionInInitializerError0);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals("`com.fasterxml.jackson.annotation.SimpleObjectIdResolver`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for `com.fasterxml.jackson.databind.Module`
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertFalse(objectReader1.equals((Object)objectReader0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdResolver`", stdValueInstantiator1.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "(giP\"XF?~N%8y");
      stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, jsonMappingException0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertNotNull(class1);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertTrue(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertEquals("class com.fasterxml.jackson.annotation.JsonTypeInfo$Id", class1.toString());
      assertNotNull(class1);
      assertEquals("`com.fasterxml.jackson.annotation.JsonTypeInfo$Id`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      assertEquals("`int`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      SettableBeanProperty[] settableBeanPropertyArray1 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertNotNull(settableBeanPropertyArray1);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType1, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      Class<Module> class2 = Module.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      Class<Integer> class3 = Integer.TYPE;
      MapType mapType1 = mapType0.withKeyTypeHandler(class3);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, mapType1, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, resolvedRecursiveType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      stdValueInstantiator0._arrayDelegateType = (JavaType) collectionLikeType1;
      JavaType javaType0 = stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertNotNull(javaType0);
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(simpleObjectIdResolver0);
      stdValueInstantiator0._arrayDelegateType = (JavaType) collectionLikeType1;
      JavaType javaType0 = stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      stdValueInstantiator0._arrayDelegateType = javaType0;
      JavaType javaType1 = stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertNotNull(javaType1);
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromObjectWith();
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", "%V", 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("H-ry +k2!n &#I)dS", sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      stdValueInstantiator0.wrapException(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = null;
//      try {
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      stdValueInstantiator0._arrayDelegateType = javaType0;
      boolean boolean0 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, collectionLikeType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDefault();
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      boolean boolean0 = stdValueInstantiator0.canCreateFromBoolean();
      assertFalse(boolean0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromDouble();
      assertFalse(boolean0);
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(boolean0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromInt();
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionLikeType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromString();
      assertEquals("[array type, component type: [collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionLikeType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("class [Ljava.lang.Object;", class1.toString());
      assertEquals("[array type, component type: [collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionLikeType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType0);
      String string0 = stdValueInstantiator0.getValueTypeDesc();
      assertEquals("[array type, component type: [collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]]", string0);
      assertFalse(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, invocationTargetException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(deserializationContext0, exceptionInInitializerError0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", class0, "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator");
      stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, jsonMappingException0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, sQLFeatureNotSupportedException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromDouble(defaultDeserializationContext_Impl0, 0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext_Impl0, 772L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromInt(defaultDeserializationContext_Impl0, 5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig0, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromString(defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDefault(defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-418));
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, placeholderForType0);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, placeholderForType0, (SettableBeanProperty[]) null);
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapLikeType0);
      stdValueInstantiator0._delegateType = (JavaType) mapLikeType0;
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      assertEquals("[null]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDefaultCreator();
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertEquals("`int`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromBoolean((DeserializationContext) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionLikeType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType0);
      stdValueInstantiator0.getWithArgsCreator();
      assertEquals("[array type, component type: [collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.getArrayDelegateCreator();
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapLikeType0);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      assertEquals("[map-like type; class com.fasterxml.jackson.annotation.JsonTypeInfo$Id, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingArrayDelegate(defaultDeserializationContext_Impl0, sequenceInputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for UNKNOWN TYPE
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      stdValueInstantiator0.getDelegateCreator();
      assertEquals("[collection-like type; class java.lang.ExceptionInInitializerError, contains [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(671);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, (byte)1);
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      assertEquals("`com.fasterxml.jackson.databind.node.MissingNode`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
  }
}
