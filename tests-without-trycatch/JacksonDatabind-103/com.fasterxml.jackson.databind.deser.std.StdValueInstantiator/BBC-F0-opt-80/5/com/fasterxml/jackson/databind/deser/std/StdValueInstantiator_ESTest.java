/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:00:32 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.reflect.InvocationTargetException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for `java.time.chrono.ChronoLocalDate`
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._arrayDelegateArguments = settableBeanPropertyArray0;
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, javaType0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for `com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 1544);
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError("JSON");
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(exceptionInInitializerError0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      JavaType javaType0 = TypeFactory.unknownType();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator1.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      assertEquals("`int`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      assertEquals("`com.fasterxml.jackson.databind.Module`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, stack0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "Cannot access ");
      stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, jsonMappingException0);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertTrue(class1.isInterface());
      assertNotNull(class1);
      assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      assertEquals("`int`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      SettableBeanProperty[] settableBeanPropertyArray1 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertNotNull(settableBeanPropertyArray1);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      SettableBeanProperty[] settableBeanPropertyArray1 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(settableBeanPropertyArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NamedType> class1 = NamedType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class1, javaTypeArray0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, resolvedRecursiveType0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, resolvedRecursiveType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0._delegateType = javaType0;
      JavaType javaType1 = stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, collectionLikeType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler(deserializationProblemHandler0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig1, jsonParser0, injectableValues_Std0);
      stdValueInstantiator0.createFromDouble(defaultDeserializationContext0, 2147483647L);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdResolver`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig0, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler(deserializationProblemHandler0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeatureArray0[5], false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3254), bufferedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 33, true);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig1, readerBasedJsonParser0, injectableValues_Std0);
      stdValueInstantiator0.createFromBoolean(defaultDeserializationContext0, true);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig0, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(simpleMixInResolver0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler(deserializationProblemHandler0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeatureArray0[0], false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3254), bufferedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 33, true);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig1, readerBasedJsonParser0, injectableValues_Std0);
      stdValueInstantiator0.createFromBoolean(defaultDeserializationContext0, true);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateUsingDelegate();
      assertEquals("`com.fasterxml.jackson.databind.Module`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromObjectWith();
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLWarning sQLWarning0 = new SQLWarning("Yxh");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "com.fasterxml.jackson.databind.ser.std.ClassSerializer", sQLWarning0);
      sQLWarning0.initCause(sQLTimeoutException0);
      MockIOException mockIOException0 = new MockIOException("2|", sQLTimeoutException0);
      // Undeclared exception!
      stdValueInstantiator0.wrapException(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, (Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = null;
//      try {
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDefault();
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromBoolean();
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromDouble();
      assertFalse(boolean0);
      assertEquals("`int`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(boolean0);
      assertEquals("`com.fasterxml.jackson.databind.Module`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromInt();
      assertFalse(boolean0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromString();
      assertFalse(boolean0);
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertEquals("`java.sql.ClientInfoStatus`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(class1);
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      String string0 = stdValueInstantiator0.getValueTypeDesc();
      assertEquals("`java.lang.Integer`", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, exceptionInInitializerError0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, (String) null);
      stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, jsonMappingException0);
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("BI+8i>[g~FKk-F[\u0002g");
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransientConnectionException0, "");
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, invocationTargetException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", jsonMappingException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLRecoverableException0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      int[] intArray0 = new int[6];
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "'9#2", intArray0, jsonMappingException0);
      JsonMappingException jsonMappingException1 = stdValueInstantiator0.wrapException(batchUpdateException0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapLikeType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext_Impl0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromDouble(defaultDeserializationContext_Impl0, 2147483647L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext_Impl0, (-1L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromString(defaultDeserializationContext_Impl0, "8D");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for UNKNOWN TYPE
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, resolvedRecursiveType0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingDefault(deserializationContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertTrue(stdValueInstantiator0.canInstantiate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0._delegateType = javaType0;
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertEquals("`java.sql.ClientInfoStatus`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.getWithArgsCreator();
      assertEquals("[simple type, class com.fasterxml.jackson.databind.Module]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDefaultCreator();
      assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createFromInt(defaultDeserializationContext_Impl0, 2465);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapLikeType0);
      stdValueInstantiator0.getArrayDelegateCreator();
      assertEquals("[map-like type; class com.fasterxml.jackson.databind.DeserializationFeature, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(3266);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(numericNode0);
      MappingIterator<MockFileInputStream> mappingIterator0 = objectMapper0.readValues(jsonParser0, javaType0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0);
      // Undeclared exception!
//      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No delegate constructor for UNKNOWN TYPE
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      assertEquals("`java.sql.ClientInfoStatus`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertEquals("`java.sql.ClientInfoStatus`", stdValueInstantiator0.getValueTypeDesc());
  }
}
