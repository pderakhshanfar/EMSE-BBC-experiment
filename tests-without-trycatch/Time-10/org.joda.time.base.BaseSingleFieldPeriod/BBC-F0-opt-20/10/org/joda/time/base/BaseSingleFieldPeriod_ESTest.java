/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 02:11:35 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.years(0);
      boolean boolean0 = years1.equals(years0);
      assertEquals(1, years0.getYears());
      assertFalse(years0.equals((Object)years1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
//      try { 
        minutes0.getValue(255);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 255
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      Days days0 = minutes0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
//      try { 
        weeks0.getFieldType(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-185L));
      LocalDate localDate0 = new LocalDate(0L);
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-1977L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = Period.seconds((-2140));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, (-2140));
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(259200000L);
      Period period0 = duration0.toPeriod();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, (-2759L));
      assertEquals((-93947082), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1489L, (Chronology) ethiopicChronology0);
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      int int0 = months0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-2525L), (Chronology) ethiopicChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = days0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals("Hours", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      assertEquals("years", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Hours hours0 = minutes0.toStandardHours();
      hours0.getFieldType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Duration duration0 = Duration.standardHours(2641L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0);
      int int0 = BaseSingleFieldPeriod.between(monthDay0, monthDay0, period0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withWeekyear(561);
      Months months0 = Months.FIVE;
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, months0);
      assertEquals(17436, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      Years years0 = Years.ONE;
      YearMonth yearMonth1 = yearMonth0.plus(years0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Interval interval0 = yearMonth1.toInterval(dateTimeZone0);
      Months months0 = Months.monthsIn(interval0);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, months0);
      assertEquals(1, months0.getMonths());
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-2044L), chronology0);
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-1791));
      Instant instant0 = new Instant();
      Minutes minutes0 = Minutes.standardMinutesIn(weeks0);
      Duration duration0 = minutes0.toStandardDuration();
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
      assertEquals((-1791), weeks0.getWeeks());
      assertEquals(309212481320L, instant1.getMillis());
      assertEquals(411, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardHours(100000000000L);
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      int int0 = BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
      assertEquals((-114079), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 228L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -33907636547368
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      // Undeclared exception!
//      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(4, 4, gregorianChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Seconds seconds0 = Seconds.TWO;
      LocalDate localDate1 = localDate0.withWeekyear(561);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 45852307200
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Instant instant0 = new Instant();
      Minutes minutes0 = Minutes.standardMinutesIn(weeks0);
      Duration duration0 = minutes0.toStandardDuration();
      Duration duration1 = duration0.plus(100000000000L);
      Instant instant1 = instant0.plus((ReadableDuration) duration1);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -101209600000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = Hours.SIX;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(6, hours1.getHours());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = Hours.ONE;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(1, hours1.getHours());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Days days0 = seconds0.toStandardDays();
      // Undeclared exception!
//      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) days0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Days
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(4, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(years0, julianChronology0);
      boolean boolean0 = years0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.years(5);
      boolean boolean0 = years1.equals(years0);
      assertEquals(5, years1.getYears());
      assertFalse(boolean0);
      assertFalse(years0.equals((Object)years1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Years years0 = Years.MAX_VALUE;
      boolean boolean0 = years0.equals(seconds0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      Days days0 = minutes0.toStandardDays();
      DurationFieldType durationFieldType0 = days0.getFieldType();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertEquals(0, days0.getDays());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      int int0 = months0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
//      try { 
        days0.getValue((-1695));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1695
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      // Undeclared exception!
//      try { 
        hours0.getFieldType((-2450));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -2450
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as years is not precise in the period P1Y
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Locale locale0 = Locale.forLanguageTag("?JdEBwHFvebR:o5gX");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      MonthDay monthDay0 = MonthDay.parse("");
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-185L));
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, years0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime(0L, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Months months0 = Months.ONE;
      months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(1, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      hours0.hashCode();
      assertEquals(6, hours0.getHours());
  }
}
