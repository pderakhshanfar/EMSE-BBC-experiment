/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:35:41 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.SIX;
      Months months1 = Months.EIGHT;
      boolean boolean0 = months0.equals(months1);
      assertEquals(8, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2424));
      Minutes minutes0 = Minutes.standardMinutesIn(seconds0);
      // Undeclared exception!
//      try { 
        minutes0.getValue(452);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 452
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = new Duration(6L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      Days days0 = weeks0.toStandardDays();
      // Undeclared exception!
//      try { 
        days0.getFieldType((-140));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -140
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1000L);
      assertEquals(3600, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-1L));
      assertEquals((-432000000), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      int int0 = hours0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      int int0 = weeks0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      int int0 = hours0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2424));
      int int0 = seconds0.getValue(0);
      assertEquals((-2424), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals("Minutes", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      Days days0 = weeks0.toStandardDays();
      days0.getFieldType(0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.hours((-140));
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals((-140), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(510L, (DateTimeZone) null);
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, months0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-1897L), (Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-385));
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
      assertEquals((-259968), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime((Chronology) ethiopicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 4294967295L);
      Interval interval0 = mutableInterval0.toInterval();
      DateTime dateTime0 = interval0.getStart();
      DateTime dateTime1 = dateTime0.plusHours((-1345));
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(4842000, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.plusMillis(Integer.MIN_VALUE);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals((-2147483), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.FOUR;
      // Undeclared exception!
//      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.withYear(27);
      Hours hours0 = Hours.SEVEN;
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 62703676800
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1951);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(1598);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 4202409600
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Days days0 = Days.FIVE;
      Days days1 = Days.standardDaysIn(hours0);
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals((-1), int0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = new Duration(6L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      Days days0 = weeks0.toStandardDays();
      Days days1 = Days.MIN_VALUE;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days1);
      assertEquals(1, int0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Minutes minutes0 = Minutes.ONE;
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) hours0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Hours
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      Days days0 = weeks0.toStandardDays();
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(0, days0.getDays());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.TEN;
      Months months1 = Months.EIGHT;
      boolean boolean0 = months0.equals(months1);
      assertFalse(boolean0);
      assertEquals(8, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Years years0 = Years.ONE;
      boolean boolean0 = seconds0.equals(years0);
      assertFalse(boolean0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.FIVE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(months0);
      boolean boolean0 = months0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(5, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Months months0 = Months.THREE;
      boolean boolean0 = months0.equals(months0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      Months months0 = Months.FIVE;
      boolean boolean0 = months0.equals(yearMonth0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      Days days0 = weeks0.toStandardDays();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.NINE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Weeks weeks0 = seconds0.toStandardWeeks();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
//      try { 
        weeks0.getValue((-3699));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -3699
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
//      try { 
        days0.getFieldType(1370);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 1370
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 365L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as years is not precise in the period P2147483647Y
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, (-1L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -185542587100800000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) null);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) null);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      YearMonth yearMonth0 = new YearMonth(86400000L);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      YearMonth yearMonth0 = new YearMonth(0L);
      YearMonth yearMonth1 = yearMonth0.withYear(1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, months0);
      assertEquals(23628, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, hours0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Minutes minutes0 = seconds0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      DateTime dateTime0 = new DateTime((-2120L), (DateTimeZone) null);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadableInstant) null, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Days days0 = Days.TWO;
      days0.hashCode();
      assertEquals(2, days0.getDays());
  }
}
