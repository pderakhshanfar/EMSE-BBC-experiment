/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 02:04:54 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.days((-2541));
      days0.hashCode();
      assertEquals((-2541), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.days((-2541));
      Days days1 = Days.SIX;
      boolean boolean0 = days1.equals(days0);
      assertFalse(days0.equals((Object)days1));
      assertFalse(boolean0);
      assertEquals((-2541), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      // Undeclared exception!
//      try { 
        hours0.getValue((-1719));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1719
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, strictChronology0);
      Seconds seconds0 = Seconds.secondsIn(mutableInterval0);
      // Undeclared exception!
//      try { 
        seconds0.getFieldType((-1228));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1228
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Partial partial0 = new Partial();
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((-4781L), (Chronology) iSOChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(0, years0.getYears());
      
      Weeks weeks0 = Weeks.standardWeeksIn(years0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-4781L));
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 1610L);
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((-4781L), (Chronology) iSOChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      int int0 = years0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.ZERO;
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.TWELVE;
      int int0 = months0.getValue(0);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.days((-2541));
      int int0 = days0.getValue(0);
      assertEquals((-2541), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.SIX;
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals("Days", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.TWELVE;
      DurationFieldType durationFieldType0 = months0.getFieldType(0);
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.ONE;
      Hours hours0 = days0.toStandardHours();
      hours0.getFieldType();
      assertEquals(1, days0.getDays());
      assertEquals(24, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.TWO;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      Months months0 = Months.TWELVE;
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, months0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(7);
      LocalDateTime localDateTime2 = localDateTime1.minusHours(7);
      Period period0 = Period.days((-2102));
      int int0 = BaseSingleFieldPeriod.between(localDateTime2, localDateTime0, period0);
      assertEquals(2006, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Weeks weeks0 = Weeks.weeks(1683);
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 1683);
      Months months0 = Months.ONE;
      assertEquals(1, months0.size());
      
      BaseSingleFieldPeriod.between(localDate1, localDate0, months0);
      assertEquals(1683, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.plusMonths(128);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateTime1, durationFieldType0);
      assertEquals(7792, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.millis(450L);
      Duration duration1 = duration0.withDurationAdded(10000000000L, (-2457));
      Instant instant1 = instant0.minus((ReadableDuration) duration1);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) instant1, (ReadableInstant) instant0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
      assertEquals((-409499999), minutes0.getMinutes());
      assertEquals((-409499999), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P-2147483648M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Seconds seconds0 = Seconds.parseSeconds("P0Y");
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 2382L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -545255294001007
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Months months0 = Months.THREE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-1695), 8, buddhistChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, months0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      LocalDate localDate1 = localDate0.plusWeeks(1963);
      LocalDate localDate2 = localDate1.minus(months0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate2, localDate1, months0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 20
//         //
//         verifyException("org.joda.time.chrono.BasicGJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      YearMonth yearMonth0 = new YearMonth(0L);
      YearMonth yearMonth1 = yearMonth0.plusYears((-213044));
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 6723019267200
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 0, (DateTimeZone) null);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(0L, dateTimeZone0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.plusMonths((-306783378));
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, dateTime1, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -18675054658
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Months months0 = Months.TWO;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) hours0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Months cannot be compared to class org.joda.time.Hours
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = Months.THREE;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals(3, months1.getMonths());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      MutableInterval mutableInterval0 = new MutableInterval();
      Months months1 = Months.monthsIn(mutableInterval0);
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(0, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.TWO;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(0, int0);
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      MutablePeriod mutablePeriod0 = new MutablePeriod(months0);
      boolean boolean0 = months0.equals(mutablePeriod0);
      assertEquals(11, months0.getMonths());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = Months.THREE;
      boolean boolean0 = months0.equals(months1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean0);
      assertEquals(3, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      boolean boolean0 = days0.equals(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.TWO;
      boolean boolean0 = months0.equals(months0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Days days0 = Days.FIVE;
      Weeks weeks0 = Weeks.ONE;
      boolean boolean0 = days0.equals(weeks0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Years years0 = Years.yearsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
//      try { 
        years0.getValue(5);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Years years0 = Years.TWO;
      // Undeclared exception!
//      try { 
        years0.getFieldType(4709);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 4709
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-110L));
      assertEquals((-130909), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Partial partial1 = partial0.without(dateTimeFieldType0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalTime localTime0 = new LocalTime((long) (-1), (Chronology) iSOChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((-3995L), dateTimeZone0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, months0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(3, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Period period0 = hours0.toPeriod();
      Days days0 = Days.standardDaysIn(period0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, hours0.getHours());
  }
}
