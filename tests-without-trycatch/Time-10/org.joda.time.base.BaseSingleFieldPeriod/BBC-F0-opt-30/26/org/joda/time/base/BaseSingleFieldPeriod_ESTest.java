/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:49:35 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      hours0.hashCode();
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Weeks weeks1 = Weeks.TWO;
      boolean boolean0 = weeks1.equals(weeks0);
      assertFalse(boolean0);
      assertEquals(2, weeks1.getWeeks());
      assertFalse(weeks0.equals((Object)weeks1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
//      try { 
        minutes0.getValue(1923);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 1923
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
//      try { 
        minutes0.getFieldType((-1513));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1513
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) localDate0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, 1192L);
      assertEquals(507382, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Seconds seconds1 = seconds0.negated();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds1, 1L);
      assertEquals((-1000), int0);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Minutes minutes0 = Minutes.standardMinutesIn(weeks0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      int int0 = weeks0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = new Duration(186L);
      Days days0 = duration0.toStandardDays();
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      assertEquals("days", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Hours hours0 = Hours.standardHoursIn(weeks0);
      BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, hours0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = monthDay0.withDayOfMonth(1);
      int int0 = BaseSingleFieldPeriod.between(monthDay1, monthDay0, weeks0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.minusMonths(2427);
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, weeks0);
      assertEquals((-10553), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Hours hours0 = Hours.standardHoursIn(weeks0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(978L, (Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(27, 1);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) 27);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.ZERO;
      Months months1 = months0.plus((-1));
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(months1, (-1));
      DurationFieldType durationFieldType0 = months1.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-54L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -24051816846400000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Months months0 = Months.TWELVE;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      LocalDate localDate0 = new LocalDate(2096L);
      LocalDate localDate1 = localDate0.withYearOfCentury(1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate1, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2177452800
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.joda.time.base.BaseSingleFieldPeriod");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.ONE;
      Months months1 = Months.NINE;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals((-1), int0);
      assertEquals(9, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      Months months1 = Months.NINE;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals(1, int0);
      assertEquals(9, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Weeks weeks0 = Weeks.standardWeeksIn(days0);
      // Undeclared exception!
//      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) days0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Days
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(weeks0, iSOChronology0);
      boolean boolean0 = weeks0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Weeks weeks0 = Weeks.ZERO;
      boolean boolean0 = weeks0.equals(seconds0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Object object0 = new Object();
      boolean boolean0 = weeks0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      boolean boolean0 = weeks0.equals(weeks0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Weeks weeks1 = Weeks.ONE;
      boolean boolean0 = weeks0.equals(weeks1);
      assertFalse(boolean0);
      assertEquals(1, weeks1.getWeeks());
      assertFalse(weeks1.equals((Object)weeks0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Hours hours0 = Hours.TWO;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      Minutes minutes0 = Minutes.ZERO;
      Period period0 = minutes0.toPeriod();
      period0.plus(months0);
      assertEquals(11, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      // Undeclared exception!
//      try { 
        weeks0.getValue((-1512));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1512
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1570));
      // Undeclared exception!
//      try { 
        minutes0.getFieldType(4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3L));
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      Period period1 = period0.minusMonths(12);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period1, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P-12MT-3M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localDate0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = new Instant((long) (-1000));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      seconds0.toMutablePeriod();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Hours hours0 = Hours.standardHoursIn(weeks0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(604800L, (Chronology) strictChronology0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(3650);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight1, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 3182058000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, int0);
  }
}
