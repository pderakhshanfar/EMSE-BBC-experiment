/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:54:19 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Seconds seconds0 = hours0.toStandardSeconds();
      Seconds seconds1 = Seconds.THREE;
      boolean boolean0 = seconds1.equals(seconds0);
      assertEquals(3, seconds1.getSeconds());
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period((Object) null, periodType0);
      Days days0 = period0.toStandardDays();
      // Undeclared exception!
//      try { 
        days0.getValue(10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 10
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      // Undeclared exception!
//      try { 
        months0.getFieldType((-1));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      MonthDay monthDay0 = new MonthDay(0L);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, localTime0, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 211L);
      assertEquals(818957, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-931L));
      assertEquals((-649624), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Months months0 = Months.TEN;
      int int0 = months0.getValue(0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.months((-153));
      int int0 = months0.getValue(0);
      assertEquals((-153), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.TWO;
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      DurationFieldType durationFieldType0 = hours0.getFieldType(0);
      assertEquals("hours", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals("months", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 1);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = BaseSingleFieldPeriod.between(monthDay0, monthDay0, weeks0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.minusDays(559);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
      assertEquals(48297600, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Hours hours0 = Hours.EIGHT;
      MonthDay monthDay1 = new MonthDay(1L);
      int int0 = BaseSingleFieldPeriod.between(monthDay0, monthDay1, hours0);
      assertEquals((-1056), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      Instant instant0 = Instant.now();
      Years years0 = Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(1);
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, mutableDateTime0, durationFieldType0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(4784);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals((-3494640), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-1487L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 873435178419905
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.SEVEN;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Months months0 = Months.TEN;
      TimeZone timeZone0 = TimeZone.getTimeZone("The chronology of the time does not match");
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(48);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(strictChronology0);
      MonthDay monthDay2 = monthDay1.plusDays(256);
      MonthDay monthDay3 = monthDay2.minusDays(0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay3, monthDay0, months0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 30 for dayOfMonth must be in the range [1,29]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      MockDate mockDate0 = new MockDate(9, (-4366), 4165, 9, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.withYear((-2990));
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, minutes0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2390965920
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 1, 1, 1, 1, 1, 1, dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, mutableDateTime0, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTime dateTime0 = dateMidnight0.toDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(4784);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight2 = DateMidnight.now((Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight2, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -150968448000000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Hours hours1 = hours0.plus(hours0);
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(12, hours1.getHours());
      assertEquals(6, hours0.getHours());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      Months months1 = Months.FIVE;
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(5, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.TWO;
      Minutes minutes0 = Minutes.minutes(1);
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) months0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Months
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Seconds seconds1 = Seconds.THREE;
      boolean boolean0 = seconds1.equals(seconds0);
      assertFalse(seconds0.equals((Object)seconds1));
      assertEquals(3, seconds1.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(weeks0);
      boolean boolean0 = weeks0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(3, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      boolean boolean0 = months0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Seconds seconds0 = hours0.toStandardSeconds();
      boolean boolean0 = seconds0.equals(seconds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Days days0 = Days.ONE;
      Seconds seconds0 = Seconds.THREE;
      boolean boolean0 = seconds0.equals(days0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Seconds seconds0 = Seconds.ONE;
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1));
      int int0 = seconds0.get((DurationFieldType) null);
      assertEquals((-1), seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1);
      // Undeclared exception!
//      try { 
        minutes0.getValue((-601));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -601
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.ZERO;
      Duration duration0 = days0.toStandardDuration();
      Seconds seconds0 = duration0.toStandardSeconds();
      // Undeclared exception!
//      try { 
        seconds0.getFieldType(3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Months months0 = Months.FIVE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 3L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P5M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-396L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Partial partial0 = new Partial(monthDay0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      Partial partial1 = partial0.with(dateTimeFieldType0, 0);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = new MonthDay();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2151L), (Chronology) null);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) monthDay0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTime dateTime0 = dateMidnight0.toDateTime();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, (DurationFieldType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.FIVE;
      months0.toMutablePeriod();
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      months0.toPeriod();
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      assertEquals(0, months0.getMonths());
      
      Weeks weeks0 = Weeks.standardWeeksIn(months0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      weeks0.hashCode();
      assertEquals(3, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(0, int0);
      assertEquals(0, months0.getMonths());
  }
}
