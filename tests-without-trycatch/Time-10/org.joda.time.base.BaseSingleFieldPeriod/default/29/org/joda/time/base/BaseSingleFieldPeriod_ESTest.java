/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:49:42 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = Years.TWO;
      boolean boolean0 = years0.equals(years1);
      assertFalse(boolean0);
      assertFalse(years1.equals((Object)years0));
      assertEquals(2, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
//      try { 
        years0.getValue((-796));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -796
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
//      try { 
        minutes0.getFieldType(251);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 251
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1394L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 135L);
      assertEquals(3200000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-488L));
      assertEquals((-885245), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = months0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      int int0 = hours0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      assertEquals("years", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.SIX;
      Weeks weeks0 = days0.toStandardWeeks();
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.minusWeeks(10556);
      BaseSingleFieldPeriod.between(localDate1, localDate0, weeks0);
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-399));
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      Duration duration0 = Duration.standardHours((-1115L));
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, duration0, periodType0);
      YearMonth yearMonth1 = yearMonth0.plusMonths((-3428));
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, mutablePeriod0);
      assertEquals((-285), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      DateMidnight dateMidnight0 = new DateMidnight((long) 1814400);
      DateMidnight dateMidnight1 = dateMidnight0.plus((-1307L));
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, gregorianChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(3293);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals((-274), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, (-4704L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 1643482383673
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      // Undeclared exception!
//      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, gregorianChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(9);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight1, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -157766400000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Hours hours1 = Hours.ONE;
      int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(1, hours1.getHours());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = Hours.MIN_VALUE;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(Integer.MIN_VALUE, hours1.getHours());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours0 = Hours.hours(1);
      // Undeclared exception!
//      try { 
        hours0.compareTo((BaseSingleFieldPeriod) seconds0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Hours cannot be compared to class org.joda.time.Seconds
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, int0);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      MutablePeriod mutablePeriod0 = new MutablePeriod(seconds0, (Chronology) null);
      boolean boolean0 = seconds0.equals(mutablePeriod0);
      assertEquals(2, seconds0.getSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Seconds seconds0 = Seconds.THREE;
      boolean boolean0 = seconds0.equals(years0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Seconds seconds1 = Seconds.secondsIn(interval0);
      boolean boolean0 = seconds0.equals(seconds1);
      assertEquals(0, seconds1.getSeconds());
      assertFalse(seconds1.equals((Object)seconds0));
      assertEquals(2, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Object object0 = new Object();
      boolean boolean0 = seconds0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.get((DurationFieldType) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      // Undeclared exception!
//      try { 
        weeks0.getValue(40);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 40
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      // Undeclared exception!
//      try { 
        hours0.getFieldType((-1));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.TWO;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, (-26L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as years is not precise in the period P2Y
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, seconds0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, gregorianChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Years years0 = Years.TWO;
      years0.toMutablePeriod();
      assertEquals(2, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      months0.toPeriod();
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.SIX;
      Weeks weeks0 = days0.toStandardWeeks();
      assertEquals(1, weeks0.size());
      
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      BaseSingleFieldPeriod.between(localDate0, localDate0, weeks0);
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      seconds0.hashCode();
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = days0.minus(17887500);
      assertEquals((-17887494), days1.getDays());
  }
}
