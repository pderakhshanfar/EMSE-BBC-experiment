/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:16:40 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.dividedBy(3500);
      boolean boolean0 = hours1.equals(hours0);
      assertFalse(boolean0);
      assertEquals(7, days0.getDays());
      assertFalse(hours0.equals((Object)hours1));
      assertEquals(168, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.NINE;
      // Undeclared exception!
//      try { 
        months0.getValue((-1109));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1109
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      // Undeclared exception!
//      try { 
        minutes0.getFieldType(449);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 449
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateMidnight dateMidnight0 = new DateMidnight();
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTime dateTime0 = dateMidnight0.toDateTime(dateTimeZone0);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Seconds seconds0 = weeks0.toStandardSeconds();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 10L);
      assertEquals(60480000, int0);
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Period period0 = new Period(0, 1, (-2356), (-418));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, 1);
      assertEquals((-2296418), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Months months0 = Months.NINE;
      int int0 = months0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      int int0 = weeks0.getValue(0);
      assertEquals(1, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      int int0 = hours0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      int int0 = weeks0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType(0);
      assertEquals("weeks", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Years years0 = Years.TWO;
      Years years1 = years0.negated();
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years1.get(durationFieldType0);
      assertEquals((-2), int0);
      assertEquals(2, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Months months0 = Months.THREE;
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, months0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      YearMonth yearMonth0 = new YearMonth((-4757L), (Chronology) ethiopicChronology0);
      YearMonth yearMonth1 = yearMonth0.minusYears(1);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period((-4757L), 0, periodType0, ethiopicChronology0);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, period0);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      MonthDay monthDay1 = monthDay0.minusMonths(6);
      int int0 = BaseSingleFieldPeriod.between(monthDay1, monthDay0, weeks0);
      assertEquals((-25), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(1);
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(1123200, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(1);
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals((-31536000), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period0 = weeks0.toPeriod();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, 806L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 1611412046781141
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
//      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1854));
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      LocalDateTime localDateTime1 = LocalDateTime.now();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 14 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      LocalDate localDate1 = localDate0.plusMonths(5015);
      Seconds seconds0 = Seconds.TWO;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -13188096000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTime dateTime0 = localDateTime0.toDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 236548278);
      Months months0 = Months.FIVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 3075101536
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Hours hours0 = Hours.TWO;
      Weeks weeks1 = hours0.toStandardWeeks();
      int int0 = weeks1.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals((-1), int0);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Weeks weeks1 = Weeks.MAX_VALUE;
      int int0 = weeks1.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(1, int0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      // Undeclared exception!
//      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) hours0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Hours
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(1, hours0.getHours());
      assertEquals(0, int0);
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = Hours.standardHoursIn(days0);
      boolean boolean0 = hours0.equals(hours1);
      assertTrue(boolean0);
      assertEquals(7, days0.getDays());
      assertEquals(168, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Seconds seconds0 = hours0.toStandardSeconds();
      boolean boolean0 = seconds0.equals(hours0);
      assertEquals(7200, seconds0.getSeconds());
      assertFalse(boolean0);
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      boolean boolean0 = hours0.equals(ethiopicChronology0.EE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Hours hours0 = days0.toStandardHours();
      boolean boolean0 = hours0.equals(hours0);
      assertTrue(boolean0);
      assertEquals(7, days0.getDays());
      assertEquals(168, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Hours hours1 = hours0.dividedBy(58);
      boolean boolean0 = hours0.equals(hours1);
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(boolean0);
      assertEquals(7, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.NINE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.TWO;
      // Undeclared exception!
//      try { 
        months0.getValue(1798);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 1798
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.NINE;
      // Undeclared exception!
//      try { 
        months0.getFieldType((-1));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.months(4044);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P4044M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) null);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = new MonthDay((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1L), (Chronology) copticChronology0);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, (DurationFieldType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      weeks0.toMutablePeriod();
      assertEquals(1, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1));
      minutes0.hashCode();
      assertEquals((-1), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }
}
