/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:52:45 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.FOUR;
      days0.hashCode();
      assertEquals(4, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Minutes minutes0 = Minutes.ONE;
      Hours hours1 = minutes0.toStandardHours();
      boolean boolean0 = hours1.equals(hours0);
      assertFalse(hours0.equals((Object)hours1));
      assertEquals(1, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = period0.toStandardSeconds();
      // Undeclared exception!
//      try { 
        seconds0.getValue((-1767));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1767
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      // Undeclared exception!
//      try { 
        hours0.getFieldType(60);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 60
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-2362L));
      Period period0 = new Period();
      Hours hours0 = Hours.standardHoursIn(period0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2715);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, localTime0, hours0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 869L);
      assertEquals(99424, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-547L));
      assertEquals((-32906), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      int int0 = hours0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.TWO;
      int int0 = days0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.negated();
      int int0 = days1.getValue(0);
      assertEquals(1, days0.getDays());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = Period.seconds((-473));
      Seconds seconds0 = period0.toStandardSeconds();
      seconds0.getPeriodType();
      assertEquals((-473), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.SIX;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      DurationFieldType durationFieldType0 = seconds0.getFieldType(0);
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(35791394, minutes0.getMinutes());
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.THREE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, hours0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Period period0 = new Period();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.withYear(1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, period0);
      assertEquals(2013, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = new Duration((-3002L));
      Days days0 = duration0.toStandardDays();
      LocalDate localDate0 = new LocalDate((-3002L));
      LocalDate localDate1 = localDate0.minusYears((-559));
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, days0);
      assertEquals((-204171), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = new Instant(3131L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      Months months0 = Months.THREE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(22800, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = new Instant(3131L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, instant0, durationFieldType0);
      assertEquals((-23206821), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Period period0 = Period.hours((-1491308));
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, (-824L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 6515423300
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Days days0 = duration0.toStandardDays();
      // Undeclared exception!
//      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775807L);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, months0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, mutablePeriod0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.FIVE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(27, 27, 27, 25734375, 25734375);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.withWeekyear(25734375);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, days0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -9398186616
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 59958144000000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = new Duration((-3002L));
      Days days0 = duration0.toStandardDays();
      Days days1 = Days.FOUR;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days1);
      assertEquals(4, days1.getDays());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Days days0 = duration0.toStandardDays();
      Days days1 = Days.FOUR;
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
      assertEquals(4, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Days days0 = Days.FOUR;
      // Undeclared exception!
//      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) days0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Days
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Hours hours1 = Hours.THREE;
      boolean boolean0 = hours0.equals(hours1);
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(boolean0);
      assertEquals(3, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(hours0, (Chronology) null);
      boolean boolean0 = hours0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Minutes minutes0 = Minutes.MAX_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      boolean boolean0 = hours0.equals(weeks0);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(35791394, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      boolean boolean0 = seconds0.equals(seconds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      boolean boolean0 = weeks0.equals(" cannot be compared to ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
//      try { 
        weeks0.getValue(27);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 27
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(17, 1);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      Months months0 = Months.monthsIn(interval0);
      // Undeclared exception!
//      try { 
        months0.getFieldType((-333));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -333
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.FIVE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-489L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P5M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, 93L);
      assertEquals(0, int0);
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Hours hours0 = Hours.ZERO;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      YearMonth yearMonth0 = new YearMonth(31622400000L, (Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, yearMonth0, hours0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Hours hours0 = Hours.FIVE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, (ReadablePartial) null, hours0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadableInstant) null, (ReadableInstant) dateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0);
      Hours hours0 = duration0.toStandardHours();
      hours0.toMutablePeriod();
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Period period0 = seconds0.toPeriod();
      Period period1 = period0.minus(seconds0);
      assertEquals(1, seconds0.size());
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }
}
