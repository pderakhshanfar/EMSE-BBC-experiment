/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:19:27 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.SIX;
      days0.hashCode();
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      // Undeclared exception!
//      try { 
        weeks0.getValue((-4413));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -4413
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.THREE;
      Weeks weeks0 = Weeks.standardWeeksIn(days0);
      // Undeclared exception!
//      try { 
        weeks0.getFieldType(5062500);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 5062500
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 4908L);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(mutablePeriod0, 62035200000L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-1035));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-2121L));
      assertEquals(295128712, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(1075);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-1826L));
      assertEquals((-356056955), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.ZERO;
      int int0 = days0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      int int0 = weeks0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.TWO;
      int int0 = days0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = days0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Years years0 = Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      assertEquals("years", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      assertEquals("weeks", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.negated();
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years1.get(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals(1, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.ZERO;
      YearMonth yearMonth0 = YearMonth.now();
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.ZERO;
      LocalDateTime localDateTime0 = new LocalDateTime();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDateTime localDateTime1 = new LocalDateTime(0L, (Chronology) julianChronology0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, days0);
      assertEquals(16128, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(968, 968, 27);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime localTime1 = localTime0.minusSeconds(968);
      Minutes minutes0 = Minutes.MIN_VALUE;
      int int0 = BaseSingleFieldPeriod.between(localTime1, localTime0, minutes0);
      assertEquals((-1423), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      DateMidnight dateMidnight0 = new DateMidnight();
      Minutes minutes0 = weeks0.toStandardMinutes();
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withYearOfCentury(0);
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(7364160, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = new Instant();
      MockDate mockDate0 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withYear(1);
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime();
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(instant0, dateTime0, durationFieldType0);
      assertEquals((-2013), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, (-2787L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 66574304695801
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((Chronology) lenientChronology0);
      Instant instant0 = Instant.now();
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) instant0);
      // Undeclared exception!
//      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((Chronology) iSOChronology0);
      Seconds seconds0 = Seconds.ONE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(weeks0, periodType1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, mutablePeriod0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(351);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -1044535046400
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(1911L, (Chronology) gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withCenturyOfEra(315);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -15515500320
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.MAX_VALUE;
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = Days.ONE;
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
      assertEquals(1, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Months months0 = Months.TEN;
      // Undeclared exception!
//      try { 
        days0.compareTo((BaseSingleFieldPeriod) months0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Days cannot be compared to class org.joda.time.Months
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.TEN;
      MutablePeriod mutablePeriod0 = new MutablePeriod(months0);
      boolean boolean0 = months0.equals(mutablePeriod0);
      assertEquals(10, months0.getMonths());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.ZERO;
      DateTime dateTime0 = DateTime.now();
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      boolean boolean0 = months0.equals(days0);
      assertEquals(0, months0.getMonths());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      DateTime dateTime0 = DateTime.now();
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      boolean boolean0 = months0.equals(duration0);
      assertFalse(boolean0);
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.FOUR;
      boolean boolean0 = months0.equals(months0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Months months1 = Months.TWO;
      boolean boolean0 = months0.equals(months1);
      assertEquals(0, months0.getMonths());
      assertFalse(boolean0);
      assertEquals(2, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.ONE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.TEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      Duration duration0 = Duration.standardMinutes(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
//      try { 
        hours0.getValue(27);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 27
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      // Undeclared exception!
//      try { 
        hours0.getFieldType((-2123));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -2123
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P3M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(1132L, (Chronology) islamicChronology0);
      LocalDate localDate0 = yearMonth0.toLocalDate(27);
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1966L);
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(80, 1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      DurationFieldType durationFieldType0 = days0.getFieldType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withYearOfEra(351);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      Months months1 = Months.TWO;
      boolean boolean0 = months0.equals(months1);
      assertEquals(19956, months0.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      months0.toMutablePeriod();
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.SIX;
      Weeks weeks0 = days0.toStandardWeeks();
      weeks0.toPeriod();
      assertEquals(6, days0.getDays());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }
}
