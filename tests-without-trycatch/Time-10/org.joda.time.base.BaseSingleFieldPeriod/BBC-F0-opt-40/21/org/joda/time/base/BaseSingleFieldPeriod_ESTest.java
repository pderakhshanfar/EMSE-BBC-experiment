/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:36:33 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Seconds seconds0 = Seconds.MAX_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Hours hours1 = weeks0.toStandardHours();
      boolean boolean0 = hours1.equals(hours0);
      assertFalse(boolean0);
      assertEquals(596400, hours1.getHours());
      assertEquals(3550, weeks0.getWeeks());
      assertFalse(hours0.equals((Object)hours1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
//      try { 
        hours0.getValue(796);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 796
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.ZERO;
      // Undeclared exception!
//      try { 
        months0.getFieldType((-4309));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -4309
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-2012L));
      LocalDate localDate0 = yearMonth0.toLocalDate(17);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) localDate0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 21859200000L);
      assertEquals(2, seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 293L);
      assertEquals(61433, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-1811L));
      assertEquals(2, seconds0.getSeconds());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1);
      int int0 = minutes0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      int int0 = weeks0.getValue(0);
      assertEquals(7, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1);
      int int0 = minutes0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1412L);
      MonthDay monthDay1 = monthDay0.plusDays(1);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay1, (ReadablePartial) monthDay0);
      int int0 = minutes0.getValue(0);
      assertEquals((-1440), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      assertEquals("years", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.FOUR;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.SIX;
      Months months1 = months0.minus(4978125);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = months1.get(durationFieldType0);
      assertEquals((-4978119), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Hours hours0 = Hours.TWO;
      int int0 = BaseSingleFieldPeriod.between(monthDay0, monthDay0, hours0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Months months0 = Months.SIX;
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(2030);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, months0);
      assertEquals(24360, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Months months0 = Months.SIX;
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withPeriodAdded(months0, (-311));
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate1, months0);
      assertEquals((-1866), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardHours((-1023L));
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime0, periodType0);
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withMillis(0L);
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 1, 1);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime((Chronology) islamicChronology0);
      Minutes minutes0 = Minutes.TWO;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, mutableDateTime0, durationFieldType0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 3770L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2050647515331
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Months months0 = Months.THREE;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime2 = localDateTime1.plusYears(17);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime2, localDateTime0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2683941247
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 1);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 1);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(1);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateTime0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 56802470400
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Months months0 = Months.SIX;
      Months months1 = Months.THREE;
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals((-1), int0);
      assertEquals(3, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Months months0 = Months.ZERO;
      Months months1 = Months.FOUR;
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(4, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.ZERO;
      Hours hours0 = Hours.SIX;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) hours0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Months cannot be compared to class org.joda.time.Hours
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.FOUR;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(4, months0.getMonths());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      MutablePeriod mutablePeriod0 = new MutablePeriod(hours0);
      boolean boolean0 = hours0.equals(mutablePeriod0);
      assertEquals(4, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = Hours.FIVE;
      boolean boolean0 = hours0.equals(hours1);
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(5, hours1.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Minutes minutes0 = Minutes.standardMinutesIn(hours0);
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = minutes0.equals(durationFieldType0);
      assertEquals(360, minutes0.getMinutes());
      assertEquals(2, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1412L);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Seconds seconds0 = Seconds.ZERO;
      Weeks weeks0 = seconds0.toStandardWeeks();
      boolean boolean0 = minutes0.equals(weeks0);
      assertFalse(boolean0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.ZERO;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      boolean boolean0 = hours0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.SIX;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = months0.get(durationFieldType0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Seconds seconds0 = weeks0.toStandardSeconds();
      // Undeclared exception!
//      try { 
        seconds0.getValue((-2694));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -2694
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.FIVE;
      // Undeclared exception!
//      try { 
        months0.getFieldType(913);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 913
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.TWO;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 10000000L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P2M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-2034L));
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTime dateTime0 = new DateTime((long) 1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Seconds seconds0 = days0.toStandardSeconds();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      seconds0.toMutablePeriod();
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1412L);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Weeks weeks0 = Weeks.standardWeeksIn(minutes0);
      weeks0.toPeriod();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      seconds0.hashCode();
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }
}
