/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:43:23 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.years(0);
      Years years1 = Years.MIN_VALUE;
      boolean boolean0 = years1.equals(years0);
      assertFalse(years0.equals((Object)years1));
      assertEquals(Integer.MIN_VALUE, years1.getYears());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Seconds seconds0 = weeks0.toStandardSeconds();
      // Undeclared exception!
//      try { 
        seconds0.getValue((-197));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -197
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Years years0 = Years.years(732);
      // Undeclared exception!
//      try { 
        years0.getFieldType(357);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 357
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 439L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus((-4));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes1, (-4));
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Hours hours1 = hours0.negated();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours1, 439L);
      assertEquals((-24601), int0);
      assertEquals(3, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      int int0 = seconds0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-674L), (Chronology) gregorianChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      int int0 = hours0.getValue(0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      int int0 = minutes0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      YearMonth yearMonth0 = YearMonth.now();
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, seconds0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.ONE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(17);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, days0);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-674L), (Chronology) gregorianChronology0);
      YearMonth yearMonth1 = yearMonth0.plusYears(2018);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, minutes0);
      assertEquals((-1061364960), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      LocalDate localDate0 = yearMonth0.toLocalDate(1);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = new Instant((-1029L));
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withWeekyear(1905);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Instant instant0 = new Instant();
      int int0 = BaseSingleFieldPeriod.between(instant0, dateTime0, durationFieldType0);
      assertEquals((-44), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Days days0 = Days.standardDaysIn(seconds0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 2588L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -49787101576
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(10800000L);
      Days days0 = duration0.toStandardDays();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.ZERO;
      YearMonth yearMonth1 = yearMonth0.plusMonths(3600000);
      Hours hours0 = minutes0.toStandardHours();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, hours0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2629746000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(6);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 189388800000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = Minutes.MAX_VALUE;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(Integer.MAX_VALUE, minutes1.getMinutes());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Minutes minutes0 = Minutes.ONE;
      assertEquals(1, minutes0.size());
      
      Minutes minutes1 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(1, int0);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      // Undeclared exception!
//      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) hours0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Hours
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(1, minutes0.getMinutes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      Seconds seconds1 = minutes0.toStandardSeconds();
      boolean boolean0 = seconds0.equals(seconds1);
      assertEquals(120, seconds1.getSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.years(0);
      Years years1 = Years.TWO;
      boolean boolean0 = years1.equals(years0);
      assertFalse(years0.equals((Object)years1));
      assertFalse(boolean0);
      assertEquals(2, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.equals("0-ouO2^bP,=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Days days0 = Days.standardDaysIn(minutes0);
      boolean boolean0 = days0.equals(days0);
      assertEquals(0, days0.getDays());
      assertTrue(boolean0);
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.ONE;
      Days days0 = Days.ONE;
      boolean boolean0 = days0.equals(months0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      Minutes minutes0 = Minutes.THREE;
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, minutes0);
      Interval interval0 = mutableInterval0.toInterval();
      Years years0 = Years.yearsIn(interval0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      Minutes minutes0 = Minutes.THREE;
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, minutes0);
      Interval interval0 = mutableInterval0.toInterval();
      Seconds seconds0 = Seconds.secondsIn(interval0);
      Years years0 = Years.yearsIn(interval0);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertEquals(3, minutes0.getMinutes());
      assertEquals(180, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.years(0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(35791394, hours0.getHours());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      // Undeclared exception!
//      try { 
        seconds0.getValue(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Hours hours0 = minutes0.toStandardHours();
      // Undeclared exception!
//      try { 
        hours0.getFieldType((-195));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -195
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Years years0 = Years.years((-195));
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(mutablePeriod0, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as years is not precise in the period P-195Y
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      YearMonth yearMonth0 = new YearMonth((-2388L));
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime(62035199971L, (Chronology) copticChronology0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      seconds0.toPeriod();
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      seconds0.hashCode();
      assertEquals(1, seconds0.getSeconds());
  }
}
