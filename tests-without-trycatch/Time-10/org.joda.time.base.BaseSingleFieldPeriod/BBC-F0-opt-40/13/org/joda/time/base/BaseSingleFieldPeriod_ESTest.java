/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:20:59 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      months0.hashCode();
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Years years1 = Years.years(543);
      boolean boolean0 = years0.equals(years1);
      assertEquals(543, years1.getYears());
      assertFalse(boolean0);
      assertFalse(years1.equals((Object)years0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      // Undeclared exception!
//      try { 
        days0.getValue(7678125);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 7678125
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Months months0 = Months.SIX;
      // Undeclared exception!
//      try { 
        months0.getFieldType((-4424));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -4424
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.days((-2736));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-2736));
      assertEquals(86400000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-562L));
      assertEquals((-106), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Interval interval0 = new Interval(mutableDateTime0, hours0);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      weeks0.size();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.SIX;
      int int0 = months0.getValue(0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals("Years", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.FIVE;
      Hours hours0 = Hours.standardHoursIn(days0);
      hours0.getFieldType(0);
      assertEquals(120, hours0.getHours());
      assertEquals(5, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, years0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(77);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
      assertEquals(73281, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(257, 1);
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now(chronology0);
      MonthDay monthDay1 = MonthDay.now((Chronology) ethiopicChronology0);
      Days days0 = Days.ONE;
      int int0 = BaseSingleFieldPeriod.between(monthDay0, monthDay1, days0);
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(1L, dateTimeZone0);
      Months months0 = Months.TWELVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = new Instant((-1912L));
      Duration duration0 = Duration.standardHours((-1912L));
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) duration0, 155);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, instant0, durationFieldType0);
      assertEquals(1764, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) (-1));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, instant0, durationFieldType0);
      assertEquals((-4646), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Months months0 = Months.months(543);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P543M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-209));
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-562L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -3821145279
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(5);
      // Undeclared exception!
//      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      MonthDay monthDay0 = new MonthDay(mutableDateTime0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(86400000);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2726457097392000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) (-1));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, instant0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Seconds seconds1 = Seconds.ONE;
      int int0 = seconds1.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals((-1), int0);
      assertEquals(1, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) ethiopicChronology0);
      Minutes minutes1 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(1, int0);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
//      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) minutes0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Minutes
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(0, int0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.years(1);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(years0, iSOChronology0);
      boolean boolean0 = years0.equals(mutablePeriod0);
      assertEquals(1, years0.getYears());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Days days0 = Days.FIVE;
      Weeks weeks0 = days0.toStandardWeeks();
      Years years0 = Years.MAX_VALUE;
      boolean boolean0 = years0.equals(weeks0);
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Years years0 = Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Years years1 = Years.years((-1160));
      boolean boolean0 = years1.equals(years0);
      assertFalse(boolean0);
      assertFalse(years0.equals((Object)years1));
      assertEquals((-1160), years1.getYears());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      boolean boolean0 = years0.equals("P-2147483648Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-209));
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
//      try { 
        days0.getValue((-4572));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -4572
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
//      try { 
        days0.getFieldType(60);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 60
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-2498L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hours hours0 = Hours.hours(1338);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(629L);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localDateTime0, hours0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) ethiopicChronology0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, minutes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Days days0 = Days.standardDaysIn(minutes0);
      days0.toMutablePeriod();
      assertEquals((-1491308), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      minutes0.toPeriod();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
  }
}
