/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:38:13 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Days days0 = Days.SIX;
      Days days1 = weeks0.toStandardDays();
      boolean boolean0 = days0.equals(days1);
      assertFalse(days1.equals((Object)days0));
      assertEquals(6, days0.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.ONE;
      Hours hours0 = days0.toStandardHours();
      // Undeclared exception!
//      try { 
        hours0.getValue((-1142));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1142
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Years years0 = Years.ZERO;
      // Undeclared exception!
//      try { 
        years0.getFieldType(61);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 61
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 550);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(0, months0.getMonths());
      
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(months0, 4L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = Period.hours(8);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, 10800000L);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-2145L));
      assertEquals((-281958), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      minutes0.size();
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.SEVEN;
      int int0 = months0.getValue(0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      int int0 = weeks0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-540L));
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Weeks weeks0 = hours0.toStandardWeeks();
      weeks0.getPeriodType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Minutes minutes0 = Minutes.minutesIn(mutableInterval0);
      Seconds seconds0 = minutes0.toStandardSeconds();
      seconds0.getFieldType(0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days1.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Years years0 = Years.yearsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, years0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) julianChronology0);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.withField(dateTimeFieldType0, 2280);
      int int0 = BaseSingleFieldPeriod.between(partial1, localDateTime0, weeks0);
      assertEquals((-16227), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      DateTime dateTime0 = interval0.getStart();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateTime0, durationFieldType0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTime dateTime0 = new DateTime(dateMidnight0);
      DateTime dateTime1 = dateTime0.withYearOfEra(1036);
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateTime1, durationFieldType0);
      assertEquals((-978), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 373, 373, 1, 1, 373);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 4L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -324699527577600000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      // Undeclared exception!
//      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) julianChronology0);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.withField(dateTimeFieldType0, 0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(partial1, localDateTime0, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for year is not supported
//         //
//         verifyException("org.joda.time.field.SkipDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1L), (Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-9223372036854775808L), (Chronology) strictChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = new DateTime(0L, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(63158400000L, dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, mutableDateTime0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 1329250881320
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = Days.FIVE;
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(5, days1.getDays());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Weeks weeks1 = Weeks.MAX_VALUE;
      int int0 = weeks1.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Months months0 = Months.FIVE;
      // Undeclared exception!
//      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) months0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Months
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(0, int0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.TWO;
      Years years1 = Years.MAX_VALUE;
      boolean boolean0 = years0.equals(years1);
      assertFalse(boolean0);
      assertFalse(years1.equals((Object)years0));
      assertEquals(Integer.MAX_VALUE, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Days days0 = Days.TWO;
      MutablePeriod mutablePeriod0 = new MutablePeriod(days0);
      boolean boolean0 = days0.equals(mutablePeriod0);
      assertEquals(2, days0.getDays());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.SIX;
      Years years0 = Years.THREE;
      boolean boolean0 = years0.equals(days0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.SIX;
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Years years0 = Years.yearsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      boolean boolean0 = years0.equals(dateMidnight0);
      assertFalse(boolean0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(27);
      Interval interval0 = new Interval(0, 1, dateTimeZone0);
      Days days0 = Days.daysIn(interval0);
      Hours hours0 = days0.toStandardHours();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertEquals(0, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
//      try { 
        weeks0.getValue(365);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 365
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.SIX;
      // Undeclared exception!
//      try { 
        months0.getFieldType((-1122));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1122
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as years is not precise in the period P1Y
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Partial partial0 = new Partial(monthDay0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      Partial partial1 = partial0.with(dateTimeFieldType0, 0);
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      MockDate mockDate0 = new MockDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(373, 0, 157, 0, 157);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localDate0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, weeks0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(27);
      Interval interval0 = new Interval(0, 1, dateTimeZone0);
      Days days0 = Days.daysIn(interval0);
      days0.toMutablePeriod();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Years years0 = Years.yearsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      years0.toPeriod();
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      seconds0.hashCode();
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Seconds seconds0 = hours0.toStandardSeconds();
      Weeks weeks0 = Weeks.standardWeeksIn(seconds0);
      assertEquals(1, weeks0.size());
      
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-1798));
      BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(3600, seconds0.getSeconds());
      assertEquals(1, hours0.getHours());
  }
}
