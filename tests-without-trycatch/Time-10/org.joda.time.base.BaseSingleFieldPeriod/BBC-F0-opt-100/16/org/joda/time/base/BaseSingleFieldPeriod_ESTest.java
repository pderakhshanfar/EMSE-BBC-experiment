/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:30:24 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.THREE;
      Years years1 = Years.TWO;
      boolean boolean0 = years1.equals(years0);
      assertEquals(2, years1.getYears());
      assertFalse(boolean0);
      assertFalse(years0.equals((Object)years1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.hours((-278));
      // Undeclared exception!
//      try { 
        hours0.getValue((-278));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -278
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      // Undeclared exception!
//      try { 
        hours0.getFieldType(5273);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 5273
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 1475L);
      assertEquals(2, int0);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-764L));
      assertEquals((-157), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4, 4, 4);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      int int0 = seconds0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      int int0 = hours0.getValue(0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      int int0 = minutes0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertEquals("seconds", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Period period0 = Period.ZERO;
      Partial partial0 = new Partial();
      int int0 = BaseSingleFieldPeriod.between(partial0, partial0, period0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      MockDate mockDate0 = new MockDate(27, 27, 829);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-2015L), (Chronology) buddhistChronology0);
      LocalTime localTime1 = localTime0.withFields(localDateTime0);
      LocalTime localTime2 = localTime1.minusHours(676);
      int int0 = BaseSingleFieldPeriod.between(localTime2, localTime1, minutes0);
      assertEquals(240, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-246));
      Days days0 = Days.ONE;
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, days0);
      assertEquals((-7486), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight(68, 6, 6, fixedDateTimeZone0);
      GregorianCalendar gregorianCalendar0 = dateMidnight0.toGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2104, 630, 2);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);
      Period period0 = Period.years(365);
      Period period1 = period0.plusYears((-1938));
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period1, 14);
      Hours hours0 = Hours.THREE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(193040904, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(543);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 1188, 543, 2151, 1, 0, 0, 28265625);
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals((-543), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 742L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2894182814
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
//      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(Integer.MIN_VALUE);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((-177L), (Chronology) copticChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear((-4818));
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, seconds0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      PeriodType periodType0 = PeriodType.days();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      Period period0 = new Period(0L, 862L, periodType1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-1227));
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -3226521600
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(1L, (Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.minus(1000000000000000000L);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight1, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalTime localTime0 = new LocalTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0, dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = new Instant();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Period period0 = Period.ZERO;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(10080);
      Minutes minutes0 = period0.toStandardMinutes();
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -5301568800
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      MutableInterval mutableInterval0 = new MutableInterval();
      Days days0 = Days.daysIn(mutableInterval0);
      // Undeclared exception!
//      try { 
        days0.compareTo((BaseSingleFieldPeriod) months0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Days cannot be compared to class org.joda.time.Months
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Days days0 = Days.TWO;
      Seconds seconds1 = days0.toStandardSeconds();
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertEquals((-1), int0);
      assertEquals(2, days0.getDays());
      assertEquals(172800, seconds1.getSeconds());
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Seconds seconds1 = seconds0.plus(seconds0);
      int int0 = seconds1.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(6, seconds1.getSeconds());
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(3, seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Years years0 = Years.THREE;
      Period period0 = new Period(years0);
      boolean boolean0 = years0.equals(period0);
      assertEquals(3, years0.getYears());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Months months0 = Months.ONE;
      boolean boolean0 = years0.equals(months0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Years years0 = Years.MAX_VALUE;
      boolean boolean0 = years0.equals(yearMonth0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.TWO;
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
//      try { 
        years0.getValue(3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
//      try { 
        seconds0.getFieldType((-1033));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1033
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, (-1566L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as years is not precise in the period P3Y
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay0, yearMonth0, minutes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      LocalDate localDate0 = monthDay0.toLocalDate((-1540));
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate0, (ReadablePartial) null, minutes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, (ReadablePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadableInstant) instant0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.ZERO;
      Minutes minutes0 = days0.toStandardMinutes();
      minutes0.toMutablePeriod();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Months months0 = Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      months0.toPeriod();
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Days days0 = Days.FOUR;
      days0.hashCode();
      assertEquals(4, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      assertEquals(1, seconds0.size());
      
      MonthDay monthDay0 = MonthDay.now();
      Seconds seconds1 = Seconds.secondsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      boolean boolean0 = seconds0.equals(seconds1);
      assertFalse(boolean0);
      assertEquals(3, seconds0.getSeconds());
      assertFalse(seconds1.equals((Object)seconds0));
  }
}
