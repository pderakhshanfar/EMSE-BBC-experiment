/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:33:02 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = Minutes.MAX_VALUE;
      boolean boolean0 = minutes1.equals(minutes0);
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
//      try { 
        seconds0.getValue((-3013));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -3013
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardDays(468L);
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
//      try { 
        hours0.getFieldType((-2381));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -2381
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(5L);
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) localDate0, (ReadablePartial) yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 548L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 0, 2, 2);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(mutablePeriod0, (-343L));
      assertEquals((-10501), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = minutes0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = months0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      int int0 = minutes0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      int int0 = weeks0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType(0);
      assertEquals("hours", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.FIVE;
      int int0 = months0.get((DurationFieldType) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.FIVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, mutablePeriod0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((long) 0, (Chronology) gJChronology0);
      Interval interval0 = dateMidnight0.toInterval();
      Months months0 = Months.monthsIn(interval0);
      YearMonth yearMonth1 = new YearMonth(1274L);
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, mutablePeriod0);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Months months0 = Months.TEN;
      LocalDate localDate0 = new LocalDate((-592L), (DateTimeZone) null);
      LocalDate localDate1 = localDate0.minusDays((-106));
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, months0);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      LocalTime localTime0 = LocalTime.now();
      DateTime dateTime0 = localTime0.toDateTimeToday();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      DateTime dateTime0 = new DateTime((long) 1654);
      DateMidnight dateMidnight0 = new DateMidnight((-1666L), (Chronology) null);
      DateTime dateTime1 = dateTime0.withYear(1654);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateMidnight0, durationFieldType0);
      assertEquals(166197599, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 1);
      DateMidnight dateMidnight0 = new DateMidnight((-1666L), (Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, durationFieldType0);
      assertEquals((-86400001), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.hours((-4865));
      Minutes minutes0 = hours0.toStandardMinutes();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-1L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 17514000000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Months months0 = Months.ZERO;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-745L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = new MonthDay((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime0 = new DateTime((long) 0);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Hours hours0 = minutes0.toStandardHours();
      MonthDay monthDay1 = monthDay0.plusMonths(122);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(monthDay1, monthDay0, hours0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (-2805L), periodType2, islamicChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, mutablePeriod0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      DateTime dateTime0 = new DateTime((-4251L));
      Interval interval0 = new Interval(months0, dateTime0);
      YearMonth yearMonth0 = new YearMonth(10000000000000010L);
      YearMonth yearMonth1 = new YearMonth(0L);
      Minutes minutes0 = Minutes.minutesIn(interval0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, minutes0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -166666638240
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = Instant.now();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = new DateTime(0L, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 1);
      DateMidnight dateMidnight0 = DateMidnight.now();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 1392335999999
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      
      YearMonth yearMonth0 = new YearMonth();
      Months months1 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.NINE;
      Minutes minutes0 = Minutes.minutes(1);
      assertEquals(1, minutes0.getMinutes());
      
      DateTime dateTime0 = new DateTime(0L);
      Interval interval0 = new Interval(minutes0, dateTime0);
      Months months1 = Months.monthsIn(interval0);
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals(1, months1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Days days0 = Days.days(3069);
      Hours hours0 = days0.toStandardHours();
      Minutes minutes0 = days0.toStandardMinutes();
      // Undeclared exception!
//      try { 
        hours0.compareTo((BaseSingleFieldPeriod) minutes0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Hours cannot be compared to class org.joda.time.Minutes
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(1, minutes0.getMinutes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Period period0 = new Period(minutes0);
      boolean boolean0 = minutes0.equals(period0);
      assertTrue(boolean0);
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.ZERO;
      Minutes minutes0 = Minutes.MAX_VALUE;
      boolean boolean0 = minutes0.equals(months0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      Duration duration0 = Duration.standardSeconds(3);
      Interval interval0 = new Interval(mutableDateTime0, duration0);
      DateTime dateTime0 = interval0.getStart();
      PeriodType periodType0 = PeriodType.dayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0, periodType0);
      Weeks weeks0 = Weeks.standardWeeksIn(mutablePeriod0);
      TimeZone timeZone0 = TimeZone.getTimeZone("vR+}\"W!B");
      boolean boolean0 = weeks0.equals(timeZone0);
      assertEquals(0, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = Minutes.minutes(0);
      boolean boolean0 = minutes1.equals(minutes0);
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(boolean0);
      assertEquals(1, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.FIVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 0, 2, 2);
      Weeks weeks0 = Weeks.standardWeeksIn(mutablePeriod0);
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      // Undeclared exception!
//      try { 
        minutes0.getValue(10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 10
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
//      try { 
        months0.getFieldType(2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Months months0 = Months.FIVE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-1061L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P5M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1666L), (Chronology) null);
      Interval interval0 = dateMidnight0.toInterval();
      Months months0 = Months.monthsIn(interval0);
      assertEquals(0, months0.getMonths());
      
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(months0, 1);
      assertEquals(1, months0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, 468L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1387);
      LocalTime localTime0 = new LocalTime((long) 1654, dateTimeZone0);
      Partial partial0 = new Partial(localTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-577));
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth0, localTime0, months0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      YearMonth yearMonth0 = new YearMonth(0L);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth0, (ReadablePartial) null, minutes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      Seconds seconds0 = hours0.toStandardSeconds();
      seconds0.toPeriod();
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      hours0.hashCode();
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
  }
}
