/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:52:52 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.ONE;
      years0.hashCode();
      assertEquals(1, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Days days1 = Days.SEVEN;
      boolean boolean0 = days0.equals(days1);
      assertFalse(boolean0);
      assertEquals(7, days1.getDays());
      assertFalse(days1.equals((Object)days0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Seconds seconds0 = hours0.toStandardSeconds();
      // Undeclared exception!
//      try { 
        seconds0.getValue((-3241));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -3241
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      // Undeclared exception!
//      try { 
        minutes0.getFieldType(559);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 559
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
//      try { 
        Hours.standardHoursIn(days0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -51539607552
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.FOUR;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 416L);
      assertEquals(830769, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.FOUR;
      Hours hours0 = Hours.standardHoursIn(days0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-25L));
      assertEquals(96, hours0.getHours());
      assertEquals(4, days0.getDays());
      assertEquals((-13824000), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = Hours.standardHoursIn(days0);
      hours0.size();
      assertEquals(48, hours0.getHours());
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.months(0);
      int int0 = months0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.TWO;
      int int0 = months0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours0 = seconds0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      int int0 = weeks0.getValue(0);
      assertEquals((-596523), hours0.getHours());
      assertEquals((-3550), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.SIX;
      DurationFieldType durationFieldType0 = months0.getFieldType(0);
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.ONE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.FOUR;
      Hours hours0 = Hours.standardHoursIn(days0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(96, int0);
      assertEquals(4, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Months months0 = Months.TWO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(473L, (Chronology) ethiopicChronology0);
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, months0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      MockDate mockDate0 = new MockDate(2, 2, 2);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.minusWeeks((-1));
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
      assertEquals((-604800), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(473L, (Chronology) ethiopicChronology0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-625L));
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(12);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(715141, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      TimeZone timeZone0 = TimeZone.getTimeZone("!'<G$>\"Aum+qd");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYear(3440);
      DateTime dateTime1 = localDate1.toDateTime(dateTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-12500040), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 534L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2432206197950561
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1280L);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      PeriodType periodType0 = minutes0.getPeriodType();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      Period period0 = new Period(minutes0, periodType1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      MockDate mockDate0 = new MockDate(2, 2, 2);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withYearOfEra(2);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate1, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -59958144000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-513));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(473L, (Chronology) ethiopicChronology0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      DateTime dateTime1 = dateTime0.minusDays((-2489));
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -215049600000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.TWO;
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals(2, years1.getYears());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.years((-2885));
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals((-2885), years1.getYears());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Days days0 = Days.ZERO;
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) days0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Days
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = Days.SEVEN;
      boolean boolean0 = days0.equals(days1);
      assertEquals(7, days1.getDays());
      assertFalse(boolean0);
      assertFalse(days1.equals((Object)days0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Days days0 = Days.MIN_VALUE;
      boolean boolean0 = days0.equals(hours0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.standardHours(584L);
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Object object0 = new Object();
      boolean boolean0 = minutes0.equals(object0);
      assertEquals(24, days0.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.FOUR;
      MutablePeriod mutablePeriod0 = new MutablePeriod(days0, (Chronology) null);
      boolean boolean0 = days0.equals(mutablePeriod0);
      assertEquals(4, days0.getDays());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      boolean boolean0 = years0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = months0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Period period0 = new Period((-3241), 3);
      Duration duration0 = period0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval(duration0, mutableDateTime0);
      Seconds seconds0 = Seconds.secondsIn(mutableInterval0);
      // Undeclared exception!
//      try { 
        seconds0.getValue(3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(97);
      // Undeclared exception!
//      try { 
        seconds0.getFieldType((-2));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -2
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as years is not precise in the period P1Y
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-1L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      int[] intArray0 = new int[3];
      intArray0[0] = 1600;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, islamicChronology0);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = new MonthDay((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDate0, years0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 0);
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Years years0 = Years.ONE;
      years0.toMutablePeriod();
      assertEquals(1, years0.getYears());
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Years years0 = Years.TWO;
      Period period0 = years0.toPeriod();
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate localDate1 = localDate0.plusWeeks((-1209));
      BaseSingleFieldPeriod.between(localDate1, localDate0, period0);
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.FOUR;
      Hours hours0 = Hours.standardHoursIn(days0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Years years0 = Years.ONE;
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, int0);
      assertEquals(1, years0.getYears());
  }
}
