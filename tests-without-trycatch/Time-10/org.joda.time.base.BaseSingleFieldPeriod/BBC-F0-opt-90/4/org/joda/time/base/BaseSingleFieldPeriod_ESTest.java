/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:58:32 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Weeks weeks0 = Weeks.TWO;
      Hours hours1 = Hours.standardHoursIn(weeks0);
      boolean boolean0 = hours0.equals(hours1);
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(336, hours1.getHours());
      assertFalse(boolean0);
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      // Undeclared exception!
//      try { 
        hours0.getValue((-1465));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -1465
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
//      try { 
        days0.getFieldType((-998));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -998
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate(3493L, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertEquals(0, months0.getMonths());
      
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(months0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.plus(2736);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days1, 2736);
      assertEquals(86400000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-2411L));
      assertEquals((-501700), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Weeks weeks0 = minutes0.toStandardWeeks();
      weeks0.size();
      assertEquals(2, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      int int0 = seconds0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      int int0 = months0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = days0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      Seconds seconds0 = period0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Days days0 = seconds0.toStandardDays();
      days0.getFieldType(0);
      assertEquals(24855, days0.getDays());
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1465));
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, years0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.SEVEN;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(1);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, days0);
      assertEquals(365, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      LocalTime localTime1 = localTime0.minusMinutes(234);
      Seconds seconds0 = Seconds.ONE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(seconds0, (Chronology) null);
      BaseSingleFieldPeriod.between(localTime1, localTime0, mutablePeriod0);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((-2898L), (DateTimeZone) fixedDateTimeZone0);
      Instant instant0 = dateMidnight0.toInstant();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1764L);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals(386759, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 0);
      DateTime dateTime1 = dateTime0.withWeekyear(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals((-1036113120), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.ZERO;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, (-114L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 67815273094736
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      // Undeclared exception!
//      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.ONE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth1, days0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for year is not supported
//         //
//         verifyException("org.joda.time.field.SkipDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Partial partial0 = new Partial();
      Weeks weeks0 = Weeks.weeks(76);
      Duration duration0 = weeks0.toStandardDuration();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) julianChronology0);
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateMidnight0, periodType1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(partial0, partial0, mutablePeriod0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.TWO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withYear((-292275054));
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, days0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 1392409281321 - -9223372013168318679
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = new DateTime(811L);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(2015L);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYear((-1484));
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 110386281600
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = Days.TWO;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days1);
      assertEquals((-1), int0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = Days.TWO;
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
      assertEquals(2, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Minutes minutes0 = days0.toStandardMinutes();
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) weeks0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Weeks
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.FOUR;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(4, days0.getDays());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(hours0, copticChronology0);
      boolean boolean0 = hours0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Months months0 = Months.EIGHT;
      boolean boolean0 = hours0.equals(months0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Object object0 = new Object();
      boolean boolean0 = hours0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      boolean boolean0 = hours0.equals(hours0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(0);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      Minutes minutes0 = Minutes.TWO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(2, minutes0.getMinutes());
      assertEquals(120, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1465));
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.ZERO;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      // Undeclared exception!
//      try { 
        hours0.getValue(127);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 127
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Period period0 = new Period((-249L), 326L);
      Weeks weeks0 = period0.toStandardWeeks();
      // Undeclared exception!
//      try { 
        weeks0.getFieldType(827);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 827
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.THREE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P3M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Days days0 = Days.ZERO;
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) lenientChronology0);
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(partial1, partial1, days0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      MockDate mockDate0 = new MockDate(363, 846, 236548278);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3690L, (Chronology) null);
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      YearMonth yearMonth0 = new YearMonth(3690L);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, yearMonth0, months0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
//      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1359L));
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, (DurationFieldType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      weeks0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      seconds0.toPeriod();
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      weeks0.hashCode();
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Weeks weeks0 = hours0.toStandardWeeks();
      Hours hours1 = Hours.standardHoursIn(weeks0);
      boolean boolean0 = hours0.equals(hours1);
      assertEquals(0, hours1.getHours());
      assertEquals(4, hours0.getHours());
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(boolean0);
      assertEquals(1, hours1.size());
  }
}
