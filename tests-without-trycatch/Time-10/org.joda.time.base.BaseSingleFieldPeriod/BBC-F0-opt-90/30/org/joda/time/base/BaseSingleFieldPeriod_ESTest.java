/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:01:33 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 1374, 1374, 0, (-497), 0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      minutes0.hashCode();
      assertEquals(2060991, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Months months1 = Months.SIX;
      boolean boolean0 = months0.equals(months1);
      assertEquals(6, months1.getMonths());
      assertFalse(boolean0);
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      // Undeclared exception!
//      try { 
        seconds0.getValue(373);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 373
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1561L));
      Days days0 = duration0.toStandardDays();
      // Undeclared exception!
//      try { 
        days0.getFieldType((-2765));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -2765
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay(localDateTime0);
      // Undeclared exception!
//      try { 
        Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      Interval interval0 = new Interval((-2723L), (-2723L), dateTimeZone0);
      Duration duration0 = interval0.toDuration();
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 1354L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.FIVE;
      Seconds seconds0 = days0.toStandardSeconds();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 1354L);
      assertEquals(5, days0.getDays());
      assertEquals(319054, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-2189L));
      assertEquals((-27), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = months0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.TWO;
      int int0 = months0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Days days0 = Days.standardDaysIn(minutes0);
      int int0 = days0.getValue(0);
      assertEquals((-1491308), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.FOUR;
      Minutes minutes0 = days0.toStandardMinutes();
      minutes0.getPeriodType();
      assertEquals(5760, minutes0.getMinutes());
      assertEquals(4, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      seconds0.getFieldType();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      int int0 = years0.get(durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      TimeZone timeZone0 = TimeZone.getTimeZone("No valid ISO8601 format for fields: ");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, weeks0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-1542));
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
      assertEquals(259056, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(432000, 432000, (-2726), 3634, 432000);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(3634);
      Years years0 = Years.TWO;
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, years0);
      assertEquals((-302), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Months months0 = Months.SIX;
      Hours hours0 = Hours.ZERO;
      DateMidnight dateMidnight0 = new DateMidnight((-1255L));
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) months0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(4416, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime1 = dateTime0.withYearOfCentury(0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-843));
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Minutes minutes0 = Minutes.minutesIn(interval0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-780L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2753184162
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 116);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      PeriodType periodType0 = PeriodType.minutes();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(3099);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 34239283200
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      Hours hours0 = Hours.ZERO;
      DateMidnight dateMidnight0 = new DateMidnight((-1255L));
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) months0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -1568704592616
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      int int0 = months0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Months months1 = Months.TWELVE;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals(0, months0.getMonths());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.ELEVEN;
      Months months1 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      Seconds seconds0 = Seconds.standardSecondsIn(minutes0);
      Months months0 = Months.TEN;
      // Undeclared exception!
//      try { 
        months0.compareTo((BaseSingleFieldPeriod) seconds0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Months cannot be compared to class org.joda.time.Seconds
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      PeriodType periodType0 = PeriodType.months();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      boolean boolean0 = months0.equals(mutablePeriod0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Seconds seconds0 = Seconds.seconds(0);
      boolean boolean0 = months0.equals(seconds0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Integer integer0 = new Integer((-79));
      boolean boolean0 = months0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.SIX;
      boolean boolean0 = months0.equals(months0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Months months1 = Months.SIX;
      boolean boolean0 = months1.equals(months0);
      assertFalse(boolean0);
      assertEquals(6, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Seconds seconds0 = Seconds.THREE;
      DurationFieldType durationFieldType0 = months0.getFieldType(0);
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.ONE;
      // Undeclared exception!
//      try { 
        months0.getValue((-2425));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -2425
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      Interval interval0 = new Interval((-2723L), (-2723L), dateTimeZone0);
      Duration duration0 = interval0.toDuration();
      Days days0 = duration0.toStandardDays();
      // Undeclared exception!
//      try { 
        days0.getFieldType(29);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 29
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.SIX;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-1170L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P6M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4850);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = new LocalDate(0L);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
//      try { 
        Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Months months0 = Months.SIX;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, months0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Days days0 = Days.standardDaysIn(minutes0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals((-1491308), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Months months0 = Months.ONE;
      months0.toMutablePeriod();
      assertEquals(1, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(0);
      Duration duration0 = weeks0.toStandardDuration();
      Seconds seconds0 = duration0.toStandardSeconds();
      seconds0.toPeriod();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(0, int0);
      assertEquals(0, months0.getMonths());
  }
}
