/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:56:38 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = Hours.FIVE;
      boolean boolean0 = hours0.equals(hours1);
      assertEquals(5, hours1.getHours());
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.TEN;
      // Undeclared exception!
//      try { 
        months0.getValue(899);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 899
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
//      try { 
        minutes0.getFieldType(1968);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // 1968
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Partial partial0 = new Partial();
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) partial0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(76);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Minutes minutes0 = duration0.toStandardMinutes();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 1203L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.SIX;
      Minutes minutes0 = days0.toStandardMinutes();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 1800000L);
      assertEquals(8640, minutes0.getMinutes());
      assertEquals(288, int0);
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Hours hours0 = seconds0.toStandardHours();
      hours0.size();
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      int int0 = hours0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = days0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(17);
      minutes0.getPeriodType();
      assertEquals(17, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Months months0 = Months.months(512);
      months0.getFieldType(0);
      assertEquals(512, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Seconds seconds0 = Seconds.ONE;
      Hours hours0 = seconds0.toStandardHours();
      BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, hours0);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      LocalDateTime localDateTime0 = new LocalDateTime(3818L);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) seconds0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, seconds0);
      assertEquals(2, minutes0.getMinutes());
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(4388);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, minutes0);
      assertEquals((-1271744640), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Minutes minutes0 = hours0.toStandardMinutes();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte) (-108));
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withMillis((byte) (-108));
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(420, minutes0.getMinutes());
      assertEquals(7, hours0.getHours());
      assertEquals(23206821, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = dateMidnight0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime1 = dateTime0.withYear(0);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals((-24168), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, (byte) (-72));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2576980376400000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(192L);
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Partial partial0 = new Partial(islamicChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(partial0, partial0, (ReadablePeriod) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, mutableDateTime0, periodType1);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, mutablePeriod0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), 2150, (-621), 2150);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withWeekyear(419);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval((-750L), 2150, julianChronology0);
      Weeks weeks0 = Weeks.weeksIn(mutableInterval0);
      Seconds seconds0 = weeks0.toStandardSeconds();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 46862323200
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = new Instant();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(10080L, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = dateMidnight0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime1 = dateTime0.withYear(0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -63555753600000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = minutes0.plus(minutes0);
      int int0 = minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(6, minutes1.getMinutes());
      assertEquals(1, int0);
      assertEquals(3, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
//      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) weeks0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Weeks
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Minutes minutes0 = hours0.toStandardMinutes();
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(7, hours0.getHours());
      assertEquals(420, minutes0.getMinutes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      PeriodType periodType0 = hours0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(4916L, periodType0);
      mutablePeriod0.setPeriod((ReadablePeriod) hours0);
      boolean boolean0 = hours0.equals(mutablePeriod0);
      assertEquals(5, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.SIX;
      MutablePeriod mutablePeriod0 = new MutablePeriod(868L);
      boolean boolean0 = months0.equals(mutablePeriod0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Seconds seconds0 = hours0.toStandardSeconds();
      boolean boolean0 = seconds0.equals((Object) null);
      assertEquals(3600, seconds0.getSeconds());
      assertFalse(boolean0);
      assertEquals(1, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      boolean boolean0 = hours0.equals(hours0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(1193);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1193, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.SIX;
      Minutes minutes0 = days0.toStandardMinutes();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertEquals(6, days0.getDays());
      assertFalse(boolean0);
      assertEquals(8640, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Years years0 = Years.yearsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, years0.getYears());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
//      try { 
        days0.getValue((-3329278));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -3329278
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
//      try { 
        seconds0.getFieldType((-473));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // -473
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.EIGHT;
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-1963L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot convert period to duration as months is not precise in the period P8M
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      Duration duration0 = Duration.standardDays((-1L));
      Period period0 = new Period(mutableDateTime0, duration0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 3);
      assertEquals((-1440), minutes0.getMinutes());
      assertEquals((-28800000), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      Minutes minutes1 = Minutes.THREE;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(0, minutes0.getMinutes());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(21600000L);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Minutes minutes0 = hours0.toStandardMinutes();
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      MonthDay monthDay0 = new MonthDay(0L);
      // Undeclared exception!
//      try { 
        BaseSingleFieldPeriod.between(localDateTime0, monthDay0, minutes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
//      try { 
        Hours.hoursBetween((ReadablePartial) localDateTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(27);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadableInstant objects must not be null
//         //
//         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Minutes minutes0 = hours0.toStandardMinutes();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte) (-108));
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(420, minutes0.getMinutes());
      assertEquals(0, int0);
      assertEquals(7, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      hours0.toMutablePeriod();
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Days days0 = Days.SEVEN;
      days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Minutes minutes0 = hours0.toStandardMinutes();
      minutes0.hashCode();
      assertEquals(60, minutes0.getMinutes());
      assertEquals(1, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Hours hours1 = Hours.FIVE;
      boolean boolean0 = hours0.equals(hours1);
      assertEquals(5, hours1.getHours());
      assertFalse(boolean0);
      assertFalse(hours1.equals((Object)hours0));
  }
}
