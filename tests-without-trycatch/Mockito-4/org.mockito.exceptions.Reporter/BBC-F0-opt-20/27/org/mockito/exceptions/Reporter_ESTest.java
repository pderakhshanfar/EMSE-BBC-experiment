/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:04:08 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.SelfDescribing;
import org.hamcrest.StringDescription;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.HasPropertyWithValue;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.DescribedAs;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsInstanceOf;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.IsNull;
import org.hamcrest.core.IsSame;
import org.hamcrest.core.StringContains;
import org.hamcrest.number.OrderingComparison;
import org.hamcrest.object.HasToString;
import org.junit.runner.RunWith;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Reporter reporter0 = new Reporter();
      Stack<StubbedInvocationMatcher> stack0 = new Stack<StubbedInvocationMatcher>();
      stack0.setSize(1024);
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) stack0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("org.mockito.configuration.MockitoConfiguration", (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      LinkedList<VerificationAwareInvocation> linkedList0 = new LinkedList<VerificationAwareInvocation>();
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Invocation invocation0 = null;
      int int0 = 15;
      Reporter reporter0 = new Reporter();
      String string0 = "";
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, (List<VerificationAwareInvocation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.internal.exceptions.util.ScenarioPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocationsInOrder((-1172), (-1172), (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      String string0 = null;
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      HasProperty<LocalizedMatcher> hasProperty0 = new HasProperty<LocalizedMatcher>("ZUJe00WGx$ %5pT");
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(hasProperty0);
      Location location0 = localizedMatcher0.getLocation();
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocations(1355, 1355, (DescribedInvocation) null, location0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.fillInStackTrace();
      Field field0 = null;
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("QA-SF8Co$Q/wydMC", 1714, (Collection<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      StringContains stringContains0 = new StringContains("F>");
      Matcher<Integer> matcher0 = HasPropertyWithValue.hasProperty((String) null, (Matcher<?>) stringContains0);
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      Location location0 = localizedMatcher0.getLocation();
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent("invocationListeners() does not accept null parameters", (String) null, location0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Invocation invocation0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_6*b@5");
      Reporter reporter0 = new Reporter();
      ArrayList<InvocationImpl> arrayList0 = new ArrayList<InvocationImpl>();
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InvocationOnMock invocationOnMock0 = null;
      Reporter reporter0 = new Reporter();
      int int0 = 31;
      String string0 = null;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(31, 31);
      discrepancy0.getPluralizedWantedCount();
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Method method0 = null;
      LocationImpl locationImpl0 = new LocationImpl((StackTraceFilter) null);
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException("", locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Method method0 = null;
      String string0 = null;
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException((String) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Object object0 = new Object();
      Object object1 = new Object();
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      Answer<StubbedInvocationMatcher> answer0 = (Answer<StubbedInvocationMatcher>) mock(Answer.class, new ViolatedAssumptionAnswer());
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      Matcher<InvocationMatcher> matcher0 = IsInstanceOf.instanceOf((Class<?>) class0);
      Class<Object> class1 = Object.class;
      Matcher<Object> matcher1 = IsInstanceOf.any(class1);
      Matcher<StubbedInvocationMatcher> matcher2 = AllOf.allOf((Matcher<? super StubbedInvocationMatcher>) matcher0, (Matcher<? super StubbedInvocationMatcher>) matcher1, (Matcher<? super StubbedInvocationMatcher>) matcher0, (Matcher<? super StubbedInvocationMatcher>) matcher1);
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher2);
      Location location0 = localizedMatcher0.getLocation();
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException("", location0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Matcher<InvocationMatcher> matcher0 = IsSame.sameInstance((InvocationMatcher) null);
      Matcher<Object> matcher1 = HasPropertyWithValue.hasProperty("{!", (Matcher<?>) matcher0);
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher1);
      Location location0 = localizedMatcher0.getLocation();
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing(location0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InvocationOnMock invocationOnMock0 = null;
      String string0 = "X0j`.h?6yQ\"5xj";
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, true, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X0j`.h?6yA|Q\"5xj");
      assertFalse(boolean0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Mocked type must be: ", "Mocked type must be: ");
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: Mocked type must be: ", sQLNonTransientException0.toString());
      assertEquals("Mocked type must be: ", sQLNonTransientException0.getSQLState());
      assertEquals("Mocked type must be: ", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, sQLNonTransientException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      String string0 = "less than";
      // Undeclared exception!
//      try { 
        reporter1.wantedButNotInvoked((DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<VerificationAwareInvocation> arrayList0 = new ArrayList<VerificationAwareInvocation>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Method method0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, (Object) null, object0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-1), (-1));
      assertNotNull(discrepancy0);
      assertEquals((-1), discrepancy0.getWantedCount());
      assertEquals((-1), discrepancy0.getActualCount());
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher(vector0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Method method0 = null;
      Class<Object> class0 = Object.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerify(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException(locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, object0, (Object) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.stubPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "1Ay3C[5/|Lo";
      objectArray0[1] = (Object) "1Ay3C[5/|Lo";
      objectArray0[2] = (Object) "1Ay3C[5/|Lo";
      DescribedAs<InvocationImpl> describedAs0 = new DescribedAs<InvocationImpl>((String) null, (Matcher<InvocationImpl>) null, objectArray0);
      assertNotNull(describedAs0);
      assertEquals(3, objectArray0.length);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(describedAs0);
      assertNotNull(localizedMatcher0);
      assertEquals(3, objectArray0.length);
      
      int int0 = 10;
      LocalizedMatcher localizedMatcher1 = new LocalizedMatcher((Matcher) null);
      assertNotNull(localizedMatcher1);
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      
      StringDescription stringDescription0 = new StringDescription();
      assertNotNull(stringDescription0);
      
      Description description0 = stringDescription0.appendText("1Ay3C[5/|Lo");
      assertSame(stringDescription0, description0);
      assertSame(description0, stringDescription0);
      assertNotNull(description0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("QZoFS<j(p|nTj@ {pM", "1Ay3C[5/|Lo", (-970));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("QZoFS<j(p|nTj@ {pM", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("1Ay3C[5/|Lo", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-970), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: QZoFS<j(p|nTj@ {pM", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotVerifyToString();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfApi();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.missingMethodInvocation();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, "0pve`.Cxq+O}", class0, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotCallAbstractRealMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Class<String> class0 = String.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      int int0 = (-2094);
      int int1 = 1;
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubWithNullThrowable();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) reporter0;
      objectArray0[1] = (Object) "1Ay3C[5/|Lo";
      objectArray0[2] = (Object) "1Ay3C[5/|Lo";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) reporter0;
      DescribedAs<InvocationImpl> describedAs0 = new DescribedAs<InvocationImpl>("1Ay3C[5/|Lo", (Matcher<InvocationImpl>) null, objectArray0);
      assertNotNull(describedAs0);
      assertEquals(8, objectArray0.length);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(describedAs0);
      assertNotNull(localizedMatcher0);
      assertEquals(8, objectArray0.length);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-2094), (-2094));
      assertNotNull(discrepancy0);
      assertEquals((-2094), discrepancy0.getWantedCount());
      assertEquals((-2094), discrepancy0.getActualCount());
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, location0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInjectDependency((Field) null, (Object) null, sQLClientInfoException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
//      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.noArgumentValueWasCaptured();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.reportNoSubMatchersFound("org.mockito.internal.util.collections.Iterables");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
//      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger((PrintStream) null);
      assertNotNull(verboseMockInvocationLogger0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1334;
      intArray0[2] = (-884);
      intArray0[3] = (-4342);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-5238);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {0, 1334, (-884), (-4342), 1, 0, (-5238)}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(7, intArray0.length);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("", batchUpdateException0);
      assertArrayEquals(new int[] {0, 1334, (-884), (-4342), 1, 0, (-5238)}, intArray0);
      assertNotNull(sQLDataException0);
      assertEquals(7, intArray0.length);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "    doThrow(new RuntimeException())";
      Integer integer0 = Integer.getInteger("org.hamcrest.object.IsEventFrom");
      assertNull(integer0);
      
      int int0 = 19;
      Integer integer1 = new Integer(19);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertEquals(19, (int)integer1);
      
      Matcher<Integer> matcher0 = OrderingComparison.greaterThanOrEqualTo(integer1);
      assertNotNull(matcher0);
      assertTrue(integer1.equals((Object)int0));
      
      TreeSet<InvocationMatcher> treeSet0 = new TreeSet<InvocationMatcher>();
      assertNotNull(treeSet0);
      
      Matcher<InvocationMatcher> matcher1 = IsIn.isIn((Collection<InvocationMatcher>) treeSet0);
      assertNotNull(matcher1);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher1);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      // Undeclared exception!
//      try { 
        reporter1.argumentsAreDifferent("    doThrow(new RuntimeException())", "    doThrow(new RuntimeException())", location0);
//        fail("Expecting exception: ArgumentsAreDifferent");
      
//      } catch(ArgumentsAreDifferent e) {
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      String string1 = "";
      int int0 = 223;
      String string2 = "D\"vs%0(ii9Q.";
      String string3 = "I2)jv?8tYi";
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.cannotMockFinalClass(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("%SpJbD}q%tq");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      // Undeclared exception!
//      try { 
        reporter1.cannotStubVoidMethodWithAReturnValue("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.inOrderRequiresFamiliarMock();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException("sth35iGE@hy::]8!", "[z6b7eFcIZ9t=N3{tfy");
      assertNotNull(sQLTransientException0);
      assertEquals("sth35iGE@hy::]8!", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException0.toString());
      assertEquals("[z6b7eFcIZ9t=N3{tfy", sQLTransientException0.getSQLState());
      
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      assertNotNull(sQLTransientException1);
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertEquals("sth35iGE@hy::]8!", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException0.toString());
      assertEquals("[z6b7eFcIZ9t=N3{tfy", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals(0, sQLTransientException1.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientException1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(batchUpdateException0);
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertEquals(0, intArray0.length);
      assertEquals("sth35iGE@hy::]8!", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException0.toString());
      assertEquals("[z6b7eFcIZ9t=N3{tfy", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientException: sth35iGE@hy::]8!", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: sth35iGE@hy::]8!", batchUpdateException0.getMessage());
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(sQLTransientException0, sQLTransientException1);
      assertNotSame(sQLTransientException1, sQLTransientException0);
      assertNull(sQLException0);
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertEquals(0, intArray0.length);
      assertEquals("sth35iGE@hy::]8!", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException0.toString());
      assertEquals("[z6b7eFcIZ9t=N3{tfy", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: sth35iGE@hy::]8!", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientException: sth35iGE@hy::]8!", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: sth35iGE@hy::]8!", batchUpdateException0.getMessage());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("sth35iGE@hy::]8!", (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.ACROSS_CLASSLOADERS;
      // Undeclared exception!
//      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfReturnValue((String) null, "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = ",r=}5^i?k.L?X]^#I";
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers(",r=}5^i?k.L?X]^#I", 2520, stack0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedHashSet<LocalizedMatcher> linkedHashSet0 = new LinkedHashSet<LocalizedMatcher>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers((String) null, 1, linkedHashSet0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLWarning sQLWarning1 = new SQLWarning("31}d", sQLWarning0);
      assertNotNull(sQLWarning1);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("31}d", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: 31}d", sQLWarning1.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("31}d", "", sQLWarning1);
      assertNotNull(sQLTimeoutException0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("31}d", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: 31}d", sQLWarning1.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("31}d", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 31}d", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("31}d", sQLTimeoutException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.moreThanOneAnnotationNotAllowed("JpV'x?HcbK%H}1");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 12;
      intArray0[1] = 0;
      intArray0[2] = (-116);
      intArray0[3] = 1711;
      int int0 = (-1495);
      intArray0[4] = (-1495);
      int int1 = 14;
      intArray0[5] = 14;
      intArray0[6] = 3;
      intArray0[7] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Invalid argument index.", (String) null, intArray0);
      assertArrayEquals(new int[] {12, 0, (-116), 1711, (-1495), 14, 3, 10}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(8, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: Invalid argument index.", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Invalid argument index.", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      long[] longArray0 = batchUpdateException0.getLargeUpdateCounts();
      assertArrayEquals(new int[] {12, 0, (-116), 1711, (-1495), 14, 3, 10}, intArray0);
      assertArrayEquals(new long[] {12L, 0L, (-116L), 1711L, (-1495L), 14L, 3L, 10L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, longArray0.length);
      assertEquals("java.sql.BatchUpdateException: Invalid argument index.", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Invalid argument index.", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      assertArrayEquals(new int[] {12, 0, (-116), 1711, (-1495), 14, 3, 10}, intArray0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(8, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: Invalid argument index.", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Invalid argument index.", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Invalid argument index.", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.BatchUpdateException: Invalid argument index.", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("", sQLRecoverableException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(6, (List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      HashSet<LocalizedMatcher> hashSet0 = new HashSet<LocalizedMatcher>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher((Matcher) null);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = hashSet0.add(localizedMatcher0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(localizedMatcher0));
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("t2BVExP", 1, hashSet0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>(869, 14);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(869, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(1, vector0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add((LocalizedMatcher) null);
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      vector0.ensureCapacity(0);
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers((-659), vector0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-2237), true, true, (-2237), 2767);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      int int0 = dataTruncation0.getTransferSize();
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(2767, int0);
      
      boolean boolean0 = dataTruncation0.getParameter();
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.checkedExceptionInvalid(dataTruncation0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockException mockException0 = new MockException("Argument passed to verify() is a stubOnly() mock, not a full blown mock!");
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException("Argument passed to verify() is a stubOnly() mock, not a full blown mock!", mockException0);
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, mockException1);
      assertNotNull(sQLTransactionRollbackException0);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 930, sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientException0);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(930, sQLNonTransientException0.getErrorCode());
      
      SQLException sQLException0 = new SQLException((String) null, sQLNonTransientException0);
      assertNotNull(sQLException0);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(930, sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      
      // Undeclared exception!
//      try { 
        reporter0.checkedExceptionInvalid(sQLException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedAtMostX(3, 2149);
//        fail("Expecting exception: MockitoAssertionError");
      
//      } catch(MockitoAssertionError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedAtMostX((-4029), (-4029));
//        fail("Expecting exception: MockitoAssertionError");
      
//      } catch(MockitoAssertionError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.unsupportedCombinationOfAnnotations("property '", "property '");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      String string1 = "";
      int int0 = 223;
      String string2 = "D\"vs%0(ii9Q.";
      String string3 = "I2)jv?8tYi";
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "3N)4h[4w`cA,I1[";
      String string1 = "V";
      // Undeclared exception!
//      try { 
        reporter0.unsupportedCombinationOfAnnotations("3N)4h[4w`cA,I1[", "V");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }
}
