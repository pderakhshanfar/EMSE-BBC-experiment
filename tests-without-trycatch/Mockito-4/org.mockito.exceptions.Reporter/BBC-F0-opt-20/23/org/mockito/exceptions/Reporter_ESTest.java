/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:27:46 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.StringDescription;
import org.hamcrest.beans.SamePropertyValuesAs;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;
import org.hamcrest.core.IsSame;
import org.junit.runner.RunWith;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.StubInfoImpl;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<InvocationImpl> arrayList0 = new ArrayList<InvocationImpl>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((InvocationImpl) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotMockFinalClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerify((Class) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, (String) null, class0, (-1087));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, (String) null, class0, (-1087));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Invocation invocation0 = null;
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      String string0 = "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). Verifying it may give inconsistent or hard to understand results. Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)";
      Exception exception0 = null;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInjectDependency((Field) null, integer0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation((String) null, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, (Object) null, (Object) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(1030, 21);
      assertNotNull(discrepancy0);
      assertEquals(1030, discrepancy0.getWantedCount());
      assertEquals(21, discrepancy0.getActualCount());
      
      ArrayList<InvocationImpl> arrayList0 = new ArrayList<InvocationImpl>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher((Matcher) null);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent((String) null, (String) null, location0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-685), (-685));
      assertNotNull(discrepancy0);
      assertEquals((-685), discrepancy0.getActualCount());
      assertEquals((-685), discrepancy0.getWantedCount());
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-703), (-703));
      assertNotNull(discrepancy0);
      assertEquals((-703), discrepancy0.getActualCount());
      assertEquals((-703), discrepancy0.getWantedCount());
      
      DescribedInvocation describedInvocation0 = null;
      String string0 = discrepancy0.getPluralizedActualCount();
      assertNotNull(string0);
      assertEquals("-703 times", string0);
      assertEquals((-703), discrepancy0.getActualCount());
      assertEquals((-703), discrepancy0.getWantedCount());
      
      String string1 = discrepancy0.getPluralizedActualCount();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-703 times", string1);
      assertEquals((-703), discrepancy0.getActualCount());
      assertEquals((-703), discrepancy0.getWantedCount());
      
      Location location0 = null;
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException("", (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Invocation invocation0 = null;
      Stack<VerificationAwareInvocation> stack1 = new Stack<VerificationAwareInvocation>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, stack1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Invocation invocation0 = null;
      Stack<VerificationAwareInvocation> stack1 = new Stack<VerificationAwareInvocation>();
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, stack1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(1030, 23);
      assertNotNull(discrepancy0);
      assertEquals(23, discrepancy0.getActualCount());
      assertEquals(1030, discrepancy0.getWantedCount());
      
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocationsInOrder(23, 23, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      int int0 = 1030;
      int int1 = 23;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(1030, 23);
      assertNotNull(discrepancy0);
      assertEquals(1030, discrepancy0.getWantedCount());
      assertEquals(23, discrepancy0.getActualCount());
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D&96|e%1>7\"OIQb|");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers(" and @", (-753), (Collection<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent("matchesSafely", "org.hamcrest.collection.IsIterableContainingInAnyOrder", locationImpl0);
//        fail("Expecting exception: ArgumentsAreDifferent");
      
//      } catch(ArgumentsAreDifferent e) {
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(2, (-1));
      assertNotNull(discrepancy0);
      assertEquals((-1), discrepancy0.getActualCount());
      assertEquals(2, discrepancy0.getWantedCount());
      
      String string0 = discrepancy0.getPluralizedActualCount();
      assertNotNull(string0);
      assertEquals("-1 times", string0);
      assertEquals((-1), discrepancy0.getActualCount());
      assertEquals(2, discrepancy0.getWantedCount());
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(2, 2);
      assertNotNull(discrepancy0);
      assertEquals(2, discrepancy0.getWantedCount());
      assertEquals(2, discrepancy0.getActualCount());
      
      String string0 = discrepancy0.getPluralizedActualCount();
      assertNotNull(string0);
      assertEquals("2 times", string0);
      assertEquals(2, discrepancy0.getWantedCount());
      assertEquals(2, discrepancy0.getActualCount());
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing(locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      boolean boolean0 = true;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hamcrest.core.StringStartsWith", "org.hamcrest.core.StringStartsWith", 14, sQLTimeoutException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(14, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.hamcrest.core.StringStartsWith", sQLTransactionRollbackException0.getMessage());
      assertEquals("org.hamcrest.core.StringStartsWith", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.hamcrest.core.StringStartsWith", sQLTransactionRollbackException0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLTransactionRollbackException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation((String) null, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, true, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, (Object) null, (Object) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfReturnValue("", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>(arrayList0);
      assertNotNull(vector0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Matcher<StubbedInvocationMatcher> matcher0 = IsSame.sameInstance((StubbedInvocationMatcher) null);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = vector0.add(localizedMatcher0);
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(localizedMatcher0));
      assertTrue(vector0.contains(localizedMatcher0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      IsNull<Object> isNull0 = new IsNull<Object>();
      assertNotNull(isNull0);
      
      Matcher<Object> matcher1 = AllOf.allOf((Matcher<? super Object>) isNull0, (Matcher<? super Object>) isNull0, (Matcher<? super Object>) isNull0, (Matcher<? super Object>) isNull0, (Matcher<? super Object>) isNull0, (Matcher<? super Object>) isNull0);
      assertNotNull(matcher1);
      
      LocalizedMatcher localizedMatcher1 = new LocalizedMatcher(matcher1);
      assertNotNull(localizedMatcher1);
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      
      String string0 = localizedMatcher1.toString();
      assertNotNull(string0);
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      assertNotSame(localizedMatcher1, localizedMatcher0);
      
      boolean boolean1 = vector0.add(localizedMatcher1);
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(localizedMatcher1));
      assertTrue(vector0.contains(localizedMatcher1));
      assertNotSame(localizedMatcher1, localizedMatcher0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher(vector0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "5q.#2V", 1, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("5q.#2V", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      assertNotNull(batchUpdateException0);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("5q.#2V", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("5q.#2V", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.checkedExceptionInvalid(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        reporter0.wantedAtMostX(0, 0);
//        fail("Expecting exception: MockitoAssertionError");
      
//      } catch(MockitoAssertionError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedAtMostX((-1573), (-1573));
//        fail("Expecting exception: MockitoAssertionError");
      
//      } catch(MockitoAssertionError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = "";
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zbdA1:Pd;#;lxXB#xv}", "", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: zbdA1:Pd;#;lxXB#xv}", sQLNonTransientConnectionException0.toString());
      assertEquals("zbdA1:Pd;#;lxXB#xv}", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      int int0 = 0;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-1374), 0);
      assertNotNull(discrepancy0);
      assertEquals((-1374), discrepancy0.getWantedCount());
      assertEquals(0, discrepancy0.getActualCount());
      
      String string1 = discrepancy0.getPluralizedActualCount();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0 times", string1);
      assertEquals((-1374), discrepancy0.getWantedCount());
      assertEquals(0, discrepancy0.getActualCount());
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      int int1 = (-1284);
      String string2 = locationImpl0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string2);
      
      int int2 = 0;
      // Undeclared exception!
//      try { 
        reporter0.unsupportedCombinationOfAnnotations("the method has no arguments.\n", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (-5127));
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals((-5127), sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation(" !", sQLRecoverableException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.BASIC;
      // Undeclared exception!
//      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(1891, (List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
//      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      String string0 = "";
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zbdA1:Pd;#;lxXB#xv}", "", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("zbdA1:Pd;#;lxXB#xv}", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: zbdA1:Pd;#;lxXB#xv}", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      int int0 = 0;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-1374), 0);
      assertNotNull(discrepancy0);
      assertEquals((-1374), discrepancy0.getWantedCount());
      assertEquals(0, discrepancy0.getActualCount());
      
      String string1 = discrepancy0.getPluralizedActualCount();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0 times", string1);
      assertEquals((-1374), discrepancy0.getWantedCount());
      assertEquals(0, discrepancy0.getActualCount());
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocations((-1284), 0, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfApi();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.moreThanOneAnnotationNotAllowed("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotCallAbstractRealMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      String string0 = "org.hamcrest.text.IsEmptyString";
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, "org.hamcrest.text.IsEmptyString");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      LocalizedMatcher localizedMatcher0 = mock(LocalizedMatcher.class, new ViolatedAssumptionAnswer());
      Matcher<LocalizedMatcher> matcher0 = Is.is(localizedMatcher0);
      assertNotNull(matcher0);
      
      Matcher<LocalizedMatcher> matcher1 = Is.is(matcher0);
      assertNotNull(matcher1);
      assertFalse(matcher1.equals((Object)matcher0));
      assertNotSame(matcher0, matcher1);
      assertNotSame(matcher1, matcher0);
      
      LocalizedMatcher localizedMatcher1 = new LocalizedMatcher(matcher1);
      assertNotNull(localizedMatcher1);
      assertFalse(matcher0.equals((Object)matcher1));
      assertFalse(matcher1.equals((Object)matcher0));
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, localizedMatcher1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = (-321);
      Integer integer0 = new Integer((-321));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-321), (int)integer0);
      
      Matcher<Integer> matcher0 = IsEqual.equalTo(integer0);
      assertNotNull(matcher0);
      assertTrue(integer0.equals((Object)int0));
      
      AnyOf<Integer> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super Integer>) matcher0, (Matcher<? super Integer>) matcher0, (Matcher<? super Integer>) matcher0, (Matcher<? super Integer>) matcher0);
      assertNotNull(anyOf0);
      assertTrue(integer0.equals((Object)int0));
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(anyOf0);
      assertNotNull(localizedMatcher0);
      assertTrue(integer0.equals((Object)int0));
      
      Description.NullDescription description_NullDescription0 = new Description.NullDescription();
      assertNotNull(description_NullDescription0);
      assertEquals("", description_NullDescription0.toString());
      
      Description.NullDescription description_NullDescription1 = (Description.NullDescription)description_NullDescription0.appendValue(" interface.");
      assertNotNull(description_NullDescription1);
      assertSame(description_NullDescription0, description_NullDescription1);
      assertSame(description_NullDescription1, description_NullDescription0);
      assertEquals("", description_NullDescription0.toString());
      assertEquals("", description_NullDescription1.toString());
      
      localizedMatcher0.describeTo(description_NullDescription1);
      assertTrue(integer0.equals((Object)int0));
      assertSame(description_NullDescription0, description_NullDescription1);
      assertSame(description_NullDescription1, description_NullDescription0);
      assertEquals("", description_NullDescription0.toString());
      assertEquals("", description_NullDescription1.toString());
      
      LocationImpl locationImpl0 = (LocationImpl)localizedMatcher0.getLocation();
      assertNotNull(locationImpl0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException(locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
//      try { 
        reporter0.cannotMockFinalClass(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "Also I failed because: ";
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 0;
      DescribedInvocation describedInvocation0 = null;
      Location location0 = null;
      // Undeclared exception!
//      try { 
        reporter0.noArgumentValueWasCaptured();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "9<k>dOc{Z~l7E~c";
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-130);
      intArray0[1] = (-1158);
      intArray0[2] = 617;
      intArray0[3] = 110;
      intArray0[4] = (-612);
      intArray0[5] = 1;
      intArray0[6] = (-3105);
      intArray0[7] = 17;
      intArray0[8] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("YuB5ct!ql}s5t%zSu", "", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-130), (-1158), 617, 110, (-612), 1, (-3105), 17, 1}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: YuB5ct!ql}s5t%zSu", batchUpdateException0.toString());
      assertEquals("YuB5ct!ql}s5t%zSu", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("YuB5ct!ql}s5t%zSu", batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "\"m\"8E-4~`l=GlL";
      int int0 = 2072;
      SQLWarning sQLWarning0 = new SQLWarning("L/nu9#fln>");
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: L/nu9#fln>", sQLWarning0.toString());
      assertEquals("L/nu9#fln>", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"m\"8E-4~`l=GlL", "-> at <<unknown line>>", 2072, sQLWarning0);
      assertNotNull(sQLTransientException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: L/nu9#fln>", sQLWarning0.toString());
      assertEquals("L/nu9#fln>", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("\"m\"8E-4~`l=GlL", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: \"m\"8E-4~`l=GlL", sQLTransientException0.toString());
      assertEquals(2072, sQLTransientException0.getErrorCode());
      assertEquals("-> at <<unknown line>>", sQLTransientException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "-> at <<unknown line>>", sQLTransientException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: L/nu9#fln>", sQLWarning0.toString());
      assertEquals("L/nu9#fln>", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("\"m\"8E-4~`l=GlL", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: \"m\"8E-4~`l=GlL", sQLTransientException0.toString());
      assertEquals(2072, sQLTransientException0.getErrorCode());
      assertEquals("-> at <<unknown line>>", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("-> at <<unknown line>>", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("", sQLSyntaxErrorException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 0;
      DescribedInvocation describedInvocation0 = null;
      Location location0 = null;
      // Undeclared exception!
//      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.stubPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "' field.";
      int int0 = 1;
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      AnyOf<Integer> anyOf0 = AnyOf.anyOf((Matcher<Integer>) null, (Matcher<? super Integer>) null);
      assertNotNull(anyOf0);
      
      Matcher<Integer> matcher0 = AllOf.allOf((Matcher<? super Integer>) anyOf0, (Matcher<? super Integer>) anyOf0, (Matcher<? super Integer>) anyOf0, (Matcher<? super Integer>) anyOf0, (Matcher<? super Integer>) anyOf0);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = arrayList0.add(localizedMatcher0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(localizedMatcher0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("' field.", 1, arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLWarning sQLWarning0 = new SQLWarning("QKe\"[#&q v`_", (String) null, (-1905), (Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals("QKe\"[#&q v`_", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: QKe\"[#&q v`_", sQLWarning0.toString());
      assertEquals((-1905), sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      
      SQLException sQLException0 = new SQLException("QKe\"[#&q v`_", "1l2]B8WMpUp@csA8hL", 0, sQLWarning0);
      assertNotNull(sQLException0);
      assertEquals("QKe\"[#&q v`_", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: QKe\"[#&q v`_", sQLWarning0.toString());
      assertEquals((-1905), sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLException: QKe\"[#&q v`_", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("QKe\"[#&q v`_", sQLException0.getMessage());
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, sQLException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "cfJOl";
      // Undeclared exception!
//      try { 
        reporter0.reportNoSubMatchersFound("cfJOl");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.reportNoSubMatchersFound("xef{-F\"q_;4p\"{3dUf");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerify(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      String string0 = null;
      Class<StubbedInvocationMatcher> class1 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class1, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.missingMethodInvocation();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubWithNullThrowable();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubWithNullThrowable();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.NONE;
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotVerifyToString();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<Integer> class0 = Integer.class;
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher((Matcher) null);
      arrayList0.add(localizedMatcher0);
      LocalizedMatcher localizedMatcher1 = new LocalizedMatcher((Matcher) null);
      arrayList0.add(localizedMatcher1);
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(1737, arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger((PrintStream) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*coR{%#P", "", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("*coR{%#P", sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException("featureValueOf", locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.inOrderRequiresFamiliarMock();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }
}
