/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 02:29:42 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.StringDescription;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.HasPropertyWithValue;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsInstanceOf;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.IsNull;
import org.hamcrest.core.IsSame;
import org.hamcrest.core.StringContains;
import org.hamcrest.object.HasToString;
import org.junit.runner.RunWith;
import org.mockito.Answers;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.StubInfoImpl;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(invocation0).toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) sQLTransactionRollbackException0;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(0, 62);
      assertNotNull(discrepancy0);
      assertEquals(62, discrepancy0.getActualCount());
      assertEquals(0, discrepancy0.getWantedCount());
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, invocation0, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Invocation invocation0 = null;
      Location location0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException("", (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      Matcher<InvocationImpl> matcher0 = Is.isA(class0);
      assertNotNull(matcher0);
      
      HasPropertyWithValue<LocalizedMatcher> hasPropertyWithValue0 = new HasPropertyWithValue<LocalizedMatcher>("t?Iheu:'%-WA4 \"H<", matcher0);
      assertNotNull(hasPropertyWithValue0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(hasPropertyWithValue0);
      assertNotNull(localizedMatcher0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1900;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "a,Fj$=1g^4ZT9kCOqw", 1900, intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1900}, intArray0);
      assertEquals(1900, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("a,Fj$=1g^4ZT9kCOqw", batchUpdateException0.getSQLState());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInjectDependency((Field) null, localizedMatcher0, batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      String string0 = "org.hamcrest.number.BigDecimalCloseTo";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hamcrest.number.BigDecimalCloseTo");
      assertFalse(boolean0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocationsInOrder((-2), 2461, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationImpl invocationImpl0 = null;
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocations(8, 14, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(14, (List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-634), 1);
      assertNotNull(discrepancy0);
      assertEquals((-634), discrepancy0.getWantedCount());
      assertEquals(1, discrepancy0.getActualCount());
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      String string1 = locationImpl0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = (-634);
      int int1 = 1;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-634), 1);
      assertNotNull(discrepancy0);
      assertEquals((-634), discrepancy0.getWantedCount());
      assertEquals(1, discrepancy0.getActualCount());
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      String string1 = locationImpl0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Integer integer0 = new Integer((-1602));
      assertNotNull(integer0);
      assertEquals((-1602), (int)integer0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, (Object) null, integer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, object0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Invocation invocation0 = null;
      boolean boolean1 = true;
      int int0 = 2147483645;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("an empty collection", sQLRecoverableException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: an empty collection", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("an empty collection", sQLNonTransientException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("an empty collection", sQLNonTransientException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: an empty collection", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("an empty collection", sQLNonTransientException0.getMessage());
      assertEquals("an empty collection", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: an empty collection", sQLNonTransientConnectionException0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, sQLNonTransientConnectionException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      LinkedList<InvocationImpl> linkedList0 = new LinkedList<InvocationImpl>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocationsInOrder((org.mockito.internal.reporting.Discrepancy) null, (DescribedInvocation) null, (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing(locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing(locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<InvocationImpl> linkedList0 = new LinkedList<InvocationImpl>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((InvocationImpl) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 1294;
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("", 1294, (Collection<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      boolean boolean0 = true;
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, "", class0, 877);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocationsInOrder((org.mockito.internal.reporting.Discrepancy) null, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Exception exception0 = null;
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("[>2@mY$#", (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, (Object) null, (Object) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotCallAbstractRealMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("", (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InvocationOnMock invocationOnMock0 = null;
      boolean boolean0 = true;
      int int0 = (-21);
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher(vector0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " from ");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayDeque<LocalizedMatcher> arrayDeque0 = new ArrayDeque<LocalizedMatcher>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("Be aware that it is recommended to use capture() only with verify()", 413, arrayDeque0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M?wYr:y|");
      assertFalse(boolean0);
      
      String string0 = null;
      HasProperty<Integer> hasProperty0 = new HasProperty<Integer>((String) null);
      assertNotNull(hasProperty0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(hasProperty0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException(location0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      Matcher<Object> matcher0 = IsInstanceOf.any(class0);
      assertNotNull(matcher0);
      
      Matcher<StubbedInvocationMatcher> matcher1 = AllOf.allOf((Matcher<? super StubbedInvocationMatcher>) matcher0, (Matcher<? super StubbedInvocationMatcher>) matcher0);
      assertNotNull(matcher1);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher1);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException(location0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0Py@m");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      String string1 = "<|G)bc/*_JYUw";
      int int0 = 10;
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, false, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Stack<VerificationAwareInvocation> stack0 = new Stack<VerificationAwareInvocation>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, stack0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.ACROSS_CLASSLOADERS;
      // Undeclared exception!
//      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerify(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfReturnValue("}Oh'", "#.qfRs3", "#.qfRs3");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 2329);
      assertNotNull(stackTraceElement0);
      assertEquals("", stackTraceElement0.getFileName());
      assertEquals(".(:2329)", stackTraceElement0.toString());
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals(2329, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, false);
      assertNotSame(stackTraceElementArray0, stackTraceElementArray1);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNotNull(stackTraceElementArray1);
      assertEquals(1, stackTraceElementArray0.length);
      assertEquals(1, stackTraceElementArray1.length);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException("", locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotVerifyToString();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "\"f2VjKT";
      // Undeclared exception!
//      try { 
        reporter0.reportNoSubMatchersFound("\"f2VjKT");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("was ", "was ", 1269);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: was ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(1269, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("was ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("was ", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: was ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(1269, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("was ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("was ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: was ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: was ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("was ", sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 5;
      // Undeclared exception!
//      try { 
        reporter0.inOrderRequiresFamiliarMock();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      LinkedList<InvocationImpl> linkedList0 = new LinkedList<InvocationImpl>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Class<Integer> class0 = Integer.class;
      IsInstanceOf isInstanceOf0 = new IsInstanceOf(class0);
      assertNotNull(isInstanceOf0);
      
      CombinableMatcher<Object> combinableMatcher0 = new CombinableMatcher<Object>(isInstanceOf0);
      assertNotNull(combinableMatcher0);
      
      CombinableMatcher<Object> combinableMatcher1 = combinableMatcher0.and(isInstanceOf0);
      assertNotSame(combinableMatcher0, combinableMatcher1);
      assertNotSame(combinableMatcher1, combinableMatcher0);
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher0));
      assertNotNull(combinableMatcher1);
      
      CombinableMatcher<Object> combinableMatcher2 = combinableMatcher1.or(isInstanceOf0);
      assertNotSame(combinableMatcher0, combinableMatcher2);
      assertNotSame(combinableMatcher0, combinableMatcher1);
      assertNotSame(combinableMatcher1, combinableMatcher0);
      assertNotSame(combinableMatcher1, combinableMatcher2);
      assertNotSame(combinableMatcher2, combinableMatcher1);
      assertNotSame(combinableMatcher2, combinableMatcher0);
      assertFalse(combinableMatcher0.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher0));
      assertFalse(combinableMatcher2.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher2.equals((Object)combinableMatcher0));
      assertNotNull(combinableMatcher2);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(combinableMatcher2);
      assertFalse(combinableMatcher0.equals((Object)combinableMatcher2));
      assertFalse(combinableMatcher0.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher0));
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher2));
      assertFalse(combinableMatcher2.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher2.equals((Object)combinableMatcher0));
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = stack0.add(localizedMatcher0);
      assertNotSame(combinableMatcher0, combinableMatcher2);
      assertNotSame(combinableMatcher0, combinableMatcher1);
      assertNotSame(combinableMatcher1, combinableMatcher0);
      assertNotSame(combinableMatcher1, combinableMatcher2);
      assertNotSame(combinableMatcher2, combinableMatcher1);
      assertNotSame(combinableMatcher2, combinableMatcher0);
      assertFalse(combinableMatcher0.equals((Object)combinableMatcher2));
      assertFalse(combinableMatcher0.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher0));
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher2));
      assertFalse(combinableMatcher2.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher2.equals((Object)combinableMatcher0));
      assertTrue(boolean0);
      assertTrue(stack0.contains(localizedMatcher0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(5, stack0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedAtMostX((-2439), (-2439));
//        fail("Expecting exception: MockitoAssertionError");
      
//      } catch(MockitoAssertionError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(5, stack0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfApi();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "lt|ICO%C md7";
      Location location0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent("lt|ICO%C md7", "lt|ICO%C md7", locationImpl0);
//        fail("Expecting exception: ArgumentsAreDifferent");
      
//      } catch(ArgumentsAreDifferent e) {
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 5;
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(Y>k_LSaR~VcznbJ", "", 12);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: (Y>k_LSaR~VcznbJ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("(Y>k_LSaR~VcznbJ", sQLNonTransientConnectionException0.getMessage());
      assertEquals(12, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("(Y>k_LSaR~VcznbJ", sQLNonTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.noArgumentValueWasCaptured();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      int int0 = 1725;
      boolean boolean0 = false;
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.missingMethodInvocation();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      Matcher<StubbedInvocationMatcher> matcher0 = IsNull.notNullValue(class0);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.stubPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        reporter0.moreThanOneAnnotationNotAllowed("9CH3N3");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "Z8Hc;/b#";
      // Undeclared exception!
//      try { 
        reporter0.moreThanOneAnnotationNotAllowed("Z8Hc;/b#");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      String string1 = locationImpl0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      
      String string2 = locationImpl0.toString();
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string2);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      String string1 = "<|G)bc/*_JYUw";
      // Undeclared exception!
//      try { 
        reporter0.unsupportedCombinationOfAnnotations("<|G)bc/*_JYUw", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      // Undeclared exception!
//      try { 
        reporter0.cannotStubWithNullThrowable();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = (-1510);
      // Undeclared exception!
//      try { 
        reporter0.cannotStubWithNullThrowable();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent("", "", (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent("", "", (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = ",]bl";
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLWarning sQLWarning0 = new SQLWarning("$;K;GT9tY1");
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: $;K;GT9tY1", sQLWarning0.toString());
      assertEquals("$;K;GT9tY1", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        reporter0.checkedExceptionInvalid(sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
//      try { 
        reporter0.cannotMockFinalClass(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }
}
