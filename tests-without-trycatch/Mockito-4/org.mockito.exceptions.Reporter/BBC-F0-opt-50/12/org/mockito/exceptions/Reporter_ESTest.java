/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:06:57 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.SamePropertyValuesAs;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsInstanceOf;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.IsNull;
import org.hamcrest.object.HasToString;
import org.junit.runner.RunWith;
import org.mockito.Answers;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.StubInfoImpl;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, (Object) null, object0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("You passed following type: ", "You passed following type: ");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: You passed following type: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("You passed following type: ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("You passed following type: ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInjectDependency((Field) null, (Object) null, sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Location location0 = null;
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      ArrayList<VerificationAwareInvocation> arrayList0 = new ArrayList<VerificationAwareInvocation>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocations((org.mockito.internal.reporting.Discrepancy) null, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      String string0 = "You passed following type: ";
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      Class<String> class1 = String.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class1, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Invocation invocation0 = null;
      Location location0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("", 4744, (Collection<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Location location0 = null;
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing((Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, (Object) null, integer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      Field field0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
//      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      Reporter reporter1 = new Reporter();
      assertFalse(reporter1.equals((Object)reporter0));
      assertNotNull(reporter1);
      
      LinkedList<InvocationMatcher> linkedList0 = new LinkedList<InvocationMatcher>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((InvocationMatcher) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        reporter1.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      ArrayList<InvocationImpl> arrayList0 = new ArrayList<InvocationImpl>(20);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      ArrayList<InvocationImpl> arrayList0 = new ArrayList<InvocationImpl>(2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(3046, 3046);
      assertEquals(3046, discrepancy0.getActualCount());
      assertEquals(3046, discrepancy0.getWantedCount());
      assertNotNull(discrepancy0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocationsInOrder(1, 2, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      boolean boolean0 = true;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocationsInOrder(1, 1, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException((String) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = new Integer((-577));
      assertEquals((-577), int0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfApi();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(0, 0);
      assertEquals(0, discrepancy0.getActualCount());
      assertEquals(0, discrepancy0.getWantedCount());
      assertNotNull(discrepancy0);
      
      Class<Object> class0 = Object.class;
      Matcher<Object> matcher0 = IsNull.notNullValue(class0);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, location0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "lBBtwcQ";
      int int0 = (-1);
      TreeSet<LocalizedMatcher> treeSet0 = new TreeSet<LocalizedMatcher>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("lBBtwcQ", (-1), treeSet0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
//      try { 
        reporter0.incorrectUseOfAdditionalMatchers("DrV?MZgQdLL[", (-2250), arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, "Actually, above is the only interaction with this mock.", class0, 1424);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<VerificationAwareInvocation> vector0 = new Vector<VerificationAwareInvocation>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
//      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, vector0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Vector<VerificationAwareInvocation> vector1 = new Vector<VerificationAwareInvocation>();
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLRecoverableException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "2o?z,\"W";
      String string1 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("2o?z,\"W", "", 14);
      assertEquals("java.sql.SQLTransientConnectionException: 2o?z,\"W", sQLTransientConnectionException0.toString());
      assertEquals(14, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("2o?z,\"W", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("2o?z,\"W", sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = null;
      // Undeclared exception!
//      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, false, (-3492));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      int[] intArray0 = new int[4];
      int int0 = (-215);
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      assertNotNull(string0);
      
      String string1 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedVerificationException(locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      IsAnything<Answers> isAnything0 = new IsAnything<Answers>("");
      assertNotNull(isAnything0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(isAnything0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent("", "", location0);
//        fail("Expecting exception: ArgumentsAreDifferent");
      
//      } catch(ArgumentsAreDifferent e) {
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<LocalizedMatcher> linkedList0 = new LinkedList<LocalizedMatcher>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LocalizedMatcher localizedMatcher0 = mock(LocalizedMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((Matcher) null).when(localizedMatcher0).getActualMatcher();
      doReturn((Location) null).when(localizedMatcher0).getLocation();
      SamePropertyValuesAs<LocalizedMatcher> samePropertyValuesAs0 = new SamePropertyValuesAs<LocalizedMatcher>(localizedMatcher0);
      assertNotNull(samePropertyValuesAs0);
      
      LocalizedMatcher localizedMatcher1 = new LocalizedMatcher(samePropertyValuesAs0);
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      assertNotNull(localizedMatcher1);
      
      boolean boolean1 = linkedList0.add(localizedMatcher1);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(localizedMatcher0));
      assertTrue(linkedList0.contains(localizedMatcher1));
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers((-1336), linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<LocalizedMatcher> linkedList0 = new LinkedList<LocalizedMatcher>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Matcher<Object> matcher0 = SamePropertyValuesAs.samePropertyValuesAs((Object) reporter0);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      linkedList0.push(localizedMatcher0);
      assertTrue(linkedList0.contains(localizedMatcher0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers((-1336), linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForSpyAnnotation("LYiC?aFp$'zcg*", (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.smartNullPointerException("method should return the type '", locationImpl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      Integer integer0 = new Integer((-206));
      assertEquals((-206), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, integer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      List<LocalizedMatcher> list0 = null;
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers(4, (List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.reportNoSubMatchersFound("Cannot stub with null throwable!");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.unsupportedCombinationOfAnnotations("h~b5o[%", "h~b5o[%");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("WYMKL`{P2T-OP2", "WYMKL`{P2T-OP2", "WYMKL`{P2T-OP2", (-592));
      assertEquals((-592), stackTraceElement0.getLineNumber());
      assertEquals("WYMKL`{P2T-OP2", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("WYMKL`{P2T-OP2.WYMKL`{P2T-OP2(WYMKL`{P2T-OP2)", stackTraceElement0.toString());
      assertEquals("WYMKL`{P2T-OP2", stackTraceElement0.getClassName());
      assertEquals("WYMKL`{P2T-OP2", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "1 time", "", 6);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals(6, stackTraceElement1.getLineNumber());
      assertEquals("1 time", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("", stackTraceElement1.getFileName());
      assertEquals(".1 time(:6)", stackTraceElement1.toString());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, false);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertEquals(2, stackTraceElementArray0.length);
      assertEquals(2, stackTraceElementArray1.length);
      assertNotNull(stackTraceElementArray1);
      assertNotSame(stackTraceElementArray0, stackTraceElementArray1);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
//      try { 
        reporter0.tooManyActualInvocations(557, 3753, (DescribedInvocation) null, locationImpl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.argumentsAreDifferent("", "", (Location) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = null;
      String string1 = "org.mockito.configuration.MockitoConfiguration";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("~}AYm,2`i$a,xk.(4MN", (String) null);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("~}AYm,2`i$a,xk.(4MN", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ~}AYm,2`i$a,xk.(4MN", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, sQLRecoverableException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("~}AYm,2`i$a,xk.(4MN", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ~}AYm,2`i$a,xk.(4MN", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNotNull(sQLRecoverableException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("kXKu5a)wj", "kXKu5a)wj", sQLRecoverableException1);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("~}AYm,2`i$a,xk.(4MN", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ~}AYm,2`i$a,xk.(4MN", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: kXKu5a)wj", sQLSyntaxErrorException0.toString());
      assertEquals("kXKu5a)wj", sQLSyntaxErrorException0.getMessage());
      assertEquals("kXKu5a)wj", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("xV*w%h@sJ", sQLSyntaxErrorException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1963;
      intArray0[1] = 1963;
      intArray0[2] = 6;
      intArray0[3] = 1963;
      intArray0[4] = 1963;
      intArray0[5] = 1963;
      intArray0[6] = 1963;
      intArray0[7] = 1963;
      intArray0[8] = 1963;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "hL)1", 1963, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      Spliterator<Throwable> spliterator0 = batchUpdateException0.spliterator();
      assertEquals(9, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertNotNull(spliterator0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("s/'i&>SqE{K2osR8", batchUpdateException0);
      assertEquals(9, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedAtMostX(4, 4);
//        fail("Expecting exception: MockitoAssertionError");
      
//      } catch(MockitoAssertionError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNull(sQLException0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("]O'dPe", (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", batchUpdateException0);
      assertEquals(1, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      String string0 = sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      assertEquals("", string0);
      assertEquals(1, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(string0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubWithNullThrowable();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubWithNullThrowable();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1963;
      intArray0[1] = 1963;
      intArray0[2] = 6;
      intArray0[3] = 1963;
      intArray0[4] = 1963;
      intArray0[5] = 1963;
      intArray0[6] = 1963;
      intArray0[7] = 1963;
      intArray0[8] = 1963;
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 0;
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, (Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.wrongTypeOfReturnValue("", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
//      try { 
        reporter0.cannotMockFinalClass(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.moreThanOneAnnotationNotAllowed("Qhi&,");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "Examples of correct stubbing:";
      // Undeclared exception!
//      try { 
        reporter0.moreThanOneAnnotationNotAllowed("Examples of correct stubbing:");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.inOrderRequiresFamiliarMock();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.missingMethodInvocation();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Matcher<Object> matcher0 = HasToString.hasToString("Z`{qI2XOo]+VBf_4uWl");
      assertNotNull(matcher0);
      
      Matcher<Object> matcher1 = IsNot.not(matcher0);
      assertFalse(matcher1.equals((Object)matcher0));
      assertNotNull(matcher1);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher1);
      assertFalse(matcher0.equals((Object)matcher1));
      assertFalse(matcher1.equals((Object)matcher0));
      assertNotNull(localizedMatcher0);
      
      // Undeclared exception!
//      try { 
        reporter0.stubPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.stubPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerify(class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = null;
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToWhenMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 32;
      String string0 = "";
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
//      try { 
        reporter0.misplacedArgumentMatcher(vector0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotVerifyToString();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1963;
      intArray0[1] = 1963;
      intArray0[2] = 6;
      intArray0[3] = 1963;
      intArray0[4] = 1963;
      intArray0[5] = 1963;
      intArray0[6] = 1963;
      intArray0[7] = 1963;
      intArray0[8] = 1963;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "hL)1", 1963, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("s/'i&>SqE{K2osR8", batchUpdateException0);
      assertEquals(9, intArray0.length);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertEquals(9, intArray0.length);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertEquals(9, intArray0.length);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      // Undeclared exception!
//      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.noArgumentValueWasCaptured();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        reporter0.nullPassedWhenCreatingInOrder();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.cannotCallAbstractRealMethod();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "ysGhB-BZ";
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "ysGhB-BZ", "xd&G0V}", 0);
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals("xd&G0V}", stackTraceElement0.getFileName());
      assertEquals("ysGhB-BZ", stackTraceElement0.getMethodName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(".ysGhB-BZ(xd&G0V}:0)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("xd&G0V}", "", "$.4LB?{h%|", 60);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("xd&G0V}.($.4LB?{h%|:60)", stackTraceElement1.toString());
      assertEquals(60, stackTraceElement1.getLineNumber());
      assertEquals("", stackTraceElement1.getMethodName());
      assertEquals("xd&G0V}", stackTraceElement1.getClassName());
      assertEquals("$.4LB?{h%|", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("K`|", "$.4LB?{h%|", "xd&G0V}", (-1788));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals("$.4LB?{h%|", stackTraceElement2.getMethodName());
      assertEquals((-1788), stackTraceElement2.getLineNumber());
      assertEquals("K`|", stackTraceElement2.getClassName());
      assertEquals("xd&G0V}", stackTraceElement2.getFileName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("K`|.$.4LB?{h%|(xd&G0V})", stackTraceElement2.toString());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("K`|", "L!L?GSBV", "", 0);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertEquals("L!L?GSBV", stackTraceElement3.getMethodName());
      assertEquals(0, stackTraceElement3.getLineNumber());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("", stackTraceElement3.getFileName());
      assertEquals("K`|", stackTraceElement3.getClassName());
      assertEquals("K`|.L!L?GSBV(:0)", stackTraceElement3.toString());
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", "", 0);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertEquals(".(:0)", stackTraceElement4.toString());
      assertEquals("", stackTraceElement4.getFileName());
      assertEquals("", stackTraceElement4.getMethodName());
      assertEquals(0, stackTraceElement4.getLineNumber());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("", stackTraceElement4.getClassName());
      assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, true);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertEquals(5, stackTraceElementArray0.length);
      assertEquals(5, stackTraceElementArray1.length);
      assertNotNull(stackTraceElementArray1);
      assertNotSame(stackTraceElementArray0, stackTraceElementArray1);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string1 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
//      try { 
        reporter0.invalidUseOfMatchers((-1788), vector0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      int[] intArray0 = new int[9];
      intArray0[0] = 1963;
      intArray0[1] = 1963;
      intArray0[2] = 6;
      intArray0[3] = 1963;
      intArray0[4] = 1963;
      intArray0[5] = 1963;
      intArray0[6] = 1963;
      intArray0[7] = 1963;
      intArray0[8] = 1963;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "hL)1", 1963, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("s/'i&>SqE{K2osR8", batchUpdateException0);
      assertEquals(9, intArray0.length);
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertEquals(9, intArray0.length);
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      batchUpdateException0.printStackTrace();
      assertEquals(9, intArray0.length);
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertEquals(9, intArray0.length);
      assertEquals("hL)1", batchUpdateException0.getSQLState());
      assertEquals(1963, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: s/'i&>SqE{K2osR8", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      assertArrayEquals(new int[] {1963, 1963, 6, 1963, 1963, 1963, 1963, 1963, 1963}, intArray0);
      
      SerializableMode serializableMode0 = SerializableMode.NONE;
      // Undeclared exception!
//      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.ACROSS_CLASSLOADERS;
      // Undeclared exception!
//      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 5;
      SQLWarning sQLWarning0 = new SQLWarning("=Hv5h");
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: =Hv5h", sQLWarning0.toString());
      assertEquals("=Hv5h", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLWarning sQLWarning1 = new SQLWarning("    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", "=Hv5h", sQLWarning0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: =Hv5h", sQLWarning0.toString());
      assertEquals("=Hv5h", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("=Hv5h", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning:     someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", sQLWarning1.toString());
      assertEquals("    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNotNull(sQLWarning1);
      
      sQLWarning1.addSuppressed(sQLWarning0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: =Hv5h", sQLWarning0.toString());
      assertEquals("=Hv5h", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("=Hv5h", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning:     someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", sQLWarning1.toString());
      assertEquals("    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      
      sQLWarning0.setNextWarning(sQLWarning1);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: =Hv5h", sQLWarning0.toString());
      assertEquals("=Hv5h", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("=Hv5h", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning:     someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", sQLWarning1.toString());
      assertEquals("    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      
      // Undeclared exception!
//      try { 
        reporter0.nullPassedToVerify();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationListener invocationListener0 = null;
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      StackTraceElement[] stackTraceElementArray0 = batchUpdateException0.getStackTrace();
      assertEquals(14, stackTraceElementArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(stackTraceElementArray0);
      
      DataTruncation dataTruncation0 = new DataTruncation(1071, true, false, 1071, 2);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      batchUpdateException0.setNextException(dataTruncation0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      // Undeclared exception!
//      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.mockito.exceptions.Reporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher((Matcher) null);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
//      try { 
        reporter0.unfinishedStubbing(location0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      MockException mockException0 = new MockException("");
      assertNotNull(mockException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("", "POdX56'{<s{`ac]W]", mockException0);
      assertEquals("POdX56'{<s{`ac]W]", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      StackTraceElement[] stackTraceElementArray0 = mockException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      SQLWarning sQLWarning1 = new SQLWarning("an array with size", sQLWarning0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertEquals("POdX56'{<s{`ac]W]", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: an array with size", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("an array with size", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNotNull(sQLWarning1);
      
      sQLWarning0.setNextWarning(sQLWarning1);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertEquals("POdX56'{<s{`ac]W]", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: an array with size", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("an array with size", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      
      SQLWarning sQLWarning2 = new SQLWarning("", sQLWarning0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertEquals("POdX56'{<s{`ac]W]", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning2.toString());
      assertNull(sQLWarning2.getSQLState());
      assertEquals("", sQLWarning2.getMessage());
      assertNotNull(sQLWarning2);
      
      Throwable[] throwableArray0 = sQLWarning2.getSuppressed();
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertEquals(0, throwableArray0.length);
      assertEquals("POdX56'{<s{`ac]W]", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning2.toString());
      assertNull(sQLWarning2.getSQLState());
      assertEquals("", sQLWarning2.getMessage());
      assertNotNull(throwableArray0);
      assertNotSame(sQLWarning0, sQLWarning2);
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning2, sQLWarning1);
      assertNotSame(sQLWarning2, sQLWarning0);
      
      sQLWarning2.printStackTrace();
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertEquals("POdX56'{<s{`ac]W]", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning2.toString());
      assertNull(sQLWarning2.getSQLState());
      assertEquals("", sQLWarning2.getMessage());
      assertNotSame(sQLWarning0, sQLWarning2);
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning2, sQLWarning1);
      assertNotSame(sQLWarning2, sQLWarning0);
      
      // Undeclared exception!
//      try { 
        reporter0.checkedExceptionInvalid(sQLWarning2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }
}
