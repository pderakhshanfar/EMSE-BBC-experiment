/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 00:39:53 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 439);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 439, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(439, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(439, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(439, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(439, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((long) 439);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 15271875;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 15271875, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology1);
      assertNotNull(lenientChronology0);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      LenientChronology lenientChronology1 = (LenientChronology)lenientChronology0.withZone(fixedDateTimeZone0);
      assertNotNull(lenientChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertSame(lenientChronology0, lenientChronology1);
      assertSame(lenientChronology1, lenientChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = dateTimeFieldType0.isSupported(lenientChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertSame(lenientChronology0, lenientChronology1);
      assertSame(lenientChronology1, lenientChronology0);
      assertTrue(boolean0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("Etc/UTC", fixedDateTimeZone1.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone1.getID());
      assertTrue(fixedDateTimeZone1.isFixed());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone1, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology2);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertEquals("Etc/UTC", fixedDateTimeZone1.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone1.getID());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(islamicChronology2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("Etc/UTC", fixedDateTimeZone1.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone1.getID());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(15271875, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("Etc/UTC", fixedDateTimeZone1.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone1.getID());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = 1;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Q');
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("Q", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("Q", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      // Undeclared exception!
      dateTimeFormatter4.printTo((Appendable) charArrayWriter1, (long) 15271875);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("w1[,=B#9L", "w1[,=B#9L", false, 25650000, 25650000);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1970));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1970), dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("w1[,=B#9L");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) 5);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1970), dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1970), dateTimeFormatter3.getDefaultYear());
      assertEquals(5, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.jta.time.format.DateTimeFormatter");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-636), (-636), (-636));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("org.jta.time.format.DateTimeFormatter");
      assertNotNull(stringBuffer0);
      assertEquals("org.jta.time.format.DateTimeFormatter", stringBuffer0.toString());
      assertEquals(37, stringBuffer0.length());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "Parsing not supported";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Parsing not supported");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      int int0 = 7;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 7);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.print((ReadablePartial) monthDay0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('I');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Integer integer0 = Integer.getInteger("?bq7UoVUD'ILo?]{~b");
      assertNull(integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) null);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-322));
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-322), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-322), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertEquals((-322), (int)dateTimeFormatter5.getPivotYear());
      
      int int0 = dateTimeFormatter5.getDefaultYear();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertEquals(0, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-322), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertEquals((-322), (int)dateTimeFormatter5.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int0 = 2146958590;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2146958590, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(2146958590, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146958590, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(2146958590, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146958590, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(2146958590, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146958590, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      int int1 = 7;
      int int2 = 14;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('b');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(fileDescriptor0.valid());
      
      // Undeclared exception!
      dateTimeFormatter0.printTo((Appendable) printStream0, 6L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("O160", "O160", true, 2143289344, 2143289344);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1822);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeUtils.setCurrentMillisOffset(1426L);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone((DateTimeZone) null);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1822, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withDefaultYear(1);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1822, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertEquals(1, dateTimeFormatter6.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTime dateTime0 = DateTime.parse("O160", dateTimeFormatter4);
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      
      String string0 = dateTimeFormatter3.print((ReadableInstant) dateTime0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals("O160", string0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1822, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1822, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1476), (-3296), (-3296));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1476));
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1476), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      LocalDate localDate0 = dateTimeFormatter1.parseLocalDate("");
      assertNotNull(localDate0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1476), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(3, localDate0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1476), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) null);
      assertNotNull(dateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1476), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Writer) null, (ReadableInstant) dateTime1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 764, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(764, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(764, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(764, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(764, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3385);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:03.385", dateTimeZone0.getID());
      assertEquals("+00:00:03.385", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDate("6");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot parse \"6\": Value 6 for halfdayOfDay must be in the range [0,1]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print(0L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 2146273116, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale locale1 = Locale.lookup(linkedList0, linkedHashSet0);
      assertNull(locale1);
      assertFalse(linkedHashSet0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Integer integer0 = new Integer((-927));
      assertNotNull(integer0);
      assertEquals((-927), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-927), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146273116, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer("g");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("g", stringBuffer0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDate localDate0 = new LocalDate((long) 2146273116, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone1.toString());
      assertEquals("+00:00:00.015", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertEquals(2073599985L, dateTime0.getMillis());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "7e0H$";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("7e0H$");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      LocalDateTime localDateTime0 = new LocalDateTime((-8L));
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1706, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1296));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.296", dateTimeZone0.toString());
      assertEquals("-00:00:01.296", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.296", dateTimeZone0.toString());
      assertEquals("-00:00:01.296", dateTimeZone0.getID());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      Integer integer0 = new Integer(1706);
      assertNotNull(integer0);
      assertEquals(1706, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.296", dateTimeZone0.toString());
      assertEquals("-00:00:01.296", dateTimeZone0.getID());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1706, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.296", dateTimeZone0.toString());
      assertEquals("-00:00:01.296", dateTimeZone0.getID());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1706, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      Integer integer1 = dateTimeFormatter3.getPivotYear();
      assertNotNull(integer1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(0, (int)integer1);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.296", dateTimeZone0.toString());
      assertEquals("-00:00:01.296", dateTimeZone0.getID());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1706, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      Integer integer2 = dateTimeFormatter3.getPivotYear();
      assertNotNull(integer2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(0, (int)integer2);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1706, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.296", dateTimeZone0.toString());
      assertEquals("-00:00:01.296", dateTimeZone0.getID());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1706, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 1517;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1517, 1517);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Instant instant1 = instant0.plus(0L);
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, instant1.getMillis());
      
      Instant instant2 = instant1.toInstant();
      assertNotNull(instant2);
      assertSame(instant0, instant2);
      assertSame(instant0, instant1);
      assertSame(instant1, instant2);
      assertSame(instant1, instant0);
      assertSame(instant2, instant0);
      assertSame(instant2, instant1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, instant1.getMillis());
      assertEquals(1392409281320L, instant2.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) null, (ReadableInstant) instant2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-48);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-1), (byte) (-1), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, CopticChronology.AM);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeParser dateTimeParser0 = dateTimeFormatter3.getParser();
      assertNull(dateTimeParser0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(1028);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1028, (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean2 = dateTimeFormatter5.isParser();
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(boolean2);
      assertFalse(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1028, (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(1, CopticChronology.AM);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Instant must not be null");
      assertNotNull(mockPrintWriter0);
      
      Instant instant0 = new Instant(937L);
      assertNotNull(instant0);
      assertEquals(937L, instant0.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (ReadableInstant) instant0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = (-3322);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 36, (-3322));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals((-3322), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-3322), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals((-3322), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-3322), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "r783j^x3fz2}+q@";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r783j^x3fz2}+q@");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(" > ", objectArray0);
      assertEquals(0, objectArray0.length);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = MonthDay.now(dateTimeZone1);
      assertNotNull(monthDay0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(islamicChronology0);
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertNotSame(monthDay1, monthDay0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(monthDay0, monthDay1);
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay2 = MonthDay.now(dateTimeZone1);
      assertNotNull(monthDay2);
      assertFalse(monthDay2.equals((Object)monthDay1));
      assertTrue(monthDay2.equals((Object)monthDay0));
      assertNotSame(monthDay2, monthDay1);
      assertNotSame(monthDay2, monthDay0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals(14, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertEquals(2, monthDay2.getMonthOfYear());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) printWriter0, (ReadablePartial) monthDay1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(115, 115, 115);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      String string0 = "y3:>v";
      Locale locale0 = Locale.forLanguageTag("y3:>v");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      LocalDate localDate0 = new LocalDate(4193L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (ReadablePartial) localDate0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 2145299025;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2145299025, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2145299025, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2145299025, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2145299025, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2145299025, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Integer integer0 = new Integer(2145299025);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2145299025, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2145299025, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2145299025, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2145299025, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      // Undeclared exception!
      dateTimeFormatter0.print((long) 2145299025);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("America/Anchorage");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(36000000L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('6');
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("6", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("6", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(1401);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.withYearOfEra(5);
      assertNotNull(localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.minusHours(514);
      assertNotNull(localDateTime3);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime3.plusHours(3);
      assertNotNull(localDateTime4);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter1, (ReadablePartial) localDateTime4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals("6", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("6", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("W2i ");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      int int0 = 1;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("W2i ");
      assertNotNull(localDate0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals((-1L), dateTime0.getMillis());
      
      Writer writer0 = null;
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) dateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("6");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = new Integer(1073741824);
      assertNotNull(integer0);
      assertEquals(1073741824, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1073741824, (int)dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1073741824);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1073741824, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1073741824, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1073741824, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1073741824, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1073741824, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1073741824, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1073741824, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1073741824, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1073741824, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale((Locale) null);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1073741824, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1073741824, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1073741824, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1073741824, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1073741824, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2147483051, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("6");
      assertNotNull(localDate0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2147483051, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals((-43233004800001L), dateTime0.getMillis());
      
      // Undeclared exception!
      dateTimeFormatter0.print((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 156;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(156, 156, 156);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer(738);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (long) 156);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 317351877, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale((Locale) null);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-2146764703));
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(317351877, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1), (int)dateTimeFormatter4.getPivotYear());
      assertEquals((-2146764703), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      dateTimeFormatter4.print(1491L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      long long0 = dateTimeFormatter0.parseMillis("MST");
      assertEquals(25200000L, long0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      int int0 = 7;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(7, 2, 2615625);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2730));
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2730), (int)dateTimeFormatter3.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-1787));
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2730), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-2730), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-1787), dateTimeFormatter4.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter4.printTo((Appendable) stringBuffer0, (-52L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: ko_KR
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Instant must not be null");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "@9W2=zq6q52l[]";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("@9W2=zq6q52l[]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ze kybgs|wg>L\"rl.");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("Ze kybgs|wg>L\"rl.");
      assertNotNull(stringBuffer0);
      assertEquals("Ze kybgs|wg>L\"rl.", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("Ze kybgs|wg>L\"rl.");
      assertNotNull(localDate0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-31L), dateTime0.getMillis());
      
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("Ze kybgs|wg>L\"rl.Ze kybgs|wg>L\"rl.", stringBuffer0.toString());
      assertEquals(34, stringBuffer0.length());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-31L), dateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTime dateTime1 = dateTimeFormatter1.parseDateTime("Ze kybgs|wg>L\"rl.");
      assertNotNull(dateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-31L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ze kybgs|wg>L\"rl.");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("Ze kybgs|wg>L\"rl.");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146434046, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2146434046, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2146434046, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2146434046, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2146434046, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2146434046, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2146434046, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "97qjKTC%Ld|,hZK", 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot parse \"97qjKTC%Ld|,hZK\": Value 97 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(933, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) stringBuffer1, (ReadablePartial) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 338;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("i,%>M2f0N<", "i,%>M2f0N<", true, 338, 338);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-776));
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-776), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-776), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-776), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(2146434046);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-776), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-776), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-776), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2146434046, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.close();
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      dateTimeFormatter3.printTo((Appendable) mockPrintWriter0, (long) (-776));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-776), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-776), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-776), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2146434046, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals("i,%>M2f0N<", stringWriter0.toString());
      
      LocalDateTime localDateTime0 = dateTimeFormatter1.parseLocalDateTime("i,%>M2f0N<");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-776), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(4, localDateTime0.size());
      
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime(localDateTime0, (Chronology) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No instant converter found for type: org.joda.time.LocalDateTime
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1, false, 5);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1933);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1933, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((Integer) 4);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1933, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(4, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withChronology(buddhistChronology0);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1933, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(4, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(0, dateTimeFormatter6.getDefaultYear());
      assertEquals(4, (int)dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isParser());
      assertEquals(1, BuddhistChronology.BE);
      
//      try { 
        DateTimeZone.forOffsetHours(2596);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Hours out of range: 2596
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("o<g.j,.timeform<t.9ateTimeormatter");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1426));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.426", dateTimeZone0.getID());
      assertEquals("-00:00:01.426", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.426", dateTimeZone0.getID());
      assertEquals("-00:00:01.426", dateTimeZone0.toString());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.426", dateTimeZone0.getID());
      assertEquals("-00:00:01.426", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1, CopticChronology.AM);
      
      DateTime dateTime0 = dateTimeFormatter2.parseDateTime("o<g.j,.timeform<t.9ateTimeormatter");
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.426", dateTimeZone0.getID());
      assertEquals("-00:00:01.426", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1426L, dateTime0.getMillis());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalDateTime localDateTime0 = LocalDateTime.parse("", dateTimeFormatter0);
      assertNotNull(localDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localDateTime0.size());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Chronology chronology0 = dateTimeFormatter1.getChronolgy();
      assertNotNull(chronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(julianChronology0, chronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(chronology0, julianChronology0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.005", dateTimeZone0.toString());
      assertEquals("+00:00:00.005", dateTimeZone0.getID());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.005", dateTimeZone0.toString());
      assertEquals("+00:00:00.005", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.005", dateTimeZone0.toString());
      assertEquals("+00:00:00.005", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.005", dateTimeZone0.toString());
      assertEquals("+00:00:00.005", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(0, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.parseLocalDate("ZUU?x!zs");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"ZUU?x!zs\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "org.ja.timeformat.DateTimeormatter";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.ja.timeformat.DateTimeormatter");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(34, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.jta.time.format.DateTimeFormatter");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      long long0 = dateTimeFormatter0.parseMillis("org.jta.time.format.DateTimeFormatter");
      assertEquals(0L, long0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'Z';
      charArray0[2] = 's';
      charArray0[3] = 'i';
      charArray0[4] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'q', 'Z', 's', 'i', 'k'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.limit());
      assertEquals("qZsik", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.remaining());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 0L);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.jta.time.format.DateTimeFormatter");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-636), (-636), (-636));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print(1898L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("a)^-");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      long long0 = dateTimeFormatter0.parseMillis("a)^-");
      assertEquals(0L, long0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals(2000, int0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone((String) null);
      assertNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(0L, (DateTimeZone) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-110);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)1, (byte)88, (byte) (-103), (byte)31, (byte)118, (byte)106, (byte)7, (byte) (-110)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      boolean boolean1 = dateTimeFieldType0.isSupported(gJChronology0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-325), (-325));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      Integer integer0 = new Integer((-325));
      assertNotNull(integer0);
      assertEquals((-325), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-325), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-325), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-325), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      Integer integer1 = new Integer(24);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(24, (int)integer1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2061L), gregorianChronology0, locale0, integer1, (-325));
      assertNotNull(dateTimeParserBucket0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(24, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "(v#K>2$", (-325));
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertEquals(324, int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(24, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(zonedChronology0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-325), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-325), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear((-325));
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals((-325), dateTimeFormatter5.getDefaultYear());
      assertEquals((-325), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-325), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-325), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      int int1 = dateTimeFormatter5.getDefaultYear();
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(int1 == int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals((-325), int1);
      assertEquals((-325), dateTimeFormatter5.getDefaultYear());
      assertEquals((-325), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-325), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-325), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-325), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-325), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseMillis("(v#K>2$");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"(v#K>2$\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.jta.time.format.DateTimeFormatter");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("iSq<BczOU");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("%");
      assertNotNull(stringBuffer0);
      assertEquals("%", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseLocalDate("iSq<BczOU");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-2477), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(3);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-2477), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(3, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.print((ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.jta.time.format.DateTimeFormatter");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      long long0 = dateTimeFormatter0.parseMillis("org.jta.time.format.DateTimeFormatter");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0L, long0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
      assertNotNull(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(37, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate(5657L, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone1.toString());
      assertEquals("+00:00:00.015", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone1);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone1.toString());
      assertEquals("+00:00:00.015", dateTimeZone1.getID());
      assertEquals((-15L), dateTime0.getMillis());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("y.BrKch");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), (-1), (-1));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) stringWriter0, (-3340L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("nJB");
      assertNotNull(stringBuffer0);
      assertEquals("nJB", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((long) 15, dateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology1);
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertNotSame(buddhistChronology1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertFalse(buddhistChronology0.equals((Object)buddhistChronology1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone1.toString());
      assertEquals("+00:00:00.015", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals((-15L), dateTime0.getMillis());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(15, 15, 15);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
      assertNotNull(dateTimeFormatter2);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(buddhistChronology0.equals((Object)buddhistChronology1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = new Locale("(PzPqho*-n8isap", "", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("(pzpqho*-n8isap", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("(pzpqho*-n8isap", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("(pzpqho*-n8isap", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("(pzpqho*-n8isap", locale0.toString());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("(pzpqho*-n8isap", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("(pzpqho*-n8isap", locale0.toString());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("(pzpqho*-n8isap", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("(pzpqho*-n8isap", locale0.toString());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("(pzpqho*-n8isap", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("(pzpqho*-n8isap", locale0.toString());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(0, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("(pzpqho*-n8isap", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("(pzpqho*-n8isap", locale0.toString());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(0, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertEquals(0, dateTimeFormatter6.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertFalse(dateTimeFormatter6.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("b h.0w;':");
      assertNotNull(stringBuffer0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("b h.0w;':", stringBuffer0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate((-1L), dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology1);
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertNotSame(buddhistChronology1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology1.getZone();
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(buddhistChronology1, buddhistChronology0);
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertEquals((-15L), dateTime0.getMillis());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite1 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite1);
      assertFalse(dateTimeFormatterBuilder_Composite1.equals((Object)dateTimeFormatterBuilder_Composite0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite1);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_Composite1.equals((Object)dateTimeFormatterBuilder_Composite0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatterBuilder_Composite1.equals((Object)dateTimeFormatterBuilder_Composite0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatterBuilder_Composite1, dateTimeFormatterBuilder_Composite0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatterBuilder_Composite1.equals((Object)dateTimeFormatterBuilder_Composite0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatterBuilder_Composite1, dateTimeFormatterBuilder_Composite0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseInto(mutableDateTime0, "tnp^", 0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("y.BrKch");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      LocalDate localDate0 = new LocalDate(0L, (Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "y.BrKch");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals("y.BrKch", charBuffer0.toString());
      assertEquals(7, charBuffer0.capacity());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo((Appendable) charBuffer0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isParser());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1, CopticChronology.AM);
      
      String string0 = "-xbIB:v*.FgIP,";
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalTime("-xbIB:v*.FgIP,");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "z";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("z");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MockFile mockFile0 = new MockFile("z");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) mockPrintWriter0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 300, (-2597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = (DateTimeFormatterBuilder.Fraction)dateTimeFormatter1.getParser();
      assertNotNull(dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder_Fraction1, dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction1.estimatePrintedLength());
      assertEquals((-2597), dateTimeFormatterBuilder_Fraction1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "qx#'M?$)P%mX\\UN>I";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(" cannot be compared to ");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(23, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(23, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(23, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(23, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1365));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.365", dateTimeZone0.getID());
      assertEquals("-00:00:01.365", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(23, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(23, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.365", dateTimeZone0.getID());
      assertEquals("-00:00:01.365", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
//      try { 
        dateTimeFormatter1.printTo((Writer) pipedWriter0, (-1024L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2061, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Integer integer0 = new Integer((-369));
      assertNotNull(integer0);
      assertEquals((-369), (int)integer0);
      
      Integer integer1 = new Integer((-369));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-369), (int)integer1);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(integer1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-369), (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2061, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-369), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-369), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.format.DateTimeFormatter");
      assertNotNull(stringBuffer0);
      assertEquals(38, stringBuffer0.length());
      assertEquals("org.joda.time.format.DateTimeFormatter", stringBuffer0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2061);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.061", dateTimeZone0.toString());
      assertEquals("+00:00:02.061", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((long) 2000, dateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.061", dateTimeZone0.toString());
      assertEquals("+00:00:02.061", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.061", dateTimeZone0.toString());
      assertEquals("+00:00:02.061", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.061", dateTimeZone0.toString());
      assertEquals("+00:00:02.061", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology1.getZone();
      assertNotNull(dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.061", dateTimeZone0.toString());
      assertEquals("+00:00:02.061", dateTimeZone0.getID());
      assertEquals("+00:00:02.061", dateTimeZone1.toString());
      assertEquals("+00:00:02.061", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.061", dateTimeZone0.toString());
      assertEquals("+00:00:02.061", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals((-2061L), dateTime0.getMillis());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.printTo((Appendable) charBuffer0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 5, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1080);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertEquals(1080, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertEquals(1080, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1080, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      assertNotNull(dateTimeZone0);
      assertEquals("+11:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:00", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertEquals(1080, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1080, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("+11:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:00", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1080, (int)dateTimeFormatter4.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertEquals(1080, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1080, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("+11:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:00", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1080, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertEquals(1080, (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      
      MockFile mockFile0 = new MockFile("iRqO=L&LS>@#YL", "org.joda.time.Days");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      LocalTime localTime0 = null;
//      try {
        localTime0 = new LocalTime(1821, 1821, 1080, 1080);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1821 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "mEq";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("mEq");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Duration duration0 = new Duration((Object) null);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      
      Duration duration1 = duration0.minus(0L);
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      
      Instant instant1 = instant0.plus((ReadableDuration) duration1);
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertSame(instant1, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1392409281320L, instant1.getMillis());
      
      Instant instant2 = instant1.withMillis(0L);
      assertNotNull(instant2);
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertNotSame(instant0, instant2);
      assertSame(instant0, instant1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1392409281320L, instant1.getMillis());
      assertEquals(0L, instant2.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) instant2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Integer integer0 = new Integer(821);
      assertNotNull(integer0);
      assertEquals(821, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(linkedList0.contains(821));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(821, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertFalse(linkedList0.contains(821));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(821, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(821, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2544);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.544", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.544", dateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate((long) 26, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+00:00:02.544", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.544", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("+00:00:02.544", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.544", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-2544L), dateTime0.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("ViN%9^v.e5<N2iM");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      LocalDateTime localDateTime0 = LocalDateTime.parse("ViN%9^v.e5<N2iM", dateTimeFormatter0);
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localDateTime0.size());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer("ViN%9^v.e5<N2iM");
      assertNotNull(stringBuffer0);
      assertEquals("ViN%9^v.e5<N2iM", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(52);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.052", dateTimeZone0.getID());
      assertEquals("+00:00:00.052", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDate localDate0 = new LocalDate(10080L, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.052", dateTimeZone0.getID());
      assertEquals("+00:00:00.052", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("+00:00:00.052", dateTimeZone0.getID());
      assertEquals("+00:00:00.052", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals((-52L), dateTime0.getMillis());
      
      dateTimeFormatter1.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(30, stringBuffer0.length());
      assertEquals("ViN%9^v.e5<N2iMViN%9^v.e5<N2iM", stringBuffer0.toString());
      assertEquals("+00:00:00.052", dateTimeZone0.getID());
      assertEquals("+00:00:00.052", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals((-52L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (-1000L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(86400, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(86400, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter4.getPivotYear());
      
      long long0 = dateTimeFormatter4.parseMillis("'");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals((-394L), long0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(86400, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals(86400, (int)dateTimeFormatter4.getPivotYear());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("{ KL}w.89", false);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dateTimeFormatter4;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.printTo((Writer) printWriter0, (ReadablePartial) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, 3722L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeUtils.setCurrentMillisFixed((-791L));
      LocalDateTime localDateTime0 = dateTimeFormatter1.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      
      String string0 = dateTimeFormatter1.print((ReadableInstant) dateTime0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("", string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((long) 394);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseLocalTime(",uuCSIn@3n1v2lL![z");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \",uuCSIn@3n1v2lL![z\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeUtils.setCurrentMillisFixed((-791L));
      long long0 = dateTimeFormatter1.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      LocalDateTime localDateTime0 = dateTimeFormatter1.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, dateTime0.getMillis());
      
      Integer integer0 = new Integer((-2436));
      assertNotNull(integer0);
      assertEquals((-2436), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-2436), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(393);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      
      String string0 = "qx#'M?$)P%mX\\UN>I";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("qx#'M?$)P%mXUN>I");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("qx#'M?$)P%mXUN>I");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral1);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 393;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(393);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("qx#'M?$)P%mXUN>I");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("qx#'M?$)P%mXUN>I");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(393);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(393, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(copticChronology0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertEquals(1, CopticChronology.AM);
      
      String string0 = "";
      LocalTime localTime0 = new LocalTime((long) 393, dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (ReadablePartial) localTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeUtils.setCurrentMillisSystem();
      LocalDateTime localDateTime0 = dateTimeFormatter1.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(4, localDateTime0.size());
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", (-806));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(805, int0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      String string0 = dateTimeFormatter2.print((ReadableInstant) mutableDateTime0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("", string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseLocalDate((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localDateTime0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-2645));
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(4, localDateTime1.size());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gregorianChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter1.printTo(stringBuffer0, (ReadablePartial) localDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(4, localDateTime1.size());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(393);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(393);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(393, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      long long0 = new Integer(393);
      assertEquals(393, long0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      int int0 = 57;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(57);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(57, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      
      MonthDay monthDay0 = new MonthDay(394L);
      assertNotNull(monthDay0);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      Partial partial0 = new Partial(monthDay0);
      assertNotNull(partial0);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int1 = (-1129);
      // Undeclared exception!
//      try { 
        partial0.with(dateTimeFieldType0, (-1129));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -1129 for millisOfDay must not be smaller than 0
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeUtils.setCurrentMillisSystem();
      int int0 = dateTimeFormatter2.parseInto(mutableDateTime0, "", 0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, int0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = new MutableDateTime();
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      String string0 = dateTimeFormatter2.print((ReadableInstant) mutableDateTime1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("", string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeUtils.setCurrentMillisSystem();
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", (-806));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(805, int0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      assertNotNull(dateTimeZone0);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+04:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals("+04:00", dateTimeZone1.getID());
      assertEquals("+04:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZone(dateTimeZone1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals("+04:00", dateTimeZone1.getID());
      assertEquals("+04:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(21);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals("+04:00", dateTimeZone1.getID());
      assertEquals("+04:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(21, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(3);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals("+04:00", dateTimeZone1.getID());
      assertEquals("+04:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(21, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(3, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(21, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      MutableDateTime mutableDateTime1 = dateTimeFormatter5.parseMutableDateTime("");
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals((-14400000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals("+04:00", dateTimeZone1.getID());
      assertEquals("+04:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(21, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(3, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(21, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(393);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.393", dateTimeZone0.getID());
      assertEquals("+00:00:00.393", dateTimeZone0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("qx#'M?$)P%mXUN>I");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(393);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(393, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      long long0 = dateTimeFormatter0.parseMillis("qx#'M?$)P%mXUN>I");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0L, long0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("qx#'M?$)P%mXUN>I", string0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "qx#'M?$)P%mXUN>I", 5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals((-6), int0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter1.printTo((Appendable) pipedWriter0, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('{');
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("{", charArrayWriter0.toString());
      assertEquals("{", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "");
      assertNotNull(charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("{", charArrayWriter0.toString());
      assertEquals("{", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals(1, charArrayWriter2.size());
      assertEquals("{", charArrayWriter2.toString());
      
      dateTimeFormatter0.printTo((Writer) charArrayWriter2, (ReadableInstant) null);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("{", charArrayWriter0.toString());
      assertEquals("{", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals(1, charArrayWriter2.size());
      assertEquals("{", charArrayWriter2.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 3184);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals((-3185), int0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeUtils.setCurrentMillisSystem();
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", (-806));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(805, int0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = new MutableDateTime();
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      String string0 = dateTimeFormatter2.print((ReadableInstant) mutableDateTime1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("", string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, localDateTime0.size());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseInto(mutableDateTime1, (String) null, 17971875);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = dateTimeFormatter0.print((long) 1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("Etc/UTC", string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Etc/UTC");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.limit());
      assertEquals("Etc/UTC", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("Etc/UTC");
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(394);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(394, (int)dateTimeFormatter2.getPivotYear());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNotNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(394, (int)integer0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(394, (int)dateTimeFormatter2.getPivotYear());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = dateTimeFormatter1.getLocale();
      assertNull(locale0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology0);
      assertNotNull(yearMonth0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = yearMonth0.plusMonths(394);
      assertNotNull(yearMonth1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1760, yearMonth1.getYear());
      assertEquals(10, yearMonth1.getMonthOfYear());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) yearMonth1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals("", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1760, yearMonth1.getYear());
      assertEquals(10, yearMonth1.getMonthOfYear());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, 690L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-2177), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("teOYjLBs");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZone((DateTimeZone) null);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertNull(dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseMutableDateTime("teOYjLBs");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"teOYjLBs\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-209L), 4);
      assertNotNull(gJChronology0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) monthDay0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = dateTimeFormatter0.print((long) 1);
      assertNotNull(string1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("Etc/UTC", string1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Etc/UTC");
      assertNotNull(charBuffer0);
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("Etc/UTC", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.capacity());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Etc/UTC");
      assertNotNull(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("Etc/UTC", stringBuffer0.toString());
      
      dateTimeFormatter2.printTo(stringBuffer0, 1781L);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("Etc/UTCEtc/UTC", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(394, 394, (-1));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((-1));
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      
      Integer integer0 = dateTimeFormatter3.getPivotYear();
      assertNotNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals((-1), (int)integer0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      
      long long0 = dateTimeFormatter3.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      Instant instant1 = instant0.minus((long) 5);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800005L), instant1.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.print((ReadableInstant) instant1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(121);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime1, "UjN|", 0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, int0);
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Instant instant1 = instant0.plus((long) 394);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281714L, instant1.getMillis());
      
      Instant instant2 = instant1.toInstant();
      assertNotNull(instant2);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertSame(instant2, instant1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281714L, instant1.getMillis());
      assertEquals(1392409281714L, instant2.getMillis());
      
      MutableDateTime mutableDateTime0 = instant2.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertSame(instant2, instant1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281714L, instant1.getMillis());
      assertEquals(1392409281714L, instant2.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281714L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      
      String string0 = locale0.getDisplayScript(locale1);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", string0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertNotNull(set0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertEquals(5, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      dateTimeFormatter5.printTo((Appendable) charArrayWriter0, (ReadableInstant) instant0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertEquals(5, (int)dateTimeFormatter5.getPivotYear());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      assertNotNull(monthDay0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      // Undeclared exception!
//      try { 
        monthDay0.withMonthOfYear(91);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 91 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Writer writer0 = null;
      // Undeclared exception!
//      try { 
        MonthDay.parse("1/u!\";tl%FuJa+`K$");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"1/u!\";tl%FuJa+`K$\" is malformed at \"/u!\";tl%FuJa+`K$\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime1, "", 679);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals((-680), int0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) mutableDateTime1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("", string0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(397);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(397, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('k');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("k", stringWriter0.toString());
      assertEquals("k", stringWriter1.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Writer) stringWriter1, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      assertNotNull(dateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0L, dateTime0.getMillis());
      
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-2177), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals("/tmp/7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(515);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-2177), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-2177), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(515, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertNull(dateTimeFormatter6.getPivotYear());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      int int0 = dateTimeFormatter6.parseInto(mutableDateTime0, "7\"HA09_v;Md|}qxI", 1);
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertEquals((-2), int0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertNull(dateTimeFormatter6.getPivotYear());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Integer integer0 = dateTimeFormatter6.getPivotYear();
      assertNull(integer0);
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertNull(dateTimeFormatter6.getPivotYear());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = dateTimeFormatter2.isOffsetParsed();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertTrue(boolean0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2177), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/tmp/7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      assertNotNull(stringBuffer0);
      assertEquals("7\"HA09_v;Md|}qxI", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      
      Locale locale0 = new Locale("mBmWcBRW=", "7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      assertNotNull(locale0);
      assertEquals("7\"HA09_V;MD|}QXI", locale0.getCountry());
      assertEquals("mbmwcbrw=_7\"HA09_V;MD|}QXI_7\"HA09_v;Md|}qxI", locale0.toString());
      assertEquals("mbmwcbrw=", locale0.getLanguage());
      assertEquals("7\"HA09_v;Md|}qxI", locale0.getVariant());
      
      Locale locale1 = Locale.JAPANESE;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Integer integer0 = new Integer(2000);
      assertNotNull(integer0);
      assertEquals(2000, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(locale0, locale1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("7\"HA09_V;MD|}QXI", locale0.getCountry());
      assertEquals("mbmwcbrw=_7\"HA09_V;MD|}QXI_7\"HA09_v;Md|}qxI", locale0.toString());
      assertEquals("mbmwcbrw=", locale0.getLanguage());
      assertEquals("7\"HA09_v;Md|}qxI", locale0.getVariant());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((DateTimeZone) null);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = dateTimeFormatter3.parseInto(mutableDateTime1, "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", 1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertEquals((-2), int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2177), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter5.getZone();
      assertNull(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(locale0, locale1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("7\"HA09_V;MD|}QXI", locale0.getCountry());
      assertEquals("mbmwcbrw=_7\"HA09_V;MD|}QXI_7\"HA09_v;Md|}qxI", locale0.toString());
      assertEquals("mbmwcbrw=", locale0.getLanguage());
      assertEquals("7\"HA09_v;Md|}qxI", locale0.getVariant());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      int int0 = 395;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(395);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDateTime("^:?'gm>/06}");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      String string0 = dateTimeFormatter0.print((long) 1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("Etc/UTC", string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("Etc/UTC");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Instant instant0 = mutableDateTime0.toInstant();
      assertNotNull(instant0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addMillis(5);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(5L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
      assertNotNull(mutableDateTime2);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(5L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      int int0 = dateTimeFormatter3.parseInto(mutableDateTime2, "", 0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertEquals((-1), int0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(5L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Chronology chronology0 = dateTimeFormatter3.getChronolgy();
      assertNull(chronology0);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      Integer integer0 = Integer.valueOf(394);
      assertNotNull(integer0);
      assertEquals(394, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, EthiopicChronology.EE);
      
      Integer integer1 = new Integer((-2215));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2215), (int)integer1);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2215), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2215), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-2215), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withDefaultYear(1581);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2215), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-2215), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter6.isParser());
      assertEquals(1581, dateTimeFormatter6.getDefaultYear());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertEquals((-2215), (int)dateTimeFormatter6.getPivotYear());
      assertEquals(1, EthiopicChronology.EE);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withLocale(locale0);
      assertNotNull(dateTimeFormatter7);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2215), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals((-2215), (int)dateTimeFormatter7.getPivotYear());
      assertTrue(dateTimeFormatter7.isPrinter());
      assertTrue(dateTimeFormatter7.isParser());
      assertFalse(dateTimeFormatter7.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
      assertEquals(1, EthiopicChronology.EE);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int0 = dateTimeFormatter5.parseInto(mutableDateTime0, "u3qo{%Gwt8C", 354);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertEquals((-355), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-2215), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-2215), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2198));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(0);
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("\u0000", stringBuffer0.toString());
      assertEquals("\u0000", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withCenturyOfEra(1241);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      LocalDate localDate2 = localDate1.withFieldAdded(durationFieldType0, 0);
      assertNotNull(localDate2);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate0);
      assertSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate0);
      assertSame(localDate2, localDate1);
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(3, localDate2.size());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) localDate2, (Locale) null);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate0));
      assertSame(stringBuffer0, stringBuffer1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate0);
      assertSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate0);
      assertSame(localDate2, localDate1);
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, stringBuffer0.length());
      assertEquals("\u0000", stringBuffer0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(3, localDate2.size());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("-00:00:02.198", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.198", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, EthiopicChronology.EE);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (long) (-2198));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(395);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("<hh[6qZ .");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Integer integer0 = Integer.valueOf(395);
      assertNotNull(integer0);
      assertEquals(395, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2929));
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-2929), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-2929), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals((-2929), dateTimeFormatter3.getDefaultYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseInto(mutableDateTime0, "", 2000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(397);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(397, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 4, (Chronology) ethiopicChronology0);
      assertNotNull(localDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, EthiopicChronology.EE);
      
      Duration duration0 = Duration.standardDays((-1380L));
      assertNotNull(duration0);
      assertEquals((-1380L), duration0.getStandardDays());
      assertEquals((-1987200L), duration0.getStandardMinutes());
      assertEquals((-119232000L), duration0.getStandardSeconds());
      assertEquals((-119232000000L), duration0.getMillis());
      assertEquals((-33120L), duration0.getStandardHours());
      
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      assertNotNull(localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-1380L), duration0.getStandardDays());
      assertEquals((-1987200L), duration0.getStandardMinutes());
      assertEquals((-119232000L), duration0.getStandardSeconds());
      assertEquals((-119232000000L), duration0.getMillis());
      assertEquals((-33120L), duration0.getStandardHours());
      assertEquals(4, localDateTime2.size());
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(800);
      assertNotNull(localDateTime3);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-1380L), duration0.getStandardDays());
      assertEquals((-1987200L), duration0.getStandardMinutes());
      assertEquals((-119232000L), duration0.getStandardSeconds());
      assertEquals((-119232000000L), duration0.getMillis());
      assertEquals((-33120L), duration0.getStandardHours());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDateTime localDateTime4 = localDateTime3.plusMonths(1);
      assertNotNull(localDateTime4);
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals(4, localDateTime4.size());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-1380L), duration0.getStandardDays());
      assertEquals((-1987200L), duration0.getStandardMinutes());
      assertEquals((-119232000L), duration0.getStandardSeconds());
      assertEquals((-119232000000L), duration0.getMillis());
      assertEquals((-33120L), duration0.getStandardHours());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(1, EthiopicChronology.EE);
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (ReadablePartial) localDateTime4);
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals(4, localDateTime4.size());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(397, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-1380L), duration0.getStandardDays());
      assertEquals((-1987200L), duration0.getStandardMinutes());
      assertEquals((-119232000L), duration0.getStandardSeconds());
      assertEquals((-119232000000L), duration0.getMillis());
      assertEquals((-33120L), duration0.getStandardHours());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(678);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(678, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      dateTimeFormatter3.printTo((Appendable) charArrayWriter0, 394L);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(678, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(436);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.436", dateTimeZone0.getID());
      assertEquals("+00:00:00.436", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(:67~\"BB.A,2v");
      assertFalse(boolean0);
      
      String string0 = "";
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(4, localDateTime0.size());
      
      Writer writer0 = null;
      Instant instant0 = new Instant((long) 1);
      assertNotNull(instant0);
      assertEquals(1L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2575, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(1, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("BCE");
      assertNotNull(locale_LanguageRange0);
      
      boolean boolean1 = linkedList0.add(locale_LanguageRange0);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(locale_LanguageRange0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      boolean boolean2 = dateTimeFieldType0.isSupported(iSOChronology0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(linkedList0.contains(locale_LanguageRange0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(linkedList0.contains(locale_LanguageRange0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Locale locale0 = Locale.lookup(linkedList0, list1);
      assertNull(locale0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(linkedList0.contains(locale_LanguageRange0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withLocale((Locale) null);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertSame(dateTimeFormatter5, dateTimeFormatter6);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertEquals(1, (int)dateTimeFormatter6.getPivotYear());
      assertEquals(1, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(1, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZone((DateTimeZone) null);
      assertNotNull(dateTimeFormatter7);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
      assertSame(dateTimeFormatter7, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
      assertNull(dateTimeFormatter7.getPivotYear());
      assertTrue(dateTimeFormatter7.isPrinter());
      assertFalse(dateTimeFormatter7.isOffsetParsed());
      assertTrue(dateTimeFormatter7.isParser());
      
      Integer integer1 = dateTimeFormatter4.getPivotYear();
      assertNotNull(integer1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter7));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter7);
      assertEquals(1, (int)integer1);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withPivotYear(1);
      assertNotNull(dateTimeFormatter8);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
      assertSame(dateTimeFormatter7, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter4);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
      assertNull(dateTimeFormatter7.getPivotYear());
      assertTrue(dateTimeFormatter7.isPrinter());
      assertFalse(dateTimeFormatter7.isOffsetParsed());
      assertTrue(dateTimeFormatter7.isParser());
      assertEquals(2000, dateTimeFormatter8.getDefaultYear());
      assertTrue(dateTimeFormatter8.isParser());
      assertEquals(1, (int)dateTimeFormatter8.getPivotYear());
      assertFalse(dateTimeFormatter8.isOffsetParsed());
      assertTrue(dateTimeFormatter8.isPrinter());
      
      String string0 = dateTimeFormatter8.print((long) 1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
      assertSame(dateTimeFormatter7, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter8, dateTimeFormatter4);
      assertEquals("00", string0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
      assertNull(dateTimeFormatter7.getPivotYear());
      assertTrue(dateTimeFormatter7.isPrinter());
      assertFalse(dateTimeFormatter7.isOffsetParsed());
      assertTrue(dateTimeFormatter7.isParser());
      assertEquals(2000, dateTimeFormatter8.getDefaultYear());
      assertTrue(dateTimeFormatter8.isParser());
      assertEquals(1, (int)dateTimeFormatter8.getPivotYear());
      assertFalse(dateTimeFormatter8.isOffsetParsed());
      assertTrue(dateTimeFormatter8.isPrinter());
      
      Chronology chronology0 = dateTimeFormatter3.getChronolgy();
      assertNull(chronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter8);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter7.parseMutableDateTime(" for ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \" for \"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      int int0 = 86400;
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.print((ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId1 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1831));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1831), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1831), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1831), dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1831), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1831), dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1831), dateTimeFormatter4.getDefaultYear());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1831), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1831), dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1831), dateTimeFormatter4.getDefaultYear());
      assertEquals((-1831), dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1831), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1831), dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1831), dateTimeFormatter4.getDefaultYear());
      assertEquals((-1831), dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, (int)dateTimeFormatter6.getPivotYear());
      assertEquals((-1831), dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertTrue(dateTimeFormatter6.isParser());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(1, EthiopicChronology.EE);
      
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      String string0 = dateTimeFormatter6.print((ReadablePartial) monthDay0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertEquals("", string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1831), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1831), dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1831), dateTimeFormatter4.getDefaultYear());
      assertEquals((-1831), dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, (int)dateTimeFormatter6.getPivotYear());
      assertEquals((-1831), dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertTrue(dateTimeFormatter6.isParser());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("-01:00", dateTimeZone1.getID());
      assertEquals("-01:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone1);
      assertNotNull(copticChronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("-01:00", dateTimeZone1.getID());
      assertEquals("-01:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("-01:00", dateTimeZone1.getID());
      assertEquals("-01:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalDateTime("Q<Oik^4>9+Nr+scX@9B");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Q<Oik^4>9+Nr+scX@9B\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withChronology(gregorianChronology0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(4, localDateTime0.size());
      
      dateTimeFormatter1.printTo((Writer) null, (ReadablePartial) localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(394);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(394, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.printTo((Appendable) null, (-1L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      Integer integer0 = dateTimeFormatter3.getPivotYear();
      assertNull(integer0);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      long long0 = dateTimeFormatter1.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Integer integer0 = Integer.valueOf(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(397);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(397, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      boolean boolean0 = mutableDateTime0.isBefore((long) 397);
      assertFalse(boolean0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime1, "", 4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals((-5), int0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(397, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      String string0 = dateTimeFormatter0.print(86400L);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals("", string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter2.getParser();
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      GregorianCalendar gregorianCalendar0 = mutableDateTime0.toGregorianCalendar();
      assertNotNull(gregorianCalendar0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.394,offset=394,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=714,ZONE_OFFSET=394,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.394,offset=394,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=714,ZONE_OFFSET=394,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(3, localDate0.size());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology0, locale0, integer0, 0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone1 = dateTimeParserBucket0.getZone();
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone1.getID());
      assertEquals("+00:00:00.394", dateTimeZone1.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone1);
      assertNotNull(dateTimeFormatter2);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone1.getID());
      assertEquals("+00:00:00.394", dateTimeZone1.toString());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, EthiopicChronology.EE);
      
      MutableDateTime mutableDateTime1 = dateTimeFormatter1.parseMutableDateTime("");
      assertNotNull(mutableDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Parsing not supported");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      GregorianCalendar gregorianCalendar0 = mutableDateTime0.toGregorianCalendar();
      assertNotNull(gregorianCalendar0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.394,offset=394,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=714,ZONE_OFFSET=394,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.394,offset=394,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=714,ZONE_OFFSET=394,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) monthDay0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("Parsing not supported", string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(21, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("^g3{7.nhPoX]uj|c35");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"^g3{7.nhPoX]uj|c35\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone(dateTimeZone0);
      assertNotNull(ethiopicChronology1);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, localDateTime0.size());
      
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, int0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(1535);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1535, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1213));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.213", dateTimeZone0.getID());
      assertEquals("-00:00:01.213", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("-00:00:01.213", dateTimeZone0.getID());
      assertEquals("-00:00:01.213", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf(394);
      assertNotNull(integer0);
      assertEquals(394, (int)integer0);
      
      Integer integer1 = new Integer(2146186074);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2146186074, (int)integer1);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2146186074, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1699));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2146186074, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2146186074, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1699), dateTimeFormatter2.getDefaultYear());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2146186074, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2146186074, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1699), dateTimeFormatter2.getDefaultYear());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1699), dateTimeFormatter3.getDefaultYear());
      assertEquals(2146186074, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals("-00:00:01.213", dateTimeZone0.getID());
      assertEquals("-00:00:01.213", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      long long0 = new Integer((-1213));
      assertEquals((-1213), long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      int int0 = 395;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(395);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.395", dateTimeZone0.toString());
      assertEquals("+00:00:00.395", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, localDateTime0.size());
      
      Writer writer0 = null;
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Writer) null, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      Integer integer1 = new Integer(86400);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(86400, (int)integer1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(394L, ethiopicChronology0, locale0, integer1, (-1060));
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(86400, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone1 = dateTimeParserBucket0.getZone();
      assertNotNull(dateTimeZone1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(86400, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("+00:00:00.394", dateTimeZone1.toString());
      assertEquals("+00:00:00.394", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTime dateTime0 = new DateTime(1022L, dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1022L, dateTime0.getMillis());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(1022L, dateTime0.getMillis());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      MockFile mockFile0 = new MockFile("~6M{Cre\"x1[F=j+", "The effective range must be at least 2");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "~6M{Cre\"x1[F=j+", (Object[]) null);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/~6M{Cre\"x1[F=j+", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("The effective range must be at least 2", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/~6M{Cre\"x1[F=j+/The effective range must be at least 2", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, (long) 394);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/~6M{Cre\"x1[F=j+", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("The effective range must be at least 2", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/~6M{Cre\"x1[F=j+/The effective range must be at least 2", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter1.getPrinter();
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("OXU[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"OXU[\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      
      long long0 = dateTimeFormatter3.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals((-394L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      
      LocalTime localTime0 = dateTimeFormatter3.parseLocalTime("");
      assertNotNull(localTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMutableDateTime("1?WykQvw,y}(A:R7I'f");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"1?WykQvw,y}(A:R7I'f\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Q[W*y'OO%FM! w");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(locale1, locale0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      String string0 = dateTimeFormatter4.print(0L);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals("Q[W*y'OO%FM! w", string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMillis("Q[W*y'OO%FM! w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Q[W*y'OO%FM! w\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      GregorianCalendar gregorianCalendar0 = mutableDateTime0.toGregorianCalendar();
      assertNotNull(gregorianCalendar0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.394,offset=394,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=714,ZONE_OFFSET=394,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.394,offset=394,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=714,ZONE_OFFSET=394,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) localDate0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("", string0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.394,offset=394,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=714,ZONE_OFFSET=394,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("l#P=^U$V,&zmS1)i{9");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"l#P=^U$V,&zmS1)i{9\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      long long0 = dateTimeFormatter4.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals((-394L), long0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      boolean boolean1 = dateTimeFormatter1.isOffsetParsed();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertTrue(boolean1 == boolean0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertFalse(boolean1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Integer integer1 = dateTimeFormatter4.getPivotYear();
      assertNotNull(integer1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals(1, (int)integer1);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      Locale locale1 = Locale.JAPANESE;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(locale0, locale1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      assertNotNull(localTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseMillis("%1xtCNVdY");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"%1xtCNVdY\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-1854);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1854), (Map<String, DateTimeZone>) null);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1854));
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1854), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1854));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1854), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1854), (int)dateTimeFormatter2.getPivotYear());
      assertEquals((-1854), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      String string0 = "7\"HA09_v;Md|}qxI";
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      assertNotNull(file0);
      assertEquals("7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp/7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)23;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)22, (byte)23}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalDate("E<IxO9/DRIP,nVOxW");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"E<IxO9/DRIP,nVOxW\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Integer integer0 = Integer.valueOf(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(397);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(397, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime1, "", 4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals((-5), int0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(397, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf((-565));
      assertNotNull(integer0);
      assertEquals((-565), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(86400);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(86400, dateTimeFormatter2.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(86400, dateTimeFormatter2.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(86400, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-565), (int)dateTimeFormatter3.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      long long0 = dateTimeFormatter3.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(86400, dateTimeFormatter2.getDefaultYear());
      assertEquals((-565), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(86400, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-565), (int)dateTimeFormatter3.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      LocalDate localDate0 = dateTimeFormatter3.parseLocalDate("");
      assertNotNull(localDate0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(3, localDate0.size());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime1, "", (-454));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(453, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      int int0 = 933;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-597));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.597", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.597", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("-00:00:00.597", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.597", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((-1760L));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseMutableDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDate("Ye/d&-O69.,");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Ye/d&-O69.,\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 353, 1);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertTrue(boolean0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, (-1), (-2083));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = new Locale("NAZDA");
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("nazda", locale1.getLanguage());
      assertEquals("nazda", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(locale1, locale0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("nazda", locale1.getLanguage());
      assertEquals("nazda", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertFalse(boolean0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Integer integer0 = Integer.valueOf(394);
      assertNotNull(integer0);
      assertEquals(394, (int)integer0);
      
      Integer integer1 = new Integer(394);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(394, (int)integer1);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer1);
      assertNotNull(dateTimeFormatter1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(394, (int)dateTimeFormatter1.getPivotYear());
      
      Locale locale0 = new Locale("f$0f", "]Kbkdz4YO`");
      assertNotNull(locale0);
      assertEquals("f$0f", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("f$0f_]KBKDZ4YO`", locale0.toString());
      assertEquals("]KBKDZ4YO`", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("f$0f", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("f$0f_]KBKDZ4YO`", locale0.toString());
      assertEquals("]KBKDZ4YO`", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("f$0f", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("f$0f_]KBKDZ4YO`", locale0.toString());
      assertEquals("]KBKDZ4YO`", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-1));
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("f$0f", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("f$0f_]KBKDZ4YO`", locale0.toString());
      assertEquals("]KBKDZ4YO`", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1), dateTimeFormatter4.getDefaultYear());
      
      Locale locale1 = Locale.JAPANESE;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(locale0, locale1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("f$0f", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("f$0f_]KBKDZ4YO`", locale0.toString());
      assertEquals("]KBKDZ4YO`", locale0.getCountry());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-1));
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-01:00", dateTimeZone1.getID());
      assertEquals("-01:00", dateTimeZone1.toString());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone1);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-01:00", dateTimeZone1.getID());
      assertEquals("-01:00", dateTimeZone1.toString());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertTrue(dateTimeFormatter6.isParser());
      assertNull(dateTimeFormatter6.getPivotYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseMillis("$ZnzmUT-@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"$ZnzmUT-@\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = dateTimeFormatter0.print((long) 1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("Etc/UTC", string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Etc/UTC");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.limit());
      assertEquals("Etc/UTC", charBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, 1000000000000000000L);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      boolean boolean1 = dateTimeFormatter3.isPrinter();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(boolean1 == boolean0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertTrue(boolean1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId1 = (DateTimeFormatterBuilder.TimeZoneId)dateTimeFormatter0.getParser();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      String string0 = "";
      String string1 = "'";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, (long) 86400);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      long long0 = dateTimeFormatter4.parseMillis("");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals((-394L), long0);
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = Integer.valueOf(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('1');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(86400, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(3199);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(86400, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(3199, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      StringWriter stringWriter0 = new StringWriter(1401);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo(stringBuffer0, 0L);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-267));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.267", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.267", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("-00:00:00.267", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.267", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Integer integer0 = Integer.valueOf(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals("-00:00:00.267", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.267", dateTimeZone0.toString());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("2147483648");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      boolean boolean1 = dateTimeFieldType0.isSupported(julianChronology0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1214));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1214), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1214));
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1214), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1214), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1214), dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      Integer integer0 = new Integer((-1214));
      assertNotNull(integer0);
      assertEquals((-1214), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1214), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1214), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1214), dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1214), dateTimeFormatter4.getDefaultYear());
      assertEquals((-1214), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(islamicChronology0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1214), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1214), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1214), dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1214), dateTimeFormatter4.getDefaultYear());
      assertEquals((-1214), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-1214), dateTimeFormatter5.getDefaultYear());
      assertEquals((-1214), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.parseMillis("j4hQ1,>]t");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"j4hQ1,>]t\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = Integer.valueOf(394);
      assertNotNull(integer0);
      assertEquals(394, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(394, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(394, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(394, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(394, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(394, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(394, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.394", dateTimeZone0.toString());
      assertEquals("+00:00:00.394", dateTimeZone0.getID());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(394, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(394, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(394, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals(394, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter4.print((ReadablePartial) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-2177), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/tmp/7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", mockFile0.toString());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("7\"HA09_v;Md|}qxI07\"HA09_v;Md|}qxI", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      assertNotNull(stringBuffer0);
      assertEquals("7\"HA09_v;Md|}qxI", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(islamicChronology1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-2177), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-2177), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((Chronology) islamicChronology0);
      assertNotNull(monthDay0);
      assertEquals(4, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(13, monthDay0.getDayOfMonth());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.print((ReadablePartial) monthDay0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(933, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withLocale((Locale) null);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter6 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertNull(dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isParser());
      
      boolean boolean0 = dateTimeFormatter3.isPrinter();
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertTrue(boolean0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-597), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNull(chronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("Xs^B]A-{8$Tf*xJx -o");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      Integer integer0 = new Integer((-1));
      dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      Integer integer1 = new Integer((-597));
      Integer integer2 = new Integer((-59));
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withLocale(locale0);
      Integer integer3 = new Integer(1);
      dateTimeFormatter6.withPivotYear(integer3);
      dateTimeFormatter2.withPivotYear((-59));
      dateTimeFormatter4.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.parseMillis("7\"HA09_v;Md|}qxI");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"7\"HA09_v;Md|}qxI\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      dateTimeFormatter3.withZoneUTC();
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseMutableDateTime("I$Pewj%6Wx?c>}N(@&M");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      String string0 = "";
      dateTimeFormatter2.withPivotYear(1);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LocalDate localDate0 = new LocalDate((-2577), 1, 1);
      dateTimeFormatter1.printTo((Appendable) mockPrintWriter0, (ReadablePartial) localDate0);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      Instant instant0 = Instant.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      MonthDay monthDay1 = monthDay0.plus(seconds0);
      LocalDate localDate1 = monthDay1.toLocalDate(1);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        localDate1.withFieldAdded(durationFieldType0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field 'eras' is not supported
//         //
//         verifyException("org.joda.time.LocalDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      dateTimeFormatter2.withPivotYear((-2177));
      String string0 = "7\"HA09_v;Md|}qxI";
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      Locale locale0 = new Locale("mBmWcBRW=", "7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      Integer integer0 = new Integer(2000);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, islamicChronology0, locale0, integer0, 933);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTime dateTime0 = new DateTime((long) 1, dateTimeZone0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (long) (-2177));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1854), (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.getLocale();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseInto((ReadWritableInstant) null, "##G&h<}'bC8L<v", (-1854));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Instant must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(394);
      EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      Integer integer0 = Integer.valueOf(86400);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      Locale locale0 = Locale.JAPANESE;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      long long0 = dateTimeFormatter4.parseMillis("'");
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals((-394L), long0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
      MonthDay monthDay0 = new MonthDay((Chronology) ethiopicChronology0);
      dateTimeFormatter3.print((ReadablePartial) monthDay0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      boolean boolean0 = dateTimeFormatter4.isParser();
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(boolean0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withChronology(copticChronology0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      dateTimeFormatter3.getChronology();
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseDateTime("\"=g>Wp!*3jbL9");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"=g>Wp!*3jbL9\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1854), (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.getPrinter();
      dateTimeFormatter1.isParser();
      DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseLocalDateTime("3mxfb2wY-Ej7!SE");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"3mxfb2wY-Ej7!SE\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      dateTimeFormatter3.getParser();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(1028);
      assertEquals(1028, (int)dateTimeFormatter5.getPivotYear());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dateTimeFormatter4.getPrinter();
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter2.isParser();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(boolean0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter6 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withChronology(copticChronology0);
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology0, (Locale) null, (Integer) 1, 1);
      DateTimeZone dateTimeZone1 = dateTimeParserBucket0.getZone();
      DateTime dateTime0 = new DateTime(1638L, dateTimeZone1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StringBuffer stringBuffer0 = new StringBuffer(766);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      dateTimeFormatter1.printTo(stringBuffer1, (ReadableInstant) dateTime0);
      Locale locale0 = null;
      Object[] objectArray0 = null;
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 2000, 2000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.getChronology();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("\" is too short");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = new Integer((-2822));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(2582);
      dateTimeFormatter3.withZoneUTC();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 25650000, 25650000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(1);
      dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      dateTimeFormatter4.withPivotYear(25650000);
      dateTimeFormatter3.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseMillis("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      Locale locale0 = new Locale("mBmWcBRW=", "7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      Integer integer0 = new Integer(2000);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, islamicChronology0, locale0, integer0, 933);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTime dateTime0 = new DateTime((long) 1, dateTimeZone0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "7\"HA09_v;Md|}qxI", (Object[]) null);
      dateTimeFormatter3.printTo((Writer) printWriter0, 26607895200000L);
      dateTimeFormatter3.getPrinter();
      dateTimeFormatter1.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDateTime("3mxfb2wY-Ej7!SE");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"3mxfb2wY-Ej7!SE\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      Locale locale0 = new Locale("mBmWcBRW=", "7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      Integer integer0 = new Integer(2000);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, islamicChronology0, locale0, integer0, 933);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTime dateTime0 = new DateTime(1215L, dateTimeZone0);
      dateTimeFormatter2.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      assertEquals("7\"HA09_v;Md|}qxI0", stringBuffer0.toString());
      
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "7\"HA09_v;Md|}qxI", (Object[]) null);
      dateTimeFormatter3.printTo((Writer) printWriter0, 21600000L);
      dateTimeFormatter3.getPrinter();
      dateTimeFormatter2.isParser();
      dateTimeFormatter1.withChronology(chronology0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Integer integer0 = new Integer((-597));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      Integer integer1 = new Integer((-597));
      Integer integer2 = new Integer(1);
      dateTimeFormatter0.withPivotYear(integer2);
      dateTimeFormatter2.withPivotYear((-597));
      dateTimeFormatter2.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter4.parseMillis("#\"7aPLUJ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"#\"7aPLUJ\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      dateTimeFormatter4.withZoneUTC();
      // Undeclared exception!
//      try { 
        dateTimeFormatter4.parseMillis("I$Pewj%6Wx?c>}N(@&M");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      dateTimeFormatter3.getParser();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(1028);
      dateTimeFormatter5.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("#\"7aPLUJ");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1854), (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.withZoneUTC();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1405, 1405, 930);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseInto((ReadWritableInstant) null, "##G&h<}'bC8L<v", (-1854));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Instant must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      dateTimeFormatter2.withPivotYear((-2177));
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      Locale locale0 = new Locale("mBmWcBRW=", "7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      Integer integer0 = new Integer((-597));
      dateTimeFormatter2.withPivotYear((Integer) 1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
      dateTimeFormatter3.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseMillis("Instant must not be null");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Instant must not be null\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(1);
      Locale locale0 = Locale.ENGLISH;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, copticChronology0, locale0, (Integer) 1, 1);
      dateTimeParserBucket0.getZone();
      DateTime dateTime0 = new DateTime((long) 1, (DateTimeZone) fixedDateTimeZone0);
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseMutableDateTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1854), (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.withZoneUTC();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseInto((ReadWritableInstant) null, "##G&h<}'bC8L<v", (-1854));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Instant must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      int int0 = (-1283);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1283), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1283));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      dateTimeFormatter2.withZoneUTC();
      int int1 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (long) (-1283), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 0
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.chrono.ISOYearOfEraDateTimeField");
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'O';
      charArray0[2] = 'L';
      charArray0[3] = 'J';
      DateTimeUtils.setCurrentMillisOffset(0);
      charArray0[4] = 'O';
      charArray0[5] = 'F';
      charArray0[6] = '0';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (long) 0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 933, (-597));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-2177));
      File file0 = MockFile.createTempFile("7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"HA09_v;Md|}qxI");
      Locale locale0 = new Locale("mBmWcBRW=", "7\"HA09_v;Md|}qxI", "7\"HA09_v;Md|}qxI");
      Integer integer0 = new Integer(2000);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, islamicChronology0, locale0, integer0, 933);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTime dateTime0 = new DateTime(1215L, dateTimeZone0);
      dateTimeFormatter2.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "7\"HA09_v;Md|}qxI", (Object[]) null);
      dateTimeFormatter3.printTo((Writer) printWriter0, 21600000L);
      dateTimeFormatter3.getPrinter();
      dateTimeFormatter2.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(1028);
      dateTimeFormatter5.isParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("#\"7aPLUJ");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2000, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Locale locale0 = Locale.TAIWAN;
      dateTimeFormatter1.withLocale(locale0);
//      try { 
        DateTimeZone.forOffsetHoursMinutes(2000, 369);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Hours out of range: 2000
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 25650000, 25650000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(2582);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      // Undeclared exception!
//      try { 
        dateTimeFormatter4.parseMillis("I$Pewj%6Wx?c>}N(@&M");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.getChronology();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("Xs^B]A-{8$Tf*xJx -o");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Xs^B]A-{8$Tf*xJx -o\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      dateTimeFormatter1.withZoneUTC();
      String string0 = "";
      // Undeclared exception!
//      try { 
        DateTimeZone.forID("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone id '' is not recognised
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      int int0 = 89;
      // Undeclared exception!
//      try { 
        monthDay0.getField(89);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Invalid index: 89
//         //
//         verifyException("org.joda.time.MonthDay", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        LocalDate.fromDateFields((Date) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The date must not be null
//         //
//         verifyException("org.joda.time.LocalDate", e);
//      }
  }
}
