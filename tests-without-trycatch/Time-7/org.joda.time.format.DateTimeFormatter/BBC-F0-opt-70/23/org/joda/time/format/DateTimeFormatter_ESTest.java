/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:33:06 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("gn!4:D7qB;zz\"nV", "gn!4:D7qB;zz\"nV", true, 1991, 1991);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("gn!4:D7qB;zz\"nV", dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      assertNotNull(localDate0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      
      Partial partial0 = new Partial(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(partial0);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "Parsing not supported", 2000);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-2001), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-39));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.039", dateTimeZone0.getID());
      assertEquals("-00:00:00.039", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("-00:00:00.039", dateTimeZone0.getID());
      assertEquals("-00:00:00.039", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("-00:00:00.039", dateTimeZone0.getID());
      assertEquals("-00:00:00.039", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) null, (long) (-39));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("+00:00", stringWriter0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals("+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      dateTimeFormatter0.printTo(stringBuffer0, (long) 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("1970", stringWriter0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("1970", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      assertNotNull(partial0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      dateTimeFormatter0.printTo((Appendable) charArrayWriter0, (ReadablePartial) partial0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(4, charArrayWriter0.size());
      assertEquals("-001", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-0196");
      assertNotNull(mockPrintWriter0);
      
      DateTime dateTime0 = new DateTime("-0196");
      assertNotNull(dateTime0);
      assertEquals((-68352422400000L), dateTime0.getMillis());
      
      dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadableInstant) dateTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals((-68352422400000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (long) 1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(1, stringBuffer0.length());
      assertEquals("1", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Printing not supported");
      assertNotNull(mockPrintWriter0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = mutableDateTime0.toDateTime((Chronology) ethiopicChronology0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      
      dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (ReadableInstant) dateTime0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-212));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-212), dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 7, 7);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-212));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-212), dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) mutableDateTime0.ROUND_HALF_CEILING);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(4, (int)dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("pc<XT-b|", "pc<XT-b|", true, 2147137391, 2147137391);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Integer integer0 = Integer.getInteger("clockhourOfHalfday", 2147137391);
      assertNotNull(integer0);
      assertEquals(2147137391, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2147137391, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8FPy(,+");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2147137391, 2147137391);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1072));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1072), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Integer integer0 = Integer.getInteger("clockhourOfHalfday", 2373);
      assertNotNull(integer0);
      assertEquals(2373, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-1072), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1072), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2373, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 65533, false, 1161);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1161);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1161, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 7, 7);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-3826));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-3826), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 12, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(244);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(244, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-212));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(10);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-212), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(10, (int)dateTimeFormatter2.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-196), 0, (-1249));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2147137391, 2147137391);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1072));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1072), dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-1072), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1072), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2854);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2002), (-2002), (-3422));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8FPy(,+");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter4);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-212));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-212), dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2854);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2854);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2854, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2002), (-2002), (-3422));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1968);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(1968, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 65533, false, 1161);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(65533, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2123, 2123, 2123);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-196));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-196), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-196), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-196), dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1181, (Map<String, DateTimeZone>) null);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(string0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalDate localDate0 = new LocalDate(998L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(0L, dateTime0.getMillis());
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) dateTime0);
      assertNotNull(string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(3, localDate0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("Etc/UTC", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1181, (Map<String, DateTimeZone>) null);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      DateTime dateTime0 = new DateTime(17, 17, 0, 429, (-2760), 764, 764, lenientChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTime0);
      assertEquals((-41989625235236L), dateTime0.getMillis());
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) dateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals((-41989625235236L), dateTime0.getMillis());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1181, (Map<String, DateTimeZone>) null);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      String string0 = dateTimeFormatter0.print(1131L);
      assertNotNull(string0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      long long0 = dateTimeFormatter0.parseMillis("Etc/UTC");
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      assertNotNull(partial0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      long long0 = dateTimeFormatter0.parseMillis("-001");
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(946684800000L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-234), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      long long0 = dateTimeFormatter0.parseMillis("-0234");
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-69551481600000L), long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("Etc/UTC");
      assertNotNull(localDate0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("MST");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("MST");
      assertNotNull(dateTime0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(25200000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter0.getPrinter();
      assertNull(dateTimePrinter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber1 = (DateTimeFormatterBuilder.UnpaddedNumber)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber1);
      assertSame(dateTimeFormatterBuilder_UnpaddedNumber1, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber1);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber1.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_UnpaddedNumber1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1018), (-1018));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = (DateTimeFormatterBuilder.Fraction)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder_Fraction1, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatterBuilder_Fraction1);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction1.estimateParsedLength());
      assertEquals((-1018), dateTimeFormatterBuilder_Fraction1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Integer integer0 = dateTimeFormatter1.getPivotYear();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(integer0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(2456);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2456, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Integer integer0 = dateTimeFormatter1.getPivotYear();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(integer0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 7, 7);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-3826));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-3826), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Integer integer0 = dateTimeFormatter1.getPivotYear();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(integer0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-3826), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-3826), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeParser dateTimeParser0 = dateTimeFormatter0.getParser();
      assertNull(dateTimeParser0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite1 = (DateTimeFormatterBuilder.Composite)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite1);
      assertSame(dateTimeFormatterBuilder_Composite1, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatterBuilder_Composite1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId1 = (DateTimeFormatterBuilder.TimeZoneId)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-450), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber1 = (DateTimeFormatterBuilder.FixedNumber)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber1);
      assertSame(dateTimeFormatterBuilder_FixedNumber1, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber1);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber1.estimateParsedLength());
      assertEquals((-450), dateTimeFormatterBuilder_FixedNumber1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale1 = dateTimeFormatter1.getLocale();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(locale0, locale1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 12, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      int int0 = dateTimeFormatter1.getDefaultYear();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-212));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      
      int int0 = dateTimeFormatter1.getDefaultYear();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-212), dateTimeFormatter1.getDefaultYear());
      assertEquals((-212), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(zonedChronology0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Chronology chronology0 = dateTimeFormatter1.getChronology();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(zonedChronology0, chronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(chronology0, zonedChronology0);
      assertNotNull(chronology0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)dateTimeFormatter2.getChronolgy();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1073741824, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      MockDate mockDate0 = new MockDate(1073741824, 2673, 1073741824, (-199), (-199), 1073741824);
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Wed May 03 22:26:20 GMT 92422416", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(24, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "UT");
      assertNotNull(stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("UT", stringBuffer0.toString());
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) monthDay0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2976, 50);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer("?+jqdtn&7j>8w6MF~4");
      assertNotNull(stringBuffer0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("?+jqdtn&7j>8w6MF~4", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('1');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (long) 1879048192);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1310), 2034458192, (-1853));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-322), true, (-1853));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals((-322), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-322), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals((-322), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-322), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (long) (-322));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2123, 2123, 2123);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      
      File file0 = MockFile.createTempFile("Instant must not be null", "\" ClassLoader: ");
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Instant must not be null0\" ClassLoader: ", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Instant must not be null0\" ClassLoader: ", file0.getName());
      assertFalse(file0.isHidden());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertNotNull(mockFileWriter0);
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) localTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("gn!4:D7qB;zz\"nV", "gn!4:D7qB;zz\"nV", true, 1991, 1991);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      LocalTime localTime0 = new LocalTime(5, 1, 43, 3);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-4420), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals((-4420), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-4420), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals((-4420), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-4420), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      File file0 = MockFile.createTempFile("Instant must not be null", "Instant must not be null");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/Instant must not be null0Instant must not be null", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Instant must not be null0Instant must not be null", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      assertNotNull(mockPrintWriter0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      assertEquals(7, monthDay0.getDayOfMonth());
      assertEquals(6, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(279, 3161, 3161);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      File file0 = MockFile.createTempFile("@AluF8U2*}[JG", "@AluF8U2*}[JG");
      assertNotNull(file0);
      assertEquals("@AluF8U2*}[JG0@AluF8U2*}[JG", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/@AluF8U2*}[JG0@AluF8U2*}[JG", file0.toString());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertNotNull(mockFileWriter0);
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8FPy(,+");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8FPy(,+", 0, 0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) instant0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("^x$L&");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("^x$L&", dateTimeFormatter0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      assertNotNull(charBuffer0);
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MockFile mockFile0 = new MockFile("{[1ScVQx+I");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTime dateTime0 = new DateTime("-0196");
      assertNotNull(dateTime0);
      assertEquals((-68352422400000L), dateTime0.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) dateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2, (-757));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-757), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-757), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-757), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-757), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charArrayWriter0, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTime dateTime0 = new DateTime((Object) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) dateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadableInstant) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 4082, false, 1994091958);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals(4082, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(4082, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertEquals(3, dateTimeParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(3, dateTimeParserArray0.length);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals(4082, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(4082, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      dateTimeFormatter0.printTo((Appendable) pipedWriter0, (long) 1994091958);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("#3$qxL");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#3$qxL");
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.length());
      assertEquals("#3$qxL", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.remaining());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (long) 0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("$CA'GN4Wp");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (-1427L));
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.limit());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 2610L);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1501), true, 5062500);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals((-1501), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-1501), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals((-1501), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-1501), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.joda.time.base.AbstractInterval");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) (-1501));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.joda.time.base.AbstractInterval");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      assertNotNull(mockFileWriter0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, 18, (Chronology) null);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadablePartial) partial0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) partial0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.FormatUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 449, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(449, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(449, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(449, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(449, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((long) 11, (Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(localDate0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1082), 1258, 1258, 1, 1258, 1);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-92895732119000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=975,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=101,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=58,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      Partial partial0 = new Partial(localTime0);
      assertNotNull(partial0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-92895732119000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=975,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=101,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=58,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      
      DateTime dateTime0 = new DateTime((-1439L), (DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals((-1439L), dateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-92895732119000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=975,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=101,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=58,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) 0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2854);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) null, (long) 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (long) 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 292272708, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      
      // Undeclared exception!
      dateTimeFormatter0.print((ReadablePartial) yearMonth0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2123, 2123, 2123);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadablePartial) monthDay0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      MonthDay monthDay0 = new MonthDay(6, 6, (Chronology) null);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(6, monthDay0.getMonthOfYear());
      assertEquals(6, monthDay0.getDayOfMonth());
      
      LocalDate localDate0 = monthDay0.toLocalDate(6);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(localDate0);
      assertEquals(2, monthDay0.size());
      assertEquals(6, monthDay0.getMonthOfYear());
      assertEquals(6, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadablePartial) localDate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-212), (-212));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals((-212), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-212), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals((-212), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-212), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 292272708, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(292272708, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      dateTimeFormatter0.print((ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (byte)96, (-1030));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-1030), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1030), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-1030), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1030), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((long) (byte) (-86), dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-86L), dateTime0.getMillis());
      
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 623158436, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      dateTimeFormatter0.print((long) 623158436);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 65533, false, 1161);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_PaddedNumber0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((-1925L));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2061584302, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      dateTimeFormatter0.print((long) 644);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((long) 719);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print(1763L);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((long) 2821);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 60, 60);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('x');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_CharacterLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((long) (-9));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMutableDateTime("-0196");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2824);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime((String) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Z_;0zVluf");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMillis("-0196");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("0=G-HK-<n-");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1181, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("H");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime("{~)");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1181, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseLocalDate("-0196");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDate("");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDate((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, "[Lv}C 5eYH6bp4;4", 1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1181, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 17);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "NoMillis", 17);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-2285));
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-9223372036854775808L));
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseInto(mutableDateTime0, "w&],|YM;u_w^", 3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Adding time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseDateTime("-0196");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.parse("-0196");
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDateTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "g1w3!");
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) gJChronology0);
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatter");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) dateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, 107L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 2615625, ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      dateTimeFormatter0.print((ReadablePartial) partial0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 1267);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFormatter0.getLocale();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2854);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDateTime("/d");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("-0196");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-68352422400000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("pc<XT-b|", "pc<XT-b|", true, 2147137391, 2147137391);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("pc<XT-b|");
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2000, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime("8G_Gjw#BA");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"8G_Gjw#BA\" is malformed at \"G_Gjw#BA\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime("mIeQcxj~1jt8juVP");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"mIeQcxj~1jt8juVP\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("-0196");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals((-68352422400000L), dateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("-001");
      assertEquals((-62198755200000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("0bxBS{f4r.*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"0bxBS{f4r.*\" is malformed at \"bxBS{f4r.*\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime("Parsing not supported");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Parsing not supported\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.parseLocalTime("Etc/UTC");
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocalDateTime.parse("0d)Gq");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"0d)Gq\" is malformed at \"d)Gq\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("~lB)dZf2zh:=1%~", "~lB)dZf2zh:=1%~", false, 1623, 1623);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.parseLocalDateTime("~lB)dZf2zh:=1%~");
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis(".c(6Po");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \".c(6Po\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 1267);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis(" !w0}RO:;8&s;x|}&");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \" !w0}RO:;8&s;x|}&\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(2292L);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "ooWtcv<hkJXk\"_@TV", 1);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-2), int0);
      assertEquals(2292L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2147137391, 2147137391);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "org.joda.time.chrono.IslamicChronology$LeapYearPatternType", 2373);
      assertEquals(2373, int0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2976, 50);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 2146626711);
      assertEquals((-2146626712), int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, "[Lv}C 5eYH6bp4;4", 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Instant must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(817L);
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "", 0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(817L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(17887500);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (-287L));
      assertEquals(13, charArrayWriter0.size());
      assertEquals("+04:58:07.500", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("ParZing not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1991);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Writer) null, 9223372036854775807L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-39));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      String string0 = dateTimeFormatter1.print((long) 1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("-00:00:00.039", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      PipedReader pipedReader0 = new PipedReader(530);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-0196");
      dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePartial) partial0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1163));
      Integer integer0 = Integer.valueOf((-1163));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer((-2301));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2123, 2123, 2123);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 1267);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      boolean boolean0 = dateTimeFormatter1.isOffsetParsed();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(boolean0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1501), true, 5062500);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 1267);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2061584302, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2123, 2123, 2123);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.getZone();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.getPivotYear();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      dateTimeFormatter0.getChronolgy();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
      assertNotNull(dateTimeZone0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2976, 50);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, (-196), ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals(2000, int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("%2wR|M)C43R*l)xb");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "%2wR|M)C43R*l)xb", 1, 4);
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) monthDay0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, 3298L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-725), (-725), (-725));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadableInstant) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1994);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1994, 909);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 909, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 2615625, ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("2615625");
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(82478985436800000L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1181, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDate("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("~lB)dZf2zh:=1%~", "~lB)dZf2zh:=1%~", false, 1623, 1623);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 2821);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      dateTimeFormatter0.getChronology();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }
}
