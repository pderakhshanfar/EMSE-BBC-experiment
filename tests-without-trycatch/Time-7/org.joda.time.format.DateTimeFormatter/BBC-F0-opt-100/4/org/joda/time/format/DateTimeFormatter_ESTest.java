/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 00:47:37 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, 1610612736, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1610612736);
      localDateTime0.getMillisOfDay();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds((-4));
      // Undeclared exception!
      dateTimeFormatter0.print((ReadablePartial) localDateTime1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "?{tPD.dV8+=/)E";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("?{tPD.dV8+=/)E");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone.forOffsetMillis((-1));
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(10, (-1), 37);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      StringBuffer stringBuffer0 = new StringBuffer("Printing not supported");
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) stringBuffer0, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Av7,Fl");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter0.parseMutableDateTime("Av7,Fl");
      PipedWriter pipedWriter0 = new PipedWriter();
      YearMonth yearMonth0 = YearMonth.parse("Av7,Fl", dateTimeFormatter0);
      YearMonth yearMonth1 = yearMonth0.plusYears(28265625);
      YearMonth yearMonth2 = yearMonth1.minusMonths(204);
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) yearMonth2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      Instant instant1 = MockInstant.plus(instant0, 0L, (TemporalUnit) chronoUnit0);
      Date date0 = Date.from(instant1);
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      Period period0 = new Period();
      Period period1 = period0.withYears(969);
      LocalTime localTime1 = localTime0.minus(period1);
      LocalTime localTime2 = localTime1.plus(period1);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) localTime2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 346, 346);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.parseInto(mutableDateTime0, "", 1);
      dateTimeFormatter1.parseInto(mutableDateTime0, "bE![q:C#Hi(", 346);
      Locale locale0 = Locale.CHINA;
      dateTimeFormatter1.withLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("$0=B]", "$0=B]", false, 2000, 2000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter1.parseInto(mutableDateTime0, "$0=B]", 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.Seconds");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("org.joda.time.Seconds");
      dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.joda.time.Seconds");
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2146629098, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseInto(mutableDateTime0, "+l0sq'", 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot parse \"+l0sq'\": Value 0 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = (-1717986917);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1717986917), (-1717986917), (-637));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      Integer integer0 = new Integer((-1717986917));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-1717986917));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear((-637));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusDays((-637));
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.printTo((Writer) mockFileWriter0, (ReadableInstant) dateTime1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en_GB
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "org.joda.time.Seconds";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.Seconds");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone.forOffsetMillis((-1));
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalTime localTime0 = new LocalTime((long) (-1), dateTimeZone0);
//      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadablePartial) localTime0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2004318071, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);
      Integer integer0 = new Integer(46);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      Locale locale0 = Locale.CANADA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(22L, lenientChronology0, locale0, integer0, 1717986918);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(gJChronology0);
      dateTimeFormatter5.withZone(dateTimeZone0);
      dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter4.withDefaultYear(47);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('n');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      dateTimeFormatter2.withPivotYear(2004318071);
      LocalDateTime localDateTime0 = new LocalDateTime(3580L);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(2004318071);
      LocalDateTime localDateTime2 = localDateTime1.minusMonths(2000);
      DateTime dateTime0 = localDateTime2.toDateTime();
      dateTime0.minus((-42521587200000L));
      DateTime dateTime1 = dateTime0.minusMillis(1717986918);
      // Undeclared exception!
      dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (ReadableInstant) dateTime1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Instant must not be null");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.parseInto(mutableDateTime0, "Instant must not be null", 5);
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '\"';
      charArray0[2] = 'B';
      charArray0[3] = '&';
      charArray0[4] = 'g';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      charArray0[7] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (long) 2);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.US;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 42, 60);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) null, (-2427L));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, (-2789), 623158436);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hDR");
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-2106), 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(719527);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(719527, 719527, 394, (-2106), 2013265920, 2013265920);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.print((ReadablePartial) localDateTime0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-258), (-2681), (-2681));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(5);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.plusDays((-673));
      DateTime dateTime2 = dateTime1.minusDays((-673));
      DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
      DateTime dateTime4 = dateTime3.withZoneRetainFields(dateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.print((ReadableInstant) dateTime4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Instant must not be null");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      DateTime dateTime1 = dateTime0.plusMillis(3108);
      DateTime dateTime2 = dateTime1.withMillis(3108);
//      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadableInstant) dateTime2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-774);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2169), (-774), (-774));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo((StringBuffer) null, (long) (-2169));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Object) null, julianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusHours(889);
      DateTime dateTime2 = dateTime1.withTimeAtStartOfDay();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) dateTime2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1994091958, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-97));
      dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("fM=");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter0.parseMutableDateTime("fM=");
      dateTimeFormatter0.parseMillis("fM=");
      dateTimeFormatter1.parseDateTime("fM=");
      dateTimeFormatter0.withDefaultYear(37);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dateTimeFormatter0.getParser();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.CHINA;
      dateTimeFormatter0.withLocale(locale0);
      String string0 = null;
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime((String) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("uH6P;Q7}Jp8$j");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseLocalTime("uH6P;Q7}Jp8$j");
      PipedWriter pipedWriter0 = new PipedWriter();
      long long0 = 41977472L;
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, 41977472L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("h");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("h");
      StringWriter stringWriter0 = new StringWriter();
      dateTimeFormatter1.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
      dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
      dateTimeFormatter0.parseMillis("h");
      dateTimeFormatter1.parseMillis("h");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("D6~9;Q$");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.parseInto(mutableDateTime0, "", 1);
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, 1026L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("-3'&i", "-3'&i", false, 1199, 1199);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.parseInto(mutableDateTime0, "-3'&i", 2000);
      dateTimeFormatter1.parseDateTime("-3'&i");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeFieldType0.getRangeDurationType();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      dateTimeFieldType0.isSupported(islamicChronology0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 19);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = Integer.valueOf(19);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(11);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(19);
      dateTimeFormatterBuilder_Fraction0.iMaxDigits = (-1539);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(fixedDateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.print((ReadablePartial) yearMonth0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(",hb");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter0.parseMutableDateTime(",hb");
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      LocalTime localTime1 = localTime0.plusMillis(0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) null, (ReadablePartial) localTime1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-3376), (-3376), 922);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) stringBuffer0, (-2570L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      int int0 = 190;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(190);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      dateTimeFormatter3.withPivotYear(365);
      StringBuffer stringBuffer0 = new StringBuffer(190);
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.printTo(stringBuffer0, (long) 190);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, (-1759), false, (-915));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L, (Chronology) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(5, 2, 2);
      dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      Locale locale0 = Locale.FRANCE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      int int0 = 87;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(87);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter3.withDefaultYear(87);
      Locale locale1 = locale0.stripExtensions();
      locale0.getDisplayCountry(locale1);
      BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusWeeks(1681);
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.print((ReadablePartial) localDate1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-804));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology1.getZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseInto(mutableDateTime0, "P?^*G", 0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("~,hb2l");
      dateTimeFormatter3.print((ReadableInstant) mutableDateTime0);
      dateTimeFormatter1.parseDateTime("~,hb2l");
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseDateTime("V4%T8q&u)s");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"V4%T8q&u)s\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1L);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.format.DateTimeFormatter");
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      int int0 = (-1);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, (-1), (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.getParser();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      durationFieldType0.isSupported(buddhistChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((long) (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = null;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "XKt`u:|'2Y\\g>?TZQ";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("XKt`u:|'2Yg>?TZQ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1045));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter0.withDefaultYear(292272984);
      dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter1.parseMutableDateTime("XKt`u:|'2Yg>?TZQ");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('y');
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "XKt`u:|'2Yg>?TZQ", (-1045), 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("NvIj_Z");
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2317, 27, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      Locale locale0 = Locale.CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.print(41977472L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal date style 2317
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("ld.'ZCU-^l:kw<Od<#");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("ld.'ZCU-^l:kw<Od<#", dateTimeFormatter1);
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) iSOChronology0);
//      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) mutableDateTime1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("~,hb2l", "~,hb2l", false, 65, 65);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter0.parseLocalDateTime("~,hb2l");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(">NvIZ", ">NvIZ", true, 1473, 1473);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(">NvIZ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">NvIZ");
      dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalDateTime("Instant must not be null");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Instant must not be null\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseLocalDate(">NvIZ");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "OYv6G[";
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('8');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      int int0 = 748;
      Integer integer0 = new Integer(748);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter3.withZone(dateTimeZone0);
      Writer writer0 = null;
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo((Writer) null, (long) 1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      Locale locale0 = Locale.CANADA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      dateTimeFormatter1.withZone(dateTimeZone0);
      dateTimeFormatter3.printTo((Writer) mockPrintWriter0, 668L);
      MutableDateTime mutableDateTime0 = dateTimeFormatter3.parseMutableDateTime("~,hb2l");
      dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadableInstant) mutableDateTime0);
      dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
      dateTimeFormatter2.parseMillis("~,hb2l");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-3230), (-3230), (-3230));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-3230));
      int int0 = (-346);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-346));
      Partial partial0 = new Partial();
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.print((ReadablePartial) partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No datetime pattern for locale: en
//         //
//         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = ">NvIZ";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, 611L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1073741824, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      dateTimeFormatter0.print((-538L));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_MatchingParser0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      zonedChronology0.get((ReadablePeriod) mutablePeriod1, (-104L), (-2L));
      Integer integer0 = new Integer((-1808));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      Integer integer1 = dateTimeFormatter3.getPivotYear();
      assertNotNull(integer1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.parseDateTime("");
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDate((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("E6\"F`8[Juq<Cn Ay^lj");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(4);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(0);
      dateTimeFormatter3.getPivotYear();
      ZoneInfoProvider zoneInfoProvider0 = null;
//      try {
        zoneInfoProvider0 = new ZoneInfoProvider((File) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No file directory provided
//         //
//         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(">NvIZ");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      MutableDateTime mutableDateTime1 = MutableDateTime.parse(">NvIZ", dateTimeFormatter2);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      
      dateTimeFormatter1.print((long) 1);
      dateTimeFormatter0.getParser();
      int int0 = dateTimeFormatter2.getDefaultYear();
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      System.setCurrentTimeMillis((-3314L));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      int int0 = 1;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("@}$~8Z-]@k9");
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Ar;ma}`:qHsYO57D8*f", "O8^R", false, 9, 2549);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.parseLocalTime("O8^R");
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3215, 1, 3215);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(3215);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2265);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withChronology(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      dateTimeFormatter6.withZone((DateTimeZone) null);
      Integer integer1 = new Integer(1);
      dateTimeFormatter0.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZone(dateTimeZone0);
      // Undeclared exception!
//      try { 
        MutableDateTime.parse("org.joda.time.tz.DateTimeZoneBuilder", dateTimeFormatter7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GQ.yl?jKSN_fGs");
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(";A/");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      DateTimeZone.forOffsetMillis(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
      Integer integer0 = new Integer((-1));
      dateTimeFormatter1.withPivotYear(integer0);
      dateTimeFormatter1.withDefaultYear(9);
      // Undeclared exception!
//      try { 
        MutableDateTime.parse("~,hb2l", dateTimeFormatter2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"~,hb2l\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-2022));
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((long) (-2022));
      dateTimeFormatter0.printTo(stringBuffer0, (long) (-2022));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(18);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeZone dateTimeZone0 = dateTimeFormatter4.getZone();
      dateTimeFormatter3.withOffsetParsed();
      dateTimeFormatter2.withZone(dateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalDateTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("~,hb2l", dateTimeFormatter4);
      dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadableInstant) mutableDateTime0);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1L), mutableDateTime0.getMillis());
      
      dateTimeFormatter4.parseMutableDateTime("~,hb2l");
      System.setCurrentTimeMillis(805L);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMutableDateTime("K");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"K\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2215);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(2215);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      Locale locale1 = new Locale("", "", "29~0$");
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LimitChronology limitChronology0 = LimitChronology.getInstance(gregorianChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      Chronology chronology0 = limitChronology0.withUTC();
      DateTime dateTime0 = new DateTime(chronology0);
      DateTime dateTime1 = dateTime0.plusSeconds(2327);
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.print((ReadableInstant) dateTime1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-9), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2019));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-2019));
      Locale locale0 = Locale.CHINESE;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      int int0 = dateTimeFormatter5.getDefaultYear();
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals((-2019), (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals((-2019), dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-2019), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,q22l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      Integer integer0 = new Integer((-1));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter5.withOffsetParsed();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMutableDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      boolean boolean0 = dateTimeFormatter1.isPrinter();
      assertFalse(boolean0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.parseInto(mutableDateTime0, "", 4);
      dateTimeFormatter1.isOffsetParsed();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, (long) 1);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      dateTimeFormatter1.withZone((DateTimeZone) null);
      dateTimeFormatter1.parseMutableDateTime("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(chronology0);
      dateTimeFormatter2.parseInto(mutableDateTime1, "", 0);
      dateTimeFormatter1.isOffsetParsed();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = new StringBuffer(248);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      // Undeclared exception!
//      try { 
        stringWriter1.append((CharSequence) "", 0, 2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.parseMutableDateTime(">NvIZ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(">NvIZ");
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Writer) mockFileWriter0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-3612), false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-3612));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      // Undeclared exception!
//      try { 
        dateTimeFormatter5.parseLocalDateTime("isEd/\"'&/QLk9");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      mutableDateTime0.weekOfWeekyear();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 4);
      assertEquals((-5), int0);
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(2694);
      assertEquals(2694, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis(">NvIZ");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("mbc");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = new Locale("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(918518400000L, copticChronology0, locale0, (Integer) 1, 1);
      DateTimeZone dateTimeZone1 = dateTimeParserBucket0.getZone();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone1);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      dateTimeFormatter5.getPivotYear();
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print(455L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "~,hb2l";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L), (Chronology) ethiopicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
      dateTimeFormatter0.withChronology(zonedChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime("~,hb2l");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(" cannot be compared to ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.print(0L);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('!');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      Locale locale0 = Locale.FRANCE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      int int0 = 87;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(87);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter3.withDefaultYear(87);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        LimitChronology.getInstance(buddhistChronology0, mutableDateTime0, mutableDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The lower limit must be come before than the upper limit
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("~,hb2l");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("~,hb2l");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      dateTimeFormatter0.printTo((Writer) bufferedWriter0, (ReadablePartial) localTime0);
      dateTimeFormatter0.print((ReadablePartial) localTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.KOREA;
      dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter0.isOffsetParsed();
      dateTimeFormatter0.getParser();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("pF2H)Q");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"pF2H)Q\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      long long0 = dateTimeFormatter0.parseMillis(">NvIZ");
      assertEquals(0L, long0);
      
      dateTimeFormatter0.getZone();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseLocalTime("~,hb2l");
      MockFileWriter mockFileWriter0 = new MockFileWriter("~,hb2l");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Q\"p|BaP}Hq#");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-2723L), dateTimeZone0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.parseMutableDateTime(">NvIZ");
      int int0 = new Integer(5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.print(1L);
      linkedList0.add((Object) dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseDateTime("~,hb2l");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(28181250, hashMap0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMillis("3gAzjD%[&B\"@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"3gAzjD%[&B\"@\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 140, true, 1720);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, (DateTimeParser) null);
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(140);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("hours");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(140);
      Integer integer0 = new Integer(1720);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      boolean boolean0 = dateTimeFormatter5.isParser();
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(140, dateTimeFormatter4.getDefaultYear());
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(140, (int)dateTimeFormatter4.getPivotYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      dateTimeFormatter0.withOffsetParsed();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime((String) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1L);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, (-1), (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      durationFieldType0.isSupported(buddhistChronology0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print((long) (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      int int0 = 6;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 6, 6);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter0.withZoneUTC();
      long long0 = 685L;
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.print(685L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("P");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      dateTimeFormatter0.isParser();
      Writer writer0 = null;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology.getInstance(dateTimeZone0);
      int int0 = 2142774254;
      int int1 = 0;
      int int2 = 4171;
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Writer) null, 570L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseLocalTime("99GDj?Tw?s)Y-g");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"99GDj?Tw?s)Y-g\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(strictChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      MutableDateTime.parse("", dateTimeFormatter4);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(6);
      Duration duration0 = null;
//      try {
        duration0 = new Duration(strictChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No duration converter found for type: org.joda.time.chrono.StrictChronology
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RO}Z%EWzSs");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 354, true, 354);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
      Integer integer0 = new Integer(354);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(4562);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-3673));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      boolean boolean0 = dateTimeFormatter4.isOffsetParsed();
      assertEquals((-3673), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(boolean0);
      assertEquals(4562, dateTimeFormatter4.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(">NvIZ");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      GregorianChronology.getInstanceUTC();
      MutableDateTime.parse(">NvIZ", dateTimeFormatter2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharSequence charSequence0 = null;
      Duration duration0 = null;
//      try {
        duration0 = new Duration(mutableDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No duration converter found for type: org.joda.time.MutableDateTime
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
      long long0 = dateTimeFormatter0.parseMillis("");
      assertEquals(0L, long0);
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("Printing not supported");
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadableInstant) mutableDateTime0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      long long0 = dateTimeFormatter0.parseMillis("");
      assertEquals(0L, long0);
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      assertEquals(0L, dateTime0.getMillis());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals(2000, int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(2001);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-1984));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(gregorianChronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      Chronology chronology0 = dateTimeFormatter5.getChronology();
      assertEquals(2001, dateTimeFormatter5.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertNotNull(chronology0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals((-1984), (int)dateTimeFormatter5.getPivotYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,h2XCl");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseLocalTime("~,h2XCl");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-59));
      DateTime dateTime0 = new DateTime(3866L, dateTimeZone0);
      DateTime dateTime1 = dateTime0.minus(9L);
      DateTime dateTime2 = dateTime1.withYear((-1));
      DateTime dateTime3 = dateTime2.withWeekyear((-59));
      dateTimeFormatter0.print((ReadableInstant) dateTime3);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      long long0 = dateTimeFormatter0.parseMillis("");
      assertEquals(0L, long0);
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.parseMutableDateTime(">NvIZ");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2000);
      charArrayWriter0.append((CharSequence) ">NvIZ", 1, 3);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 5);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, zonedChronology0, locale0, (Integer) 2, 1);
      DateTimeZone dateTimeZone1 = dateTimeParserBucket0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone1);
      localDate0.withDayOfMonth(15);
      dateTimeFormatter2.withLocale(locale0);
      // Undeclared exception!
//      try { 
        MutableInterval.parse(">NvIZ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Format requires a '/' separator: >NvIZ
//         //
//         verifyException("org.joda.time.convert.StringConverter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(">NvIZ");
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2000);
      long long0 = dateTimeFormatter1.parseMillis(">NvIZ");
      assertEquals(0L, long0);
      
      Integer integer0 = new Integer(3);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(iSOChronology0);
      boolean boolean0 = dateTimeFormatter3.isPrinter();
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertTrue(boolean0);
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      linkedList0.poll();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      int int0 = (-948);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-948));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      Locale locale0 = Locale.ITALIAN;
      dateTimeFormatter2.withLocale(locale0);
      String string0 = "";
//      try { 
        Integer.decode("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length string
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "~,hb2l";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      GJChronology.getInstanceUTC();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_Composite0);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMutableDateTime("~,hb2l");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">NvIZ");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(">NvIZ");
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2000);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ">NvIZ", 1, 3);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 5);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, zonedChronology0, locale0, (Integer) 2, 1);
      DateTimeZone dateTimeZone1 = dateTimeParserBucket0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone1);
      LocalDate localDate1 = localDate0.withDayOfMonth(15);
      dateTimeFormatter2.printTo((Appendable) charArrayWriter1, (ReadablePartial) localDate1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      dateTimeFormatter0.getPivotYear();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(673);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('R');
      charArrayWriter1.append((CharSequence) "G4A#VBA");
      // Undeclared exception!
//      try { 
        LocalDateTime.parse("G4A#VBA", dateTimeFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"G4A#VBA\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("=8_$O");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      DateTimeUtils.setCurrentMillisFixed(710L);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime("&idqf!G");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"&idqf!G\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("99");
      StringBuffer stringBuffer0 = new StringBuffer();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-1395L), (Chronology) islamicChronology0);
      Locale locale0 = Locale.TAIWAN;
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1738L), (DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      dateTimeFormatter0.parseInto(mutableDateTime1, "99", (-1));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = null;
//      try {
        outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("java.io.OutputStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.print(1497L);
      String string0 = "G4A#VBA";
      // Undeclared exception!
//      try { 
        LocalTime.parse("G4A#VBA");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"G4A#VBA\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(")7.'|`FA&Q.H");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1414L), (Chronology) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime("BwX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"BwX\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "~,hb2l";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDate("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      String string0 = "9mQ.}Zp'YyYA\\#8";
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseMutableDateTime("9mQ.}Zp'YyYA#8");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"9mQ.}Zp'YyYA#8\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-4364), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
      dateTimeFormatter0.getPrinter();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("~,hb2l");
      mutableDateTime0.dayOfMonth();
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "9mQ.}Zp'YyYA#8", (-122));
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(121, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "~,hb2l";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      StringBuffer stringBuffer0 = new StringBuffer(1855);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(">DNvI`Z");
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "", 3);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-4), int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.parseLocalTime("~,hb2l");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, (-1759), false, (-915));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L, (Chronology) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-39), 2, 2);
      dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1990, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1990);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(7);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      dateTimeFormatter3.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 7, (Chronology) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      MutableDateTime mutableDateTime0 = MutableDateTime.parse(">DNvI`Z", dateTimeFormatter0);
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "Parsing not supported", (-2));
      assertEquals(1, int0);
      assertEquals(0L, mutableDateTime0.getMillis());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(245, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-22L));
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(2511);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append((CharSequence) charBuffer0, 5, 2511);
      stringWriter0.append('a');
      stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1990, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1990);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(7);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      dateTimeFormatter3.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 7, (Chronology) null);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(245, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(2511);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append((CharSequence) charBuffer0, 5, 2511);
      StringWriter stringWriter2 = stringWriter0.append('a');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
      GregorianCalendar gregorianCalendar0 = mutableDateTime0.toGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      dateTimeFormatter0.printTo((Writer) stringWriter2, (ReadablePartial) localTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localTime0);
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(245, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(2511);
      stringWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      String string0 = ">DNvI`Z";
      // Undeclared exception!
//      try { 
        MutableDateTime.parse("9mQ.}Zp'YyYA#8");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"9mQ.}Zp'YyYA#8\" is malformed at \"mQ.}Zp'YyYA#8\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(245, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      YearMonth yearMonth0 = new YearMonth(1, 4);
      YearMonth yearMonth1 = yearMonth0.minusYears(2);
      YearMonth yearMonth2 = yearMonth1.plusMonths(86400000);
      dateTimeFormatter0.print((ReadablePartial) yearMonth2);
      stringWriter0.append((CharSequence) "");
      CharBuffer charBuffer0 = CharBuffer.allocate(2511);
      stringWriter0.append((CharSequence) charBuffer0);
      String string0 = "";
      // Undeclared exception!
//      try { 
        MutableDateTime.parse("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">DNvI`Z");
      dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (-948L));
      MutableDateTime mutableDateTime0 = new MutableDateTime((-5217L));
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ">DNvI`Z", 2);
      assertEquals((-3), int0);
      assertEquals((-5217L), mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter1.parseLocalDate(">DNvI`Z");
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2031L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-2), dateTimeFormatter2.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">DNvI`Z");
      dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (-948L));
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The partial must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(6);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(integer0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-1));
      int int0 = dateTimeFormatter5.parseInto(mutableDateTime0, "", 571);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertEquals((-572), int0);
      assertEquals((-1L), mutableDateTime0.getMillis());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      
      dateTimeFormatter1.getChronology();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseLocalTime("~,hb2l");
      dateTimeFormatter0.getPivotYear();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_MatchingParser0);
      String string0 = ", ";
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseMutableDateTime(", ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \", \"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("x8ZJrcu9FN?H{KB@G%$", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 4978125);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      dateTimeFormatter0.printTo((Appendable) outputStreamWriter0, (ReadablePartial) localDateTime0);
      Integer integer0 = new Integer(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer1 = new Integer((-2367));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-3053));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      
      boolean boolean0 = dateTimeFormatter1.isPrinter();
      assertTrue(boolean0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-915), hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
      boolean boolean0 = dateTimeFormatter3.isPrinter();
      assertTrue(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter2.printTo((Appendable) stringBuffer0, (long) (-915));
      dateTimeFormatter3.getParser();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "~,hb2l";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(2000);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-202));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      dateTimeFormatter4.withOffsetParsed();
      JulianChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        MutableDateTime.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      Integer integer1 = new Integer((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      DateTimeUtils.setCurrentMillisOffset(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology((Chronology) null);
      dateTimeFormatter5.withPivotYear(integer0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0);
      dateTimeFormatter1.getChronology();
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseInto(mutableDateTime0, (String) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-983), hashMap0);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      int int0 = 0;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-983));
      int int1 = (-1);
      Integer integer1 = new Integer((-983));
      dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-1));
      dateTimeFormatter3.withChronology((Chronology) null);
      Locale locale0 = new Locale("", ",RA{V(.{ _|xqi%", "Instant must not be null");
      Integer.getInteger("");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-564L), (Chronology) null, locale0, (Integer) null, (-983));
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTimeZone.setDefault(dateTimeZone0);
//      try { 
        Integer.decode("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length string
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(245, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'Q';
      charArray0[2] = 'e';
      charArray0[3] = '}';
      charArray0[4] = ']';
      charArray0[5] = '7';
      charArray0[6] = '{';
      charArray0[7] = 'm';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer.wrap(charArray0);
      LocalDate localDate0 = new LocalDate();
      boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_MatchingParser0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2031L));
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "6", 2);
      assertEquals((-3), int0);
      assertEquals((-2031L), mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1642), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      StringBuffer stringBuffer0 = new StringBuffer("*RmL@B&ZYP`Fh#Q");
      DateTime dateTime0 = DateTime.now();
      dateTimeFormatter3.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      assertEquals("*RmL@B&ZYP`Fh#Q5", stringBuffer0.toString());
      
      Locale locale1 = Locale.KOREA;
      dateTimeFormatter3.withLocale(locale1);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withDefaultYear(5241);
      dateTimeFormatter4.parseInto(mutableDateTime0, "-", 5241);
      dateTimeFormatter3.getPrinter();
      assertFalse(dateTimeFormatter3.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone.getDefault();
      int int0 = (-728);
      Integer integer0 = new Integer(292272984);
      Integer integer1 = new Integer(292272984);
      stringBuffer0.reverse();
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter2.printTo((Appendable) stringBuffer0, (-2664L));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, 1L);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Printing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1642), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      Locale locale1 = Locale.KOREA;
      dateTimeFormatter4.withLocale(locale1);
      String string0 = ", ";
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseMillis(", ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \", \"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      Integer integer1 = new Integer((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology((Chronology) null);
      dateTimeFormatter5.withPivotYear(integer0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter3.parseInto(mutableDateTime0, (String) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(245, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "6", 86400);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('t');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      dateTimeFormatter4.print(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      int int0 = (-29);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~,hb2l");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      dateTimeFormatter2.printTo((Appendable) bufferedWriter0, 2620L);
      dateTimeFormatter1.parseLocalDateTime("~,hb2l");
      MockFile mockFile0 = new MockFile("-$");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter(mockFile0, "-$");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -$
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      dateTimeFormatter0.getChronolgy();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 3208, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter1.withDefaultYear(0);
      Integer integer0 = new Integer(6);
      dateTimeFormatter2.withPivotYear(integer0);
      dateTimeFormatter3.getPrinter();
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseDateTime((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
      dateTimeFormatter0.print((ReadableInstant) mutableDateTime2);
      dateTimeFormatter0.isPrinter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) stringBuffer0, (-1822), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: -1822
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseLocalDateTime("~,hb2l");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1642), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.printTo((Appendable) null, 0L);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
      int int0 = 0;
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      Integer integer1 = new Integer((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology((Chronology) null);
      dateTimeFormatter5.withPivotYear(integer0);
      String string0 = "\"{@s%N\":p9b";
      String string1 = "The partial must not be null";
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseDateTime("The partial must not be null");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"The partial must not be null\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter2.withLocale((Locale) null);
      int int0 = (-29);
      // Undeclared exception!
//      try { 
        MutableDateTime.now((DateTimeZone) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Zone must not be null
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1642), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      String string0 = "\"{@s%N\":pX9b";
      // Undeclared exception!
//      try { 
        dateTimeFormatter4.parseDateTime("\"{@s%N\":pX9b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"{@s%N\":pX9b\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">DNvI`Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      Chronology chronology1 = dateTimeFormatter5.getChronolgy();
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(chronology1);
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalDateTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1743, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1743);
      Integer integer0 = new Integer((-2134));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      dateTimeFormatter5.getPrinter();
      assertEquals(1743, dateTimeFormatter5.getDefaultYear());
      
      int int0 = dateTimeFormatter4.getDefaultYear();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1743, int0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.JAPAN;
      MockFileWriter mockFileWriter0 = new MockFileWriter(")Crz_+2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      dateTimeFormatter1.printTo((Appendable) mockPrintWriter0, 0L);
      int int0 = (-1470);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1326);
      dateTimeFormatter2.withPivotYear((-841));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      int int1 = (-1);
      int int2 = (-49);
      // Undeclared exception!
//      try { 
        ZonedChronology.getInstance(gregorianChronology0, (DateTimeZone) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DateTimeZone must not be null
//         //
//         verifyException("org.joda.time.chrono.ZonedChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1171);
      assertEquals(1171, dateTimeFormatter4.getDefaultYear());
      
      Integer integer0 = new Integer((-1351));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((Integer) null);
      dateTimeFormatter3.getPrinter();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertSame(dateTimeFormatter2, dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      Integer integer0 = new Integer(94);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      dateTimeFormatter2.withZoneUTC();
      Integer integer1 = new Integer(58);
//      try { 
        DateTimeZone.forOffsetHoursMinutes((-1254), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Hours out of range: -1254
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      Locale locale0 = Locale.KOREA;
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter1.parseInto((ReadWritableInstant) null, "qu5!O} J[J", (-29));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Instant must not be null
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone1);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withPivotYear(integer0);
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      
      dateTimeFormatter1.getPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1743, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      dateTimeFormatter2.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1743);
      dateTimeFormatter3.withDefaultYear((-332));
      dateTimeFormatter4.getLocale();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1743, dateTimeFormatter4.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      int int0 = 359;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 359, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      StringBuffer stringBuffer0 = new StringBuffer("0L^2y#_(CM9i}r[)J@");
      dateTimeFormatter1.printTo(stringBuffer0, (long) 359);
      int int1 = (-1939);
      // Undeclared exception!
//      try { 
        stringBuffer0.append((CharSequence) "0L^2y#_(CM9i}r[)J@", (-1939), 359);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // start -1939, end 359, s.length() 18
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      dateTimeFormatter0.isPrinter();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) stringBuffer0, (-1822), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: -1822
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('V');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      StringBuffer stringBuffer0 = new StringBuffer();
      ReadableInstant readableInstant0 = null;
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadableInstant) null);
      DateTimeZone.getDefault();
      dateTimeFormatter0.printTo(stringBuffer0, 1L);
      String string0 = "";
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("~,hb2l");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.parseLocalTime("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Printing not supported");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      dateTimeFormatter0.print(0L);
      dateTimeFormatter0.withZone((DateTimeZone) null);
      int int0 = (-4741);
      CharArrayWriter charArrayWriter0 = null;
//      try {
        charArrayWriter0 = new CharArrayWriter((-4741));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative initial size: -4741
//         //
//         verifyException("java.io.CharArrayWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1743, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1743);
      Integer integer0 = new Integer((-2134));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      dateTimeFormatter5.getPrinter();
      assertEquals(1743, dateTimeFormatter5.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1743, dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear((-152));
      Locale locale1 = dateTimeFormatter5.getLocale();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertNotNull(locale1);
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-152), dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      dateTimeFormatter2.withDefaultYear((-189));
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime(0, 0, 3368, (-541), (-541), 0, (-189), fixedDateTimeZone0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -541 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      Integer integer0 = new Integer(94);
      dateTimeFormatter1.withPivotYear(integer0);
      int int0 = (-1254);
      int int1 = 0;
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(0, 0, (-1254), 0, 0, 94, (-1254));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 94 for secondOfMinute must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2137), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      PipedReader pipedReader0 = null;
      MonthDay monthDay0 = null;
//      try {
        monthDay0 = new MonthDay(dateTimeFieldType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
//      try { 
        dateTimeFormatter0.printTo((Appendable) null, 1L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withDefaultYear(2531);
      StringBuffer stringBuffer0 = new StringBuffer(2531);
      int int0 = 0;
      int int1 = 192;
      LocalDateTime localDateTime0 = null;
//      try {
        localDateTime0 = new LocalDateTime(2531, 2531, 0, 1, (-1433), 192);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -1433 for minuteOfHour must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-2489), false, (-2489));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      StringBuffer stringBuffer0 = new StringBuffer();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2489));
      Locale locale0 = Locale.JAPANESE;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (-2362L), (Chronology) iSOChronology0, (-2489), dateTimeZone0, locale0);
      dateTimeFormatter0.withZoneUTC();
      int int0 = (-1998);
//      try { 
        DateTimeZone.forOffsetHoursMinutes((-1998), (-1998));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Hours out of range: -1998
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }
}
