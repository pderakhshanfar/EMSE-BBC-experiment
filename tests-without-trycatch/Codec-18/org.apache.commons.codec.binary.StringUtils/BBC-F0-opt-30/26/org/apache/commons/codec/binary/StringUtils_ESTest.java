/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:45:07 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.apache.commons.codec.binary.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.newStringUtf8(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.newStringUtf16Le((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("");
      String string0 = StringUtils.newStringUtf16Le(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.newStringUtf16Be((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.newStringUtf16((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.newStringUtf16(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtils.newStringUsAscii((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("AnN?|C;bqm $Xj&.8\"");
      String string0 = StringUtils.newStringUsAscii(byteArray0);
      assertEquals("\uFFFD\uFFFD\u0000A\u0000n\u0000N\u0000?\u0000|\u0000C\u0000;\u0000b\u0000q\u0000m\u0000 \u0000$\u0000X\u0000j\u0000&\u0000.\u00008\u0000\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringUtils.newStringIso8859_1((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("");
      String string0 = StringUtils.newString(byteArray0, "UTF-16");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8("ISO-8859-1");
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("");
      String string0 = StringUtils.newStringUtf16Be(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("\u2E39\u7C37\u573D\u7030\u3655\u7465\u5D6E");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked(".:Yd*O#`lQ?Qi2", "US-ASCII");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked("", "UTF-16");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("");
      // Undeclared exception!
//      try { 
        StringUtils.newString(byteArray0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("");
      // Undeclared exception!
//      try { 
        StringUtils.newString(byteArray0, "+e>");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // +e>: java.io.UnsupportedEncodingException: +e>
//         //
//         verifyException("org.apache.commons.codec.binary.StringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
//      try { 
        StringUtils.getBytesUnchecked("Yi./QT^SjAMkRV-", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringUtils.newString((byte[]) null, "UTF-16BE");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("DT,>4tRk484");
      String string0 = StringUtils.newString(byteArray0, "UTF-16BE");
      assertEquals("\u4454\u2C3E\u3474\u526B\u3438\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.newStringUtf8((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked((String) null, "@=pm5~-:;a$!6");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8((String) null);
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
//      try { 
        StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "\u00FE\u00FF\u00009\u0000}\u0000e\u0000q\u0000w\u0000u\u0000X\u0000=\u0000?\u0000h\u0000$\u0000$\u0000t\u0000=");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "\uFFFD\u4100\u6E00\u4E00\u3F00\u7C00\u4300\u3B00\u6200\u7100\u6D00\u2000\u2400\u5800\u6A00\u2600\u2E00\u3800\u2200", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "OZ&ec2'/w~n;4Sjx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      // Undeclared exception!
//      try { 
        StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = StringUtils.newStringUtf8(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8("");
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("ISO-8859-1");
      assertArrayEquals(new byte[] {(byte)73, (byte)83, (byte)79, (byte)45, (byte)56, (byte)56, (byte)53, (byte)57, (byte)45, (byte)49}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("AnN?|C;bqm $Xj&.8\"");
      String string0 = StringUtils.newStringUtf16(byteArray0);
      assertEquals("AnN?|C;bqm $Xj&.8\"", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le(": ");
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("AnN?|C;bqm $Xj&.8\"");
      String string0 = StringUtils.newStringUtf16Be(byteArray0);
      assertEquals("\uFEFFAnN?|C;bqm $Xj&.8\"", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("AnN?|C;bqm $Xj&.8\"");
      String string0 = StringUtils.newStringUtf16Le(byteArray0);
      assertEquals("\uFFFD\u4100\u6E00\u4E00\u3F00\u7C00\u4300\u3B00\u6200\u7100\u6D00\u2000\u2400\u5800\u6A00\u2600\u2E00\u3800\u2200", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("9}eqwuX=?h$$t=");
      String string0 = StringUtils.newStringIso8859_1(byteArray0);
      assertEquals("\u00FE\u00FF\u00009\u0000}\u0000e\u0000q\u0000w\u0000u\u0000X\u0000=\u0000?\u0000h\u0000$\u0000$\u0000t\u0000=", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("");
      String string0 = StringUtils.newStringUsAscii(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
//      try { 
        StringUtils.getBytesUnchecked("\uFFFD\uFFFD\u0000A\u0000n\u0000N\u0000?\u0000|\u0000C\u0000;\u0000b\u0000q\u0000m\u0000 \u0000$\u0000X\u0000j\u0000&\u0000.\u00008\u0000\"", "\uFFFD\u4100\u6E00\u4E00\u3F00\u7C00\u4300\u3B00\u6200\u7100\u6D00\u2000\u2400\u5800\u6A00\u2600\u2E00\u3800\u2200");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // \uFFFD\u4100\u6E00\u4E00\u3F00\u7C00\u4300\u3B00\u6200\u7100\u6D00\u2000\u2400\u5800\u6A00\u2600\u2E00\u3800\u2200: java.io.UnsupportedEncodingException: \uFFFD\u4100\u6E00\u4E00\u3F00\u7C00\u4300\u3B00\u6200\u7100\u6D00\u2000\u2400\u5800\u6A00\u2600\u2E00\u3800\u2200
//         //
//         verifyException("org.apache.commons.codec.binary.StringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("");
      String string0 = StringUtils.newStringIso8859_1(byteArray0);
      assertEquals("", string0);
  }
}
