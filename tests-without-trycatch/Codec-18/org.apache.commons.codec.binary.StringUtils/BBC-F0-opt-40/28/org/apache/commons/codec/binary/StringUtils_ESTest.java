/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:55:21 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.apache.commons.codec.binary.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.newStringUtf8((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("");
      String string0 = StringUtils.newStringUtf8(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtils.newStringUtf16Le((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("org.apache.commons.codec.binary.StringUtils");
      String string0 = StringUtils.newStringUtf16Le(byteArray0);
      assertEquals("\u726F\u2E67\u7061\u6361\u6568\u632E\u6D6F\u6F6D\u736E\u632E\u646F\u6365\u622E\u6E69\u7261\u2E79\u7453\u6972\u676E\u7455\u6C69\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.newStringUtf16Be(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.newStringUtf16((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtils.newStringUsAscii((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtils.newStringIso8859_1((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("");
      String string0 = StringUtils.newStringIso8859_1(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("");
      String string0 = StringUtils.newString(byteArray0, "UTF-16");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("org.apache.commons.codec.binary.StringUtils");
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("");
      String string0 = StringUtils.newStringUsAscii(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("");
      String string0 = StringUtils.newStringUtf16(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked("UTF-8", "UTF-8");
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked("", "UTF-8");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        StringUtils.newString(byteArray0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        StringUtils.newString(byteArray0, "{x$|-");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // {x$|-: java.io.UnsupportedEncodingException: {x$|-
//         //
//         verifyException("org.apache.commons.codec.binary.StringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
//      try { 
        StringUtils.getBytesUnchecked("", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "kKxk(#i+U6Pt{:Y7_", 0, 0);
      // Undeclared exception!
//      try { 
        StringUtils.equals((CharSequence) "kKxk(#i+U6Pt{:Y7_", (CharSequence) charBuffer0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringUtils.newString((byte[]) null, "4)C_R?Ka@0g#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("org.apache.commons.codec.binary.StringUtils");
      String string0 = StringUtils.newString(byteArray0, "UTF-16");
      assertEquals("\u6F72\u672E\u6170\u6163\u6865\u2E63\u6F6D\u6D6F\u6E73\u2E63\u6F64\u6563\u2E62\u696E\u6172\u792E\u5374\u7269\u6E67\u5574\u696C\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = StringUtils.newStringUtf16Be((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked((String) null, "");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8((String) null);
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "UTF-8", (CharSequence) "UTF-8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "UTF-8");
      // Undeclared exception!
//      try { 
        StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "{9:?\"KQbo_", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) ";GPf+19,S&{9!Pe^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\u0000\uFFFD\uFFFD\u0001");
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "n`bf3zG-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = StringUtils.newStringUtf8(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8("");
      assertTrue(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("Ex");
      assertArrayEquals(new byte[] {(byte)69, (byte)120}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8("org.apache.commons.codec.binary.StringUtils");
      String string0 = StringUtils.newStringUtf16(byteArray0);
      assertEquals("\u6F72\u672E\u6170\u6163\u6865\u2E63\u6F6D\u6D6F\u6E73\u2E63\u6F64\u6563\u2E62\u696E\u6172\u792E\u5374\u7269\u6E67\u5574\u696C\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("UTF-8");
      String string0 = StringUtils.newStringUtf16Be(byteArray0);
      assertEquals("\uFEFFUTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("");
      String string0 = StringUtils.newStringUtf16Le(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("org.apache.commons.codec.binary.StringUtils");
      String string0 = StringUtils.newStringIso8859_1(byteArray0);
      assertEquals("org.apache.commons.codec.binary.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("org.apache.commons.codec.binary.StringUtils");
      String string0 = StringUtils.newStringUsAscii(byteArray0);
      assertEquals("org.apache.commons.codec.binary.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
//      try { 
        StringUtils.getBytesUnchecked("org.apache.commons.codec.binary.StringUtils", "\u6F72\u672E\u6170\u6163\u6865\u2E63\u6F6D\u6D6F\u6E73\u2E63\u6F64\u6563\u2E62\u696E\u6172\u792E\u5374\u7269\u6E67\u5574\u696C\uFFFD");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // \u6F72\u672E\u6170\u6163\u6865\u2E63\u6F6D\u6D6F\u6E73\u2E63\u6F64\u6563\u2E62\u696E\u6172\u792E\u5374\u7269\u6E67\u5574\u696C\uFFFD: java.io.UnsupportedEncodingException: \u6F72\u672E\u6170\u6163\u6865\u2E63\u6F6D\u6D6F\u6E73\u2E63\u6F64\u6563\u2E62\u696E\u6172\u792E\u5374\u7269\u6E67\u5574\u696C\uFFFD
//         //
//         verifyException("org.apache.commons.codec.binary.StringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("org.apache.commons.codec.binary.StringUtils");
      assertEquals(86, byteArray0.length);
  }
}
