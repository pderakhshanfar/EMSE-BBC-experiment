/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 23:38:05 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xE0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)107, (byte) (-75), (byte) (-116));
      assertEquals((byte)107, byte0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.max((short)2275, (short)2275, (short)2275);
      assertEquals((short)2275, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.max(2248, (int) (byte) (-1), 7);
      assertEquals(2248, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-26), (byte) (-4), (byte) (-4));
      assertEquals((byte) (-26), byte0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[3] = (short) (-1212);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2082408385;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2082408385, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0xIWxW:{[{0J hRf5.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"IWxW:{[{0J hRf5.\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("U", (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("1");
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("-6");
      assertEquals((short) (-6), short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.toLong("", 489L);
      assertEquals(489L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = NumberUtils.toLong("8");
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = NumberUtils.toLong("-47");
      assertEquals((-47L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = NumberUtils.toInt("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = NumberUtils.toInt("8");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = NumberUtils.toInt("-4");
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0X--", (-2994.0F));
      assertEquals((-2994.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = NumberUtils.toFloat("a2Bh");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = NumberUtils.toFloat("5");
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = NumberUtils.toDouble("0", (-976.52));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (-555.9926258593));
      assertEquals((-555.9926258593), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = NumberUtils.toDouble("15");
      assertEquals(15.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-9");
      assertEquals((-9.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("#", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-0X$,dN3k)>~~jk'hT3kr");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-9");
      assertEquals((byte) (-9), byte0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1103;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)1103, short0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 1077L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[5] = (-405L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-405L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)2275;
      intArray0[1] = (int) (short)2275;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(2275, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1077L;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1077.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 357.983855414638;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(357.983855414638, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3424.78070463);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3424.78070463), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)17, byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-117), byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = NumberUtils.min(3947L, 0L, (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = NumberUtils.min(3, 0, 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = NumberUtils.min(313, 2609, 313);
      assertEquals(313, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short)0, (float) (short)0, 0.71792746F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = NumberUtils.min(3846.3941600461, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = NumberUtils.min((double) (-3037.636F), 3555.40549, 0.0);
      assertEquals((-3037.635986328125), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)71;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)71, short0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1561);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1561), short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1362;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1362L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1293L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1293L), long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1103.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1103.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1974);
      doubleArray0[1] = (double) (-1974);
      doubleArray0[2] = (double) (-1974);
      doubleArray0[3] = (double) (-1974);
      doubleArray0[4] = (double) (-1974);
      doubleArray0[5] = (double) (-1974);
      doubleArray0[6] = (double) (-1974);
      doubleArray0[7] = (double) (-1974);
      doubleArray0[8] = (double) (-1974);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1974.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-32), byte0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short) (-1), (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short)0, (-54L), (-993L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = NumberUtils.max((-993L), (-993L), (-993L));
      assertEquals((-993L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = NumberUtils.max((-1503), (int) (byte)0, (-2128));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = NumberUtils.max((-195), (-195), (-618));
      assertEquals((-195), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), 1947.3F, (-5180.5F));
      assertEquals(1947.3F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = NumberUtils.max((-2017.6454795), (double) (byte)0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = NumberUtils.max((-2203.8831714923185), (-2203.8831714923185), (-1052.56854));
      assertEquals((-1052.56854), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-74), (byte) (-74), (byte) (-74));
      assertEquals((byte) (-74), byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0x0c");
      assertEquals((-12L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("#0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("8");
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xd");
      assertEquals((-13), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-1");
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("8");
      assertEquals(8.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-3");
      assertEquals((-3.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-1");
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(shortArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(shortArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createNumber("l");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createLong("]/@]G6|8");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"]/@]G6|8\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createFloat("0E.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("/u");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("8.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("6");
      assertEquals((short)6, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xE0");
      assertEquals((byte)32, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("8");
      assertEquals((short)8, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("-0X");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"X\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#a");
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = NumberUtils.createLong("7");
      assertEquals(7L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createInteger("Jpn?");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"Jpn?\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createDouble("`9?-3~x\u0007");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("60");
      assertEquals(60.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (-147));
      assertEquals((short) (-147), short0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = NumberUtils.toShort("/", (short)100);
      assertEquals((short)100, short0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("MZlh", (byte)24);
      assertEquals((byte)24, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = NumberUtils.toDouble("#", 1760.690067278301);
      assertEquals(1760.690067278301, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float float0 = NumberUtils.toFloat("v?1~9P", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = NumberUtils.toLong("r-7R)jL*dx7k[pn", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = NumberUtils.toInt("p{InCombiningDiacriticalMarks}+", 68);
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0E-0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+O/kqm@.5'YePY?%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E05-(\" ~J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xth0X??|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9TbBn=B\"'bU3=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not a alid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0Ee0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-#0.x@m0 x^i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-115), (byte) (-115), (byte)44);
      assertEquals((byte)44, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-75), (byte)106, (byte) (-75));
      assertEquals((byte)106, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)12, (short)48);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1036), (short) (-1), (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = NumberUtils.max((short)99, (short) (-447), (short) (-447));
      assertEquals((short)99, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NumberUtils.max(664, 1244, 1244);
      assertEquals(1244, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NumberUtils.max(76, 76, 278);
      assertEquals(278, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 1397L, 2500L);
      assertEquals(2500L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)97, (byte)108, (byte) (-4));
      assertEquals((byte) (-4), byte0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)108, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)13, (byte)13, (byte)13);
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short) (-3073));
      assertEquals((short) (-3073), short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = NumberUtils.min((short)19501, (short)0, (short)76);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short short0 = NumberUtils.min((short)16, (short)3074, (short)16);
      assertEquals((short)16, short0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NumberUtils.min((-1660), 1567, (-1443208406));
      assertEquals((-1443208406), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NumberUtils.min((-910), (-910), 0);
      assertEquals((-910), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)65, (long) (byte)65, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)79, (long) (byte)42, 754L);
      assertEquals(42L, long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = NumberUtils.min((-701L), 4049L, (-701L));
      assertEquals((-701L), long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(floatArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1932.3479F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1932.3479F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2437.92450892559;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(2437.92450892559, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)68;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)68, byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3451);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-655);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1759L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1616.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1616.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1407;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-16019);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-16019), short0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[5] = (-1974);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1974), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 544L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("--emX^");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // --emX^ is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0xC0");
      assertEquals((byte) (-64), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0E0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("8.");
      assertEquals(8.0F, number0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
//      try { 
        NumberUtils.createNumber(".>Vf}cib.<(sZ};6Q3");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("+be.EeK8");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0EG0");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1F");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("Strings must not be null");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Strings must not be null is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("--x:.K3l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // --x:.K3l is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("+f");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // +f is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("06d");
      assertEquals(6.0, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-c6 >lL");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // -c6 >lL is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
//      try { 
        NumberUtils.createNumber(";v[N7ue$X2<D");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // ;v[N7ue$X2<D is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0.xB@m0x^i");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0.xB@m0x^i is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0e1xF");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0e1xF is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--9");
      assertNotNull(number0);
      assertEquals((short)9, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("q}6A~e+y]l#ZNHE:R=$");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // q}6A~e+y]l#ZNHE:R=$ is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("e");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // e is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("}9VcESV.en7");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // }9VcESV.en7 is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("Array cannot be empty.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Array cannot be empty. is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("08l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"8\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-0XL81STJHX");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"-L81STJHX\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("#ULIE.}2I417}}T(IS");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"ULI\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-61));
      assertEquals((byte) (-61), byte0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 5322.2F);
      assertEquals(5322.2F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-08");
      assertEquals((-8.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = NumberUtils.max(1670.64300556788, (double) 563, (-1404.68744078));
      assertEquals(1670.64300556788, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1");
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, 1.0, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double double0 = NumberUtils.toDouble("D[C=?");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float float0 = NumberUtils.min((-40.1F), (float) (byte)0, (float) (byte)0);
      assertEquals((-40.1F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float float0 = NumberUtils.max((float) (-993L), (float) (-993L), (float) (-993L));
      assertEquals((-993.0F), float0, 0.01F);
  }
}
