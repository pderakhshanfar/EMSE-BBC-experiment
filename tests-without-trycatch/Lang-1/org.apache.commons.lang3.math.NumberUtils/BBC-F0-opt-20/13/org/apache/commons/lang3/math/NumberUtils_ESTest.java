/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 01:14:09 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x53f)+<!;[o<6Ls&g[@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xAacbP=MDEi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9Xv5kG.d9V\"B}W9{1^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0|j+hoe0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-62), (byte)126, (byte)18);
      assertEquals((byte)126, byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.max((short)2390, (short)72, (short)2390);
      assertEquals((short)2390, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtils.max(1762, (int) (short)7, (-1398));
      assertEquals(1762, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-715), (short) (-715), (short) (-715));
      assertEquals((short) (-715), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = NumberUtils.min((-144), (-144), (-144));
      assertEquals((-144), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[3] = (-160801406);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (short)4213;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0Xtv [vq TX9+fCbH<");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"tv [vq TX9+fCbH<\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = NumberUtils.toShort("'i", (short) (-4792));
      assertEquals((short) (-4792), short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = NumberUtils.toShort("7");
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = NumberUtils.toShort("-9");
      assertEquals((short) (-9), short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = NumberUtils.toLong("", 518L);
      assertEquals(518L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (-1344L));
      assertEquals((-1344L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = NumberUtils.toLong("9");
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = NumberUtils.toLong("-1");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = NumberUtils.toInt("", 1693);
      assertEquals(1693, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt(":p~;k", (-2231));
      assertEquals((-2231), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = NumberUtils.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = NumberUtils.toInt("7");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = NumberUtils.toFloat("r-Hj1wjhYZ.>^p9tC-", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0Xi", (-49.0F));
      assertEquals((-49.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = NumberUtils.toFloat("1.7");
      assertEquals(1.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-1");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-", (double) (short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = NumberUtils.toDouble("6");
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-1");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("4,O ", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("7");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-1");
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1203;
      shortArray0[1] = (short)1203;
      shortArray0[2] = (short)1203;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)1203, short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[4] = (short) (-2851);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2851), short0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)52;
      longArray0[1] = (long) (byte)52;
      longArray0[2] = (long) (short)52;
      longArray0[3] = (long) (short)52;
      longArray0[4] = (long) (byte)52;
      longArray0[5] = (long) (short)52;
      longArray0[6] = (long) (short)7;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3917;
      intArray0[1] = 5575;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(3917, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      intArray0[1] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 75;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(75.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-144);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-144.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)68;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(68.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-1.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)52, byte0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-81), byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short short0 = NumberUtils.min((short)21885, (short)10, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = NumberUtils.min((short)100, (short)1307, (short)340);
      assertEquals((short)100, short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = NumberUtils.min(4152, 251, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, 0.0F, 1036.1257F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = NumberUtils.min((float) 4213L, 1762.8002F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = NumberUtils.min((double) (short)0, (double) 0.0F, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = NumberUtils.min(492.03568785, (-1.0), (double) 5);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)83, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)7;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-506);
      shortArray0[1] = (short) (-760);
      shortArray0[2] = (short) (-760);
      shortArray0[3] = (short) (-760);
      shortArray0[4] = (short) (-506);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-506), short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 135L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(135L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-3566L);
      longArray0[1] = (-2876L);
      longArray0[2] = (-739L);
      longArray0[3] = (-2312L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-739L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-57);
      intArray0[1] = (int) (short) (-57);
      intArray0[2] = (int) (short) (-57);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-57), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-3251);
      floatArray0[1] = (float) (byte) (-111);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-111.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 128.22;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(128.22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)92;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)92, byte0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-111);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-14), byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = NumberUtils.max(0L, (-1230L), (-1195L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = NumberUtils.max((-2503.632F), (-2503.632F), 889.1F);
      assertEquals(889.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short) (-4792), (float) (short) (-4792), (float) (short) (-4792));
      assertEquals((-4792.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte)0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = NumberUtils.max((-155.4503), (double) (byte) (-17), (-155.4503));
      assertEquals((-17.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte) (-18), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-60), (byte) (-94), (byte) (-60));
      assertEquals((byte) (-60), byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0x0C");
      assertEquals(12L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-9");
      assertEquals((-9L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("#0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("1");
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-1");
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = NumberUtils.createDouble(".7");
      assertEquals(0.7, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-1");
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0.");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1.7");
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-1");
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((int[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(shortArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((long[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((int[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createNumber("L");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createLong("`");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"`\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createInteger("1.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"1.\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createFloat("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0O{2S[q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("<owy=fFJB'zzkx");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("T_$sG}G");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"T_$sG}G\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#c");
      assertEquals((short)12, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xc");
      assertEquals((byte) (-12), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-00");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = NumberUtils.createLong("#00");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xF");
      assertEquals((-15), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createDouble("#c");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("1.");
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = NumberUtils.toShort("Array cannot be empty.", (short)7);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)117);
      assertEquals((byte)117, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = NumberUtils.toDouble("A=*|Ix{d", (-4567.8095));
      assertEquals((-4567.8095), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = NumberUtils.toFloat(":p~;k", 1320.3032F);
      assertEquals(1320.3032F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = NumberUtils.toInt("-0X", (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8e-uEf+Rco");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+xRb MIFPi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("50ee_ah_*q`<:yX(BQs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-.0L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("042e<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xv/362=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-62), (byte) (-1), (byte)92);
      assertEquals((byte)92, byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)75, (byte)75, (byte)75);
      assertEquals((byte)75, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-3095), (short) (-547), (short)3564);
      assertEquals((short)3564, short0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-51), (short)31591, (short) (-57));
      assertEquals((short)31591, short0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-547), (short) (-547), (short) (-547));
      assertEquals((short) (-547), short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NumberUtils.max(334, (-1064), 1631);
      assertEquals(1631, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = NumberUtils.max(0, 101, 101);
      assertEquals(101, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NumberUtils.max((-2239), (-2239), (-2239));
      assertEquals((-2239), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte) (-1), (long) (byte) (-1), 4089L);
      assertEquals(4089L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = NumberUtils.max((-2409L), (-1037L), (long) (-2190));
      assertEquals((-1037L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtils.max(4089L, 4089L, 4089L);
      assertEquals(4089L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)102, (byte)83, (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)100, (byte)90, (byte)98);
      assertEquals((byte)90, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)0, (-2190), (int) (short)0);
      assertEquals((-2190), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = NumberUtils.min(748, 3095, 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)83, 0L, (-5193L));
      assertEquals((-5193L), long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), 1L, (long) (short)0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(shortArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[4] = 2031.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2031.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[4] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-548.848738);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)75;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-3566L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2464.7004F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2248;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 100;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-854L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-854L), long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("--A blank string is not a valid number");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // --A blank string is not a valid number is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--1");
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-1");
      assertEquals((short) (-1), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-#----A blank string is not a vlid number");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Illegal embedded sign character
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
//      try { 
        NumberUtils.createNumber(".L/>Hm2hn.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-,. s#zdCC%JgwZY]TR3");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0ex0");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.0F");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("---0x/HL");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // ---0x/HL is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0L");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("[qt.b(-DmGEHVo_fl");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // [qt.b(-DmGEHVo_fl is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("The Array must not be null");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // The Array must not be null is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1f");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("K/xB.(YN')}nSd");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // K/xB.(YN')}nSd is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-00L");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("F");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // F is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0ETF$WK?2y;+<CG");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0ETF$WK?2y;+<CG is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0e");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0e is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("jh'x\"7;Ee]");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // jh'x\"7;Ee] is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
//      try { 
        NumberUtils.createNumber(",S,E] hr;*Me\"<r0");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \",S,E] h\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("*^iK9m.-z|JrE4:5e");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // *^iK9m.-z|JrE4:5e is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("Array cannot be empty.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Array cannot be empty. is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.e8");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("#l!q(iO(neQ|");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"l!q(iO(neQ|\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0x0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3D");
      assertEquals(3.0, number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 3126.17581967);
      assertEquals(3126.17581967, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (byte)7);
      assertEquals(7.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      short short0 = NumberUtils.toShort("---0x/HL");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float float0 = NumberUtils.toFloat("Minimum abbreviation width is 4");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = NumberUtils.toInt("-9");
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.max((-155.4503), (double) (byte) (-17), 1187.594360127853);
      assertEquals(1187.594360127853, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1.");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort((String) null, (short) numberUtils0.BYTE_ZERO);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = NumberUtils.min(3190.913954, 822.8975873882893, 1696.562269);
      assertEquals(822.8975873882893, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0X");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short) (-547), (float) (short) (-857), 5383.0F);
      assertEquals((-857.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float float0 = NumberUtils.max((-3181.3F), (-558.55F), (float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
