/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 06:36:54 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xaPq62p!oz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9@4&cTxSojli@rw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0xhVr+~~F#}EP;#+L0c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)32, (byte)43, (byte)0);
      assertEquals((byte)43, byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-104), (byte) (-104), (byte)101);
      assertEquals((byte) (-104), byte0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.min((short)484, (short)484, (short)484);
      assertEquals((short)484, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = NumberUtils.min(1673, 1673, 1673);
      assertEquals(1673, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-43), byte0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1284L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1284L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short)6);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = NumberUtils.toShort("7");
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = NumberUtils.toShort("-7");
      assertEquals((short) (-7), short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = NumberUtils.toLong("i^8f869(Lli", (long) (byte)8);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = NumberUtils.toLong("7");
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = NumberUtils.toLong("-7");
      assertEquals((-7L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = NumberUtils.toInt("A0s", 2026);
      assertEquals(2026, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = NumberUtils.toInt("7");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt("-7");
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (-1406.9F));
      assertEquals((-1406.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = NumberUtils.toFloat("8");
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-99");
      assertEquals((-99.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = NumberUtils.toDouble("< Y3k$h", (-637.5545638800273));
      assertEquals((-637.5545638800273), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = NumberUtils.toDouble("42");
      assertEquals(42.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("]|,gocHUdbJRrm&h.", (byte) (-108));
      assertEquals((byte) (-108), byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("8");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-99");
      assertEquals((byte) (-99), byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)10;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2930;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(2930L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2021;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(2021, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2844);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2844), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 627L;
      floatArray0[1] = (float) 741L;
      floatArray0[2] = (float) 627L;
      floatArray0[3] = (float) 627L;
      floatArray0[4] = (float) 627L;
      floatArray0[5] = (float) 627L;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(627.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 108;
      doubleArray0[1] = (double) 2145599890;
      doubleArray0[2] = (double) 2145599890;
      doubleArray0[3] = (double) 2145599890;
      doubleArray0[4] = (double) 2145599890;
      doubleArray0[5] = (double) 108;
      doubleArray0[6] = (double) 108;
      doubleArray0[7] = (double) 108;
      doubleArray0[8] = (double) 2145599890;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(108.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-920.6279257324255);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-920.6279257324255), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)43, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short short0 = NumberUtils.min((short)1652, (short)0, (short)1242);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = NumberUtils.min(2656L, 814L, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = NumberUtils.min(301L, 747L, 53L);
      assertEquals(53L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_ONE, (int) numberUtils0.BYTE_ONE, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = NumberUtils.min((-2111), 1683, (-1));
      assertEquals((-2111), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)0, 1769.0562F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, (float) (byte)126, (float) (byte)101);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = NumberUtils.min((double) 0, 0.0, 1030.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = NumberUtils.min(1114.08989, 1114.08989, 1700.0);
      assertEquals(1114.08989, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1424);
      shortArray0[1] = (short) (-42);
      shortArray0[2] = (short) (-42);
      shortArray0[3] = (short) (-42);
      shortArray0[4] = (short) (-42);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-42), short0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1091L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1091L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-43);
      longArray0[1] = (-4455L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-43L), long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-3340);
      intArray0[1] = (int) (short) (-694);
      intArray0[2] = (int) (short) (-3340);
      intArray0[3] = (-1);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[3] = 1322.278F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1322.278F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-259);
      floatArray0[1] = (float) (short) (-259);
      floatArray0[2] = (float) (short) (-259);
      floatArray0[3] = (float) (short) (-3258);
      floatArray0[4] = (float) (short) (-259);
      floatArray0[5] = (float) (short) (-259);
      floatArray0[6] = (float) (short) (-259);
      floatArray0[7] = (float) (short) (-259);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-259.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4055.988078693791);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-4055.988078693791), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)22;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)22, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-99);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-6), byte0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-259), (short) (-259), (short) (-3258));
      assertEquals((short) (-259), short0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = NumberUtils.max((long) 0, (-881L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short) (-259), (long) (short) (-259), (-3228L));
      assertEquals((-259L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = NumberUtils.max((-1), (-4018), (-3080));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = NumberUtils.max((-917.938F), (-2480.2297F), (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (-1.0), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = NumberUtils.max(5224.1777091, 5224.1777091, 0.0);
      assertEquals(5224.1777091, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-2), (byte) (-123), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--7");
      assertEquals((short)7, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = NumberUtils.createLong("#0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-1");
      assertEquals((-1L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-30");
      assertEquals((-30), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-7");
      assertEquals((-7.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-0");
      assertEquals(-0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-7");
      assertEquals((-7.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("7");
      assertEquals((byte)7, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1");
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-7");
      assertEquals((byte) (-7), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((int[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((short[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((long[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createLong("#");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createInteger(">'XDdYTJn`\"3Y~'o4NL");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \">'XDdYTJn`\"3Y~'o4NL\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createFloat("@'");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createDouble("0~");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("hVr");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits(".9zkB1VF]'brz555wk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("--42,d4j&u]");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // --42,d4j&u] is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-#E7C");
      assertEquals((short) (-3708), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("5E7");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"5E7\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("-0tc;l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"tc;l\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = NumberUtils.createLong("7");
      assertEquals(7L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0x7");
      assertEquals(7, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("1");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("1");
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (-1278));
      assertEquals((short) (-1278), short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 1893.7F);
      assertEquals(1893.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (-2248L));
      assertEquals((-2248L), long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = NumberUtils.toInt("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0-0tc;l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E+M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Eu~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0EEC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("39e.[5Wg&),[02XI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x42,d4j&u]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0El");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("\"WKJ[W)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf?lb.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = NumberUtils.max((short)4, (short) (-283), (short)2528);
      assertEquals((short)2528, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2), (short)69, (short)4);
      assertEquals((short)69, short0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NumberUtils.max(1980, 3043, (int) (short)4425);
      assertEquals(4425, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 1955L, 0L);
      assertEquals(1955L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = NumberUtils.max(110L, (long) (byte)101, 1789L);
      assertEquals(1789L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)124, (byte) (-5), (byte) (-5));
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)40, (byte)45, (byte)16);
      assertEquals((byte)16, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short short0 = NumberUtils.min((short)1, (short)0, (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = NumberUtils.min((short)484, (short)2930, (short)484);
      assertEquals((short)484, short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = NumberUtils.min(5537, 233, 65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtils.min((-1812L), (-1812L), (long) (byte)0);
      assertEquals((-1812L), long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((short[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1257.6854F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1096.023467;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1096.023467, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short)5;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = 2010;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2010, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1259L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-1327.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1327.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2588.2;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-100);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-100), byte0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-605);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-605), short0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)102;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1124L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("F");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // F is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("0x42,d4j&^>>]");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"42,d\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("...");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5E7");
      assertEquals(5.0E7F, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("--0T=.q.RvKQcD9>6aT~h`l8");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // --0T=.q.RvKQcD9>6aT~h`l8 is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("jEe-0");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Illegal embedded sign character
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("09D");
      assertEquals(9.0, number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-0tc;l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // -0tc;l is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-5l");
      assertEquals((-5L), number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("09l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"9\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("The Array must not be null");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // The Array must not be null is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7ff");
      assertEquals(7.0F, number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0d");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("[WIJNzO(;8t?.1YB`1L");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // [WIJNzO(;8t?.1YB`1L is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0eS,c]");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0eS,c] is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0e");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0e is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("@G5(|c`HMk[>Epe0w8");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // @G5(|c`HMk[>Epe0w8 is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createNumber("l");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.StringUtils");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // org.apache.commons.lang3.StringUtils is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("FZ94=8.VfiEnP(e3U/");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // FZ94=8.VfiEnP(e3U/ is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("Array cannot be empty.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Array cannot be empty. is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0XXs)0s>{/E?>jkcZ>");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"Xs)0s>{/E?>jkcZ>\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("#ydFy~eDa Odv!0/I>,");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"ydFy\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E8");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-0Xf?lb.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"-f?lb.\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)118);
      assertEquals((byte)118, byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long long0 = NumberUtils.toLong("-");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-2844));
      assertEquals((-2844), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-0x");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = NumberUtils.toInt("-");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = NumberUtils.max((-1499.5), (-1499.5), (-804.9355749));
      assertEquals((-804.9355749), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("l");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = NumberUtils.min((-1864.61), 1362.98419, 0.0);
      assertEquals((-1864.61), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-99");
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float float0 = NumberUtils.min((-945.0F), (-2052.0F), (-945.0F));
      assertEquals((-2052.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float float0 = NumberUtils.max(2531.6123F, (-927.2817F), 2531.6123F);
      assertEquals(2531.6123F, float0, 0.01F);
  }
}
