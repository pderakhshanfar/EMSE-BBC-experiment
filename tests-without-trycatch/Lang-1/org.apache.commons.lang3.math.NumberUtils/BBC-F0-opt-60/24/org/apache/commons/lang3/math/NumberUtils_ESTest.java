/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 06:37:35 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0}MT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)90, (byte)0, (byte)90);
      assertEquals((byte)90, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = NumberUtils.max(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)13, 1L, (long) (byte)13);
      assertEquals(13L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.min(2040, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtils.min((-1), (-1), (-3863));
      assertEquals((-3863), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 596L;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(596.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-202);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-202.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("F");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("1");
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.toLong("--", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (-435L));
      assertEquals((-435L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = NumberUtils.toLong("1");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("#", (int) numberUtils0.BYTE_ZERO);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-1458));
      assertEquals((-1458), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = NumberUtils.toInt("8");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = NumberUtils.toInt("-06");
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = NumberUtils.toFloat(";r*=LiEhxm!?wz", (-2619.34F));
      assertEquals((-2619.34F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = NumberUtils.toFloat("--0X");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = NumberUtils.toFloat("6");
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = NumberUtils.toDouble("&0", (-45.0));
      assertEquals((-45.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = NumberUtils.toDouble("1");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-2");
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("AI,ses1", (byte)6);
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("VRkLBoMo?");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1");
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3874;
      shortArray0[1] = (short)7;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)117;
      longArray0[1] = (long) (byte)117;
      longArray0[2] = (long) (short)1575;
      longArray0[3] = (long) (byte)117;
      longArray0[4] = (long) (byte)117;
      longArray0[5] = (long) (short)1575;
      longArray0[6] = 1943L;
      longArray0[7] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2768L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2768L), long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 2074;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1944);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1944), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2491.76F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2491.76F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)23, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-48);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-48), byte0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short short0 = NumberUtils.min((short)48, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = NumberUtils.min((short)3, (short)3, (short)3);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = NumberUtils.min(1L, (long) 0, 5854L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = NumberUtils.min((long) 2040, 469L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = NumberUtils.min(2040, 1, 2040);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, 311.0F, (float) 862);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = NumberUtils.min((-2738.9F), 1.0F, 2007.4502F);
      assertEquals((-2738.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, (double) 0L, 1481.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = NumberUtils.min((double) (byte)117, (double) (byte)117, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte)0, (byte)45, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)1636;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1636, short0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-108L);
      longArray0[1] = (-2001L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1985L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3774);
      intArray0[1] = (-3774);
      intArray0[2] = (-3774);
      intArray0[3] = (-3774);
      intArray0[4] = (-3774);
      intArray0[5] = (-3774);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-3774), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte)4;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1463L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1463.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-45);
      doubleArray0[1] = (double) (byte) (-45);
      doubleArray0[2] = (double) (byte) (-45);
      doubleArray0[3] = (double) (byte) (-45);
      doubleArray0[4] = (-3397.3813671718);
      doubleArray0[5] = (double) (byte) (-45);
      doubleArray0[6] = (double) (byte) (-45);
      doubleArray0[7] = (double) (byte) (-45);
      doubleArray0[8] = (double) (byte) (-45);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-45.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-57), byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      short short0 = NumberUtils.max((short)1595, (short)0, (short)1595);
      assertEquals((short)1595, short0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = NumberUtils.max(0L, (-1154L), (-2022L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = NumberUtils.max((-1275), (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = NumberUtils.max((float) 0L, (-1539.0F), 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = NumberUtils.max((-1148.174F), (-1506.9507F), (-93.355484F));
      assertEquals((-93.355484F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = NumberUtils.max((-1454.0425908212892), (-679.5518359188002), (double) (short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = NumberUtils.max((-2469.0), (-2965.25), (-2965.25));
      assertEquals((-2469.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-65), (byte) (-65), (byte) (-118));
      assertEquals((byte) (-65), byte0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-2");
      assertEquals((short) (-2), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = NumberUtils.createLong("2");
      assertEquals(2L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#a");
      assertEquals((-10L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("8");
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("8");
      assertEquals(8.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-2");
      assertEquals((-2.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-6");
      assertEquals((-6.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("2");
      assertEquals((byte)2, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1");
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((short[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((int[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((long[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((int[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(floatArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createNumber("L");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createInteger("1d");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"1d\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createDouble("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("&0EG!l%e5d");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-8");
      assertEquals((byte) (-8), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("-0X");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"X\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("0x~6");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"~6\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-8");
      assertEquals((byte) (-8), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createLong("#");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0XE0");
      assertEquals((-224), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("5");
      assertEquals(5.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createFloat("~K|jGr;6@cKT&k-");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short)4427);
      assertEquals((short)4427, short0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("Array cannot be empty.", (double) numberUtils0.INTEGER_ZERO);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = NumberUtils.toFloat("org.apache.commons.lang3.math.NumberUtils", (float) 68);
      assertEquals(68.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 7);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E+0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7EEK`6urO\b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e;U((SycA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.\"`pO_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("&0EG!l%e5d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xao[ax[}E85g0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not a va;id number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x19o BZwG&k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)3);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)13, (byte)4);
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte) (-108), (byte) (-108));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2596), (short) (byte)0, (short) (byte) (-108));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-972), (short) (-972), (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = NumberUtils.max((-2146637515), (int) (byte)0, (int) (byte)13);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NumberUtils.max(0, (-653), (-395));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 1243L, (-45L));
      assertEquals(1243L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = NumberUtils.max((-2577L), (-2577L), (long) (short) (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)45, (byte)45, (byte) (-37));
      assertEquals((byte) (-37), byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)32, (byte) (-52), (byte) (-52));
      assertEquals((byte) (-52), byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)13, (byte)46, (byte)46);
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short) (-690));
      assertEquals((short) (-690), short0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short)4148, (short) numberUtils0.BYTE_MINUS_ONE, (short)1498);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-1177), (short)1390, (short)3996);
      assertEquals((short) (-1177), short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short) (-202), (-120), (-120));
      assertEquals((-202), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = NumberUtils.min(0L, (-549L), 0L);
      assertEquals((-549L), long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 1L, (long) (short) (-972));
      assertEquals((-972L), long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((short[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1491.226F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)13;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1397);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[4] = 2029;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2029, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2309L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 428.99326F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)54;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[9];
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)46;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 596L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("--");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // -- is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("F");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // F is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--01");
      assertEquals((byte)1, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("#J`'N0!7ZX");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"J`'\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7E0");
      assertEquals(7.0F, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0Eh0");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("9.JylLQO#f^x@Uf8");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("s~6Ej9Bfe2\"4");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"s~6\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1D");
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("--Ddl");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // --Ddl is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("]I!.~hSpi_rv5.?l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // ]I!.~hSpi_rv5.?l is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-0009l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"9\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2f");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("00.g\"`'p*_");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 00.g\"`'p*_ is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0EL");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0EL is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("&0EG!l%e5d");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // &0EG!l%e5d is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("GgK@<YSR0YeEFhAfx");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // GgK@<YSR0YeEFhAfx is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E0");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.StringUtils");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // org.apache.commons.lang3.StringUtils is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("Array cannot be empty.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Array cannot be empty. is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("1SbIteXJ5HUE.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 1SbIteXJ5HUE. is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-#");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"-\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("#t=Q|7HF;J96;US");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"t=Q|7HF;J96;US\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0x-\"2azf<lqyQ_3^!Jt");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"\"2a\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7L");
      assertEquals(7L, number0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (-4723));
      assertEquals((short) (-4723), short0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-49));
      assertEquals((byte) (-49), byte0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 1303.64262);
      assertEquals(1303.64262, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 18.0F);
      assertEquals(18.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      short short0 = NumberUtils.toShort("-1");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-1");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long long0 = NumberUtils.toLong("-8");
      assertEquals((-8L), long0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = NumberUtils.max((-2932.7419398337897), 0.0, 2538.0);
      assertEquals(2538.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-6");
      assertEquals((byte) (-6), byte0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((double) numberUtils0.SHORT_MINUS_ONE, (double) numberUtils0.INTEGER_ONE, (double) numberUtils0.FLOAT_MINUS_ONE);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = NumberUtils.toDouble("F");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float float0 = NumberUtils.min(59.88124F, 59.88124F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((float) numberUtils0.LONG_ONE, (float) 1L, (-1.0F));
      assertEquals(1.0F, float0, 0.01F);
  }
}
