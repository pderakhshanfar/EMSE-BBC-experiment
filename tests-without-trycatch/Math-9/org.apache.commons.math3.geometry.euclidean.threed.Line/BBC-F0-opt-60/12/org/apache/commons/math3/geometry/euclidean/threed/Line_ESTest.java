/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 13:05:10 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.922223905883, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      double double0 = line1.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = new Vector3D(0.0, 1.0E-10, 0.0);
      Line line0 = new Line(vector3D0, vector3D2);
      Line line1 = new Line(line0);
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D1, vector3D2);
      line0.reset(vector3D3, vector3D0);
      Vector3D vector3D4 = line1.intersection(line0);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0E-10, 1.0E-10);
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = new Vector3D(1.0E-10, 1.0E-10, 1.0E-10);
      Vector3D vector3D3 = vector3D2.subtract((Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D0, vector3D2);
      Line line1 = new Line(line0);
      Vector3D vector3D4 = Vector3D.crossProduct(vector3D1, vector3D2);
      line0.reset(vector3D4, vector3D3);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.NaN, vector1D0.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0E-10, 1.0E-10);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.POSITIVE_INFINITY;
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2869.4413), (-2869.4413));
      Vector3D vector3D1 = new Vector3D((-2869.4413), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(2.356194490192345, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 4.116164446561962E-8, vector3D0, 4.116164446561962E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(8.232328893123926E-8, vector1D0.getX(), 0.01);
      assertEquals(8.232328893123925E-8, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      line0.toSpace(vector1D0);
      assertEquals(0.0, vector1D0.getNorm(), 0.01);
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.922223905883, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = new Vector1D(2326.922223905883);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(3956.029031084726, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2869.4413), (-2869.4413));
      Vector3D vector3D1 = new Vector3D((-2869.4413), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(739.03560465208);
      assertEquals((-679.6595783543244), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.scalarMultiply(0.0);
      Vector3D vector3D2 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 4.116164446561962E-8, vector3D0, 4.116164446561962E-8, vector3D0);
      Line line0 = new Line(vector3D2, vector3D0);
      line0.reset(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.pointAt(0.0);
      assertEquals(Double.NaN, vector3D3.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(651.7963991);
      assertEquals((-651.7963991), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 4.116164446561962E-8, vector3D0, 4.116164446561962E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(6.882754866819055E-24, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.scalarMultiply(0.0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.9544602394503, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-2.643433794336672), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals((-0.5), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(256.3674373, vector3D0, 1.0, vector3D0, 1.0, vector3D0, 1.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(3.045955169232969E-14, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1455.92823), 2.2250738585072014E-308, (-4379.5));
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.9488719567138831, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.scalarMultiply(0.0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.922223905883, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-0.6447419234517188), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.922223905883, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      
      double double0 = line0.getAbscissa(vector3D2);
      assertEquals(2.4168719905761016E-9, vector3D2.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 4.116164446561962E-8, vector3D0, 4.116164446561962E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.9544602394503, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals((-4.1407845551280275E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.scalarMultiply(0.0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D1, vector3D2);
      double double0 = line0.distance(vector3D0);
      assertEquals(0.7071067811865476, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(555.4201862, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = new Vector3D((-3.9986783938944604E-8), (-3.9986783938944604E-8));
      Line line1 = new Line(vector3D0, vector3D2);
      double double0 = line0.distance(line1);
      assertEquals(2.784821512094695E-26, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(243.2644978613382, vector3D0, 1.0, vector3D0, 1.0, vector3D0, 1.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(2.2969640529334368E-28, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2892.31826883, 2892.31826883);
      Vector3D vector3D2 = new Vector3D((-5108.3), vector3D0, 0.0, vector3D0, 2892.31826883, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.closestPoint(line0);
      assertEquals(0.780948438720054, vector3D3.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3406.9714704), (-38.6591), 1621.368986619046);
      Vector3D vector3D1 = new Vector3D((-8.0E298), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
//      try { 
        line0.revert();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.reset(vector3D0, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-583.6581364183), vector3D0, 1.7976931348623157E308, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo(line0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.intersection((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.getAbscissa((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.contains((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.closestPoint((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Line line0 = null;
//      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = null;
//      try {
        line0 = new Line((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.922223905883, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D0);
//      try { 
        line0.reset(vector3D1, vector3D1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.intersection(line0);
      assertNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2869.4413), (-2869.4413));
      Vector3D vector3D1 = new Vector3D((-2869.4413), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(4.70135380557637E-18, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3653.581231, 2326.9544602394503, 3653.581231);
      Vector3D vector3D1 = new Vector3D(3653.581231, vector3D0, 3653.581231, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = vector3D0.negate();
      Line line1 = new Line(vector3D1, vector3D2);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(256.3674373, vector3D0, 1.0, vector3D0, 1.0, vector3D0, 1.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = line0.revert();
      boolean boolean0 = line1.isSimilarTo(line0);
      assertNotSame(line1, line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3406.9714704), (-38.6591), 1621.368986619046);
      Line line0 = null;
//      try {
        line0 = new Line(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3406.9714704), (-38.6591), 1621.368986619046);
      Vector3D vector3D1 = new Vector3D((-8.0E298), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D1 = line0.toSpace(vector1D0);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      Vector3D vector3D1 = line1.closestPoint(line0);
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3406.9714704), (-38.6591), 1621.368986619046);
      Vector3D vector3D1 = new Vector3D((-3406.9714704), vector3D0, 6812973.391993111, vector3D0, (-3406.9714704), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals((-0.8678620969077103), vector3D2.getDelta(), 0.01);
  }
}
