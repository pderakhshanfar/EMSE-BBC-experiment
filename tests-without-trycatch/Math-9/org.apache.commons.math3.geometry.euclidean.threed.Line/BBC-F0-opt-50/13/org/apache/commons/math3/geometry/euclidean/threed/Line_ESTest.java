/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 13:07:36 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Vector3D vector3D2 = Vector3D.MINUS_J;
      Vector3D vector3D3 = new Vector3D(2474.69674087638, vector3D1, 2474.69674087638, vector3D2, (-914.0), vector3D1);
      Line line0 = new Line(vector3D1, vector3D3);
      Line line1 = new Line(vector3D3, vector3D0);
      double double0 = line1.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1498.22, vector3D0, 1498.22, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = new Vector3D(1.0E-10, 0.0);
      boolean boolean0 = line0.contains(vector3D2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1498.22, vector3D0, 1498.22, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = new Vector3D(1.0E-10, 0.0);
      Vector3D vector3D3 = Vector3D.ZERO;
      Line line1 = new Line(vector3D3, vector3D2);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1498.22, vector3D0, 1498.22, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Vector3D vector3D2 = new Vector3D(1.0E-10, 0.0);
      Vector3D vector3D3 = Vector3D.ZERO;
      Line line2 = new Line(vector3D3, vector3D2);
      boolean boolean0 = line2.isSimilarTo(line1);
      assertFalse(boolean0);
      assertNotSame(line1, line0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = new Vector3D(1.9999999482846629, 3700.8747487114, 82.74220586);
      Line line0 = new Line(vector3D1, vector3D2);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals((-1366914.8840305265), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(7.6716701714302541E17, 7.6716701714302541E17, (-489.0));
      Vector3D vector3D1 = new Vector3D(3217.0, vector3D0, 2641.9, vector3D0, 3217.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.7853981633974483, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(2048.31, vector3D0, 2048.31, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = new Vector1D(2048.31);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(2048.31, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.7071067811865475, vector1D0.getX(), 0.01);
      assertEquals((-0.9999999999999999), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt(0.0);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(3.6749477719927015E55, vector3D0, 3.6749477719927015E55, vector3D0, 6.138356201862891E10, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-3280.293));
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-3280.293), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.9921976327896118);
      assertEquals(0.992197632240395, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(2516.5349);
      assertEquals(2301.4541048077185, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-1709.1), vector3D0, (-1709.1), vector3D0, (-1709.1), vector3D0, (-1094.1925425), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(2.426804477675226E-26, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = line0.revert();
      Vector3D vector3D2 = line1.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(2.509325539392592E-14, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals((-3.566582090493273E-11), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(1.2357892487102616E-13, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      line0.toSubSpace(vector3D2);
      assertEquals((-2.356194490192345), vector3D2.getAlpha(), 0.01);
      assertEquals(0.5, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-3.6340960640889947E-4), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(8.0E298, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-1113.1), 2.2250738585072014E-308);
      Vector3D vector3D1 = new Vector3D((-495.75), vector3D0, 1.6944444444445077, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.9989874769294E-311), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1498.22, vector3D0, 1498.22, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Vector3D vector3D2 = line1.getDirection();
      assertEquals(1.0, vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-1709.1), vector3D0, (-1709.1), vector3D0, (-1709.1), vector3D0, (-1094.1925425), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      Line line1 = line0.revert();
      double double0 = line1.getAbscissa(vector3D2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals((-1366914.8840305265), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D0);
      assertEquals(5.5991200543806726E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-1113.1), 2.2250738585072014E-308);
      Vector3D vector3D1 = new Vector3D((-495.75), vector3D0, 1.6944444444445077, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      double double0 = line0.distance(line1);
      assertEquals(2.042218385767615E-31, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals((-5.2791104820926193E-14), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-1709.1), vector3D0, (-1709.1), vector3D0, (-1094.1925425), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = line0.revert();
      Vector3D vector3D2 = line1.closestPoint(line0);
      assertEquals(0.0, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Vector3D vector3D2 = Vector3D.MINUS_J;
      Vector3D vector3D3 = new Vector3D(2474.69674087638, vector3D1, 2474.69674087638, vector3D2, (-914.0), vector3D1);
      Line line0 = new Line(vector3D1, vector3D3);
      Line line1 = new Line(vector3D3, vector3D0);
      Vector3D vector3D4 = line1.closestPoint(line0);
      assertEquals((-1560.6967411652533), vector3D4.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-918.18642363), 9.693788446848355E43, 9.693788446848355E43);
      Vector3D vector3D1 = new Vector3D((-918.18642363), vector3D0, (-918.18642363), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.revert();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.reset((Vector3D) null, vector3D0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(8.0E298, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo(line0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.intersection((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-1113.1), 2.2250738585072014E-308);
      Vector3D vector3D1 = new Vector3D((-495.75), vector3D0, 1.6944444444445077, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
//      try { 
        line0.getAbscissa((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.contains((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.closestPoint((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Line line0 = null;
//      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Line line0 = null;
//      try {
        line0 = new Line((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.reset(vector3D0, vector3D0);
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-3280.293));
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-3280.293), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
//      try { 
        line0.reset(vector3D1, vector3D1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2.8915623091738975E-4, vector3D0, 1075.1859, vector3D0, 1.0E-10, vector3D0, 1.0000000000000002, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1113.1), (-1.0), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      
      Line line1 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line1.intersection(line0);
      assertNotNull(vector3D3);
      assertEquals(4.747724502823017E-10, vector3D3.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1498.22, vector3D0, 1498.22, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(6.652963357025438E-17, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2516.5349, (-590.48316768564), 2516.5349);
      Vector3D vector3D1 = new Vector3D((-2305.48750822222), vector3D0, (-495.75), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D1, vector3D0);
      Line line2 = new Line(line0);
      Line line3 = new Line(line1);
      boolean boolean0 = line2.isSimilarTo(line3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1498.22, vector3D0, 1498.22, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
      assertNotSame(line1, line0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1498.22, vector3D0, 1498.22, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-918.18642363), 9.693788446848355E43, 9.693788446848355E43);
      Line line0 = null;
//      try {
        line0 = new Line(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(8.0E298, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertTrue(vector3D2.isNaN());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2.8915623091738975E-4, vector3D0, 1075.1859, vector3D0, 1.0E-10, vector3D0, 1.0000000000000002, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.003);
      assertEquals(0.003, vector3D2.getY(), 0.01);
  }
}
