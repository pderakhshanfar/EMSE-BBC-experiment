/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 18:28:27 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = vector3D1.add((-2099.193126031871), (Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D2, vector3D1);
      double double0 = line0.distance(line1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2558.0228891962), (-2558.0228891962), (-5360.18093749));
      Vector3D vector3D1 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertFalse(vector1D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(1.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(1.5830993332061267E-10, 1.5830993332061267E-10);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      Vector1D vector1D1 = line0.toSubSpace(vector3D2);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getZ(), 0.01);
      assertTrue(vector1D1.equals((Object)vector1D0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(0.375, vector3D0, 0.375, vector3D0, (-1324.2), vector3D0, 1180.96094492, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = new Vector1D((-1324.2), vector1D0);
      Vector3D vector3D2 = line0.toSpace(vector1D1);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, (-1108.10595), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = new Vector1D(1.0E-10);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(1.0033077212038197E-20, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      line0.toSpace(vector1D0);
      assertEquals(0.0, vector1D0.getNormInf(), 0.01);
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt((-1.0));
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(898.6932938, 898.6932938);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt((-4272.96));
      assertEquals((-0.12755664795798058), vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(1831.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(8.673617379884035E-19, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3.141592653489793, (-3662.202648));
      Vector3D vector3D1 = new Vector3D((-3662.202648), vector3D0, 1.763484489402196E7, vector3D0, 0.6409968137741089, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(2.131840350497506E-9, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3.141592653489793, (-3662.202648));
      Vector3D vector3D1 = new Vector3D(3.141592653489793, vector3D0, 3.141592653489793, vector3D0, 3.141592653589793, vector3D0, (-3662.202648), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-7.26641828029589E-15), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(0.375, vector3D0, 0.375, vector3D0, (-1324.2), vector3D0, 1180.96094492, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(9.907689986993922E-15, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(898.6932938, 898.6932938);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.PLUS_I;
      Line line1 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line1.intersection(line0);
      assertNotNull(vector3D3);
      assertEquals(0.19779487331912599, vector3D3.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(7.03823343174356E-14, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-2533.4989216154), vector3D0, (-2533.4989216154), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(5.708208031404873E-33, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.5, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(0.375, vector3D0, 0.375, vector3D0, (-1324.2), vector3D0, 1180.96094492, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.0), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(4.291152720627083E78, vector3D0, 4.291152720627083E78, vector3D0, 4.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(4.291152720627083E78, vector3D1, 1.0, vector3D1);
      Vector3D vector3D3 = vector3D1.add(6054719.674443144, (Vector<Euclidean3D>) vector3D2);
      Line line0 = new Line(vector3D1, vector3D3);
      Vector3D vector3D4 = line0.getDirection();
      assertEquals(0.0, vector3D4.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, (-2099.193126031871), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      Line line1 = new Line(vector3D2, vector3D1);
      double double0 = line1.getAbscissa(vector3D1);
      assertEquals(4198.386252063742, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, (-2099.193126031871), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1721.7834246, vector3D0, 1721.7834246, vector3D0, 1721.7834246, vector3D0, 799.9643, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(1.4280649132894534E-17, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = new Vector3D((-1395.679), vector3D0, (-1395.679), vector3D1);
      Vector3D vector3D3 = vector3D2.add(1.3218336533403718E19, (Vector<Euclidean3D>) vector3D1);
      Vector3D vector3D4 = vector3D1.add(1.3218336533403718E19, (Vector<Euclidean3D>) vector3D1);
      Line line0 = new Line(vector3D3, vector3D4);
      // Undeclared exception!
//      try { 
        line0.revert();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.reset(vector3D1, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(4.291152720627083E78, vector3D0, 4.291152720627083E78, vector3D0, 4.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(4.291152720627083E78, vector3D1, 1.0, vector3D1);
      Vector3D vector3D3 = vector3D2.add(1.0E-6, (Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D1, vector3D3);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo(line0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.intersection((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.getAbscissa((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.22507554432082852, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.contains((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.closestPoint((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Line line0 = null;
//      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Line line0 = null;
//      try {
        line0 = new Line((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.reset(vector3D0, vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2558.0228891962), (-2558.0228891962), (-5360.18093749));
      Vector3D vector3D1 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D1);
//      try { 
        line0.reset(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1333.196939, 1.0E-10, 3220.41);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(vector3D0);
      assertEquals(1.2030995825405377E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1333.196939, 1.0E-10, 3220.41);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-3485.4632106442036), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(898.6932938, 898.6932938);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-0.4036618860051776), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.intersection(line0);
      assertNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2099.5296741846296), (-2099.5296741846296));
      Vector3D vector3D1 = new Vector3D((-2099.5296741846296), vector3D0, (-474.3058947113), vector3D0);
      Vector3D vector3D2 = vector3D0.add((-2099.5296741846296), (Vector<Euclidean3D>) vector3D1);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D3 = line0.getDirection();
      Vector3D vector3D4 = vector3D0.add((-474.3058947113), (Vector<Euclidean3D>) vector3D2);
      Vector3D vector3D5 = line0.pointAt(113.48485665511);
      Line line1 = new Line(vector3D2, vector3D3);
      Line line2 = new Line(vector3D5, vector3D4);
      Vector3D vector3D6 = line2.closestPoint(line1);
      assertEquals(2.1684210982561744E-19, vector3D6.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2099.5296741846296), (-2099.5296741846296));
      Vector3D vector3D1 = new Vector3D((-2099.5296741846296), vector3D0, (-474.3058947113), vector3D0);
      Vector3D vector3D2 = vector3D0.add((-2099.5296741846296), (Vector<Euclidean3D>) vector3D1);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D2, vector3D1);
      double double0 = line0.distance(line1);
      assertEquals(1.3720877051196356E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2099.5296741846296), (-2099.5296741846296));
      Vector3D vector3D1 = new Vector3D((-2099.5296741846296), vector3D0, (-474.3058947113), vector3D0);
      Vector3D vector3D2 = vector3D0.add((-2099.5296741846296), (Vector<Euclidean3D>) vector3D1);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D2, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = new Vector3D((-1395.679), vector3D0, (-1395.679), vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Line line0 = null;
//      try {
        line0 = new Line(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals((-2099.193126031871), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2099.5296741846296), (-2099.5296741846296));
      Vector3D vector3D1 = new Vector3D((-2099.5296741846296), vector3D0, (-474.3058947113), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = new Vector1D(0.07692307692307693);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals((-0.945781586646659), vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, (-1108.10595), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(7.03823343174356E-14, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      assertFalse(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1333.196939, 1.0E-10, 3220.41);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.8535047655551474, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2099.193126031871), vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = line0.revert();
      Vector3D vector3D2 = line1.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }
}
