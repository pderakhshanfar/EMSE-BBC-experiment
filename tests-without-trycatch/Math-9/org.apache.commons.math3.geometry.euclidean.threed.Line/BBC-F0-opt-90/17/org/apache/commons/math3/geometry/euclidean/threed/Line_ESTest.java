/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 13:18:18 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      Vector3D vector3D1 = line0.intersection(line1);
      assertNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      double double0 = line1.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = new Vector3D(0.16666666666745392, 0.16666666666745392, 0.16666666666745392);
      Vector3D vector3D2 = new Vector3D(0.16666666666745392, vector3D1, 2.902128077406607E-17, vector3D1);
      Line line0 = new Line(vector3D1, vector3D2);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals((-1.0), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, vector3D1, 0.0, vector3D1);
      Line line0 = new Line(vector3D2, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-281.713), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(Double.NaN, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = new Vector1D(0.7656121134424927);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals((-0.7656121134424927), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(1.0, vector3D2.getX(), 0.01);
      assertEquals(1.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 1538.30216);
      Vector3D vector3D1 = new Vector3D(726.46, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = new Vector1D(726.46);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals((-640.103539229229), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1475.98754, 1475.98754);
      Vector3D vector3D1 = new Vector3D(0.5861619082498803, vector3D0, 20.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3266.6882604110724, 3266.6882604110724, (-1660.48312064995));
      Vector3D vector3D1 = new Vector3D((-1660.48312064995), (-1673.5957337692616));
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt((-649.95));
      assertNotSame(vector3D1, vector3D0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(3.141592653489793);
      assertEquals(3.141592653489793, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt((-226.868));
      assertEquals((-160.91990123422966), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.554017678115498), (-1.554017678115498));
      Vector3D vector3D1 = new Vector3D((-1.554017678115498), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(3.8972384625432803E-17, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-5.544135673209542), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals(2.5863138789624224E-16, vector3D2.getX(), 0.01);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-0.5), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(994.7629, vector3D1);
      Line line0 = new Line(vector3D0, vector3D2);
      Vector3D vector3D3 = line0.getOrigin();
      assertEquals(0.0, vector3D3.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-5.858835195238109), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(5.421340765991258E-32, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals((-0.7853981633974482), vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.0), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-281.713), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.7071067811865475, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 849.0997455);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 2349.4524232365566, vector3D0, 1331.47275, vector3D0, (-1.0), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-1.000000000000881), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-14.66611258995211), (-14.66611258995211));
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D0, vector3D1);
      double double0 = line1.distance(line0);
      assertEquals(2.902128077406607E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 1.0E-10, vector3D0, 51.8873806, vector3D0, 1.1879176961030121E-16, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(5.921790607737114E-29, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 1538.30216);
      Vector3D vector3D1 = new Vector3D(726.46, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals((-5.506182134124218E-14), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals((-0.5), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-8.0E298), vector3D0, 1.34217729E8, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
//      try { 
        line0.revert();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.reset(vector3D0, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2125.0), 8.0E298);
      Vector3D vector3D1 = new Vector3D((-143.31388), vector3D0, 8.0E298, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo(line0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(755.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.isSimilarTo((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
//      try { 
        line0.intersection((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.getAbscissa((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.distance((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 849.0997455);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 2349.4524232365566, vector3D0, 1331.47275, vector3D0, (-1.0), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
//      try { 
        line0.contains((Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
//      try { 
        line0.closestPoint((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1475.98754, 1475.98754);
      Line line0 = null;
//      try {
        line0 = new Line((Vector3D) null, vector3D0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Line line0 = null;
//      try {
        line0 = new Line((Line) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.reset(vector3D0, vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
//      try { 
        line0.reset(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D0);
      assertEquals(1.2537167179050217E-16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(0.7071067811865475, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.07073719799518585, 0.07073719799518585);
      Vector3D vector3D1 = new Vector3D(0.07073719799518585, vector3D0, 0.07073719799518585, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(7.786572984128614E-18, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = new Vector3D((-77.0), vector3D1);
      Vector3D vector3D3 = new Vector3D((-77.0), vector3D0);
      Line line0 = new Line(vector3D3, vector3D2);
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Line line0 = null;
//      try {
        line0 = new Line(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-14.66611258995211), (-14.66611258995211));
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-0.9652304389443631), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(1.0E-10);
      assertEquals(0.49999999992928934, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.7853981633974482, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      assertNotSame(line1, line0);
  }
}
