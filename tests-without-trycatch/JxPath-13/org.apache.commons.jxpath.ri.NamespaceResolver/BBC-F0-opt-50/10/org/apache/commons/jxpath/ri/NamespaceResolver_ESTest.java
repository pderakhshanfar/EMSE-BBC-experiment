/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 06:21:39 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("Cannot register namespaces on a sealed NamespaceResolver");
      namespaceResolver0.registerNamespace("Cannot register namespaces on a sealed NamespaceResolver", "");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getPrefix("");
      assertNotNull(string0);
      assertEquals("Cannot register namespaces on a sealed NamespaceResolver", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace("", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespaceResolver0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("\".&\"SG0", "\".&\"SG0");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("Y|/_W8s\", 1=&U<'d");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: '\".&\"SG0:\".&\"SG0'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      namespaceResolver0.reverseMap = hashMap0;
      Integer integer0 = new Integer(36);
      hashMap0.put((String) null, integer0);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix((String) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getNamespaceURI("lib");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      namespaceResolver0.namespaceMap = hashMap0;
      hashMap0.put("qgi,N", namespaceResolver0.namespaceMap);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getNamespaceURI("qgi,N");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName("m?ph?0@Y9J7");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "<<unknown namespace>>");
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "m?ph?0@Y9J7", locale0);
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(nodePointer0);
      JXPathContext jXPathContext2 = JXPathContext.newContext(jXPathContext1, (Object) qName0);
      assertFalse(jXPathContext2.equals((Object)jXPathContext0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      namespaceResolver1.reverseMap = hashMap0;
      // Undeclared exception!
//      try { 
        namespaceResolver1.getPrefix("lib");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("jv\"ZV}tKvvTyr+>)9", "");
      Locale locale0 = new Locale("", "", "jv\"ZV}tKvvTyr+>)9");
      Object object0 = new Object();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, object0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<List<NamespaceResolver>, AbstractMap.SimpleEntry<Object, Integer>> hashMap0 = new HashMap<List<NamespaceResolver>, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedList<NamespaceResolver> linkedList0 = new LinkedList<NamespaceResolver>();
      Integer integer0 = new Integer(36);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(hashMap0, integer0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0);
      hashMap0.put(linkedList0, abstractMap_SimpleEntry1);
      namespaceResolver0.namespaceMap = hashMap0;
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, locale0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("<<unknown namespace>>");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("jv\"ZV}tKvvTyr+>)9", "");
      Locale locale0 = new Locale("", "", "jv\"ZV}tKvvTyr+>)9");
      Object object0 = new Object();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, object0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.getPrefix("<<unknown namespace>>");
      String string0 = namespaceResolver0.getPrefix("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      String string0 = namespaceResolver0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("org.apache.commons.jxpath.JXPathInvalidSyntaxException", "org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      String string0 = namespaceResolver0.getNamespaceURI("org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("oD.`]jV", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      VariablePointer variablePointer1 = (VariablePointer)namespaceResolver0.getNamespaceContextPointer();
      assertNull(variablePointer1.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace("Cannot remove an object that is not some other object's property or a collection element", "Cannot remove an object that is not some other object's property or a collection element");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Cannot register namespaces on a sealed NamespaceResolver
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, locale0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertFalse(namespaceResolver1.isSealed());
      assertNotNull(namespaceResolver1);
  }
}
