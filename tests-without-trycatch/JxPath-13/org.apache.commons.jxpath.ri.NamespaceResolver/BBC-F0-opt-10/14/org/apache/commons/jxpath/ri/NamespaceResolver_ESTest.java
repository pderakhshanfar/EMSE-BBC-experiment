/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 00:22:39 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      Integer integer0 = new Integer(1744);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      namespaceResolver0.registerNamespace("", "oXE+");
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("@7<vWB[Ip!U(=f", "\" could not be added as a child of \"");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) variables0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getPrefix("oXE+");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "<<unknown namespace>>");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("<<unknown namespace>>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace("Cannot register namespaces on a sealed NamespaceResolver", "Cannot register namespaces on a sealed NamespaceResolver");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      HashMap<AbstractMap.SimpleEntry<Object, NamespaceResolver>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, NamespaceResolver>, Object>();
      namespaceResolver1.namespaceMap = hashMap0;
      AbstractMap.SimpleEntry<Object, NamespaceResolver> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, NamespaceResolver>(hashMap0, namespaceResolver0);
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      QName qName0 = new QName("oitc0VOOR.>9", "oitc0VOOR.>9");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver1.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
//      try { 
        namespaceResolver1.getPrefix("%Tw} YiCGty-.h");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      Integer integer0 = new Integer(1744);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("=D#Fn).]][(", "");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("org.apache.commons.jxpath.ri.NamespaceResolver");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: '=D#Fn).]][(:'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      HashMap<Object, NamespaceResolver> hashMap0 = new HashMap<Object, NamespaceResolver>();
      Integer integer0 = new Integer(1744);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("nX75jDU,|NS>HT7p'g", "nX75jDU,|NS>HT7p'g");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) null);
      hashMap0.put(namespaceResolver0, (NamespaceResolver) null);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.namespaceMap = hashMap0;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix((String) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getNamespaceURI("+bD");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      HashMap<Object, NamespaceResolver> hashMap0 = new HashMap<Object, NamespaceResolver>();
      hashMap0.put((Object) null, namespaceResolver0);
      namespaceResolver0.namespaceMap = hashMap0;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getNamespaceURI((String) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.seal();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      namespaceResolver1.reverseMap = hashMap0;
      // Undeclared exception!
//      try { 
        namespaceResolver1.getPrefix("java.util.concurrent.atomic.AtomicLong");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Object, NamespaceResolver> hashMap0 = new HashMap<Object, NamespaceResolver>();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      namespaceResolver0.registerNamespace("Cannot register namespaces on a sealed NamespaceResolver", "y");
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("y", "=D#Fn).]][(");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      variablePointer0.createPath(jXPathContext0, (Object) hashMap0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      String string0 = namespaceResolver0.getPrefix("y");
      assertNotNull(string0);
      assertEquals("Cannot register namespaces on a sealed NamespaceResolver", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      Integer integer0 = new Integer(1744);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("@7<vWB[Ip!U(=f", "\" could not be added as a child of \"");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) variables0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.getPrefix("0`S[hOy;\"@");
      String string0 = namespaceResolver0.getPrefix("oXE+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("y", "=D#Fn).]][(");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      String string0 = namespaceResolver0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      Integer integer0 = new Integer(1744);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("@7<vWB[Ip!U(=f", "\" could not be added as a child of \"");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      VariablePointer variablePointer1 = (VariablePointer)namespaceResolver0.getNamespaceContextPointer();
      assertTrue(variablePointer1.isActual());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace("", "PBA-}?t$TB\"BkpP");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Cannot register namespaces on a sealed NamespaceResolver
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertNotNull(namespaceResolver1);
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertFalse(namespaceResolver1.isSealed());
  }
}
