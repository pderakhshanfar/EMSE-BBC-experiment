/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 05:41:47 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.setNamespaceContextPointer((NodePointer) null);
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("<E,Omzl23FPZ%-9w");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      namespaceResolver0.registerNamespace("D^Q\"/#(", "");
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("D^Q\"/#(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("B/<l", "");
      String string0 = namespaceResolver0.getNamespaceURI("B/<l");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace("after: '", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<NamespaceResolver, AbstractMap.SimpleImmutableEntry<Object, Locale>> hashMap0 = new HashMap<NamespaceResolver, AbstractMap.SimpleImmutableEntry<Object, Locale>>();
      namespaceResolver0.namespaceMap = hashMap0;
      QName qName0 = new QName("<E,Omzl23FPZ%-9w");
      Locale locale0 = Locale.CHINESE;
      AbstractMap.SimpleImmutableEntry<Object, Locale> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Locale>(hashMap0, locale0);
      hashMap0.put(namespaceResolver0, abstractMap_SimpleImmutableEntry0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("<E,Omzl23FPZ%-9w");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer1 = new VariablePointer(variables0, qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer1;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: '<E,Omzl23FPZ%-9w'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<NamespaceResolver, Integer> hashMap0 = new HashMap<NamespaceResolver, Integer>();
      namespaceResolver0.reverseMap = hashMap0;
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      namespaceResolver0.reverseMap = hashMap1;
      hashMap1.put("", namespaceResolver0);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Object, NamespaceResolver> hashMap0 = new HashMap<Object, NamespaceResolver>();
      namespaceResolver0.namespaceMap = hashMap0;
      hashMap0.put("", namespaceResolver0);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getNamespaceURI("");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.seal();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(21, 1.0F);
      namespaceResolver1.reverseMap = hashMap0;
      // Undeclared exception!
//      try { 
        namespaceResolver1.getPrefix("\"comment\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("<E,Omzl23FPZ%-9w");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("<E,Omzl23FPZ%-9w");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      namespaceResolver0.getPrefix("");
      String string0 = namespaceResolver0.getPrefix("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("U");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("<E,Omzl23FPZ%-9w");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      String string0 = namespaceResolver0.getNamespaceURI("org.apache.commons.jxpath.ri.NamespaceResolver");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "<E,Omzl23FPZ%-9w");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("<E,Omzl23FPZ%-9w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("<E,Omzl23FPZ%-9w");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      VariablePointer variablePointer1 = (VariablePointer)namespaceResolver0.getNamespaceContextPointer();
      assertFalse(variablePointer1.isAttribute());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace("rPH @NXY=$XE8", "");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Cannot register namespaces on a sealed NamespaceResolver
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      namespaceResolver1.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver1.getNamespaceURI("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }
}
