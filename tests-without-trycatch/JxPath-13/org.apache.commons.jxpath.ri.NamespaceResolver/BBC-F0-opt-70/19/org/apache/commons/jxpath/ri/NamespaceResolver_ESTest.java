/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 00:36:32 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "TJtvJ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.pointer = nodePointer0;
      namespaceResolver0.registerNamespace("_57=D9S$", "");
      String string0 = namespaceResolver0.getPrefix("");
      assertNotNull(string0);
      assertEquals("_57=D9S$", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("s(KP0=", "org.apache.commons.jxpath.ri.compiler.NodeTypeTest");
      String string0 = namespaceResolver0.getNamespaceURI("s(KP0=");
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTypeTest", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      namespaceResolver0.namespaceMap = hashMap0;
      QName qName0 = new QName("5uWu");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      hashMap0.put("5uWu", namespaceResolver0.namespaceMap);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("5uWu");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("mO+j}$2kx/Hn;1a6zz");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "TJtvJ");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix("space");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: ':TJtvJ'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      namespaceResolver0.reverseMap = hashMap0;
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      namespaceResolver0.reverseMap = hashMap1;
      HashMap<Object, AbstractMap.SimpleEntry<String, Object>> hashMap2 = new HashMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, namespaceResolver0);
      hashMap2.put((Object) null, abstractMap_SimpleEntry0);
      namespaceResolver0.reverseMap = hashMap2;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getPrefix((String) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.AbstractMap$SimpleEntry cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getNamespaceURI("?");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, NamespaceResolver> hashMap0 = new HashMap<String, NamespaceResolver>();
      hashMap0.put("T", namespaceResolver0);
      namespaceResolver0.namespaceMap = hashMap0;
      // Undeclared exception!
//      try { 
        namespaceResolver0.getNamespaceURI("T");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.seal();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "TJtvJ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.pointer = nodePointer0;
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.setNamespaceContextPointer(namespaceResolver0.pointer);
      String string0 = namespaceResolver1.getPrefix("FdZ1o");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "TJtvJ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.pointer = nodePointer0;
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("Vwe%XbbprNb~%Z6$T2");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      namespaceResolver0.pointer = nodePointer0;
      namespaceResolver0.getPrefix("Cannot register namespaces on a sealed NamespaceResolver");
      String string0 = namespaceResolver0.getPrefix("Cannot register namespaces on a sealed NamespaceResolver");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("hf_J");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("Vwe%XbbprNb~%Z6$T2");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      namespaceResolver0.pointer = nodePointer0;
      String string0 = namespaceResolver0.getNamespaceURI("1(McXYWx :l&5");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "TJtvJ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.pointer = nodePointer0;
      BeanPointer beanPointer0 = (BeanPointer)namespaceResolver0.getNamespaceContextPointer();
      assertFalse(beanPointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
//      try { 
        namespaceResolver0.registerNamespace((String) null, "gO3v]");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Cannot register namespaces on a sealed NamespaceResolver
//         //
//         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertNotNull(namespaceResolver1);
      assertFalse(namespaceResolver1.isSealed());
  }
}
