/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:49:08 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.util.Date;
import java.util.Locale;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("W|,z", " but the series already contains an observation", "W|,z");
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("W|,z", timePeriodValues0.getRangeDescription());
      assertEquals(" but the series already contains an observation", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0, zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "W|,z", (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("W|,z", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 10);
      timePeriodValues1.add((TimePeriod) minute0, (double) 10);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "M;4Nv", "");
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      timePeriodValues0.delete(0, 0);
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete(2485, 2485);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2485, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate(0, 0, 999, (-943), 0, 999);
      Week week0 = new Week(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0, zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "W|,z", (String) null);
      timePeriodValues0.setRangeDescription("");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("W|,z", timePeriodValues0.getDomainDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) null);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0, zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "W|,z", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("W|,z", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("Value", string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) null);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      MockDate mockDate0 = new MockDate((-1914), (-2147483624), 2295, (-1914), 999, 2295);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) null);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate(0, 3398, 999, (-943), 3398, 999);
      Week week0 = new Week(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) integer0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate(3398, 0, 3398, 3398, 999, 3398);
      Week week0 = new Week(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 10);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-499L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(regularTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (-776.211));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (double) (-499L));
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate((-943), 3398, 999, 999, 999);
      Week week0 = new Week(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1913, (-489), 1913);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "X-value already exists.", (String) null);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) integer0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "0Y2", "a=@}u%%tEekT.Kl");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("a=@}u%%tEekT.Kl", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("0Y2", string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "", ",");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(",", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 10);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2485, 633);
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate(3398, 0, 3398, 3398, 999, 3398);
      Week week0 = new Week(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      timePeriodValues0.createCopy(53, (-943));
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate((-943), 3398, 999, 999, 999);
      Week week0 = new Week(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      timePeriodValues0.createCopy(53, (-943));
      assertEquals(1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("A;)p&HIS6F)");
      Long long0 = new Long(1L);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update((-45), long0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue((-1064));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "M;4Nv", "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod((-320));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0, zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "W|,z", (String) null);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem((-1935));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete((-1), 304);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "M;4Nv", "");
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy(0, 152);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 10);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy((-1), 29);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate(0, 3398, 999, (-943), 3398, 999);
      Week week0 = new Week(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (double) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 10);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, (String) null, " FUq");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(" FUq", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem(121);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 121, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "M;4Nv", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("M;4Nv", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-499L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 999);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.update(0, 0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-165), 0);
      timePeriodValues1.add((TimePeriod) millisecond0, (Number) millisecond0.LAST_MILLISECOND_IN_SECOND);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.setRangeDescription("org.jfree.data.time.Hour");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("org.jfree.data.time.Hour", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "`v2k`6`)c~te)", "jla~dxx(");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(week0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("jla~dxx(", timePeriodValues0.getRangeDescription());
      assertEquals("`v2k`6`)c~te)", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      Object object0 = timePeriodValues0.clone();
      assertTrue(object0.equals((Object)timePeriodValues0));
      
      timePeriodValues0.setDescription("Range");
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertFalse(object0.equals((Object)timePeriodValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getStart();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "", ",");
      boolean boolean0 = timePeriodValues0.equals(date0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertFalse(boolean0);
      assertEquals(",", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      timePeriodValues0.delete(1917, (-2753));
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-499L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(regularTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (-776.211));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (double) (-499L));
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriodValue) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null item not allowed.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValues", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update(0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-499L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-499L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) millisecond0.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      
      MockDate mockDate0 = new MockDate(1797L);
      Minute minute0 = new Minute(mockDate0);
      timePeriodValues0.add((TimePeriod) minute0, (Number) millisecond0.LAST_MILLISECOND_IN_SECOND);
      timePeriodValues0.add((TimePeriod) minute0, (double) 1797L);
      assertEquals(1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Week week0 = new Week(315, 315);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "jla~dxx(", "jla~dxx(");
      timePeriodValues0.setDomainDescription("vv=zMg!8seZLs");
      assertEquals("vv=zMg!8seZLs", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
  }
}
