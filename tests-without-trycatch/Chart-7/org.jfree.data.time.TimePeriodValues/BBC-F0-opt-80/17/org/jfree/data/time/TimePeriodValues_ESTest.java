/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:40:08 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.math.BigInteger;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.Chronology;
import java.time.chrono.MinguoDate;
import java.util.Date;
import javax.swing.JLayeredPane;
import javax.swing.plaf.metal.MetalComboBoxUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(717L, 0L);
      Date date0 = Date.from(instant0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "o`/K2p", "^E(");
      timePeriodValues0.hashCode();
      assertEquals("o`/K2p", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("^E(", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J");
      Minute minute0 = new Minute();
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("%Z", "%Z", "%Z");
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete(0, 3738);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "Failed to clone.", "Failed to clone.");
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete(4257, 4257);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 4257, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      MockDate mockDate0 = new MockDate(1124L);
      Second second0 = new Second(mockDate0, hour0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "Failed to clone.", "Failed to clone.");
      timePeriodValues0.setDomainDescription(".9FDEj$ 7L9t%13>m'J");
      assertEquals(".9FDEj$ 7L9t%13>m'J", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.update(0, 23);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timePeriodValues0.add((TimePeriod) hour0, (Number) bigInteger0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, (String) null, "");
      BigInteger bigInteger0 = BigInteger.TEN;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "");
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Day day0 = new Day(mockDate0);
      Hour hour0 = new Hour(0, day0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, "", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      MockDate mockDate0 = new MockDate(1124L);
      Second second0 = new Second(mockDate0, hour0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "");
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2562, 2562, 2520, 338, 2068, 1872);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(regularTimePeriod0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 1.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, (-1.0));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "Failed to clone.", "Failed to clone.");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(52, minute0);
      timePeriodValues0.add((TimePeriod) second0, 1291.22048807636);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, 0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, 1.0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      MockDate mockDate0 = new MockDate(23, 23, (-2904));
      Month month0 = new Month(mockDate0);
      timePeriodValues0.add((TimePeriod) month0, (Number) 23);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "CrlN5LB`zJ", "CrlN5LB`zJ");
      MockDate mockDate0 = new MockDate((-2204), (-2204), (-2204), (-118), (-1338), (-1297));
      Week week0 = new Week(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (double) 53);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (double) 0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "");
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      MockDate mockDate0 = new MockDate(23, 23, (-2904));
      Month month0 = new Month(mockDate0);
      timePeriodValues0.add((TimePeriod) month0, (Number) 23);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-98L));
      Quarter quarter0 = new Quarter(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "gTtMaW", "gTtMaW");
      timePeriodValues0.getItemCount();
      assertEquals("gTtMaW", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("gTtMaW", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2562, 2562, 2520, 338, 2068, 1872);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 1.0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, (String) null, "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "CrlN5LB`zJ", "CrlN5LB`zJ");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("CrlN5LB`zJ", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("CrlN5LB`zJ", string0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "CrlN5LB`zJ", "CrlN5LB`zJ");
      MockDate mockDate0 = new MockDate((-2204), (-2204), (-2204), (-118), (-1338), (-1297));
      Week week0 = new Week(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (double) 53);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>mJ");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(5278, 1);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(13);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update((-1265), integer0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
      timePeriodValues0.addPropertyChangeListener(propertyChangeListener0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.setDomainDescription(">Q");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JComboBox
//         //
//         verifyException("javax.swing.plaf.basic.BasicComboBoxUI$Handler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      MinguoDate minguoDate0 = MockMinguoDate.now((ZoneId) zoneOffset0);
      Chronology chronology0 = Chronology.from(minguoDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(chronology0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "|&J9`?{ddU]=kvR]", "|&J9`?{ddU]=kvR]");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod((-2448));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "JPajKA`\"K!z,X#q", ".9FDEj$ 7L9t%13>m'J");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem((-3679));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      MinguoDate minguoDate0 = MockMinguoDate.now((ZoneId) zoneOffset0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minguoDate0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete((-1), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "");
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy(0, 23);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "JPajKA`\"K!z,X#q", ".9FDEj$ 7L9t%13>m'J");
      timePeriodValues0.add((TimePeriod) minute0, (Number) 59);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy((-1), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      MockDate mockDate0 = new MockDate(23, 23, (-2904));
      Month month0 = new Month(mockDate0);
      timePeriodValues0.add((TimePeriod) month0, (Number) 23);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      MockDate mockDate0 = new MockDate(23, 23, (-2904));
      Month month0 = new Month(mockDate0);
      Year year0 = month0.getYear();
      timePeriodValues0.add((TimePeriod) month0, (Number) 23);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, (-2904));
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (double) (-2904));
      // Undeclared exception!
//      try { 
        timePeriodValues1.add(timePeriodValue0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>mJ");
      Double double0 = new Double(1);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) double0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) (-1), (double) (-1));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, 4548.225925576);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "", "=)7Hu2C^VBdy|");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(2369, year0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "", "Null item not allowed.");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Null item not allowed.", timePeriodValues0.getRangeDescription());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "CrlN5LB`zJ", "CrlN5LB`zJ");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(0, second0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "AKmxqQ!r7C3&;>D!", "AKmxqQ!r7C3&;>D!");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("AKmxqQ!r7C3&;>D!", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("AKmxqQ!r7C3&;>D!", string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Day day0 = new Day(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(23, 23);
      timePeriodValues1.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(23, 14);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "JPajKA`\"K!z,X#q", ".9FDEj$ 7L9t%13>m'J");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(minute0, "JPajKA`\"K!z,X#q", "q*");
      TimePeriodValues timePeriodValues2 = timePeriodValues1.createCopy(1367, 59);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues2);
      assertTrue(timePeriodValues2.equals((Object)timePeriodValues1));
      assertEquals((-1), timePeriodValues2.getMinMiddleIndex());
      assertEquals("JPajKA`\"K!z,X#q", timePeriodValues2.getDomainDescription());
      assertEquals((-1), timePeriodValues2.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues2.getMinStartIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues2.getMaxStartIndex());
      assertEquals((-1), timePeriodValues2.getMaxEndIndex());
      assertNotSame(timePeriodValues2, timePeriodValues1);
      assertEquals((-1), timePeriodValues2.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Value", ")B");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(week0, ".9FDEj$ 7L9t%13>m'J", "Value");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals(".9FDEj$ 7L9t%13>m'J", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals(")B", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "JPajKA`\"K!z,X#q", ".9FDEj$ 7L9t%13>m'J");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(mockDate0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("JPajKA`\"K!z,X#q", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals(".9FDEj$ 7L9t%13>m'J", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, (String) null, "");
      boolean boolean0 = timePeriodValues0.equals((Object) null);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertTrue(boolean0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      MockDate mockDate0 = new MockDate(23, 23, (-2904));
      Month month0 = new Month(mockDate0);
      timePeriodValues0.add((TimePeriod) month0, (Number) 23);
      timePeriodValues0.delete(2129, 0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      MockDate mockDate0 = new MockDate(23, 23, (-2904));
      Month month0 = new Month(mockDate0);
      timePeriodValues0.add((TimePeriod) month0, (Number) 23);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, (-2904));
      // Undeclared exception!
//      try { 
        timePeriodValues1.add((TimePeriod) month0, (double) 2129);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      MockDate mockDate0 = new MockDate(1124L);
      Second second0 = new Second(mockDate0, hour0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.createCopy(59, 0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "JPajKA`\"K!z,X#q", ".9FDEj$ 7L9t%13>m'J");
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriodValue) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null item not allowed.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValues", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, (String) null, "");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update(0, 23);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, (String) null, "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(".9FDEj$ 7L9t%13>m'J", "Failed to clone.", "Failed to clone.");
      timePeriodValues0.setRangeDescription("Failed to clone.");
      assertEquals("Failed to clone.", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Failed to clone.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, (String) null, "");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
  }
}
