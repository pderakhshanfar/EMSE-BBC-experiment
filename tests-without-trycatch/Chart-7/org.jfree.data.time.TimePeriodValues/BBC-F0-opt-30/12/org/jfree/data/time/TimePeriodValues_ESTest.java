/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:08:31 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.SimpleTimeZone;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-1), 4);
      timePeriodValues1.add((TimePeriod) quarter0, (Number) 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-438L), (-438L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "Unrecognised rowKey: ", "jd#>=8]b");
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) bigInteger0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete(0, 2080);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(826, 826, 826);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(91, "_|$kJWqCv");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, (String) null, "\u0005K*");
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete((-1), (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockDate mockDate0 = new MockDate(0, 0, 0, 3123, 1012);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Float float0 = new Float(0.0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      Double double0 = new Double((-377.47331784208));
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) float0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) double0);
      assertEquals(1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      MockDate mockDate0 = new MockDate(4, (-730), 29, 29, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 4);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, "$Jb@6}STY(K8u@7`ci", (String) null);
      timePeriodValues0.setRangeDescription((String) null);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "Invalid bounds", "Invalid bounds");
      timePeriodValues0.setDomainDescription("Invalid bounds");
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Invalid bounds", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Invalid bounds", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 1);
      timePeriodValues0.update(0, 1);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      Quarter quarter0 = new Quarter(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, "$Jb@6}STY(K8u@7`ci", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-439), "");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "\u0005K*", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("\u0005K*", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, 3429.02772995167);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, (String) null, (String) null);
      timePeriodValues0.add((TimePeriod) quarter0, 0.0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockDate mockDate0 = new MockDate(0, 0, 0, 3123, 1012);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      Double double0 = new Double((-377.47331784208));
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) double0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, 3429.02772995167);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockDate mockDate0 = new MockDate(0, 0, 0, 3123, 1012);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Float float0 = new Float(0.0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) float0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-438L), (-438L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "Unrecognised rowKey: ", "jd#>=8]b");
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) bigInteger0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) bigInteger0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1900, "+");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "\u0005K*");
      timePeriodValues0.add((TimePeriod) year0, 0.0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) bigInteger0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(826, 826, 826);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(91, "_|$kJWqCv");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, (String) null, "\u0005K*");
      timePeriodValues0.add((TimePeriod) year0, (double) 91);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) bigInteger0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-438L), (-438L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "Unrecognised rowKey: ", "jd#>=8]b");
      Float float0 = new Float(0.0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) float0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      timePeriodValues0.setDomainDescription((String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-438L), (-438L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "Unrecognised rowKey: ", "jd#>=8]b");
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) bigInteger0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(826, 826, 826);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(91, "_|$kJWqCv");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, (String) null, "\u0005K*");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(37, 445);
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("\u0005K*", timePeriodValues1.getRangeDescription());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockDate mockDate0 = new MockDate(0, 0, 0, 3123, 1012);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Float float0 = new Float(0.0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) float0);
      timePeriodValues0.createCopy(1281, 0);
      assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update(0, 4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timePeriodValues0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.setRangeDescription("");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JSpinner
//         //
//         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("O~UW#dgSJmfRx;*5");
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timePeriodValues0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.setDomainDescription("O~UW#dgSJmfRx;*5");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JSpinner
//         //
//         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue((-1740));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "0Q\"My!=(Tk", "0Q\"My!=(Tk");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem((-964));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(826, 826, 826);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(91, "_|$kJWqCv");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, (String) null, "\u0005K*");
      timePeriodValues0.add((TimePeriod) year0, (double) 91);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy(0, 1483);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-438L), (-438L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "Unrecognised rowKey: ", "jd#>=8]b");
      Float float0 = new Float(0.0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) float0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy((-740), (-5));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) bigInteger0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(3123, 1012);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, (double) 1281);
      // Undeclared exception!
//      try { 
        timePeriodValues1.add(timePeriodValue0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) float0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) bigInteger0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1281, 0);
      // Undeclared exception!
//      try { 
        timePeriodValues1.add((TimePeriod) regularTimePeriod0, 1.0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "eQZH");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "\u0005K*");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("\u0005K*", string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("+", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "eQZH");
      timePeriodValues0.hashCode();
      assertEquals("eQZH", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("+", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 1);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(4, 1);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, 0.0);
      timePeriodValues1.add(timePeriodValue0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues1.equals(object0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1900, "+");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "eQZH");
      timePeriodValues0.add((TimePeriod) year0, 0.0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, 3429.02772995167);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(quarter0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "\u0005K*");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues("\u0005K*");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals("\u0005K*", timePeriodValues0.getRangeDescription());
      assertEquals("+", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-438L), (-438L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "Unrecognised rowKey: ", "jd#>=8]b");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues("jd#>=8]b");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("jd#>=8]b", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertFalse(boolean0);
      assertEquals("Unrecognised rowKey: ", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      boolean boolean0 = timePeriodValues0.equals((Object) null);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "eQZH");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertTrue(boolean0);
      assertEquals("eQZH", timePeriodValues0.getRangeDescription());
      assertEquals("+", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1900, "+");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "\u0005K*");
      timePeriodValues0.add((TimePeriod) year0, 0.0);
      timePeriodValues0.delete(0, (-439));
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      MockDate mockDate0 = new MockDate(4, (-730), 29, 29, (-730));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 4);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriodValue) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null item not allowed.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValues", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, (String) null, (String) null);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update((-1950), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "eQZH");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("eQZH", timePeriodValues0.getRangeDescription());
      assertEquals("+", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "eQZH");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), int0);
      assertEquals("+", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("eQZH", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "eQZH");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals("+", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("eQZH", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.setRangeDescription("");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.setDomainDescription("");
      timePeriodValues0.getDomainDescription();
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\u0005K*", "+", "\u0005K*");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals("\u0005K*", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("+", timePeriodValues0.getDomainDescription());
  }
}
