/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 12:29:10 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.temporal.ChronoField;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, 3993.6);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(millisecond0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'range' argument.");
      Year year0 = new Year(mockDate0, timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.add((TimePeriod) year0, (double) 29);
      timePeriodValues0.delete(0, 0);
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Second second0 = millisecond0.getSecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      MockDate mockDate0 = new MockDate(53, 0, 1196, (-1414), 1652, 9999);
      Second second0 = new Second(mockDate0, week0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 53);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = new Month();
      Date date0 = month0.getEnd();
      Hour hour0 = new Hour(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      timePeriodValues0.add((TimePeriod) hour0, (double) 59);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(59);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      timePeriodValues0.getValue(1);
      assertEquals(1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", (String) null, (String) null);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      
      timePeriodValues0.add((TimePeriod) week0, (double) 0);
      timePeriodValues0.add((TimePeriod) week0, (-1297.072372));
      timePeriodValues0.update(1, 1);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      timePeriodValues0.add((TimePeriod) month0, 2996.01119126);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1456.234258685406, 1558.6715221262527);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleHistogramBin0, (String) null, (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "wU(1", "Vy4j");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("wU(1", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Vy4j", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("6Q =kihCMjEK}nhVU", "org.jfree.data.xy.AbstractXYDataset", "values.length");
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Month month0 = new Month();
      Date date0 = month0.getEnd();
      Hour hour0 = new Hour(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      timePeriodValues0.add((TimePeriod) hour0, (double) 59);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(59);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 85, 663, 663);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "j_@9-$l", "n.2hE,(u$2R:)P*|g");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 0.0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week1 = new Week(date0);
      timePeriodValues0.add((TimePeriod) week1, 0.0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "", "6Q =kihCMjEK}nhVU");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (Number) 1);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Month month0 = new Month();
      Date date0 = month0.getEnd();
      Hour hour0 = new Hour(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      timePeriodValues0.add((TimePeriod) hour0, (double) 59);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(59);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 85, 663, 663);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "j_@9-$l", "n.2hE,(u$2R:)P*|g");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (double) 2679);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      MockDate mockDate0 = new MockDate(53, 0, 1196, (-1414), 1652, 9999);
      Second second0 = new Second(mockDate0, week0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 53);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      timePeriodValues0.add((TimePeriod) minute0, 0.0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      MockDate mockDate0 = new MockDate(53, 0, 2085, (-1407), 1652, 9980);
      Second second0 = new Second(mockDate0, week0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 53);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      timePeriodValues0.add((TimePeriod) minute0, 0.0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      timePeriodValues0.add((TimePeriod) minute0, 0.0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "wU(1", "Vy4j");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("wU(1", string0);
      assertEquals("Vy4j", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(53, 1);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Month month0 = new Month();
      Date date0 = month0.getEnd();
      Hour hour0 = new Hour(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      timePeriodValues0.add((TimePeriod) hour0, (double) 59);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(59);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      timePeriodValues0.createCopy(59, 2);
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, 3993.6);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      timePeriodValues0.createCopy(0, 1);
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-651), "");
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "\"h0^z", "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.update((-494), 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue((-593));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 85, 663, 663);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "j_@9-$l", "n.2hE,(u$2R:)P*|g");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem(4019);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 4019, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Time", (String) null);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete((-1), 2172);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      timePeriodValues0.add((TimePeriod) minute0, 0.0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy((-187), 345);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, "6Q =kihCMjEK}nhVU", (String) null);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 23);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (double) 1155);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy(0, 53);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, (String) null, (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem((-1890));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "aYvI", "");
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("aYvI", timePeriodValues0.getDomainDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Second second0 = millisecond0.getSecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "(T", "(T");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues0.add((TimePeriod) week0, (Number) 53);
      timePeriodValues1.add((TimePeriod) week0, (double) 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "", "");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.add((TimePeriod) week0, (Number) null);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Tme");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-4508), (-4508));
      timePeriodValues0.setRangeDescription("?xb79");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("?xb79", timePeriodValues0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "9 4~Q2cjy)$z<>uJ", (String) null);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(month0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9 4~Q2cjy)$z<>uJ", timePeriodValues0.getDomainDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1155, 1155, 835, 0, 0, 345);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(1155, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues("");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      boolean boolean0 = timePeriodValues0.equals(chronoField0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertTrue(boolean0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'range' argument.");
      Year year0 = new Year(mockDate0, timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete(0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      timePeriodValues0.delete((-16), (-721));
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      MockDate mockDate0 = new MockDate(1);
      Hour hour0 = new Hour(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (Number) 1);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      timePeriodValues0.createCopy(53, (-2246));
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      MockDate mockDate0 = new MockDate((-1), 53, 1, 1, 1);
      Quarter quarter0 = new Quarter(mockDate0);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "", "z");
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriodValue) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null item not allowed.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValues", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update(0, 59);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "(T", "(T");
      timePeriodValues0.setRangeDescription("(T");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("(T", timePeriodValues0.getDomainDescription());
      assertEquals("(T", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Rka]\"*4", (String) null, "");
      timePeriodValues0.setDomainDescription("1");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("1", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
  }
}
