/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:51:36 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.Date;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 0.0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 0.0);
      timePeriodValues0.clone();
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 0.0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(fixedMillisecond0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-1916.7709059));
      timePeriodValues0.delete(0, 0);
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete(0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2315.59);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timePeriodValues0.add(timePeriodValue0);
      Byte byte0 = new Byte((byte)68);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) byte0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-403.24022098), 1072.77);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleHistogramBin0, "", "");
      assertEquals("", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setRangeDescription((String) null);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (-1.0));
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timePeriodValues0.update(0, integer0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) bigInteger0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) bigInteger0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 2468.94838);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("E+{c)#5l3", "E+{c)#5l3", "E+{c)#5l3");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("E+{c)#5l3", string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("E+{c)#5l3", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 0.0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, Double.NaN);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4757L);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, (String) null, (String) null);
      Quarter quarter0 = new Quarter();
      timePeriodValues0.add((TimePeriod) quarter0, 1.0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, Double.NaN);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4757L);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-331.5031292));
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, 1085.108971731439);
      MockDate mockDate0 = new MockDate(0, (-558), (-736), 999, (-669));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, ";L+n&", ";L+n&");
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 0.0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2315.59);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timePeriodValues0.add(timePeriodValue0);
      Byte byte0 = new Byte((byte)68);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) byte0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 2358.0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2315.59);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timePeriodValues0.add(timePeriodValue0);
      Byte byte0 = new Byte((byte)68);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) byte0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((byte)33);
      MockDate mockDate0 = new MockDate(3467L);
      Year year0 = new Year(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (Number) (byte)33);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2315.59);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, 2315.59);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-331.5031292));
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(199, 199, 1);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0, (String) null, (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-2431), (-1560));
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
//      try { 
        timePeriodValues0.update((-1798), integer0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue((-1868));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2075L);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, bigInteger0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(timeSeriesDataItem0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod((-802));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("|8l?");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem((-1958));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((byte)33);
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete((-1635), 2010);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-331.5031292));
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy(193, 3013);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 193, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Second second0 = millisecond0.getSecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, 1085.108971731439);
      MockDate mockDate0 = new MockDate(0, (-558), (-736), 999, (-669));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, ";L+n&", ";L+n&");
      timePeriodValues0.add(timePeriodValue0);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(87, (-558));
      // Undeclared exception!
//      try { 
        timePeriodValues1.add((TimePeriod) second0, (Number) 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 999);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, 1085.108971731439);
      MockDate mockDate0 = new MockDate(0, (-558), (-736), 999, (-669));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, ";L+n&", ";L+n&");
      timePeriodValues0.add(timePeriodValue0);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(87, (-558));
      // Undeclared exception!
//      try { 
        timePeriodValues1.add((TimePeriod) second0, (-1.0));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("y+{cw#uI3", "y+{cw#uI3", "y+{cw#uI3");
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (double) (-5));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "8>mFF+(!aW4", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, 0.0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      
      timePeriodValues0.createCopy(0, 0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-37L), (-37L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (-1.0));
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy((-7), 613);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("E+{c)#5l3", "E+{c)#5l3", "E+{c)#5l3");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("E+{c)#5l3", string0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("E+{c)#5l3", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("E+{c)#5l3", "E+{c)#5l3", "E+{c)#5l3");
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("E+{c)#5l3", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("E+{c)#5l3", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("E+{c)#5l3", "E+{c)#5l3", "E+{c)#5l3");
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("E+{c)#5l3", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(millisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timePeriodValues1.add((TimePeriod) millisecond0, (Number) bigInteger0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      Object object0 = timePeriodValues0.clone();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2315.59);
      timePeriodValues0.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      timePeriodValues1.setRangeDescription((String) null);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertFalse(boolean0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(fixedMillisecond0, "(", "(");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertFalse(boolean0);
      assertEquals("(", timePeriodValues1.getRangeDescription());
      assertEquals("(", timePeriodValues1.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Hour hour0 = new Hour(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(mockDate0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, 1085.108971731439);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, ";L+n&", ";L+n&");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValue0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(";L+n&", timePeriodValues0.getRangeDescription());
      assertEquals(";L+n&", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(boolean0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, 1085.108971731439);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, ";L+n&", ";L+n&");
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.delete(999, (-1));
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2315.59);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, 2315.59);
      timePeriodValues0.createCopy(359, 303);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, 1085.108971731439);
      MockDate mockDate0 = new MockDate(0, (-558), (-736), 999, (-669));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, ";L+n&", ";L+n&");
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(87, (-558));
      // Undeclared exception!
//      try { 
        timePeriodValues1.add(timePeriodValue0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriodValue) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null item not allowed.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValues", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      Float float0 = new Float(0.0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.update(999, float0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 999, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, ";L+n&", ";L+n&");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(";L+n&", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(";L+n&", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2315.59);
      timePeriodValues0.add(timePeriodValue0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-403.24022098), 1072.77);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleHistogramBin0, "", "");
      timePeriodValues0.setDomainDescription("auMsMT");
      assertEquals("auMsMT", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }
}
