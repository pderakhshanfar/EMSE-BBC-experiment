/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:56:46 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.time.LocalDate;
import java.time.temporal.ChronoField;
import java.util.Date;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      Day day0 = new Day(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "HP!A9q{D'`eKfume/", "");
      timePeriodValues0.add((TimePeriod) month0, 0.0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy(0, 1923);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "", "");
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      Object object0 = timePeriodValues0.clone();
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 2158);
      boolean boolean0 = object0.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      Day day0 = new Day(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "HP!A9q{D'`eKfume/", "");
      timePeriodValues0.add((TimePeriod) day0, (-78.069));
      timePeriodValues0.delete(0, 0);
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 1);
      MockDate mockDate0 = new MockDate(400, (-7), 181, 9, 181);
      Year year0 = new Year(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (double) 181);
      timePeriodValues0.add(timePeriodValue0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Unknown data", "Null 'subtask' argument.", "");
      assertEquals("", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setRangeDescription("Null 'subtask' argument.");
      assertEquals("Null 'subtask' argument.", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      Day day0 = new Day(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "HP!A9q{D'`eKfume/", "");
      timePeriodValues0.setDomainDescription("HP!A9q{D'`eKfume/");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("HP!A9q{D'`eKfume/", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-22L));
      timePeriodValue0.setValue((Number) null);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 3494.0);
      timePeriodValues0.add(timePeriodValue0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timePeriodValues0.update(0, bigInteger0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 3494.0);
      timePeriodValues0.add(timePeriodValue0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timePeriodValues0.update(0, bigInteger0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-22L));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "The 'month' argument must be in the range 1 to 12.", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("The 'month' argument must be in the range 1 to 12.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.setRangeDescription("");
      timePeriodValues0.getRangeDescription();
      assertEquals("", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 3494.0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 3494.0);
      timePeriodValues0.add(timePeriodValue0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0, 0L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 3494.0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 3494.0);
      timePeriodValues0.add(timePeriodValue0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0, 0L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-22L));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(4);
      Date date0 = spreadsheetDate0.toDate();
      Second second0 = new Second(date0);
      timePeriodValues0.add((TimePeriod) second0, (double) 2);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (-2758.65201272));
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("3[UK.qrv\"B");
      Week week0 = new Week(608, 608);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (Number) 53);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) week0, 0.0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1204L, 1204L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(localDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) 1204L);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("3[UK.qrv\"B");
      Week week0 = new Week(608, 608);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (Number) 53);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) week0, 0.0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-22L));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("3[UK.qrv\"B");
      Week week0 = new Week(608, 608);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (Number) 53);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) week0, 0.0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-22L));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("w\fK'N");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", string0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.setDomainDescription("");
      timePeriodValues0.getDomainDescription();
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2L, 2L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) 2L);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(52, (-1));
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 3494.0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      // Undeclared exception!
//      try { 
        timePeriodValues0.update((-1731), integer0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timePeriodValues0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.setRangeDescription("'position' out of bounds.");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JSpinner
//         //
//         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod((-982));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Domain", "", "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete((-1037), 1896);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) 0L);
      timePeriodValues0.add(timePeriodValue0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.createCopy((-281), (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(4);
      Date date0 = spreadsheetDate0.toDate();
      Second second0 = new Second(date0);
      timePeriodValues0.add((TimePeriod) second0, (double) 2);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
      // Undeclared exception!
//      try { 
        timePeriodValues0.clone();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(localDate0);
      MockRandom mockRandom0 = new MockRandom(2093);
      BigInteger bigInteger0 = new BigInteger(2093, mockRandom0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, (double) 2);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2, 0);
      // Undeclared exception!
//      try { 
        timePeriodValues1.add((TimePeriod) second0, (double) 2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(localDate0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriod) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "}w5),Wem-S", "Null item not allowed.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
//      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(localDate0, (String) null, (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("3[UK.qrv\"B");
      // Undeclared exception!
//      try { 
        timePeriodValues0.getDataItem(2518);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2518, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(localDate0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), 1051L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (-495.0460831));
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 1);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(localDate0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-233), 1);
      timePeriodValues0.setRangeDescription("");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(simpleTimePeriod0, "", "lbD#tnd`XdY5tRu ");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals("lbD#tnd`XdY5tRu ", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2L, 2L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(chronoField0, "", "");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertFalse(boolean0);
      assertEquals("", timePeriodValues1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-22L));
      boolean boolean0 = timePeriodValues0.equals(timePeriodValue0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertFalse(boolean0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      Day day0 = new Day(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "HP!A9q{D'`eKfume/", "");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("HP!A9q{D'`eKfume/", timePeriodValues0.getDomainDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      Day day0 = new Day(date0, month0.DEFAULT_TIME_ZONE);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "HP!A9q{D'`eKfume/", "");
      // Undeclared exception!
//      try { 
        timePeriodValues0.delete(0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("3[UK.qrv\"B");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (Number) 53);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.delete((-1), (-2147481480));
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 1);
      MockDate mockDate0 = new MockDate(400, (-7), 181, 9, 181);
      Year year0 = new Year(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (double) 181);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(376, (-1005));
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      MockDate mockDate0 = new MockDate(1, 1900, (-1), 1, 3, 2);
      Second second0 = new Second(mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (double) 2);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2, 0);
      // Undeclared exception!
//      try { 
        timePeriodValues1.add((TimePeriod) quarter0, (Number) 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.add((TimePeriodValue) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null item not allowed.
//         //
//         verifyException("org.jfree.data.time.TimePeriodValues", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        timePeriodValues0.update(0, bigInteger0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("3[UK.qrv\"B");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(4, 1);
      timePeriodValues1.add((TimePeriod) quarter0, (Number) 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("3[UK.qrv\"B");
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      // Undeclared exception!
//      try { 
        timePeriodValues0.getValue(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-22L));
      timePeriodValues0.add(timePeriodValue0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = object0.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-22L), (-22L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }
}
