/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:28:17 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream("9|gZd:i;LW(r<h'_");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9|gZd:i;LW(r<h'_");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "9|gZd:i;LW(r<h'_";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SurroundingSpaces:ignored");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) " SurroundingSpaces:ignored";
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("_sD", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8e(L");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.print((Object) null);
      cSVPrinter1.print(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVFormat1.print(charArrayWriter0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2341;
      intArray0[1] = 2341;
      intArray0[2] = 2341;
      intArray0[3] = 57;
      intArray0[4] = 2341;
      intArray0[5] = 2341;
      intArray0[6] = 2341;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 2341, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLTransactionRollbackException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("A8}L");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A8}L");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream("1q{VsI);#bzlzc`]%");
      Integer integer0 = new Integer(90);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.offer(integer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1q{VsI);#bzlzc`]%");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('0');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('J');
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("c`aw5 zfrKIPsi");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      mockFileWriter0.close();
      cSVPrinter0.printComment("w^iqsOM+nov1Oyy9");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4212)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q1qJh]r(v,9JH!{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q1qJh]r(v,9JH!{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter1.println();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockFileWriter0;
      mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "org.apache.commons.csv.ExtendedBufferedReader";
      cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      cSVFormat1.print(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
//      try { 
        cSVPrinter0.printComment("~;");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Z");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('5');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "fYrm(t");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "F^qw_0`_]6");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('5');
      CSVPrinter cSVPrinter3 = cSVFormat3.print(charBuffer0);
      cSVPrinter3.printComment("fYrm(t");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) evoSuiteFile0;
      objectArray0[3] = (Object) "F^qw_0`_]6";
      objectArray0[4] = (Object) evoSuiteFile0;
      objectArray0[5] = (Object) cSVPrinter2;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) cSVPrinter2;
      Object object1 = new Object();
      objectArray0[8] = object1;
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Index for header '%s' is %d but CSVRecord only has %d values!");
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator(',');
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("EOF hilt proesing escape sequence", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("EOF hilt proesing escape sequence");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "QRp6FJV");
      cSVPrinter0.print(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8}\"LI");
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Index for header '%s' is %d but CSVRecord only has %d values!");
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator(',');
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("EOF hilt proesing escape sequence", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("EOF hilt proesing escape sequence");
      Integer integer0 = new Integer(30);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";FsHE%");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8}\"LI");
      cSVFormat0.withNullString(";FsHE%");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Y");
      cSVFormat1.withEscape('1');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object object0 = new Object();
      mockPrintStream0.print('Y');
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.withCommentStart('~');
      MockFile mockFile0 = new MockFile("T@kcdg&", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.println();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('G');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Index for header '%s' is %d but CSVRecord only has %d values!");
      cSVFormat2.withRecordSeparator('G');
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('?');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("Index for header '%s' is %d but CSVRecord only has %d values!");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('G');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Index for header '%s' is %d but CSVRecord only has %d values!");
      cSVFormat2.withRecordSeparator('?');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("Index for header '%s' is %d but CSVRecord only has %d values!");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("!6iWNo=m");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      PrintStream printStream0 = mockPrintStream0.printf("9]*e ", objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('r');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printStream0);
      cSVPrinter0.printComment("9]*e ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-73);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      cSVPrinter0.print(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('T');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) cSVFormat1;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withEscape('X');
      cSVFormat1.withNullString("yTLQ,\"0P4WHm/1u");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVParser$1");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('=');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('b');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVFormat0.withQuoteChar('X');
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      cSVPrinter0.print(lineNumberReader0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("!6iWNo=m");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintStream printStream0 = mockPrintStream0.printf("9]*e ", objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('r');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printStream0);
      cSVPrinter0.printComment("9]*e ");
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(':');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      String[] stringArray0 = new String[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('_');
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      ArrayDeque<DataOutputStream> arrayDeque0 = new ArrayDeque<DataOutputStream>();
      ArrayDeque<DataOutputStream> arrayDeque1 = arrayDeque0.clone();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVParser");
      Locale locale0 = Locale.ENGLISH;
      mockPrintStream0.println((-2424.7217F));
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.apache.commons.csv.CSVParser", (Object[]) stringArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      arrayDeque1.add(dataOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("ao");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVParser$1");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('=');
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object object0 = new Object();
      cSVFormat0.withQuoteChar('y');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "org.apache.commons.csv.CSVParser$1";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat2;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat3);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.getOut();
      cSVPrinter1.print(charset0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ao");
      MockPrintStream mockPrintStream0 = new MockPrintStream("}\"LI");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('=');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("}\"LI");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintStream0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      cSVPrinter1.println();
      cSVPrinter1.print((Object) null);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = ".>(mXW<5m5E{Ad84Fv";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".>(mXW<5m5E{Ad84Fv");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8}\"LI");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('X');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.print(charBuffer0);
      cSVFormat0.withEscape('X');
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ao");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8}\"LI");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('=');
      cSVFormat2.withDelimiter('=');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(10);
      arrayDeque0.offer(integer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      File file0 = MockFile.createTempFile("#%tJLjId=", "!R6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      file0.setReadable(false, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(49);
      arrayDeque0.add(integer0);
      cSVPrinter1.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Z");
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      cSVFormat1.withDelimiter('T');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      MockPrintStream mockPrintStream1 = new MockPrintStream("g<!IXSby1S 8 @x1_5");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Z";
      objectArray0[1] = (Object) cSVFormat0;
      mockPrintStream1.printf("", objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4058);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('V');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat0.withCommentStart('8');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('8');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>(2479);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[3] = (Object) linkedHashSet0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(4058).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "ao";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      MockPrintStream mockPrintStream0 = new MockPrintStream("ao");
      cSVFormat1.withRecordSeparator('S');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ao");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(object0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      char[] charArray0 = new char[24];
      charArray0[0] = '>';
      charArray0[2] = '>';
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" Sny\"P@I}am]2rb");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) outputStreamWriter0;
      objectArray0[2] = (Object) charset0;
      PrintStream printStream0 = mockPrintStream0.printf(" Sny\"P@I}am]2rb", objectArray0);
      cSVFormat2.print(printStream0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(outputStreamWriter0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) " Sny\"P@I}am]2rb";
      objectArray1[1] = object0;
      objectArray1[2] = (Object) outputStreamWriter0;
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = (Object) " Sny\"P@I}am]2rb";
      objectArray1[5] = (Object) charsetEncoder0;
      objectArray1[6] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray1[7] = object2;
//      try { 
        cSVPrinter0.printRecord(objectArray1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.withDelimiter('T');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVFormat3.withCommentStart(']');
      MockPrintStream mockPrintStream1 = new MockPrintStream("g<!IXSby1S 8 @x15");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat2;
      PrintStream printStream0 = mockPrintStream1.printf("g<!IXSby1S 8 @x15", objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(printStream0);
      cSVPrinter1.close();
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      char[] charArray0 = new char[24];
      charArray0[0] = '>';
      charArray0[2] = '`';
      charArray0[3] = '\u0000';
      CSVPrinter cSVPrinter0 = cSVFormat2.print(outputStreamWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) '`';
      objectArray0[5] = (Object) '>';
      objectArray0[6] = (Object) '>';
      objectArray0[7] = (Object) '>';
      objectArray0[8] = (Object) outputStreamWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("6o8DRLh15");
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      cSVFormat0.print(mockPrintStream0);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Byte byte0 = new Byte((byte) (-12));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteBuffer.allocate(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      File file0 = MockFile.createTempFile("#%JLjId=", ";}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Byte byte0 = new Byte((byte) (-19));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Op|/.D3U");
      cSVPrinter0.print(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) sQLTimeoutException0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[4] = (Object) ";}";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "Op|/.D3U";
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('P');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('G');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('G');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("?a`B0AZZ {sB4b{}F>");
      char[] charArray0 = new char[9];
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      charArray0[8] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'G';
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "?a`B0AZZ {sB4b{}F>";
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('b');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('b');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the delimiter cannot be the same ('b')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator('b');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SkipHeaderRecord:");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) byteBuffer0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = object0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVPrinter1;
      objectArray1[1] = (Object) byteBuffer0;
      charBuffer0.append((CharSequence) "", 0, 0);
      objectArray1[2] = (Object) charBuffer0;
      objectArray1[3] = (Object) charBuffer0;
      objectArray1[4] = (Object) printStream0;
      objectArray1[5] = (Object) mockPrintStream0;
      objectArray1[6] = (Object) charBuffer0;
      objectArray1[7] = (Object) cSVPrinter1;
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray1);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4058);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('V');
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) cSVFormat3;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(':');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("8}\"LI");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(':');
      cSVFormat1.withNullString("m]r]HhzYl=7BO;ws");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintStream0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      cSVPrinter1.println();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1653);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1664);
      cSVPrinter1.print(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      mockFileWriter0.close();
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset.defaultCharset();
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
//      try { 
        cSVPrinter1.print(arrayDeque0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('b');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Byte byte0 = new Byte((byte) (-19));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Op|/.D3UF");
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLTimeoutException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      mockFileWriter0.close();
      Character character0 = Character.valueOf('h');
      cSVFormat1.withQuoteChar(character0);
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0, charset0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 31);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      File file0 = MockFile.createTempFile("#%tJLjId=", ";}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      file0.mkdir();
      objectArray0[0] = (Object) ";}";
      objectArray0[1] = (Object) ";}";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("#%tJLjId=");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "kkWF=3Dx.ls";
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "PHi`LV5pzqed");
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      String string1 = "";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      mockFileWriter0.close();
      cSVPrinter0.printComment("w^iqsOM+nov1Oyy9");
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      Byte byte0 = new Byte((byte) (-123));
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
//      try { 
        cSVPrinter1.print("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(40);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('L');
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat4.withCommentStart('@');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>(40);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedHashSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) quote0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ao");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8}\"LI");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('=');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("8}\"LI");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintStream0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      cSVPrinter1.println();
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("ao");
      MockPrintStream mockPrintStream0 = new MockPrintStream("ao");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('T');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(']');
      cSVFormat4.withSkipHeaderRecord(true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) "format";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = object1;
      mockPrintStream0.printf("format", objectArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('p');
      CSVPrinter cSVPrinter1 = cSVFormat5.print(mockPrintStream0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('b');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('y');
      cSVFormat4.withSkipHeaderRecord(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SkipHeaderRecord:");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) charset0;
      objectArray0[2] = (Object) cSVFormat4;
      mockPrintStream0.printf("", objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(mockPrintStream0);
      cSVPrinter1.close();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      File file0 = MockFile.createTempFile("#%JLjId=", ";}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ";}";
      objectArray0[1] = (Object) ";}";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      mockFileWriter0.close();
      Character character0 = Character.valueOf('Y');
      cSVFormat1.withQuoteChar(character0);
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0, charset0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 31);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      Byte byte0 = new Byte((byte)100);
//      try { 
        cSVPrinter0.print(byte0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      MockFile.createTempFile("#%JLjId=", ";}");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      cSVFormat0.withDelimiter('b');
      cSVFormat1.withIgnoreEmptyLines(false);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#%JLjId=");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      cSVFormat0.print(mockPrintStream0);
      cSVFormat1.withRecordSeparator("g");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData1).getColumnCount();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData1).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.printRecords(resultSet1);
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet2).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      File file0 = MockFile.createTempFile("#%tJLjId=", ";}");
      file0.getCanonicalPath();
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      mockFileWriter0.close();
      cSVFormat1.withRecordSeparator("Mvl!o#SWlF2*^#&4qNI");
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "";
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '(';
      charArray0[6] = '>';
      charArray0[7] = '>';
      charArray0[8] = '>';
      outputStreamWriter0.write(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = '>';
      charArray1[1] = '`';
      charArray1[2] = '>';
      charArray1[3] = '>';
      charArray1[4] = '>';
      charArray1[5] = '>';
      charArray1[6] = '>';
      charArray1[7] = '>';
      charArray1[8] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) charsetEncoder0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) '>';
      objectArray0[5] = (Object) '>';
      objectArray0[6] = (Object) charsetEncoder0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) charsetEncoder0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4058);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('V');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('8');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>(2479);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[3] = (Object) linkedHashSet0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printComment("");
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter", "org.apache.commons.csv.CSVPrinter");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.csv.CSVPrinter", "org.apache.commons.csv.CSVPrinter");
      cSVPrinter0.print((Object) null);
      cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(27);
      arrayDeque0.offer(integer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('{');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a\"akU~w5w66O{9";
      stringArray0[1] = "7o5y:e";
      stringArray0[2] = "P";
      stringArray0[3] = "}#UM}-w=ep_zPFuM{";
      stringArray0[4] = "KAS0FR,O~{Q9";
      stringArray0[5] = "y";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat5.withCommentStart('7');
      CSVFormat cSVFormat7 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat8 = cSVFormat7.withQuoteChar('/');
      cSVFormat8.withSkipHeaderRecord(true);
      char[] charArray0 = new char[0];
      CharBuffer.wrap(charArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "y");
      CSVPrinter cSVPrinter0 = cSVFormat6.print(printWriter0);
      HashSet<MockPrintWriter> hashSet0 = new HashSet<MockPrintWriter>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      Object object0 = new Object();
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4058);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('V');
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat0.withCommentStart('8');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>(2479);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) linkedHashSet0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat4;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('{');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a\"akU~w5w66O{9";
      stringArray0[1] = "7o5y:e";
      stringArray0[2] = "P";
      stringArray0[3] = "}#UM}-w=ep_zPFuM{";
      stringArray0[4] = "KAS0FR,O~{Q9";
      stringArray0[5] = "y";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat5.withCommentStart('7');
      CSVFormat cSVFormat7 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat8 = cSVFormat7.withQuoteChar('/');
      cSVFormat8.withSkipHeaderRecord(true);
      char[] charArray0 = new char[0];
      CharBuffer.wrap(charArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "y");
      CSVPrinter cSVPrinter0 = cSVFormat6.print(printWriter0);
      HashSet<MockPrintWriter> hashSet0 = new HashSet<MockPrintWriter>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      mockFileWriter0.close();
      cSVPrinter0.printComment("w^iqsOM+nov1Oyy9");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      mockFileWriter0.close();
      Character character0 = Character.valueOf('Y');
      cSVFormat1.withQuoteChar(character0);
      Object object0 = new Object();
      Object[] objectArray0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4058);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator("i_ ");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(')');
      stringWriter0.append('e');
      String[] stringArray0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.println();
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('{');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a\"akU~w5w66O{9";
      stringArray0[1] = "7o5y:e";
      stringArray0[2] = "P";
      stringArray0[3] = "}#UM}-w=ep_zPFuM{";
      stringArray0[4] = "KAS0FR,O~{Q9";
      stringArray0[5] = "y";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat5.withCommentStart('7');
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withQuoteChar('/');
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      Object object0 = new Object();
      mockPrintStream0.printf(" SkipHeaderRecord:", (Object[]) stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) cSVFormat8;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " SkipHeaderRecord:";
      objectArray0[5] = (Object) "7o5y:e";
      objectArray0[6] = (Object) "KAS0FR,O~{Q9";
      objectArray0[7] = (Object) charset0;
      objectArray0[8] = (Object) cSVFormat6;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4058);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "Unexpected Quote value: ";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Unexpected Quote value: ");
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(')');
      stringWriter0.append('e');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((String[]) null);
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat4.withCommentStart(')');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.println();
      cSVFormat1.validate();
      cSVPrinter0.printComment((String) null);
      Character character0 = Character.valueOf('<');
      CSVFormat.newFormat('e');
      cSVFormat3.withEscape(character0);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.print(cSVFormat4);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('{');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a\"akU~w5w66O{9";
      stringArray0[1] = "7o5y:e";
      stringArray0[2] = "P";
      stringArray0[3] = "}#UM}-w=ep_zPFuM{";
      stringArray0[4] = "KAS0FR,O~{Q9";
      stringArray0[5] = "y";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat5.withCommentStart('7');
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withQuoteChar('/');
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      Object object0 = new Object();
      mockPrintStream0.printf(" SkipHeaderRecord:", (Object[]) stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) cSVFormat8;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) " SkipHeaderRecord:";
      objectArray0[5] = (Object) "7o5y:e";
      objectArray0[6] = (Object) "KAS0FR,O~{Q9";
      objectArray0[7] = (Object) charset0;
      objectArray0[8] = (Object) cSVFormat6;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '(';
      charArray0[6] = '>';
      charArray0[7] = '>';
      charArray0[8] = '>';
      outputStreamWriter0.write(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = '>';
      charArray1[1] = '`';
      charArray1[2] = '>';
      charArray1[3] = '>';
      charArray1[4] = '>';
      charArray1[5] = '>';
      charArray1[6] = '>';
      charArray1[7] = '>';
      charArray1[8] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '>';
      objectArray0[1] = (Object) charsetEncoder0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) '>';
      objectArray0[5] = (Object) '>';
      objectArray0[6] = (Object) charsetEncoder0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) charsetEncoder0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("kkWF=3Dx.ls");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      mockFileWriter0.close();
      cSVPrinter0.close();
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('E');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("C]3j&j*)Z9t");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Character character0 = new Character('E');
      cSVFormat2.withQuoteChar(character0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.close();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      cSVFormat0.print(mockPrintStream0);
      cSVFormat1.withRecordSeparator("g");
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('?');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SkipHeaderRecord:");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) " SkipHeaderRecord:";
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " SkipHeaderRecord:";
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) " SkipHeaderRecord:";
      PrintStream printStream0 = mockPrintStream0.printf(" SkipHeaderRecord:", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printStream0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('b');
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('y');
      cSVFormat3.withSkipHeaderRecord(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("^st)!!eXzMl?d{at");
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat3.withQuoteChar((Character) null);
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) charset0;
      objectArray0[2] = (Object) cSVFormat3;
      mockPrintStream0.printf("", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("The comment start character and the quoteChar cannot be the same ('");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('v');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('O');
      Quote quote0 = Quote.MINIMAL;
      cSVFormat2.withQuotePolicy(quote0);
      MockFile mockFile0 = new MockFile("WkIxIXzkXd-", "T@kcdg&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockFile0.setReadable(false);
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) cSVFormat1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.deleteOnExit();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "T@kcdg&", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printWriter0);
      cSVPrinter0.printRecord(objectArray0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>(105);
      cSVFormat0.toString();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      mockPrintWriter0.print('Z');
      cSVPrinter0.println();
      cSVPrinter0.printComment("T@kcdg&");
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4058);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "Unexpected Quote value: ";
      cSVFormat0.withRecordSeparator("Unexpected Quote value: ");
      cSVFormat0.withEscape(')');
      char char0 = 'e';
      stringWriter0.append('e');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      char char1 = '<';
      cSVFormat2.withCommentStart(')');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.println();
      String string1 = null;
      cSVFormat3.validate();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('b');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('b');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SkipHeaderRecord:");
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " SkipHeaderRecord:";
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[8] = (Object) " SkipHeaderRecord:";
      mockPrintStream0.printf(" SkipHeaderRecord:", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('2');
      cSVFormat2.withEscape(';');
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ao");
      cSVFormat0.withRecordSeparator('2');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      cSVPrinter0.print("8}\"LI");
      cSVPrinter0.printComment("ao");
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter$1", "org.apache.commons.csv.CSVPrinter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat4;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Io[xun>\"9T", objectArray0);
      // Undeclared exception!
//      try { 
        cSVFormat4.print(printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the quoteChar cannot be the same ('\"')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('E');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("C]3j&j*)Z9t");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVFormat0.toString();
      cSVPrinter0.printComment("");
      Character character0 = new Character('E');
      cSVFormat2.withQuoteChar(character0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.close();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '(';
      charArray0[6] = '>';
      cSVFormat1.withRecordSeparator('H');
      cSVFormat2.withDelimiter('>');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Appendable appendable1 = cSVPrinter0.getOut();
      assertSame(appendable1, appendable0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(680);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withDelimiter('\"');
      CSVFormat.newFormat('K');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('&');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      String string0 = "ra\"4{u}";
      cSVPrinter0.printComment("ra\"4{u}");
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }
}
