/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:23:07 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals("ALL", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8l??/y9''4SJJ0bN");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("8l??/y9''4SJJ0bN,8l??/y9''4SJJ0bN,8l??/y9''4SJJ0bN,8l??/y9''4SJJ0bN,8l??/y9''4SJJ0bN,8l??/y9''4SJJ0bN,8l??/y9''4SJJ0bN\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<'7&@+Is D@11";
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("Unexpected Quote value: \tUnexpected Quote value: \tUnexpected Quote value: \tUnexpected Quote value: \tUnexpected Quote value: \tUnexpected Quote value: \tUnexpected Quote value: \tUnexpected Quote value: \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[5];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "(line ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("I965n1QzKYAV", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException("format", "ecx`", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLDataException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
      char[] charArray0 = new char[5];
      charArray0[4] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      CSVParser cSVParser0 = cSVFormat1.parse(bufferedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: EOF whilst processing escape sequence
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("c(f.YJ_\"Z'");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Yh*<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[4];
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(2496);
      charBuffer0.flip();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      TreeSet<DataOutputStream> treeSet0 = new TreeSet<DataOutputStream>();
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>(treeSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      LinkedHashSet<PipedOutputStream> linkedHashSet0 = new LinkedHashSet<PipedOutputStream>(10);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('K');
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("K&0");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(2496);
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('z');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
//      try { 
        cSVPrinter0.printComment("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(cSVFormat0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.print((Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("$VALUES");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('!');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('!');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('!')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(55).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(58, stringBuffer0.length());
      assertEquals("\"\",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader(8);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) cSVParser0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Stack<MockFileInputStream> stack0 = new Stack<MockFileInputStream>();
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      stack0.add(mockFileInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3Lch^S", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\rA");
      assertEquals(9, charArrayWriter0.size());
      assertEquals("r \r\nr A\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("$\n");
      assertEquals("& $\r\n& \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("I965n1QzKYAV", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MINIMAL", "I965n1QzKYAV");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLSyntaxErrorException0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment("out");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("8\r");
      assertEquals("` 8\r\n` \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(2496);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      TreeSet<DataOutputStream> treeSet0 = new TreeSet<DataOutputStream>();
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>(treeSet0);
      linkedList0.add((DataOutputStream) null);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      assertEquals(2468, charBuffer0.length());
      assertEquals(2468, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("I965n1QzKYAV", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('^');
      Character character0 = new Character('n');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      cSVFormat3.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('9');
      cSVFormat4.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("iU\"\"|HkJn`qd");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"iU\"\"\"\"|HkJn`qd\",\"iU\"\"\"\"|HkJn`qd\",\"iU\"\"\"\"|HkJn`qd\",\"iU\"\"\"\"|HkJn`qd\",\"iU\"\"\"\"|HkJn`qd\",\"iU\"\"\"\"|HkJn`qd\",\"iU\"\"\"\"|HkJn`qd\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" EmptyLines:ignored");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\" EmptyLines:ignored\",\" EmptyLines:ignored\",\" EmptyLines:ignored\",\" EmptyLines:ignored\",\" EmptyLines:ignored\",\" EmptyLines:ignored\",\" EmptyLines:ignored\",\" EmptyLines:ignored\"\r\n", charArrayWriter0.toString());
      assertEquals(177, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\u2029\"\r\n\"\u2029\"\r\n\"\u2029\"\r\n\"\u2029\"\r\n\"\u2029\"\r\n", charArrayWriter0.toString());
      assertEquals(25, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@e=ks9NgK/K2");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"@e=ks9NgK/K2\"\t@e=ks9NgK/K2\t@e=ks9NgK/K2\t@e=ks9NgK/K2\t@e=ks9NgK/K2\r\n", charArrayWriter0.toString());
      assertEquals(68, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('K');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("_)0X");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("K_)0XK\t_)0X\t_)0X\t_)0X\t_)0X\n", charArrayWriter0.toString());
      assertEquals(27, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Z~#g+JcQr$+%", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals("\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Double double0 = new Double((-3531.15034281385));
      cSVPrinter0.print(double0);
      assertEquals(27, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quote0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(45, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) charArrayWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(40, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9t_tDp");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals(6, charArrayWriter0.size());
      assertEquals("9t_tDp", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(cSVFormat0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6O=?F");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1231);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, charArrayWriter0);
  }
}
