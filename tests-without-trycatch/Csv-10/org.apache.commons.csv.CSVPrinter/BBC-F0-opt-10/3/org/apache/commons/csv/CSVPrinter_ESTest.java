/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:17:07 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Aa:");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      stringWriter0.write(10);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0b \"V");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No quotes mode set but no escape character is set");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "No quotes mode set but no escape character is set", 24, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException0.initCause(sQLTransientException0);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVPrinter0;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)49;
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No quotes mode set but no escape character is set");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "No quotes mode set but no escape character is set", 24, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTransientException0);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) sQLTransientException0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r2b\n");
      assertEquals("] \r\n] 2b\r\n] \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('.');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
      cSVPrinter0.print(cSVFormat1);
      assertNull(cSVFormat1.getEscape());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('.');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('.');
      String string0 = "";
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("");
      CSVFormat cSVFormat6 = cSVFormat5.withCommentStart('z');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat6);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment(" [");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('.');
      stringWriter0.write("' in ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("Q\n");
      cSVPrinter0.print(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1064);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      byteArrayOutputStream0.write(0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)21;
      filterOutputStream0.write(byteArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) (byte)21;
      objectArray0[3] = (Object) bufferedOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((SortedSet<Integer>) treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet1);
      bufferedOutputStream0.write(byteArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(" Cuj2xZ{!Hl|wb][9");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " Cuj2xZ{!Hl|wb][9");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) charBuffer0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tlv.}*S$r");
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      priorityQueue0.add(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Tlv.}*S$r", 0, 0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('&');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, 5);
      CSVParser cSVParser0 = cSVFormat3.parse(pushbackReader0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('8');
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      cSVPrinter0.print(cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVParser0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) "";
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Th2 heaer cntains  dupliat entry ");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Th2 heaer cntains  dupliat entry ");
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('Y');
      cSVFormat1.print(mockPrintWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("Th2 heaer cntains  dupliat entry ");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.aparhe.c0ons.csv.CSVPinter");
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      priorityQueue0.add(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.print(charBuffer0);
      String string0 = ">5S#-tWa";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(">5S#-tWa");
      Character character0 = Character.valueOf('!');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      short short0 = (short)1102;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      HashSet<SQLSyntaxErrorException> hashSet0 = new HashSet<SQLSyntaxErrorException>(priorityQueue0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u0085");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "k /lZFq";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "k /lZFq", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9yhbg'~lke=&ci_7L'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("9yhbg'~lke=&ci_7L'\r\n9yhbg'~lke=&ci_7L'\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('K');
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVFormat");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[1];
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The heaer cntains a duplicate entry: ");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The heaer cntains a duplicate entry: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("7o)I1\"*198iE");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"7o)I1\"\"*198iE\"\r\n\"7o)I1\"\"*198iE\"\r\n\"7o)I1\"\"*198iE\"\r\n\"7o)I1\"\"*198iE\"\r\n\"7o)I1\"\"*198iE\"\r\n\"7o)I1\"\"*198iE\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?,6");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVPrinter1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The header contains a duplicate entry: '");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printComment("Gp");
      Object[] objectArray0 = new Object[1];
      Vector<ObjectInputStream> vector0 = new Vector<ObjectInputStream>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The heaer cntains a duplicate entry: '");
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[8-qg!*xh4}aPv`fTJs");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('(');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"l1ZCfi~uKD@q'Dh4*");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter1.printRecords(objectArray0);
      TreeSet<ByteArrayOutputStream> treeSet0 = new TreeSet<ByteArrayOutputStream>();
      Object object0 = new Object();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoException0.fillInStackTrace();
      cSVPrinter0.print(sQLClientInfoException0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"l1ZCfi~uKD@q'Dh4*");
      cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<ByteArrayOutputStream> treeSet0 = new TreeSet<ByteArrayOutputStream>();
      TreeSet<ByteArrayOutputStream> treeSet1 = new TreeSet<ByteArrayOutputStream>((Collection<? extends ByteArrayOutputStream>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet1);
      assertTrue(treeSet0.equals((Object)treeSet1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'h';
      charArray0[2] = '?';
      charArray0[3] = 'z';
      charArray0[4] = 'm';
      charArray0[5] = ' ';
      charArray0[6] = '|';
      charArray0[7] = 'Y';
      charArray0[8] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) '4';
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator('3');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      ArrayDeque<MockPrintWriter> arrayDeque0 = new ArrayDeque<MockPrintWriter>();
      Vector<MockPrintWriter> vector0 = new Vector<MockPrintWriter>(arrayDeque0);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      Object[] objectArray0 = new Object[3];
      cSVFormat0.withNullString("The header contains a duplicate entry: '");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "The header contains a duplicate entry: '", 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>((SortedSet<? extends MockPrintStream>) treeSet0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}^U>$sBoZN*4+lB");
      priorityQueue0.add(mockPrintStream0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringReader stringReader0 = new StringReader("}^U>$sBoZN*4+lB");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 520);
      cSVPrinter0.print(bufferedOutputStream0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) cSVPrinter1;
      PushbackReader pushbackReader0 = null;
//      try {
        pushbackReader0 = new PushbackReader(stringReader0, (-721));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size <= 0
//         //
//         verifyException("java.io.PushbackReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>((SortedSet<? extends MockPrintStream>) treeSet0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}^U>$sBoZN*4+lB");
      priorityQueue0.add(mockPrintStream0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringReader stringReader0 = new StringReader("}^U>$sBoZN*4+lB");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 520);
      cSVPrinter0.print(bufferedOutputStream0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) priorityQueue0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I;Jt");
      cSVFormat2.withCommentStart('J');
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("I;Jt", "I;Jt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("I;Jt");
      cSVFormat3.withCommentStart('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csvhCSVPrinter");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("org.apache.commons.csvhCSVPrinter");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Short short0 = new Short((short)17);
      cSVPrinter0.print(short0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      mockPrintWriter0.flush();
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) "The header contains a duplicate entry: '";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('n');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("8Al[[");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('n');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8Al[[");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "8Al[[", objectArray0);
      cSVFormat2.withIgnoreEmptyLines(false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter1);
      cSVPrinter0.print(cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '", "The header contains a duplicate entry: '");
      cSVFormat0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains a duplicate entry: '");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("The header contains a duplicate entry: '");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('C');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) "The header contains a duplicate entry: '";
      objectArray0[3] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('r');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('%');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat0.withCommentStart('\u0085');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedWriter0;
      cSVPrinter0.printRecords(objectArray0);
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('r');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
      cSVFormat1.withEscape('%');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("The header contains a duplicate entry: '");
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      priorityQueue0.add(mockPrintStream0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('X');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('X');
      cSVFormat1.withEscape('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      PipedWriter pipedWriter0 = new PipedWriter();
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The header contains a duplicate entry: '");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(integer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Character.valueOf('!');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('!');
      cSVFormat1.withEscape('3');
      MockFile mockFile0 = new MockFile("\r\n");
      PipedWriter pipedWriter0 = new PipedWriter();
      MockFile mockFile1 = new MockFile("k^{pBIl{D[z'R", "[V_vh?Y@n/{w{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[V_vh?Y@n/{w{");
      mockPrintWriter0.println("\r\n");
      mockPrintWriter0.flush();
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('G');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "k^{pBIl{D[z'R";
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFile0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) mockFile0;
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf(':');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('W');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}^U>$sBoZN*4+lB");
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      priorityQueue0.add(mockPrintStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      cSVFormat1.withRecordSeparator('r');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      cSVFormat1.withEscape('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.println("");
      mockPrintWriter0.flush();
      objectArray0[0] = (Object) cSVFormat0;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('^');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String string0 = "I;Jt";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I;Jt");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('J');
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "I;Jt";
      objectArray0[2] = (Object) character0;
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'J';
      charArray0[2] = '^';
      charArray0[3] = 'J';
      charArray0[4] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(cSVFormat1);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>((SortedSet<? extends MockPrintStream>) treeSet0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}^U>$sBoZN*4+lB");
      priorityQueue0.add(mockPrintStream0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringReader stringReader0 = new StringReader("}^U>$sBoZN*4+lB");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 520);
      cSVPrinter0.print(bufferedOutputStream0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) priorityQueue0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      assertTrue(priorityQueue0.contains(mockPrintStream0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('^');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I;Jt");
      cSVFormat2.withCommentStart('J');
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "I;Jt";
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "I;Jt";
      Object object2 = new Object();
      objectArray0[8] = object2;
      cSVFormat1.format(objectArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[7] = 'e';
      charArray0[8] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('^');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I;Jt");
      cSVFormat2.withCommentStart('J');
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "I;Jt";
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withCommentStart('^');
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charArrayWriter0);
      charArrayWriter0.append('z');
      cSVPrinter1.flush();
      Object[] objectArray1 = new Object[7];
      charArrayWriter0.write("UuxLc1");
      objectArray1[0] = (Object) charArrayWriter0;
      objectArray1[1] = (Object) cSVFormat3;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("Mo)UN)8Y|8w{YDrSOV");
      // Undeclared exception!
//      try { 
        cSVPrinter1.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('K');
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVFormat");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.close();
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
//      try { 
        cSVPrinter0.print(cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf(':');
      cSVFormat0.withEscape('k');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) character0;
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf(':');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
      MockFile mockFile0 = new MockFile("The quoteChar cannot be a line break");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("The header contains a duplicate entry: '");
      mockPrintWriter0.flush();
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) "The header contains a duplicate entry: '";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      ArrayList<MockPrintStream> arrayList1 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.printComment("ryls@/}A");
      cSVPrinter0.print(objectArray0[0]);
      assertEquals(283L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("c=?L]{,pYzJ\"g");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      cSVPrinter0.println();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("c=?L]{,pYzJ\"g", "", 44, sQLIntegrityConstraintViolationException0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("2B)N");
      cSVPrinter0.print(stringReader0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) stringReader0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      assertEquals("c=?L]{,pYzJ\"g", sQLNonTransientConnectionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('^');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I;Jt");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('J');
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "I;Jt";
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 946);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(165, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf(':');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
      MockFile mockFile0 = new MockFile("The quoteChar cannot be a line break");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("The header contains a duplicate entry: '");
      mockPrintWriter0.flush();
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      ArrayList<MockPrintStream> arrayList1 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
      cSVPrinter0.printComment("The quoteChar cannot be a line break");
      assertEquals(135L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1s3Xtg4/(h@.)");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printComment("sG=O4GJ@>~d6,j");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet1 = new TreeSet<SQLTimeoutException>((SortedSet<SQLTimeoutException>) treeSet0);
      Object[] objectArray0 = new Object[1];
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('l');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(184).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(187, charArrayWriter0.size());
      assertEquals("ll,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      MockFile mockFile0 = new MockFile(" SkipHeaderRecord:");
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "The comment start character and the delimiter cannot be the same ('", 0, 0);
      cSVFormat2.print(printWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.println("");
      mockPrintWriter0.flush();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[0] = (Object) mockPrintWriter0;
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>((SortedSet<? extends MockPrintStream>) treeSet0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) priorityQueue0;
      objectArray1[3] = (Object) treeSet0;
      objectArray1[4] = (Object) cSVFormat0;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) cSVFormat1;
      objectArray1[7] = (Object) mockFile0;
      cSVPrinter0.printRecord(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.println("");
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",?r9SL");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ",?r9SL";
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '3';
      charArray0[2] = 'w';
      charArray0[3] = '8';
      charArray0[4] = 'Y';
      charArray0[5] = '=';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('3');
      Character.valueOf('U');
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      mockPrintStream0.format("dIEz/", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.println();
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("c=?L]{,pYzJ\"g");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      cSVPrinter0.println();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("c=?L]{,pYzJ\"g", "", 44, sQLIntegrityConstraintViolationException0);
      StringReader stringReader0 = new StringReader("2B)N");
      cSVPrinter0.print(stringReader0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) stringReader0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      cSVPrinter0.printRecord(objectArray1);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The header contains a duplicate entry: '");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xN_D3.@XG/XnU@3xO", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockPrintStream0.print(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.close();
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>(92, (Comparator<? super CharArrayWriter>) null);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "xN_D3.@XG/XnU@3xO";
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",?r9SL");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ",?r9SL";
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '3';
      charArray0[2] = 'w';
      charArray0[3] = '8';
      charArray0[4] = 'Y';
      charArray0[5] = '=';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      mockPrintStream0.append((CharSequence) charBuffer0);
      objectArray0[1] = (Object) charset0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, ",?r9SL", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('H');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",?r9SL");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ",?r9SL";
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '3';
      charArray0[2] = 'w';
      charArray0[3] = '8';
      charArray0[4] = 'Y';
      charArray0[5] = '=';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('3');
      Character character0 = Character.valueOf('U');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      PrintStream printStream0 = mockPrintStream0.format(",?r9SL", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(57);
      StringWriter stringWriter1 = stringWriter0.append('K');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1257);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('H');
      Character character0 = new Character('I');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('I')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('3');
      String string0 = "The header contains a duplicate entry: '";
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.println("");
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockPrintWriter0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      cSVFormat0.withRecordSeparator('K');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.println("");
      mockPrintWriter0.flush();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[0] = (Object) mockPrintWriter0;
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(arrayList0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>((SortedSet<? extends MockPrintStream>) treeSet0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      Object[] objectArray1 = new Object[8];
      cSVFormat2.format(objectArray1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "format", 40, sQLIntegrityConstraintViolationException0);
      cSVPrinter0.print(priorityQueue0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
      assertEquals("format", sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet1 = new TreeSet<SQLTimeoutException>((SortedSet<SQLTimeoutException>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet1);
      cSVPrinter0.printRecord((Iterable<?>) treeSet1);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) treeSet1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "xN_D3.@XG/XnU@3xO";
      String string1 = "";
      MockFile mockFile0 = new MockFile("xN_D3.@XG/XnU@3xO", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockPrintStream0.print(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.close();
      Comparator<Object> comparator0 = null;
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>(92, (Comparator<? super CharArrayWriter>) null);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuoteChar('u');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(176);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(' ');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      charArrayWriter0.flush();
      charArrayWriter0.write("oo&J*J");
      Object object0 = new Object();
      cSVPrinter0.println();
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[1] = object0;
      charArrayWriter1.write(176);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      charArrayWriter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.println();
      charArrayWriter1.close();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.print(objectArray0[0]);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("l)");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("l)", "l)", 176, sQLIntegrityConstraintViolationException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      assertEquals(455, charArrayWriter1.size());
      assertEquals(455, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("BJ#!BT[");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      MockFile mockFile0 = new MockFile("The header contains a duplicate entry: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
