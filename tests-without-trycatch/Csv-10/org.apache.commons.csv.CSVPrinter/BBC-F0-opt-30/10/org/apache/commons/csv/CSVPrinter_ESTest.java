/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:26:14 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("x\n");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('m');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("}\r");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('#');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\rn");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"p0L");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"p0L");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat0.withCommentStart('k');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat4.validate();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      CharBuffer.wrap(charArray0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Vector<Integer> vector0 = new Vector<Integer>(65, 65);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9{`_3#cM");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("Unexpected Quote value: ");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A4e2KMBO&%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A4e2KMBO&%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NONE;
      stringWriter0.write((String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('n');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('=');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVPrinter0.print(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6*L4B(-Yh{_");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      cSVFormat1.parse(inputStreamReader0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) charBuffer0;
      objectArray0[8] = (Object) cSVPrinter0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      cSVFormat1.withDelimiter('(');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(')');
      CharBuffer charBuffer0 = CharBuffer.allocate(49);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 49, 49);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLSyntaxErrorException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'u';
      charArray0[2] = '1';
      charArray0[3] = 'U';
      charArray0[4] = 'H';
      charArray0[5] = ')';
      charArray0[6] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}<");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u2029");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}*$D,_I0js");
      PipedReader pipedReader0 = new PipedReader();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "6,L4hB(-Y;{_";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader();
      Object[] objectArray0 = new Object[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      Character character0 = new Character('H');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6,L4hB(-Y;{_");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6,L4hB(-Y;{_");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("6,L4hB(-Y;{_");
      cSVFormat2.print(mockPrintWriter0);
      PipedReader pipedReader0 = new PipedReader();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("&wHcURJg%gJU+*OF");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      PipedReader pipedReader0 = new PipedReader();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unexpected Quote value: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) "&wHcURJg%gJU+*OF";
      objectArray0[7] = (Object) "&wHcURJg%gJU+*OF";
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('$');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      String string0 = "Mapping Aor %s not found, expeqted one o%s";
//      try { 
        cSVPrinter0.printComment("QF9PEJ6MNg");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(stringBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('q');
      cSVFormat1.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("The quoteChar character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      PipedReader pipedReader0 = new PipedReader();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = objectArray0[3];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter2.print(objectArray0[0]);
      cSVPrinter0.println();
      cSVPrinter2.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6,L4hB(-Y;{_");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6,L4hB(-Y;{_");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("6,L4hB(-Y;{_");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('Y');
      cSVFormat3.print(mockPrintWriter0);
      PipedReader pipedReader0 = new PipedReader();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6,L4hB(-Y;{_");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('q');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(')');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("6,L4hB(-Y;{_");
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('Y');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintWriter0);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      MockFile mockFile0 = new MockFile("reader");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("reader", objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("6,L4hB(-Y;{_");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('F');
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Character character0 = Character.valueOf('F');
      cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
//      try { 
        cSVPrinter1.print(cSVPrinter0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      Locale locale1 = Locale.PRC;
      locale0.getDisplayVariant(locale1);
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) "Mapping Aor %s not found, expeqted one o%s";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.printComment("");
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(objectArray0[5]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'A';
      charArray0[2] = 'K';
      charArray0[3] = 'L';
      charArray0[4] = 'Z';
      charArray0[5] = 'G';
      charArray0[6] = '/';
      charArray0[7] = 'v';
      charArray0[8] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('r');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('i');
      cSVFormat2.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVPrinter1;
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      String string0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLDataException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.print(stringWriter0);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6,L4hB(-Y;{_");
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVParser0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bufferedReader0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) "format";
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) pipedReader0;
      objectArray0[8] = (Object) pipedReader0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('r');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('i');
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object2 = new Object();
      cSVPrinter0.print(stringWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('F');
      Object object0 = new Object();
      Object object1 = new Object();
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object object2 = new Object();
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(object1);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains duplicate names: ");
      cSVFormat0.print(mockPrintWriter0);
      cSVFormat0.print(mockPrintWriter0);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The header contains duplicate names: ";
      stringArray0[1] = "6,LL4hB-Y;{_";
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('g');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('i');
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Float float0 = new Float((-1300.56329430443));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-92), (byte) (-92));
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      cSVPrinter0.print(pushbackReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      Object object4 = new Object();
      objectArray0[0] = object4;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) byteArrayInputStream0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lJ0lIY/G");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('`');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Unexpected Quote value: ", "Unexpected Quote value: ");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.printComment("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Unexpected Quote value: ";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "Unexpected Quote value: ";
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.print(stringWriter0);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 1644);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ni";
      stringArray0[1] = "XHRaZg1Y{<ZtB3";
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = cSVFormat0.parse(bufferedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      stringWriter0.write(1644);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lJ0lIY/G");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "Unexpected Quote value: ";
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('`');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Unexpected Quote value: ", "Unexpected Quote value: ");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.printComment("");
      LinkedHashSet<MockFileWriter> linkedHashSet0 = new LinkedHashSet<MockFileWriter>();
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      cSVFormat1.withCommentStart('b');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("Mapping for %s not found, expected one of %s");
      Object object0 = new Object();
      Object object1 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "Mapping for %s not found, expected one of %s";
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      cSVFormat1.withCommentStart('b');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("Mapping for %s not found, expected one of %s");
      Object object0 = new Object();
      Object object1 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "Mapping for %s not found, expected one of %s";
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "Mapping for %s not found, expected one of %s";
      objectArray0[7] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      cSVFormat1.withCommentStart('b');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("Mapping for %s not found, expected one of %s");
      Object object0 = new Object();
      Object object1 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      cSVPrinter0.print(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0fC`q2(jFY";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.withQuotePolicy(quote0);
      cSVFormat0.withCommentStart((Character) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'l';
      charArray0[2] = 'J';
      charArray0[3] = '\'';
      charArray0[4] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('F');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Character character0 = Character.valueOf('F');
      cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) cSVPrinter1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = object1;
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('p');
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("&`PMz57u");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) "&`PMz57u";
      Object object1 = new Object();
      objectArray0[8] = object1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zDp/A8");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('F');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("zDp/A8", "org.apache.commons.csv.CSVParser");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Bd}kO&y<HOcXcsl&0", sQLTransientConnectionException0);
      cSVPrinter0.print(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('F');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("z&?*^OikXmfZ`", "0fC`q2(jFY");
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.printComment("Bd}kO&y<HOcXcsl&0");
      HashSet<MockFileWriter> hashSet0 = new HashSet<MockFileWriter>(19, 19);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVPrinter0.printComment("z&?*^OikXmfZ`");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Bd}kO&y<HOcXcsl&0";
      stringArray0[1] = "z&?*^OikXmfZ`";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Bd}kO&y<HOcXcsl&0");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      String string0 = "z/&?*nOikXmfZ`";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('b');
      cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("eGJ?XJ3");
      CSVFormat cSVFormat2 = CSVFormat.newFormat('c');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "z&?*^OikXmfZ`";
      cSVPrinter0.printRecord(objectArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("z&?*^OikXmfZ`", "2ajm%lYs I[;Y");
      cSVPrinter0.print("0fC`q2(jFY");
      cSVPrinter0.printComment("Unexpected Quote value: ");
      HashSet<MockFileWriter> hashSet0 = null;
//      try {
        hashSet0 = new HashSet<MockFileWriter>((-87), 13);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal initial capacity: -87
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5o-B\"f,[H$G(tC9A");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      String string0 = "out";
      cSVPrinter0.printComment("out");
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'S';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) '%';
      objectArray0[2] = (Object) "out";
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVPrinter1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>(116, comparator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "format");
      priorityQueue0.add(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Bd}kO&y<HOcXcsl&0";
      stringArray0[1] = "z&?*^OikXmfZ`";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Bd}kO&y<HOcXcsl&0");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("0fC`q2(jFY", "Bd}kO&y<HOcXcsl&0");
      cSVPrinter0.print(sQLSyntaxErrorException0);
      cSVPrinter0.printComment("Bd}kO&y<HOcXcsl&0");
      HashSet<MockFileWriter> hashSet0 = new HashSet<MockFileWriter>(13, 3495.0F);
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5o-B\"f,[H$G(tC9A");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(861);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      priorityQueue0.add(byteArrayOutputStream0);
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) null;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5o-B\"f,[H$G(tC9A");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) cSVFormat0;
      Object object3 = new Object();
      objectArray0[1] = object3;
      Object object4 = new Object();
      objectArray0[2] = object4;
      objectArray0[3] = (Object) "5o-B\"f,[H$G(tC9A";
      Object object5 = new Object();
      objectArray0[4] = object5;
      cSVPrinter0.printRecord(objectArray0);
      Float float0 = new Float((-3013.17F));
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains duplicate names: ");
      cSVFormat0.print(mockPrintWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Stack<OutputStreamWriter> stack0 = new Stack<OutputStreamWriter>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("z&?*^OikXmfZ`", false);
      char char0 = '+';
      mockFileWriter0.append('+');
      stack0.add((OutputStreamWriter) mockFileWriter0);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>((Collection<? extends MockFileWriter>) treeSet0);
      HashSet<OutputStreamWriter> hashSet0 = new HashSet<OutputStreamWriter>(priorityQueue0);
      Vector<OutputStreamWriter> vector0 = new Vector<OutputStreamWriter>();
      vector0.add((OutputStreamWriter) mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5o-B\"f,[H$G(tC9A");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains duplicate names: ");
      cSVFormat0.print(mockPrintWriter0);
      String string0 = "0fC`q2(jFY";
      String[] stringArray0 = null;
      cSVFormat0.withHeader((String[]) null);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      char char0 = '`';
      Character character0 = Character.valueOf('`');
      cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(',');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The escape character and the delimiter cannot be the same (',')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5o-B\"f,[H$G(tC9A");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("1");
      HashSet<MockFileWriter> hashSet0 = new HashSet<MockFileWriter>(25, 1544.04F);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('0');
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      ArrayDeque<BufferedReader> arrayDeque0 = new ArrayDeque<BufferedReader>(0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      CSVPrinter cSVPrinter1 = new CSVPrinter(appendable0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVPrinter1.printRecord(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(appendable0);
      cSVPrinter2.close();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Bd}kO&y<HOcXcsl&0";
      stringArray0[1] = "z&?*^OikXmfZ`";
      stringArray0[2] = "0fC`q2(jFY";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Vector<OutputStreamWriter> vector0 = new Vector<OutputStreamWriter>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("z&?*^OikXmfZ`", true);
      Writer writer0 = mockFileWriter0.append('B');
      vector0.add((OutputStreamWriter) mockFileWriter0);
      HashSet<OutputStreamWriter> hashSet0 = new HashSet<OutputStreamWriter>(vector0);
      Vector<OutputStreamWriter> vector1 = new Vector<OutputStreamWriter>();
      vector1.add((OutputStreamWriter) mockFileWriter0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteChar('B');
      CSVPrinter cSVPrinter1 = new CSVPrinter(writer0, cSVFormat4);
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "The header contains duplicate names: ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains duplicate names: ");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      String string1 = "org.apache.commons.csv.CSVPrinter$1";
      cSVPrinter0.printComment(string1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.printComment(string0);
      int int0 = 0;
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = null;
//      try {
        priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>(int0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('F');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "0fC`q2(jFY";
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("z&?*^OikXmfZ`", "0fC`q2(jFY");
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.printComment("Bd}kO&y<HOcXcsl&0");
      HashSet<MockFileWriter> hashSet0 = null;
//      try {
        hashSet0 = new HashSet<MockFileWriter>(19, 0.0F);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal load factor: 0.0
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The header contains duplicate names: ");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.printComment("The header contains duplicate names: ");
      int int0 = 0;
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = null;
//      try {
        priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('0');
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      ArrayDeque<BufferedReader> arrayDeque0 = new ArrayDeque<BufferedReader>(0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.flush();
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) "<]QPUZKX.2W s&:5mI";
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(183, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('k');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat5.validate();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("KtPv4joCgjL");
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      mockPrintWriter0.append('d');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("KtPv4joCgjL");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('5');
      Character character0 = Character.valueOf('g');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h/X15Qnr]6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5o-B\"f,[H$G(tC9A");
      MockPrintStream mockPrintStream0 = new MockPrintStream("}0'4/SmH/mAs");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[0] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "5o-B\"f,[H$G(tC9A";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("cUc2#bRQLr0G|@1(3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "cUc2#bRQLr0G|@1(3";
      mockFileWriter0.append((CharSequence) null);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "cUc2#bRQLr0G|@1(3", objectArray0);
      Locale locale1 = Locale.forLanguageTag("cUc2#bRQLr0G|@1(3");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      Object[] objectArray1 = new Object[0];
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      mockFileWriter0.append((CharSequence) null);
      locale0.getDisplayScript(locale1);
      cSVPrinter0.print(mockFileWriter0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('0');
      CSVFormat.newFormat('0');
      cSVFormat1.validate();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      ArrayDeque<BufferedReader> arrayDeque0 = new ArrayDeque<BufferedReader>(0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.flush();
      cSVPrinter0.getOut();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "<]QPUZKX.2W s&:5mI");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // <]QPUZKX.2W s&:5mI
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("KtPv4joCgjL");
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      mockPrintWriter0.append('d');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("KtPv4joCgjL");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('5');
      Character character0 = Character.valueOf('g');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('F');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('q');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      String string0 = "out";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
      Character character1 = Character.valueOf('q');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat0.withCommentStart('k');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat4.validate();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      CharBuffer.wrap(charArray0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append('+');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('+');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      cSVFormat2.withCommentStart((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Vector<OutputStreamWriter> vector0 = new Vector<OutputStreamWriter>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("~0/jsn", true);
      mockFileWriter0.append('+');
      vector0.add((OutputStreamWriter) mockFileWriter0);
      HashSet<OutputStreamWriter> hashSet0 = new HashSet<OutputStreamWriter>(vector0);
      vector0.add((OutputStreamWriter) mockFileWriter0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) null;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('-');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('-');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      cSVPrinter0.println();
      assertEquals("B\r\n", stringWriter1.toString());
      assertEquals("B\r\n", stringWriter0.toString());
  }
}
