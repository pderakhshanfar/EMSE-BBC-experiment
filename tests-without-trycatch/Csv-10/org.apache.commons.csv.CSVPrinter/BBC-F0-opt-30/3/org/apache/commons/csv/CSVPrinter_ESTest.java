/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:17:20 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('}');
      Character character0 = Character.valueOf('B');
      cSVFormat1.withQuoteChar(character0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(';');
      PipedReader pipedReader0 = new PipedReader(44);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      pipedWriter0.write(44);
      cSVPrinter0.printComment("");
      cSVFormat2.withNullString("");
      LinkedList<BufferedOutputStream> linkedList0 = new LinkedList<BufferedOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.csv.Assertions", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLSyntaxErrorException0);
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipedReader pipedReader0 = new PipedReader(26);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      CSVParser cSVParser0 = cSVFormat0.parse(bufferedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(';');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVParser0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) "\r\n";
      objectArray0[6] = (Object) "\r\n";
      objectArray0[7] = (Object) "\r\n";
      objectArray0[8] = (Object) "\r\n";
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SurroundingSpaces:ignored");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print(mockPrintStream0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r{\n");
      assertEquals(10, charArrayWriter0.size());
      assertEquals("4 \n4 {\n4 \n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('~');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("F\ro");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "F\ro";
      objectArray0[1] = (Object) "F\ro";
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(68, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.withQuoteChar(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('z');
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("F<\r");
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("z F<\nz \n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('p');
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.printComment("\r\n");
      assertEquals(6, charArrayWriter0.size());
      assertEquals("p \np \n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[0] = 'Q';
      charArray0[1] = '}';
      charArray0[2] = ' ';
      charArray0[3] = '1';
      charArray0[4] = '{';
      charArray0[5] = '3';
      charArray0[6] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("pwz}__<aLx~>!$h:UE");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      charBuffer0.flip();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('(');
      cSVFormat2.withCommentStart('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      PriorityQueue<FilterInputStream> priorityQueue0 = new PriorityQueue<FilterInputStream>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "The comment start character cannot be a line break";
      MockPrintStream mockPrintStream0 = new MockPrintStream("The comment start character cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      cSVFormat0.withNullString("The comment start character cannot be a line break");
      File file0 = MockFile.createTempFile("The comment start character cannot be a line break", "The comment start character cannot be a line break");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "J*";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) bufferedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "J*", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9nv$f41c");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals("9nv$f41c", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '6';
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      LinkedHashSet<PipedReader> linkedHashSet0 = new LinkedHashSet<PipedReader>();
      PipedReader pipedReader0 = new PipedReader(441);
      linkedHashSet0.add(pipedReader0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1O>C2y,cST]A");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("mvCdzh");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter1.printRecord((Iterable<?>) sQLClientInfoException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A");
      MockPrintStream mockPrintStream0 = new MockPrintStream("/ZhODeUhYeMw[JLT");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}7}e*h>l");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("}7}e*h>l", "}7}e*h>l", 60);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      assertEquals(60, sQLNonTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Integer integer0 = new Integer(1704);
      cSVPrinter0.print(integer0);
      assertEquals(28, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[11];
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Hd");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)34;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      charBuffer0.codePoints();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("<");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('H');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      ClassLoader.getSystemClassLoader();
//      try { 
        cSVPrinter0.printComment("A\\,M6DA(Rek");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile.createTempFile("$L ", "$L ");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile.createTempFile("=la{/(b`m0Q-9gF+", "=la{/(b`m0Q-9gF+");
      MockPrintStream mockPrintStream0 = new MockPrintStream("=la{/(b`m0Q-9gF+");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=la{/(b`m0Q-9gF+");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat1.withRecordSeparator("=la{/(b`m0Q-9gF+");
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5r<vJ7+x=.:K\":52");
      MockPrintStream mockPrintStream0 = new MockPrintStream("5r<vJ7+x=.:K\":52");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVFormat1.print(mockPrintStream0);
      LinkedHashSet<DataOutputStream> linkedHashSet0 = new LinkedHashSet<DataOutputStream>();
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('!');
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("`t\"_EHAF|{@*pMzqB", "`t\"_EHAF|{@*pMzqB");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("15X(] 0@", "`t\"_EHAF|{@*pMzqB", 63, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException2.getFailedProperties();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("`t\"_EHAF|{@*pMzqB", "`t\"_EHAF|{@*pMzqB", 63, (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      sQLClientInfoException3.getStackTrace();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "`t\"_EHAF|{@*pMzqB");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException2);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.close();
      charArrayWriter0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("$L ", "$L ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$L ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = null;
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(13L, file0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile("$L ", "$L ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$L ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = null;
      cSVPrinter0.printComment((String) null);
      assertEquals(5L, file0.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1842);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[3];
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord((Iterable<?>) treeSet0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('r');
      Character character1 = Character.valueOf('r');
      cSVFormat1.withQuoteChar(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('r');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.getOut();
      CSVFormat.newFormat('S');
      CSVFormat cSVFormat5 = cSVFormat1.withRecordSeparator('S');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(125, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVRecord");
      Character character0 = Character.valueOf('J');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.csv.CSVRecord");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('J');
      cSVFormat1.withRecordSeparator("S\"J8{L=h");
      cSVFormat0.withCommentStart('J');
      MockPrintStream mockPrintStream0 = new MockPrintStream("i");
      PrintStream printStream0 = mockPrintStream0.append('J');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVFormat2.toString();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVRecord");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "i";
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) appendable0;
      cSVPrinter0.printRecord(objectArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>(comparator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("S\"J8{L=h");
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      treeSet0.add(sQLDataException0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("YwKt/.Xl\"Dj?F[X,");
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('=');
      Character character1 = new Character('=');
      StringWriter stringWriter0 = new StringWriter(8);
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      int[] intArray0 = new int[8];
      intArray0[1] = 8;
      intArray0[2] = (int) 'e';
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = (int) '=';
      intArray0[6] = (int) 'e';
      intArray0[7] = (int) '=';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      stringWriter1.write(8);
      Object object0 = new Object();
      cSVFormat0.withRecordSeparator('/');
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = MockFile.createTempFile("`t\"_EHAF|{@*pMzqB", "`t\"_EHAF|{@*pMzqB");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('=');
      Character.valueOf('X');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`t\"_EHAF|{@*pMzqB";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.getOut();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat2);
//      try { 
        cSVPrinter1.print(file0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader(29);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      priorityQueue0.isEmpty();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Character character0 = new Character('H');
      Character character1 = new Character('o');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ServiceLoader.load(class1, classLoader0);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter1.print(class0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile.createTempFile("`t\"_EHAF|{@*pMzqB", "`t\"_EHAF|{@*pMzqB");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('$');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Character character1 = new Character('=');
      Character character2 = Character.valueOf('X');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`t\"_EHAF|{@*pMzqB";
      CSVFormat cSVFormat5 = cSVFormat1.withHeader(stringArray0);
      cSVFormat5.withRecordSeparator('U');
      cSVFormat5.withEscape('$');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.getOut();
      cSVFormat4.withRecordSeparator('/');
      cSVFormat4.withRecordSeparator('z');
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(31, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      File file0 = MockFile.createTempFile("`t\"_EHAF|{@*pMzqB", "`t\"_EHAF|{@*pMzqB");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '*';
      charArray0[3] = 'x';
      charArray0[4] = '!';
      charArray0[5] = 'r';
      charArray0[6] = '>';
      charArray0[7] = 'J';
      charArray0[8] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 3, 3);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      priorityQueue0.isEmpty();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print("\u2028");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      String string0 = "`4C_iI5&X-=O";
      cSVFormat0.withNullString("`4C_iI5&X-=O");
      Character.valueOf('7');
      Character character0 = Character.valueOf('_');
      cSVFormat1.withQuoteChar(character0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "`4C_iI5&X-=O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(pipedOutputStream0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      File file0 = MockFile.createTempFile("`t\"_EHAF|{@*pMzqB", "`t\"_EHAF|{@*pMzqB");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`t\"_EHAF|{@*pMzqB");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      priorityQueue0.isEmpty();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.print((Object) null);
      assertEquals(20L, file0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("`4C_iI5&X-=O");
      Character character0 = Character.valueOf('+');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.print(character0);
      cSVFormat3.withDelimiter('K');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('7');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.getOut();
      cSVFormat1.withRecordSeparator(':');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      Iterable<ObjectOutputStream> iterable0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('=');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) quote0;
      objectArray0[5] = (Object) quote0;
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("`4C_iI5&X-=O");
      cSVFormat1.withCommentStart('4');
      Character character0 = Character.valueOf('+');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.print(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "`4C_iI5&X-=O";
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("`4C_iI5&X-=O");
      Character character0 = Character.valueOf('+');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.print(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "`4C_iI5&X-=O";
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tf]=hnh+)}WP");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.stripExtensions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hWJXbfFF&LR<Di");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      Stack<Console> stack0 = new Stack<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(stack0);
      priorityQueue0.isEmpty();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "hWJXbfFF&LR<Di");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('7');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat4.toString();
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      priorityQueue0.isEmpty();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(40, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('=');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_8`|hH3'H:");
      Locale locale0 = new Locale("}l~s7J;t_`", "LV\"Q2kpbl%-", "_8`|hH3'H:");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(locale0, "\"wt3;a#_-Z85m[I", objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('<');
      cSVFormat3.withCommentStart('=');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('=');
      cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter1.getOut();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat3;
      cSVPrinter2.printRecords(objectArray0);
      assertEquals(193, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("The header contains duplicate names: ", false);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('\u0088');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('v');
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Character.valueOf('U');
      Character.valueOf('7');
      Character character0 = new Character('U');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) appendable0;
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      assertEquals(391, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Class<String> class0 = String.class;
      ServiceLoader.load(class0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '{';
      stringWriter0.write(charArray0);
      Class<MockFileWriter> class1 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader.load(class1, classLoader0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      Appendable appendable0 = cSVPrinter1.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!awgYv");
      mockPrintWriter0.write(492);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("!awgYv");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.printf((Locale) null, "", objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter2.printRecord(objectArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      cSVPrinter0.print(sQLTransactionRollbackException0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecord((Iterable<?>) sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.withRecordSeparator('<');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("RecordSeparator=<");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) serviceLoader0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      assertEquals(172, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tf]=hnh+)}WP");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.stripExtensions();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Tf]=hnh+)}WP", objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
      Stack<Console> stack0 = new Stack<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(stack0);
      priorityQueue0.isEmpty();
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintStream0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) priorityQueue0;
      objectArray1[4] = object0;
      objectArray1[5] = (Object) stack0;
      objectArray1[6] = (Object) cSVPrinter0;
      Object object2 = new Object();
      objectArray1[7] = object2;
      objectArray1[8] = (Object) printStream0;
      cSVPrinter0.printRecords(objectArray1);
      assertNotSame(cSVPrinter0, cSVPrinter2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat.newFormat('7');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('=');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('n');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('7');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.withHeader((String[]) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat2.toString();
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedHashSet0);
      cSVPrinter0.close();
      linkedHashSet0.containsAll(priorityQueue0);
      priorityQueue0.isEmpty();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(41, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 5, 5);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('}');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      String string0 = "!awgYv4";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!awgYv4");
      mockPrintWriter0.write(492);
      cSVFormat4.print(mockPrintWriter0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("!awgYv4");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.printf((Locale) null, "", objectArray0);
      cSVFormat1.print(mockPrintStream0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No quotes mode set but no escape character is set
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat3.withEscape('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!awgYv4");
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("The delimiter cannot be a line break");
      cSVFormat4.withCommentStart('$');
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat5.withNullString((String) null);
      cSVFormat1.withRecordSeparator('Z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "Tf]=hnh+)}WP";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tf]=hnh+)}WP");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      Vector<Integer> vector0 = new Vector<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('=');
      cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('n');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('7');
      CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('7');
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = 'H';
      charArray0[2] = 'F';
      charArray0[3] = '7';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      charArray0[7] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.getOut();
      CSVFormat.newFormat('F');
      cSVFormat4.withRecordSeparator('!');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'F';
      objectArray0[1] = (Object) cSVFormat5;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tf]=hnh+)}WP");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Class<MockFileWriter> class0 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<MockFileWriter> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader1.forEach(consumer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("^j");
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tf]=hnh+)}WP");
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "Tf]=hnh+)}WP";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) locale1;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale1, "Tf]=hnh+)}WP", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printStream0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('<');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedHashSet0);
      LinkedHashSet<CharArrayWriter> linkedHashSet1 = new LinkedHashSet<CharArrayWriter>(48, 48);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet1);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) character0;
      objectArray1[2] = (Object) priorityQueue0;
      objectArray1[3] = (Object) cSVFormat3;
      objectArray1[4] = (Object) appendable0;
      objectArray1[5] = (Object) charArrayWriter0;
      objectArray1[6] = (Object) priorityQueue0;
      objectArray1[7] = (Object) cSVFormat3;
      objectArray1[8] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray1);
      assertEquals(385, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(114);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      Class<MockFileWriter> class1 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader.load(class1, classLoader0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      stringWriter0.write("RecordSeparator=<");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'K';
      charArray0[2] = '-';
      charArray0[3] = '5';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer1);
      CharBuffer charBuffer2 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('-');
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer2, cSVFormat1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!awgYv4");
      int int0 = 492;
      mockPrintWriter0.write(492);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.flush();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'D';
      charArray0[2] = '4';
      charArray0[3] = '%';
      charArray0[4] = 'C';
      charArray0[5] = 'c';
      charArray0[6] = 'h';
      charArray0[7] = '-';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0);
      charBuffer0.put(charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter1);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      TreeSet<SQLTransactionRollbackException> treeSet1 = new TreeSet<SQLTransactionRollbackException>((SortedSet<SQLTransactionRollbackException>) treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet1);
      assertEquals("\r\n", charArrayWriter1.toString());
      assertEquals("\r\n", charArrayWriter0.toString());
      
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tf]=hnh+)}WP");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Object object1 = new Object();
      mockPrintStream0.printf(locale0, "}l~s7J;t_`", objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('j');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("}l~s7J;t_`");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" EmptyLines:ignored", false);
      cSVFormat0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " EmptyLines:ignored");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printStream0);
      byte[] byteArray0 = new byte[8];
      mockFileOutputStream0.flush();
      mockFileOutputStream0.write(byteArray0);
      cSVPrinter0.printComment(" EmptyLines:ignored");
      Integer integer0 = new Integer(3116);
      cSVPrinter0.print("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      String string0 = " EmptyLines:ignored";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" EmptyLines:ignored", false);
      cSVFormat0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " EmptyLines:ignored");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)12;
      mockFileOutputStream0.write(byteArray0);
      cSVPrinter0.printComment(" EmptyLines:ignored");
      Integer integer0 = new Integer(4);
      cSVPrinter0.print(integer0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0, 0, 0);
      cSVFormat0.print(charBuffer0);
      Class<String> class0 = String.class;
      ServiceLoader.load(class0);
      Class<MockFileWriter> class1 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader.load(class1, classLoader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) appendable0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char char0 = 'n';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "4&=j_opXC+";
      Object[] objectArray0 = null;
      mockPrintStream0.print("4&=j_opXC+");
      PrintStream printStream0 = mockPrintStream0.format("4&=j_opXC+", (Object[]) null);
      mockPrintStream0.println((Object) "\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printStream0);
      mockPrintStream0.println((float) 50);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector0 = new Vector<String>(50);
      vector0.add("");
      vector0.setSize(50);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('=');
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('n');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('7');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charArrayWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVFormat0.withRecordSeparator('/');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) appendable0;
      objectArray0[5] = (Object) appendable0;
      objectArray0[6] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat1.toString();
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedHashSet0);
      priorityQueue0.isEmpty();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertEquals(271, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('=');
      cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('n');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('7');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat3.toString();
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedHashSet0);
      priorityQueue0.isEmpty();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(41, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('<');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('<');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(221, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!awgYv4");
      mockPrintWriter0.write(492);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("!awgYv4");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.printf((Locale) null, "", objectArray0);
      cSVFormat1.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter1.printRecord(objectArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      cSVPrinter0.print(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter(114);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      Class<MockFileWriter> class1 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader.load(class1, classLoader0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      String string0 = "RecordSeparator=<";
      stringWriter0.write("RecordSeparator=<");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tf]=hnh+)}WP");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.stripExtensions();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "}l~s7J;t_`";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "}l~s7J;t_`";
      objectArray0[3] = (Object) "}l~s7J;t_`";
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('k');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Tf]=hnh+)}WP";
      stringArray0[1] = "";
      stringArray0[2] = "}l~s7J;t_`";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.withCommentStart('{');
      cSVFormat3.toString();
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedHashSet0);
      priorityQueue0.isEmpty();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(114);
      stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Class<String> class0 = String.class;
      ServiceLoader.load(class0);
      cSVPrinter0.printComment("TOKEN");
      Object object0 = new Object();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('W');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('W');
      String string0 = "X=";
      MockPrintStream mockPrintStream0 = new MockPrintStream("X=");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "X=";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      PrintStream printStream0 = mockPrintStream0.format("GBq8luRZ;(H,+b&^n", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printStream0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      Quote quote0 = Quote.MINIMAL;
      cSVFormat0.withQuotePolicy(quote0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charBuffer0);
      Object[] objectArray1 = new Object[0];
      charBuffer0.put("");
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord(objectArray1);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!awgYv4");
      int int0 = 492;
      mockPrintWriter0.write(492);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2725);
      CharBuffer charBuffer0 = CharBuffer.allocate(2725);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I14oQl 0EI`'d:Z8&KP");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('Z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'H';
      charArray0[2] = '\"';
      charArray0[3] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('Z');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("out", "");
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("c", "Wp2N44=A$SOBI#N", (-3893), sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: c", sQLInvalidAuthorizationSpecException0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      File file0 = MockFile.createTempFile("`t\"_EAF|@*puzqB", "cCnl!JYgCW7Z9weR");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("`t\"_EAF|@*puzqB");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(60L, file0.length());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('!');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
//      try { 
        cSVFormat4.print(charBuffer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No quotes mode set but no escape character is set
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
