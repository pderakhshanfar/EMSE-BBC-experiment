/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:29:48 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('I');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      Character.valueOf(',');
      cSVPrinter0.printComment("\n");
      MockFileReader mockFileReader0 = null;
//      try {
        mockFileReader0 = new MockFileReader(";kIL");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('I');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) fileDescriptor0;
      Object object0 = new Object();
      Character character0 = new Character('2');
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentStart('I');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withEscape('\'');
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('N');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) fileDescriptor0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat1.withCommentStart('N');
      objectArray0[4] = (Object) fileDescriptor0;
      objectArray0[5] = (Object) fileDescriptor0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.flush();
      objectArray0[8] = (Object) cSVFormat1;
      Character character0 = new Character('L');
      cSVFormat1.withEscape(character0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      charBuffer0.mark();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      charBuffer0.get(charArray0);
      cSVFormat0.withEscape('S');
      cSVPrinter0.getOut();
      HashSet<ByteArrayOutputStream> hashSet0 = new HashSet<ByteArrayOutputStream>();
      hashSet0.spliterator();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charArrayWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVFormat0.format(objectArray0);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" OSVMB{i2(");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      Float float0 = new Float((-1380.0F));
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('C');
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'C';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("1");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLFeatureNotSupportedException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(charArrayWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9)B~g!O!NMY");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("Delim=ter=<", (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      StringWriter stringWriter0 = new StringWriter(4);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      charArrayWriter0.reset();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2709);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "bV|n2 7H|7fl";
      stringArray0[2] = "^kZB YM?2@sZ";
      stringArray0[3] = "i&uSH";
      stringArray0[4] = "H7TSxZfS4#763T.O)}Z";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      Character character0 = new Character('Z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.getOut();
      charBuffer0.flip();
      cSVFormat1.withRecordSeparator("u)^FRa:zL&u:Txh6");
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "Delimiter=<";
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1747);
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0, 218);
      CSVParser cSVParser0 = cSVFormat0.parse(bufferedReader0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      int int0 = 7;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(resultSetMetaData0).getColumnCount();
      boolean boolean0 = true;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(string0).when(resultSet0).getString(anyInt());
      doReturn(boolean0).when(resultSet0).next();
      cSVPrinter1.printRecords(resultSet0);
      cSVPrinter1.print(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?|-Z/I&GfLa]4Q");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      charArrayWriter0.reset();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("89+");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "89+";
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(")U");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharBuffer.wrap((CharSequence) ")U");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Float float0 = new Float((-1.0F));
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "VYB-d}\"p%>G%";
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVFormat0.withEscape('g');
      objectArray0[5] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('N');
      cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~!");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      cSVPrinter1.print((Object) null);
      cSVPrinter0.printComment("~!");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(")U");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(")U");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(")U");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) ")U";
      objectArray0[7] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
      Object object0 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("Y7Bj-d;}\"p%>G%");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('T');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Y7Bj-d;}\"p%>G%");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("R7rAb9~E15-$");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(")U");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('1');
      Character character0 = new Character('l');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9/bw3MpD(`$*m$");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Character character0 = new Character('1');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('d');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!CsZkjt(", "!CsZkjt(");
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9/bw3MpD(`$*m$");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('7');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('~');
      cSVFormat5.print(charArrayWriter0);
      Object object0 = new Object();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat5);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y7Bj-d;}\"p%>G%");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9/bw3MpD(`$*m$", true);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(104);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(104);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) classLoader0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) classLoader0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9/bw3MpD(`$*m$", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Object[] objectArray0 = new Object[3];
      SQLTransientException sQLTransientException0 = new SQLTransientException(batchUpdateException0);
      batchUpdateException0.initCause(sQLTransientException0);
      objectArray0[0] = (Object) batchUpdateException0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('G');
      cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('G');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-972)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("K$J2=[Mh_47", "K$J2=[Mh_47");
      MockFileWriter mockFileWriter0 = new MockFileWriter("K$J2=[Mh_47", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      cSVFormat1.withIgnoreEmptyLines(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "I2&s -_.W`$j");
      cSVFormat0.withEscape((Character) null);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('d');
      Character character0 = new Character('d');
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!CsZkjt(");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(310, 310);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      cSVFormat0.withRecordSeparator('d');
      Character character0 = new Character('d');
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!CsZkjt(");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile.createTempFile("K$J2=[Mh_47", "I2&s -_.W`$j");
      MockFileWriter mockFileWriter0 = new MockFileWriter("K$J2=[Mh_47", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("K$J2=[Mh_47");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>(comparator0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVFormat1.withCommentStart('f');
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("K$J2=[Mh_47", "K$J2=[Mh_47");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('f');
      Character character0 = new Character('C');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "K$J2=[Mh_47";
      Object object3 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      treeSet0.add("b62#_LxI{u]p");
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter1.close();
      Object object4 = new Object();
//      try { 
        cSVPrinter0.print(cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat.newFormat('d');
      Character character0 = new Character('6');
      Character character1 = new Character('2');
      cSVFormat0.withEscape(character1);
      ClassLoader.getSystemClassLoader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(104);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.println();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      cSVPrinter0.close();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(1347, 1347);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('2');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("K$J2=[Mh_47", "K$J2=[Mh_47");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.print("K$J2=[Mh_47");
      Class<FilterInputStream> class0 = FilterInputStream.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<FilterInputStream> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      classLoader0.getParent();
      objectArray0[1] = (Object) classLoader0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "K$J2=[Mh_47";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) class0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      Quote quote0 = Quote.NONE;
      cSVPrinter0.print(quote0);
      cSVPrinter0.printComment("} nM");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      String string0 = "";
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('d');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withNullString("n:bj-F6d4@5b");
      Character character0 = new Character('y');
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = 'j';
      charArray0[6] = 'y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      Object object0 = new Object();
      Float float0 = new Float(1.0F);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(object0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'd';
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      String string0 = "*zNskjIt(";
      cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>((Comparator<? super CharArrayWriter>) null);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("I2&s -_.W`$j");
      MockFileWriter mockFileWriter0 = new MockFileWriter("I2&s -_.W`$j", true);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('=');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>((Comparator<? super CharArrayWriter>) null);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat4.withCommentStart('d');
      cSVFormat4.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter1.close();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
//      try { 
        cSVPrinter0.printComment("I2&s -_.W`$j");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      boolean boolean0 = true;
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      String string0 = "+*Qzx}9'`t<0&97q<jy";
      cSVFormat3.withRecordSeparator("+*Qzx}9'`t<0&97q<jy");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      Object[] objectArray0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'd';
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'X';
      charArray0[2] = '`';
      charArray0[3] = '1';
      charArray0[4] = 'b';
      charArray0[5] = ';';
      charArray0[6] = 'W';
      charArray0[7] = 'd';
      charArray0[8] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'b';
      objectArray0[1] = (Object) 'b';
      objectArray0[2] = (Object) cSVPrinter0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.close();
      Object object0 = new Object();
      Float float0 = new Float(1.0F);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(float0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.close();
      Object object0 = new Object();
      Float float0 = new Float(1.0F);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(float0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat2.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.println();
      mockFileWriter0.write((-3137));
      cSVFormat1.format(objectArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      cSVPrinter1.printRecord((Iterable<?>) batchUpdateException0);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter1.printRecords((Iterable<?>) batchUpdateException0);
      cSVPrinter1.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat2.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "n:bj-F6d4@5b");
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVFormat1.print(mockFileWriter0);
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat2.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVFormat2;
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) set0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("K$J2=[Mh_47", "I2&s -_.W`$j");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('f');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Stack<MockFileInputStream> stack0 = new Stack<MockFileInputStream>();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(stack0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
//      try { 
        cSVPrinter0.print(pipedOutputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape((Character) null);
      MockFile mockFile0 = new MockFile("format");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2907);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('S');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("K$J2=[Mh_47", "I2&s -_.W`$j");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('f');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(6, 1347);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("zE0p\"!#<u:I8|RK\"");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      MockFile mockFile0 = new MockFile("9Lk)<`O'v1\"!N)Z!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      MockFile mockFile0 = new MockFile("format");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[5] = (Object) null;
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream1);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      // Undeclared exception!
//      try { 
        mockFileWriter0.write(8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "n:bj-F6d4@5b";
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.println();
      ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("U_K{RsfOun5U", false);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("U_K{RsfOun5U");
      cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteChar('M');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      mockFileWriter0.write(39);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("BF4'");
      cSVPrinter0.print(sQLRecoverableException0);
      cSVFormat1.withRecordSeparator('\\');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('*');
      cSVFormat0.withQuoteChar(character0);
      cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat2.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.println();
      mockFileWriter0.write((-3137));
      cSVFormat1.format(objectArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter1.printRecords((Iterable<?>) batchUpdateException0);
      cSVPrinter1.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      MockFile mockFile0 = new MockFile("format");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "format");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("qA?[m.MA!/E\"w");
      Character character0 = new Character('/');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar((Character) null);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character0 = new Character('d');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('j');
      Character character1 = Character.valueOf('+');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character1);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat3.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat3;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P?U");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "P?U");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      charBuffer0.mark();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.withEscape('y');
      String string0 = "";
      Object[] objectArray0 = null;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "", (Object[]) null);
      cSVFormat1.print(printStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter1.println();
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(batchUpdateException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) character0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9/bw3MpD(`$*m$", true);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(104);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(104);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('P');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('P');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.println();
      mockPrintStream0.print('K');
      cSVPrinter0.printComment("");
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      mockPrintStream0.println('l');
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 92);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      cSVPrinter0.print(pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2709);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "bV|n2 7H|7fl";
      stringArray0[2] = "^kZB YM?2@sZ";
      stringArray0[3] = "i&uSH";
      stringArray0[4] = "H7TSxZfS4#763T.O)}Z";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      Character character0 = new Character('Z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.getOut();
      cSVFormat1.withRecordSeparator("u)^FRa:zL&u:Txh6");
      cSVPrinter0.println();
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      Appendable appendable0 = cSVPrinter1.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) appendable0;
      objectArray0[3] = (Object) charBuffer0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) cSVFormat4;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('Y');
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar((Character) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat5.withQuoteChar('|');
      Character character0 = new Character('Y');
      CSVFormat cSVFormat6 = cSVFormat0.withCommentStart(character0);
      cSVFormat6.withNullString("");
      Character character1 = new Character('|');
      cSVFormat5.withQuoteChar((Character) null);
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat7 = cSVFormat4.withQuotePolicy(quote1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat7.print(charBuffer0);
      cSVPrinter0.println();
      cSVFormat7.withEscape('f');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteChar(character0);
      cSVFormat4.withNullString("n:bj-F6d4@5b");
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat5);
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat3.print(mockFileWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.getOut();
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*zNskjIt(");
      Character character0 = new Character('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*zNskjIt(");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      MockFile mockFile0 = new MockFile("format");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[5] = (Object) null;
      cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat0.withEscape('*');
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) cSVFormat1;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "", objectArray0);
      printStream0.println(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      cSVPrinter0.println();
      Object object1 = new Object();
      cSVPrinter0.flush();
      cSVPrinter0.print(object1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('P');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('P');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.println();
      mockPrintStream0.print('K');
      cSVPrinter0.printComment("");
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      mockPrintStream0.println('l');
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4261);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      cSVFormat0.withRecordSeparator('d');
      CharBuffer charBuffer0 = CharBuffer.allocate(97);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Short short0 = new Short((short)916);
      cSVPrinter0.print(short0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) classLoader0;
      objectArray0[2] = (Object) cSVPrinter0;
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile.createTempFile("K$J2=[Mh_47", "I2&s -_.W`$j");
      MockFileWriter mockFileWriter0 = new MockFileWriter("K$J2=[Mh_47", false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "K$J2=[Mh_47");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      Object object0 = new Object();
      Float float0 = new Float(1.0F);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.print(float0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Z');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("out");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      cSVPrinter0.close();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVFormat0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TZ`;JRT");
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TZ`;JRT");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('h');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('h');
      MockFile mockFile0 = new MockFile("9Lk)<`O'v1\"!N)Z!");
      mockPrintWriter0.append('h');
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('h')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "nIt2dqB86|1[2";
      MockFile mockFile0 = new MockFile("nIt2dqB86|1[2");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 3091);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("^0U5y3/xDb{7'vx:T<E");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "n:bj-F6d4@5b";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "n:bj-F6d4@5b";
      objectArray0[5] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray1);
      mockFileWriter0.write((-3137));
      cSVFormat2.format(objectArray1);
      cSVPrinter0.print(objectArray0[2]);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TZ`;JRT");
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) treeSet0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(printWriter0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(printWriter0);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter1.getOut();
      cSVPrinter2.getOut();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("K$J2=[Mh_47", "RAK>_lCbskd9l");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('f');
      Character character0 = new Character('C');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[1] = (Object) classLoader1;
      Object object3 = new Object();
      objectArray0[2] = object3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) classLoader1;
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) file0;
      objectArray0[7] = object2;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat2.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "n:bj-F6d4@5b";
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[6] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      mockFileWriter0.write((-3137));
      cSVFormat2.format(objectArray0);
      cSVPrinter0.print(objectArray0[4]);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("tbt_kYQ%lOQz", "", 97, (Throwable) null);
      cSVPrinter0.print(sQLTransientConnectionException0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      mockFileWriter0.append('c');
      cSVPrinter0.printComment((String) null);
      cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      MockFile mockFile0 = new MockFile("format");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) null;
      cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat0.withEscape('*');
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) cSVFormat1;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      cSVPrinter0.println();
      Object object1 = new Object();
      cSVPrinter0.print(object1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
      cSVPrinter0.printComment("format");
      PriorityQueue<BufferedReader> priorityQueue0 = new PriorityQueue<BufferedReader>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n:bj-F6d4@5b", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat2.withRecordSeparator("n:bj-F6d4@5b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "n:bj-F6d4@5b";
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[6] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      mockFileWriter0.write((-3137));
      cSVFormat2.format(objectArray0);
      cSVPrinter0.print(objectArray0[4]);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withDelimiter('B');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('B');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('B');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(218);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 218, 218);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVFormat3.withNullString("");
      LinkedList<LineNumberReader> linkedList0 = new LinkedList<LineNumberReader>();
      TreeSet<BufferedReader> treeSet0 = new TreeSet<BufferedReader>(linkedList0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
//      try { 
        Charset.forName("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
