/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:24:43 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(90);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9%<.\"NE");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('l');
      String[] stringArray0 = new String[6];
      cSVFormat1.format(stringArray0);
      stringArray0[0] = "9%<.\"NE";
      stringArray0[1] = "9%<.\"NE";
      stringArray0[2] = "9%<.\"NE";
      stringArray0[3] = "9%<.\"NE";
      stringArray0[4] = "9%<.\"NE";
      stringArray0[5] = "9%<.\"NE";
      // Undeclared exception!
//      try { 
        cSVFormat2.withHeader(stringArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The header contains a duplicate entry: '9%<.\"NE' in [9%<.\"NE, 9%<.\"NE, 9%<.\"NE, 9%<.\"NE, 9%<.\"NE, 9%<.\"NE]
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('U');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r1\n");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('K');
      CharBuffer charBuffer0 = CharBuffer.allocate(286);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("\r\n");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('^');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('2');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("\r\n");
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('^');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('2');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      ServiceLoader<MockPrintWriter> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("4\n");
      cSVFormat1.print(charArrayWriter0);
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      cSVPrinter0.print(objectOutputStream0);
      cSVPrinter0.printComment("4\n");
      cSVPrinter0.print(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[9];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("0@Ca=eA");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      ArrayList<CharArrayWriter> arrayList0 = new ArrayList<CharArrayWriter>();
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>(arrayList0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('J');
      Quote quote0 = Quote.NONE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[0];
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>((SortedSet<? extends SQLClientInfoException>) treeSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" EmptyLines:ignored");
      charArrayWriter0.write(44);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      cSVFormat1.format(objectArray0);
      objectArray0[0] = (Object) ":];";
      objectArray0[1] = (Object) ":];";
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) " EmptyLines:ignored";
      objectArray0[4] = (Object) " EmptyLines:ignored";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) " EmptyLines:ignored";
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) charArrayWriter0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      cSVFormat0.withNullString("org.apache.commons.csv.Constants");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "r eKz");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("zC~c+;$P_[[ERC");
      cSVFormat1.withNullString("zC~c+;$P_[[ERC");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("[xx*&fgC+VZJJ_5O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ArrayDeque<SQLDataException> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";hL5>b{");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(";hL5>b{", false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[9];
      charArrayWriter0.write(3);
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("5Hader:");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('J');
      cSVFormat3.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("&M__Ac");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("&M__Ac");
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("g0u@");
      Character character0 = Character.valueOf('}');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("g0u@");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("g0u@");
      cSVFormat2.withEscape('1');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "g0u@");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[9];
      charArrayWriter0.write(3);
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Header:");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('-');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuotePolicy(quote0);
      cSVFormat5.withEscape('J');
      cSVFormat1.withQuotePolicy(quote0);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print((Object) null);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("g0u@");
      cSVFormat0.withRecordSeparator('b');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("format");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVFormat0.withEscape('1');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cSVPrinter0.print(cSVFormat0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVPrinter1.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[6] = '<';
      charArray0[7] = '<';
      charArray0[8] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '<';
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":]/");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('j');
      cSVFormat2.withCommentStart('j');
      cSVFormat1.withQuotePolicy(quote0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('}');
      Quote quote1 = Quote.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat4);
      cSVFormat5.withEscape('S');
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
//      try { 
        cSVPrinter1.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "PyQ]MJ\\uU";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.printComment("KC} Mf");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("@s$", "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVPrinter1.printComment("e8VV_D2`3(");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "The escape character and the delimiter cannot be the same ('";
      objectArray0[2] = (Object) locale_FilteringMode0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) locale_FilteringMode0;
      objectArray0[5] = (Object) string0;
      objectArray0[6] = (Object) "KC} Mf";
      objectArray0[7] = (Object) string0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter2.close();
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "2");
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter1.printComment("F");
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVPrinter cSVPrinter3 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter1.print(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "PyQ]MJ\\uU";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(string0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVFormat0.validate();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      MockFileWriter mockFileWriter1 = null;
//      try {
        mockFileWriter1 = new MockFileWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVPrinter0.printComment("gz3Tww:ua*_*!9");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("gz3Tww:ua*_*!9");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-53);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.printComment("gz3Tww:ua*_*!9");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuoteChar('j');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('0');
      Quote quote1 = Quote.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = ':';
      charArray0[2] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "}A";
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("}A");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator("gz3Tww:ua*_*!9");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVFormat0.withQuoteChar('I');
      Long long0 = new Long((-1479L));
      cSVPrinter0.print(long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("gz3Tww:ua*_*!9");
      Quote quote0 = Quote.NONE;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print(mockFileWriter0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Index for header '%s' is %d but CSVRecord only has %d values!");
      cSVPrinter0.print(quote0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('0');
      cSVFormat2.withCommentStart('j');
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = '0';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVPrinter0.printComment("}A");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Integer integer0 = new Integer((-123));
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(locale_FilteringMode0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("T2");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat2.withEscape('c');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLFeatureNotSupportedException0);
      cSVPrinter0.print(cSVFormat1);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('w');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gz3Tww:ua*_*!9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter2.getOut();
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('F');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.println();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.print(mockFile0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator("gz3Tww:ua*_*!9");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream("g0u@");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('n');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('c');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('\\');
      cSVFormat4.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      cSVFormat2.format(objectArray0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) "g0u@";
      objectArray1[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[5] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray1[6] = (Object) cSVFormat5;
      objectArray1[8] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      cSVPrinter0.print(objectArray1[2]);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('n');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('c');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('\\');
      CSVFormat cSVFormat5 = cSVFormat4.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "g0u@";
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[6] = (Object) cSVFormat6;
      objectArray0[7] = (Object) cSVFormat5;
      objectArray0[8] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      cSVPrinter0.print(objectArray0[2]);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.withEscape('9');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("gz3Tww:ua*_*!9");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVFormat1.withEscape('O');
      cSVFormat0.print(charBuffer0);
      cSVPrinter0.println();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 98);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(bufferedOutputStream0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
      Character character0 = Character.valueOf('&');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("RYR9,ie<V0?u#R.(?<K");
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('C');
      StringWriter stringWriter0 = new StringWriter(116);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuffer0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.close();
      cSVFormat3.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('0');
      cSVFormat2.withCommentStart('j');
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = '0';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVPrinter0.printComment("}A");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.close();
      cSVPrinter0.close();
      Integer integer0 = new Integer((-123));
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(locale_FilteringMode0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("T2");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('c');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.println();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) cSVPrinter2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "T2";
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = 'a';
      charArray0[2] = 'k';
      charArray0[3] = 'J';
      charArray0[4] = 'z';
      charArray0[5] = '5';
      charArray0[6] = 'S';
      charArray0[7] = 'l';
      charArray0[8] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('');
      Character character0 = Character.valueOf('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('+');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'z';
      intArray0[1] = (int) '\'';
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("CJH", (String) null, sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("CJH", intArray0, sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(batchUpdateException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileWriter0.write("gz3Tww:ua*_*!9");
      cSVFormat0.withEscape('$');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('Q');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "gz3Tww:ua*_*!9";
      objectArray0[7] = (Object) cSVFormat1;
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('N');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withEscape('Y');
      Quote quote1 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "gz3Tww:ua*_*!9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVFormat1.withEscape('N');
      cSVFormat0.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('P');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('o');
      cSVFormat2.withEscape('P');
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar('A');
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('A');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.println();
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.print("H");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter1.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      mockFileWriter0.getEncoding();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('$');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, mockFileWriter0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat0.withCommentStart('$');
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      cSVPrinter0.print(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(".^bK<O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.println();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(".^bK<O", ".^bK<O");
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      cSVPrinter0.printComment(".^bK<O");
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) ".^bK<O";
      objectArray0[3] = (Object) sQLTimeoutException0;
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.getOut();
      MockFile mockFile0 = new MockFile(") EOF reached before encapsulated token finished");
      File file0 = MockFile.createTempFile("OJn,pBNiNzC37IY", "gz3Tww:ua*_*!9", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('f');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('}');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter2.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.flush();
      cSVPrinter1.close();
      SQLException sQLException0 = new SQLException("_oR[AWPbTTn$fe]pf");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("x;*&XO", ") EOF reached before encapsulated token finished", 1380, sQLException0);
//      try { 
        cSVPrinter0.print(sQLSyntaxErrorException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3JTww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withIgnoreEmptyLines(true);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("gz3JTww:ua*_*!9");
      CSVFormat cSVFormat1 = CSVFormat.newFormat('t');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter1.println();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "g0u@";
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println(0);
      int int0 = 21;
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "g0u@";
      objectArray0[4] = (Object) cSVPrinter0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*?W.Za./iz;,L";
      stringArray0[1] = "/$?X";
      stringArray0[2] = "bz.J`X)5^'Z1AdBoU";
      stringArray0[3] = "EOF";
      stringArray0[4] = "+0Fj9";
      stringArray0[5] = "da!~z71]FrF%?";
      stringArray0[6] = "98O";
      cSVFormat1.withHeader(stringArray0);
      Quote quote0 = Quote.NONE;
      cSVFormat1.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[2];
      cSVFormat1.withRecordSeparator((String) null);
      cSVFormat0.withCommentStart('$');
      objectArray0[0] = (Object) cSVFormat1;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("T2");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('P');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat2.withEscape('!');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[0] = (Object) mockFile0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "out";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      int int0 = 0;
      int int1 = 0;
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "out", 0, 0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter3);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(656).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[4];
      StringWriter stringWriter4 = stringWriter0.append((CharSequence) string0, int0, int1);
      stringWriter4.close();
      stringWriter3.close();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashSet0.add(sQLClientInfoException0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter4);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "out", 0, 0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter3);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[4];
      stringWriter0.close();
      stringWriter0.close();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashSet0.add(sQLClientInfoException0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      cSVPrinter1.flush();
      hashSet0.add(sQLClientInfoException0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ServiceLoader<BatchUpdateException> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter1.getOut();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      cSVPrinter1.print(cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[2];
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashSet0.add(sQLClientInfoException0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('4');
      cSVFormat1.withDelimiter('C');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) uRI0;
      objectArray0[8] = (Object) mockFile0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      assertEquals(427L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "out", 0, 0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter3);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[4];
      StringWriter stringWriter4 = stringWriter0.append((CharSequence) "out", 0, 0);
      stringWriter4.close();
      stringWriter3.close();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashSet0.add(sQLClientInfoException0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter4);
      cSVPrinter1.flush();
      hashSet0.add(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "g0u@";
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "g0u@";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[3] = (Object) appendable0;
      objectArray0[4] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<MockPrintWriter> arrayDeque0 = new ArrayDeque<MockPrintWriter>();
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      hashSet0.add(object0);
      mockPrintStream0.println();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("cC*{g8y'&", "g0u@");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // g0u@
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "g0u@";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "g0u@";
      objectArray0[3] = (Object) appendable0;
      objectArray0[4] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<MockPrintWriter> arrayDeque0 = new ArrayDeque<MockPrintWriter>();
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      hashSet0.add(object0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      arrayDeque0.add(mockPrintWriter0);
      PrintStream printStream0 = mockPrintStream0.append(';');
      HashSet<SQLClientInfoException> hashSet1 = new HashSet<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("8m2qU9", (Map<String, ClientInfoStatus>) null);
      hashSet1.add(sQLClientInfoException1);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) ",l\"9azj9gKtFe~";
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "g0u@";
      objectArray1[4] = (Object) mockPrintStream0;
      printStream0.format(",l\"9azj9gKtFe~", objectArray1);
      cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
      cSVPrinter0.getOut();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream(mockFile0, "The delimiter cannot be a line break");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // The delimiter cannot be a line break
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('$');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVFormat.newFormat('1');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("gz3Tww:ua*_*!9");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1231);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      cSVFormat0.withEscape('2');
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("i^\"Xj0c&1/VC");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('P');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile("i^\"Xj0c&1/VC", "i^\"Xj0c&1/VC");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) uRI0;
      objectArray0[1] = (Object) mockFile0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      linkedHashSet0.add(sQLClientInfoException0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(78L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "out", 0, 0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter3);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[4];
      stringWriter1.close();
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) resultSet0;
      stringWriter1.close();
      objectArray0[2] = (Object) "out";
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashSet0.add(sQLClientInfoException0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter3, cSVFormat0);
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "g0u@";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "g0u@";
      objectArray0[3] = (Object) appendable0;
      objectArray0[4] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<MockPrintWriter> arrayDeque0 = new ArrayDeque<MockPrintWriter>();
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      hashSet0.add(object0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.printf("GVCsUb/}:~,b", objectArray0);
      arrayDeque0.add(mockPrintWriter0);
      mockPrintStream0.append(';');
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) arrayDeque0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      objectArray1[2] = (Object) "g0u@";
      objectArray1[3] = (Object) arrayDeque0;
      objectArray1[4] = (Object) appendable0;
      cSVPrinter0.printRecords(objectArray1);
      assertEquals(1133L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('$');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("T2");
      Character character0 = new Character('^');
      cSVFormat1.withQuoteChar(character0);
      cSVFormat1.withEscape('P');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('J');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('J');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.println();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "~XVHljCtyiQk_3";
      MockFile mockFile0 = new MockFile("~XVHljCtyiQk_3", "~XVHljCtyiQk_3");
      cSVFormat0.withRecordSeparator("~XVHljCtyiQk_3");
      cSVFormat0.withCommentStart('Q');
      mockFile0.setReadable(true, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Iterable<SQLSyntaxErrorException> iterable0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("T2");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('P');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat2.withEscape('!');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) mockFile0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      assertEquals(103L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      char char0 = 'B';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('B');
      cSVFormat0.withRecordSeparator('N');
      cSVFormat3.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("Unexpected Quote value: ");
      // Undeclared exception!
//      try { 
        cSVFormat4.print((Appendable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("g0u@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "g0u@";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "g0u@";
      objectArray0[3] = (Object) appendable0;
      objectArray0[4] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<MockPrintWriter> arrayDeque0 = new ArrayDeque<MockPrintWriter>();
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      hashSet0.add(object0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      arrayDeque0.add(mockPrintWriter0);
      mockPrintStream0.append(';');
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.flush();
      assertEquals(889L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('#')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('$');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("gz3Tww:ua*_*!9", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('$');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVFormat.newFormat('1');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat1.withEscape('A');
      objectArray0[1] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("gz3Tww:ua*_*!9");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "out";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "out", 0, 0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '?';
      charArray0[2] = '4';
      charArray0[3] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      HashSet<FilterOutputStream> hashSet0 = new HashSet<FilterOutputStream>();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      assertArrayEquals(new char[] {'\r', '\n', '4', 'L'}, charArray0);
      assertEquals(2, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
