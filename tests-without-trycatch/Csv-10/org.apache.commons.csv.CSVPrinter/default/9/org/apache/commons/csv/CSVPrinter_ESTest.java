/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:49:46 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" Sp[!0{0:715^hgt.x");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withCommentStart('{');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "?\r\n");
      SQLException sQLException0 = new SQLException("", sQLRecoverableException0);
      Throwable throwable0 = sQLRecoverableException0.initCause(sQLException0);
      cSVPrinter0.print(sQLRecoverableException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) throwable0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^+#4@:*iqIjvn");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("@KM/s^+#4@:*iqIjvn");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@KM/s^+#4@:*iqIjvn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>(1878);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('{');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8`X0q]2)Z~ ^-~,w");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("8`X0q]2)Z~ ^-~,w");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('@');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("d\r");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("WVbt+9@\")");
      Character character0 = new Character('.');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      CSVParser cSVParser0 = cSVFormat2.parse(inputStreamReader0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVParser0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "WVbt+9@\")";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) inputStreamReader0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('/');
      StringWriter stringWriter0 = new StringWriter(2431);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('B');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("(66NA80.t");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("6 Xq(2)9% ^K~,w");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^)#4*iqIjvn");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A%_[GB");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "@KM/s^)#4*iqIjvn";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "A%_[GB";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The quoteChar cannot be a line break");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 13);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0, charsetDecoder0);
      CSVParser cSVParser0 = cSVFormat1.parse(inputStreamReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^+#4@:*iqIjvn");
      Object[] objectArray0 = new Object[34];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("\u00009/:u*DHgiwUq");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]7");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]7");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^+#4@:*iqIjvn");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("@KM/s^+#4@:*iqIjvn");
      cSVFormat0.validate();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("@KM/s^+#4@:*iqIjvn");
      cSVPrinter0.printComment("s-\n");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\n");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^+#4@:*iqIjvn");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("@KM/s^+#4@:*iqIjvn");
      cSVFormat0.validate();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("@KM/s^+#4@:*iqIjvn");
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^+#4@:*iqIjvn");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("@KM/s^+#4@:*iqIjvn");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@KM/s^+#4@:*iqIjvn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8X0q]2)Z~ ^-~,w");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Integer integer0 = new Integer((-5735));
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("/sx%L3`AVjwF}O*");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("/sx%L3`AVjwF}O*");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"WPdW`e@");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"WPdW`e@");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^+#4@:*iqIjvn");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@KM/s^+#4@:*iqIjvn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The quoteChar cannot be a line break");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLException sQLException0 = new SQLException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("0J1Irj,K+@Bo/DQT[`");
      cSVFormat2.withCommentStart('o');
      cSVFormat1.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("vOY,oW:?w Pj");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('m');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0JIrj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0JIrj,K+@Bo/DQT[`");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("The header contains duplicate names: ");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('A');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
//      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.Token");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 116, 116);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('`');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('-');
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('#');
      CSVFormat cSVFormat5 = cSVFormat2.withNullString("Xl${hI=_7s3H/T\"H");
      Quote quote1 = Quote.NONE;
      CSVFormat cSVFormat6 = cSVFormat5.withQuotePolicy(quote1);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVFormat2.withCommentStart('`');
      cSVFormat4.validate();
      MockFileWriter mockFileWriter1 = new MockFileWriter("gnPPSX>IjP1");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter1, cSVFormat7);
      cSVPrinter1.print(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u008E');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.print(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1252);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('3');
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('U');
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) classLoader0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) cSVPrinter1;
      objectArray0[5] = (Object) cSVFormat3;
      cSVPrinter1.printRecords(objectArray0);
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>(1252);
      Double double0 = new Double(2762.7);
      linkedHashSet0.add(double0);
      cSVPrinter1.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat4);
      cSVPrinter2.getOut();
      CSVPrinter cSVPrinter3 = new CSVPrinter(charBuffer0, cSVFormat5);
      cSVPrinter3.getOut();
      cSVPrinter2.printComment("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      cSVPrinter0.printRecords((Iterable<?>) enumSet0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '&';
      charArray0[2] = '#';
      charArray0[3] = 'V';
      charArray0[4] = '9';
      charArray0[5] = '@';
      charArray0[6] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      LinkedList<PipedOutputStream> linkedList0 = new LinkedList<PipedOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) '*';
      objectArray0[5] = (Object) '#';
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) charBuffer0;
      objectArray0[8] = (Object) '*';
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('R');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[0] = (Object) mockFileWriter0;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('s');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(cSVFormat1);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedWriter0;
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('F');
      cSVFormat0.withCommentStart(character0);
      cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter$1");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque1 = arrayDeque0.clone();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque1.add(sQLIntegrityConstraintViolationException0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) sQLIntegrityConstraintViolationException0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('/');
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("The quoteChar cannot be a line break");
      cSVFormat2.withRecordSeparator("Y\"}|Z{4=Kz*~-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVFormat1.withRecordSeparator('/');
      cSVFormat1.validate();
      cSVPrinter0.print((Object) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0);
      PushbackReader pushbackReader0 = null;
//      try {
        pushbackReader0 = new PushbackReader(bufferedReader0, (-1056));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size <= 0
//         //
//         verifyException("java.io.PushbackReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      cSVFormat1.withRecordSeparator('/');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVFormat1.withRecordSeparator('1');
      cSVFormat0.validate();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 116, 116);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.print(cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("_G?a@");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat1.withRecordSeparator("_G?a@");
      cSVFormat1.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('F');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print(",_>.J~1");
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '+';
      StringWriter stringWriter1 = stringWriter0.append('+');
      stringWriter1.close();
      cSVPrinter0.getOut();
      Character.valueOf('+');
      Character character1 = new Character('F');
      cSVFormat0.withCommentStart(character1);
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>(2968, 1);
      cSVFormat3.print(stringWriter0);
      cSVPrinter0.printComment(",_>.J~1");
      // Undeclared exception!
//      try { 
        CharBuffer.wrap((char[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('@');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("d\r");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('*');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("Y8A!<Wn?7HDWFMVFE");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "6 Xq(2)9% ^K~,w";
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(943);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      charBuffer0.chars();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(32);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('}');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('N');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('S');
      Object object0 = new Object();
      cSVFormat3.format(objectArray0);
      Character character0 = new Character('\"');
      Character character1 = Character.valueOf('}');
      cSVFormat0.withCommentStart(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat3);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.load(class0);
      CSVPrinter cSVPrinter2 = cSVFormat4.print(charArrayWriter1);
      cSVPrinter2.printRecord((Iterable<?>) serviceLoader0);
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVPrinter2.flush();
      cSVPrinter1.flush();
      cSVPrinter2.printRecords(objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) class0;
      objectArray1[2] = (Object) class0;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1252);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) classLoader0;
      objectArray0[4] = (Object) charBuffer0;
      Character character0 = new Character('D');
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader.load(class0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('F');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat2.withRecordSeparator("XjB~.S4|xp4c7D,BoS");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      cSVFormat1.withRecordSeparator('F');
      cSVFormat0.validate();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(709).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object object0 = null;
      cSVPrinter0.print(object0);
      String string0 = "";
      cSVPrinter0.printComment(string0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(quote0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(quote0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[0];
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter1.flush();
      cSVPrinter1.flush();
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter2 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('F');
      cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("XjB~.S4|xp4c7D,BoS");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ",_>.J~1";
      objectArray0[2] = (Object) serviceLoader0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) ",_>.J~1";
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      objectArray0[5] = (Object) class0;
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3357);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('f');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3357);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('H');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) byteBuffer0;
      objectArray0[6] = (Object) byteBuffer0;
      cSVFormat2.format(objectArray0);
      Character character0 = new Character('f');
      cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) serviceLoader0;
      objectArray1[1] = (Object) charArrayWriter2;
      objectArray1[2] = (Object) class0;
      objectArray1[3] = (Object) cSVFormat1;
      objectArray1[4] = object0;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) sQLIntegrityConstraintViolationException0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('0');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("==/`9CDo0i`xeS^T\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.print(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('m');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("XjB~.S4|xp4c7D,BoS");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ",_>.J~1";
      objectArray0[2] = (Object) serviceLoader0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) ",_>.J~1";
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) serviceLoader0;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withEscape('a');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter0.printComment("XjB~.S4|xp4c7D,BoS");
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter$1");
      String string0 = "XBp.4|xp4c7D,BoS";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("XBp.4|xp4c7D,BoS");
      char char0 = '!';
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Character character0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ",_>.J~1";
      objectArray0[2] = (Object) serviceLoader0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) ",_>.J~1";
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) character0;
      CSVFormat cSVFormat4 = cSVFormat1.withCommentStart(char0);
      char char1 = 'a';
      cSVFormat0.withEscape(char1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter0.printComment(string0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("XjB~.S4|xp4c7D,BoS");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Class<DataTruncation> class0 = DataTruncation.class;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",_>.J~1");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.apache.commons.csv.CSVPrinter$1");
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ",_>.J~1";
      objectArray0[2] = (Object) serviceLoader0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) ",_>.J~1";
      cSVPrinter0.printComment("XjB~.S4|xp4c7D,BoS");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) serviceLoader0;
      cSVFormat0.withQuoteChar('H');
      cSVFormat2.format(objectArray0);
      cSVFormat0.withCommentStart((Character) null);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",_>.J~1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('F');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat2.withRecordSeparator("XjB~.S4|xp4c7D,BoS");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      cSVFormat1.withRecordSeparator('F');
      cSVFormat0.validate();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(709).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The quoteChar cannot be a line break");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      Object[] objectArray1 = new Object[2];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray1);
      Object object1 = new Object();
      cSVPrinter0.print(object1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      mockFileWriter0.write(charArray0);
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(943);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      charBuffer0.chars();
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      CharBuffer charBuffer1 = charBuffer0.append('`');
      charBuffer0.append((CharSequence) charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      mockFileWriter0.write(charArray0);
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No quotes mode set but no escape character is set
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('m');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("Unexpected Quote value: ");
      cSVFormat0.withCommentStart('o');
      cSVFormat2.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) mockFileWriter0;
      objectArray1[1] = (Object) cSVFormat3;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printComment("')");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print("Unexpected Quote value: ");
      cSVFormat1.validate();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@KM/s^+#4@:*iqIjvn");
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) mockFileWriter0;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("@KM/s^+#4@:*iqIjvn");
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      cSVFormat0.withCommentStart('o');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3357);
      char char0 = 'f';
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('f');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect('f');
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      char char1 = 'S';
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('H');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[5] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) byteBuffer0;
      objectArray0[6] = (Object) byteBuffer0;
      cSVFormat2.format(objectArray0);
      Character character0 = new Character('f');
      cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("%v-SQZIKTG[End>", "java.io.CharArrayWriter@0000000005fjava.lang.Object@0000000006ffjava.io.CharArrayWriter@0000000005forg.apache.commons.csv.CSVFormat@0000000003fHjava.nio.DirectByteBuffer@0000000007HfHjava.nio.DirectByteBuffer@0000000007H");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"java.io.CharArrayWriter@0000000005fjava.lang.Object@0000000006ffjava.io.CharArrayWriter@0000000005forg.apache.commons.csv.CSVFormat@0000000003fHjava.nio.DirectByteBuffer@0000000007HfHjava.nio.DirectByteBuffer@0000000007H\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = 'S';
      charArray0[2] = '#';
      charArray0[3] = ']';
      charArray0[4] = 'm';
      charArray0[5] = '3';
      charArray0[6] = 's';
      charArray0[7] = 'U';
      CharBuffer.wrap(charArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '#';
      objectArray0[1] = (Object) ']';
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(943);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      charBuffer0.chars();
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      CharBuffer charBuffer1 = charBuffer0.append('`');
      charBuffer0.append((CharSequence) charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1252);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      cSVFormat1.withDelimiter('%');
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ServiceLoader<ByteArrayOutputStream> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      String string0 = "";
      cSVFormat0.withRecordSeparator("");
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.getOut();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1252);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      cSVPrinter0.close();
      char char0 = '3';
      cSVFormat1.withDelimiter('3');
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ServiceLoader<ByteArrayOutputStream> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1171);
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = 'S';
      charArray0[2] = '#';
      charArray0[3] = ']';
      charArray0[4] = 'm';
      charArray0[5] = '3';
      charArray0[6] = 's';
      charArray0[7] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 2, 2);
      StringWriter stringWriter2 = stringWriter1.append('#');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('p');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque1 = arrayDeque0.clone();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque1.add(sQLIntegrityConstraintViolationException0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0J1Irj,K+@Bo/DQT[`");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      cSVFormat1.withRecordSeparator('z');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('e');
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Integer integer0 = new Integer((-5738));
      cSVPrinter0.print(integer0);
      cSVFormat1.validate();
      cSVPrinter0.print(classLoader0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('/');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter0.print(cSVFormat3);
      stringWriter0.close();
      cSVPrinter0.getOut();
      Character character0 = Character.valueOf('/');
      cSVFormat4.withCommentStart(character0);
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>(0, (-1476));
      CSVPrinter cSVPrinter1 = cSVFormat4.print(stringWriter0);
      String string0 = "format";
      cSVPrinter0.printComment("format");
      cSVFormat1.toString();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVFormat1.withRecordSeparator('~');
      cSVPrinter0.getOut();
      cSVPrinter0.print("format");
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\ry");
      assertEquals("N \nN y\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('0');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("a_e");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.printComment(") invalid parse sequence");
  }
}
