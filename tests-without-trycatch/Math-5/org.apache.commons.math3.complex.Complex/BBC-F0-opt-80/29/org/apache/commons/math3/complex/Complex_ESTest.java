/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:20:46 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(450.73018);
      complex0.abs();
      complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = Complex.valueOf(450.73018, Double.NaN);
      Complex complex4 = complex1.add((-1416.0158425194722));
      Complex complex5 = complex4.sqrt1z();
      complex5.NaN.conjugate();
      complex0.sin();
      complex0.cos();
      Complex complex6 = complex5.sqrt1z();
      complex6.INF.add(complex2);
      complex3.multiply(450.73018);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex.valueOf((-167.2), (-167.2));
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1823.449924, (-2186.72889));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex2.ZERO.createComplex((-167.2), 1823.449924);
      complex2.hashCode();
      complex2.sin();
      Complex complex3 = complex2.I.multiply((-2136073001));
      complex3.INF.getArgument();
      complex3.NaN.toString();
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex6.ZERO.divide(complex0);
      Complex complex8 = complex0.reciprocal();
      complex8.ONE.readResolve();
      Complex complex9 = complex4.tanh();
      complex6.conjugate();
      Complex.valueOf((-2186.72889), (-2186.72889));
      Complex complex10 = complex8.tan();
      Complex complex11 = complex6.multiply((-2136073001));
      complex10.sin();
      complex9.sinh();
      complex8.add(complex6);
      complex11.sqrt();
      complex7.sqrt();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(809.786522, 809.786522);
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex4.ZERO.tan();
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex0.sqrt1z();
      complex9.sinh();
      Complex complex10 = complex9.log();
      Complex complex11 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex12 = complex10.NaN.subtract(complex11);
      complex12.ONE.tan();
      complex1.add(complex9);
      complex9.NaN.cos();
      Complex complex13 = complex3.add(complex7);
      Complex complex14 = complex0.subtract(Double.NaN);
      complex4.INF.createComplex(590.4, (-394.0340756770964));
      Complex complex15 = complex2.reciprocal();
      Complex complex16 = complex15.I.tan();
      complex16.I.subtract((-167.2));
      Complex complex17 = complex1.pow(complex3);
      complex1.conjugate();
      complex14.multiply(complex9);
      complex8.tan();
      complex6.atan();
      complex17.multiply(572);
      complex8.tanh();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-264.7113));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.sqrt();
      complex1.readResolve();
      Complex complex2 = Complex.ZERO;
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 11, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2204.84772307087);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.pow(complex1);
      Complex complex3 = complex0.log();
      complex2.getArgument();
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = complex1.ZERO.asin();
      complex5.readResolve();
      complex1.getReal();
      Complex complex7 = Complex.I;
      complex3.toString();
      Complex complex8 = complex6.asin();
      Complex complex9 = Complex.ZERO;
      complex9.tanh();
      complex8.multiply(complex3);
      complex0.cosh();
//      try { 
        complex4.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.log();
      complex1.nthRoot(1);
      complex3.getArgument();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.multiply(1);
      complex4.readResolve();
      Complex complex7 = new Complex(Double.NaN);
      complex7.readResolve();
      complex1.getReal();
      Complex complex8 = Complex.I;
      complex8.sqrt1z();
      complex6.toString();
      Complex complex9 = complex5.asin();
      complex4.tanh();
      Complex complex10 = complex9.sin();
      complex10.add(complex9);
      Complex complex11 = Complex.ZERO;
      complex11.multiply(1.5707963267948966);
      Complex complex12 = Complex.valueOf(0.0, 1.5707963267948966);
      complex4.hashCode();
      Complex complex13 = complex7.asin();
      complex13.ONE.tan();
      Complex complex14 = Complex.I;
      complex14.divide(complex11);
      Complex complex15 = Complex.valueOf(0.0, 809.0);
      complex15.reciprocal();
      Complex complex16 = complex15.atan();
      Complex complex17 = (Complex)complex16.I.readResolve();
      complex5.add(1.5707963267948966);
      complex12.toString();
      complex17.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.acos();
      complex1.I.tanh();
      Complex complex3 = Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex1.getField();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex6.log();
      complex7.getField();
      complex0.pow(complex6);
      complex1.asin();
      complex1.multiply(1);
      Complex complex8 = Complex.ZERO;
      complex2.multiply(complex3);
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2062.1, 2062.1);
      complex0.multiply(complex1);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex1.getField();
      Complex complex3 = complex1.pow(complex1);
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex4.log();
      complex5.getField();
      complex0.pow(complex4);
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.sqrt();
      complex2.pow(complex0);
      Complex complex3 = complex2.log();
      complex2.getArgument();
      complex1.sqrt();
      complex2.readResolve();
      Complex complex4 = new Complex((-167.2));
      complex1.readResolve();
      Complex complex5 = new Complex(400.199273);
      complex5.getReal();
      Complex complex6 = Complex.I;
      complex3.asin();
      complex0.tanh();
      complex5.sin();
//      try { 
        complex6.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.log();
      Complex complex2 = Complex.INF;
      complex2.getArgument();
      Complex complex3 = complex2.sqrt();
      complex3.readResolve();
      Complex complex4 = new Complex(0.7853981633974483);
      complex4.readResolve();
      complex4.getReal();
      Complex complex5 = Complex.I;
      complex2.tanh();
      complex0.sin();
      complex2.abs();
      complex1.acos();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = Complex.ONE;
      complex1.log();
      Complex complex3 = Complex.INF;
      complex3.getArgument();
      Complex complex4 = complex3.sqrt();
      complex4.readResolve();
      Complex complex5 = new Complex(0.7853981633974483);
      Complex complex6 = Complex.NaN;
      complex6.readResolve();
      complex6.getReal();
      Complex complex7 = Complex.I;
      complex6.asin();
      Complex complex8 = complex3.tanh();
      complex1.sin();
      Complex complex9 = complex8.subtract(complex2);
      complex3.abs();
      complex2.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex4.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.log();
      complex1.nthRoot(1);
      complex3.getArgument();
      Complex complex5 = complex1.sqrt();
      complex1.NaN.createComplex((-20.0), (-1.524901992178814E-8));
      complex4.getField();
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex3.sqrt1z();
      complex8.getField();
      complex5.subtract(complex2);
      Complex complex9 = new Complex(0.0);
      complex0.subtract(complex9);
      complex7.cosh();
      complex4.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-462.81950279453), (-2487.40083588));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.divide((-2487.40083588));
      Complex complex6 = complex2.multiply(complex1);
      complex1.sqrt1z();
      complex0.createComplex(1003.5142, 1003.5142);
      Complex complex7 = Complex.I;
      complex7.reciprocal();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.INF;
      complex8.sinh();
      complex5.getField();
      Complex complex11 = new Complex((-462.81950279453), 1003.5142);
      complex1.pow(complex11);
      complex2.asin();
      complex4.multiply((-2146303379));
      Complex.valueOf(1003.5142, 3.68085620656127E-272);
      complex9.pow((-70071.07234769));
      Complex complex12 = complex6.tan();
      complex12.pow((double) (-2146303379));
      complex3.isNaN();
      complex7.toString();
      Complex complex13 = Complex.ZERO;
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(2577.394358);
      Complex complex2 = complex1.divide(2577.394358);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf(2577.394358, (-961.334870900948));
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.valueOf((-961.334870900948));
      complex1.getField();
      complex8.pow(complex4);
      complex2.INF.cos();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex3.multiply((-753287431));
      Complex.valueOf(2577.394358, 2.3163266685941744);
      complex9.pow((-1838.48746795));
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.tan();
      Complex complex13 = complex10.pow((-961.334870900948));
      complex12.isNaN();
      complex9.toString();
      Complex complex14 = new Complex((-753287431), (-326.548906));
      complex14.tanh();
      complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.subtract(complex0);
      complex0.acos();
      Complex complex4 = Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex6.log();
      complex7.getField();
      complex0.pow(complex4);
      complex3.asin();
      complex2.multiply(1);
      Complex complex8 = Complex.valueOf((-1.0006416300009138), Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.sin();
      complex1.pow(1416.08);
      complex8.tan();
      complex9.pow((-167.2));
      complex0.multiply((-2147453001));
      Complex complex10 = Complex.valueOf(1416.08, 0.193811297416687);
      Complex complex11 = complex10.tan();
//      try { 
        complex11.nthRoot((-421));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -421
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      complex0.I.sqrt();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex1.getField();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex1.log();
      complex3.log();
      complex5.getField();
      complex0.pow(complex7);
      complex1.asin();
      complex4.multiply(2518);
      Complex.valueOf(0.0, (-61.505069276));
      Complex complex8 = complex0.sin();
      complex1.pow((-1.0006416300009138));
      complex8.tan();
      complex1.pow((double) 2518);
      complex8.multiply((-2147453001));
      Complex.valueOf((double) (-2147453001), Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(5.323663114481478);
      complex9.tan();
      complex6.nthRoot(833);
      complex1.acos();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(2577.394358);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex2.I.getField();
      complex1.subtract(complex2);
      Complex complex4 = complex2.INF.subtract(complex1);
      complex4.pow((-3029.8));
      Complex complex5 = Complex.valueOf((-3029.8), (-20.0));
      Complex complex6 = complex5.tan();
      complex3.pow((-2259.056440922));
      complex1.isNaN();
      complex5.toString();
      complex3.tanh();
//      try { 
        complex6.nthRoot((-224));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -224
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-264.7113));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.divide((-4046.84416));
      Complex complex4 = complex0.multiply(complex3);
      complex4.abs();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = new Complex((-1365.862384), (-4.343048751383674E-10));
      complex6.divide(complex0);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex5.createComplex((-4.343048751383674E-10), (-1365.862384));
      complex9.ONE.getField();
      complex8.atan();
      complex0.hashCode();
      complex9.add(complex7);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.valueOf((-4046.84416), (-4046.84416));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.createComplex(0.0, 2.0923361778259277);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.NaN;
      complex9.sinh();
      complex2.getField();
      Complex complex10 = complex7.pow(complex2);
      complex6.asin();
      Complex.valueOf(3.68085620656127E-272, (double) (-753287431));
      Complex complex11 = Complex.ONE;
      complex11.sin();
      complex1.pow((-2259.056440922));
      Complex complex12 = complex11.tan();
      complex12.pow((-1641.75740865));
      complex5.multiply(1);
      complex6.tan();
//      try { 
        complex10.nthRoot((-753287431));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -753,287,431
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.valueOf((-167.2), (-167.2));
      complex2.NaN.subtract(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.acos();
      Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex4 = complex1.sqrt();
      complex4.pow(complex2);
      Complex complex5 = Complex.INF;
      int int0 = (-769);
//      try { 
        complex4.INF.nthRoot((-769));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -769
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.divide((-4046.84416));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.createComplex(0.0, 2.0923361778259277);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.NaN;
      complex9.sinh();
      complex2.getField();
      complex7.pow(complex2);
      complex6.asin();
      complex6.multiply((-753287431));
      Complex complex10 = Complex.valueOf(3.68085620656127E-272, (double) (-753287431));
      Complex complex11 = Complex.ONE;
      complex11.sin();
      complex1.pow((-2259.056440922));
      Complex complex12 = complex11.tan();
      complex12.INF.sinh();
      complex12.pow((-1641.75740865));
      complex5.multiply(1);
      complex6.tan();
      Complex.valueOf(3.68085620656127E-272);
      complex3.sinh();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(135.39755257671973);
      Complex.valueOf(135.39755257671973);
      complex1.I.getField();
      complex0.equals(complex1);
      Complex complex2 = complex1.cosh();
      complex2.ONE.divide(complex0);
      complex2.multiply(693);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      complex0.I.sqrt();
      Complex complex1 = complex0.exp();
      complex1.NaN.subtract(complex0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.acos();
      Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex1.getField();
      Complex complex3 = new Complex(1425.0, (-2.4319947090959425E-73));
      complex3.divide(complex2);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.createComplex(Double.POSITIVE_INFINITY, 1990.8212133593006);
      Complex complex5 = new Complex(0.20022669434547424);
      complex5.atan();
      complex4.hashCode();
      complex5.add(complex2);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.log();
      complex1.nthRoot(1);
      complex3.getArgument();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.multiply(1);
      complex4.readResolve();
      Complex complex7 = new Complex(Double.NaN);
      complex7.readResolve();
      complex1.getReal();
      Complex complex8 = Complex.I;
      complex8.sqrt1z();
      complex6.toString();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex9.sin();
      complex11.add(complex9);
      Complex complex12 = Complex.ZERO;
      complex12.multiply(1.5707963267948966);
      Complex.valueOf(0.0, 1.5707963267948966);
      complex4.hashCode();
      complex7.asin();
      Complex complex13 = Complex.I;
      complex13.divide(complex12);
      Complex complex14 = Complex.valueOf(0.0, 809.0);
      complex14.atan();
      complex0.subtract(2.2776327994966818E-125);
      complex10.add((double) 1);
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sinh();
      complex1.hashCode();
      complex1.cos();
      Complex complex2 = Complex.NaN;
      complex2.abs();
      Complex complex3 = Complex.I;
      complex3.acos();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.I;
      complex6.multiply(1);
      Complex complex7 = Complex.valueOf(2989.696, Double.NaN);
      Complex complex8 = complex7.exp();
      complex2.readResolve();
      complex8.subtract(1.1102230246251564E-16);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.5842979517754858);
      complex1.subtract(20.0);
      complex4.negate();
      Complex complex9 = Complex.INF;
      Complex complex10 = new Complex(2989.696, Double.POSITIVE_INFINITY);
      Complex complex11 = new Complex(20.0, 1);
      complex10.sqrt();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(122.07086676566);
      Complex.valueOf(122.07086676566);
      complex1.I.getField();
      Complex complex2 = complex0.divide((-961.334870900948));
      complex2.getField();
      complex1.pow(complex0);
      complex2.asin();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.multiply((-753287431));
      Complex.valueOf((-1293.0881124169687), 122.07086676566);
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(20.9, 122.07086676566);
      Complex complex7 = complex6.sin();
      complex2.pow((double) 1);
      Complex complex8 = complex7.tan();
      complex4.pow((-96.55898));
      Complex complex9 = complex0.multiply((-753287431));
      complex6.tan();
      complex8.nthRoot(1);
      complex5.acos();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.cosh();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide((-4046.84416));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.INF;
      complex4.getField();
      Complex complex5 = Complex.valueOf(1337.5863, (-4046.84416));
      complex5.divide(Double.NaN);
      Complex complex6 = complex3.sqrt();
      complex3.subtract(complex1);
      Complex complex7 = new Complex(700.4507539159625, (-4046.84416));
      complex7.cosh();
      Complex complex8 = complex6.conjugate();
      complex2.abs();
      complex1.nthRoot(1430);
      Complex complex9 = complex8.subtract(complex3);
      complex9.readResolve();
      complex1.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.createComplex(761.971837, 0.0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.log();
      complex5.getField();
      complex1.pow(complex5);
      complex3.asin();
      complex2.multiply(1);
      Complex complex6 = Complex.valueOf(840.32435, 1.557407724654902);
      complex1.sin();
      Complex complex7 = complex6.pow((-8.324100783330331E-109));
      Complex complex8 = complex4.tan();
      complex1.pow((double) 1);
      complex0.multiply((-1577));
      complex7.tan();
//      try { 
        complex8.nthRoot((-1045));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,045
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(122.07086676566);
      complex1.readResolve();
      complex0.isInfinite();
      Complex complex2 = complex1.sqrt1z();
      double double0 = (-53.8685809797075);
      Complex complex3 = new Complex((-53.8685809797075));
      complex2.reciprocal();
      complex1.log();
      complex3.getField();
//      try { 
        complex1.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(761.971837);
      complex0.getField();
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex1.sqrt();
      complex4.subtract(complex2);
      Complex complex5 = complex1.cosh();
      complex3.conjugate();
      complex1.abs();
      complex2.nthRoot(1430);
      complex2.subtract(complex1);
      complex5.readResolve();
      complex5.equals("cutoff singular value is {0}, should be at most {1}");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.exp();
      complex2.NaN.subtract(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.acos();
      Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.pow(complex3);
      complex6.NaN.log();
      complex5.INF.nthRoot(1);
      complex0.getArgument();
      Complex complex7 = complex3.sqrt();
      complex2.tan();
      Complex complex8 = complex7.multiply(0);
      Complex complex9 = Complex.valueOf((-1530.93627), (double) 1);
      Complex complex10 = new Complex((-964.9));
      complex10.exp();
      complex5.readResolve();
      complex8.subtract(1.845584943222965E-121);
      Complex.valueOf(647.337505399, (-2655.1));
      complex1.subtract((-964.9));
      complex7.negate();
      Complex complex11 = complex9.tanh();
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.exp();
      complex2.NaN.subtract(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.acos();
      Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex6.NaN.log();
      complex5.INF.nthRoot(1);
      complex0.getArgument();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex3.multiply(0);
      Complex complex10 = (Complex)complex1.ZERO.readResolve();
      complex9.readResolve();
      complex1.getReal();
      Complex complex11 = complex6.sqrt1z();
      complex2.toString();
      complex11.asin();
      Complex complex12 = complex8.tanh();
      Complex complex13 = complex12.ONE.sin();
      complex12.INF.add(complex4);
      complex10.ZERO.sinh();
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      complex7.asin();
      complex13.divide(complex6);
      complex10.atan();
      complex7.subtract((-167.2));
      complex9.add(1.2802691459655762);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.21135559678077698, (-20.0));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(761.971837);
      complex2.readResolve();
      complex1.isInfinite();
      complex0.sqrt1z();
      complex0.createComplex(2.0923361778259277, 1.0);
      complex0.reciprocal();
      Complex complex3 = new Complex(1719.7, (-20.0));
      Complex complex4 = new Complex(1.0);
      Complex complex5 = complex4.sinh();
      complex1.getField();
      Complex complex6 = new Complex(0.21135559678077698, 1719.7);
      Complex complex7 = complex6.pow(complex0);
      Complex complex8 = new Complex(1719.7, 761.971837);
      complex1.multiply((-1632));
      double double0 = (-1828.8024);
      Complex complex9 = Complex.valueOf((-20.0), 2.0923361778259277);
      Complex complex10 = complex5.sin();
      complex10.pow((double) (-1632));
      complex9.tan();
      complex0.pow((double) (-1632));
      complex5.multiply((-1632));
      complex2.tan();
//      try { 
        complex7.nthRoot((-752));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -752
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.acos();
      Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.pow(complex2);
      complex6.NaN.log();
      complex5.INF.nthRoot(1);
      complex0.getArgument();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.multiply(0);
      complex1.ZERO.readResolve();
      complex8.readResolve();
      complex1.getReal();
      Complex complex9 = complex6.sqrt1z();
      complex2.toString();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex11.ONE.sin();
      complex11.INF.add(complex4);
      Complex complex13 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf((-167.2), 0.7071067811865476);
      complex0.hashCode();
      Complex complex14 = complex10.asin();
      complex14.ZERO.divide(complex13);
      complex2.atan();
      complex3.subtract(0.05694137513637543);
      complex9.add((double) 0);
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(122.07086676566);
      Complex complex2 = Complex.valueOf(122.07086676566);
      complex1.I.getField();
      Complex complex3 = complex0.divide((-961.334870900948));
      complex0.hashCode();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.add(complex4);
      Complex complex7 = complex6.multiply(3269017.5);
      complex5.hashCode();
      Complex complex8 = complex1.asin();
      complex7.divide(complex6);
      complex8.atan();
      complex3.subtract(2.0);
      complex2.add(680.00384);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.exp();
      complex2.NaN.subtract(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.acos();
      Complex complex5 = Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.pow(complex3);
      complex7.NaN.log();
      complex6.INF.nthRoot(1);
      complex0.getArgument();
      complex3.sqrt();
      Complex complex8 = complex3.multiply(0);
      complex1.ZERO.readResolve();
      complex8.readResolve();
      complex1.getReal();
      Complex complex9 = complex7.sqrt1z();
      complex2.toString();
      Complex complex10 = complex9.asin();
      complex3.equals(complex0);
      complex10.cosh();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.divide(complex11);
      complex3.toString();
      complex11.multiply(1216);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1719.7, 1719.7);
      Complex complex1 = complex0.I.tanh();
      complex0.NaN.hashCode();
      complex1.INF.cos();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex3.NaN.atan();
      complex0.hashCode();
      complex1.getArgument();
      complex2.abs();
      Complex complex5 = complex1.multiply((-3461.470886051));
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex6.ZERO.multiply(2308);
      complex7.NaN.acos();
      complex6.I.reciprocal();
      complex3.INF.subtract((-1117.242381431));
      complex0.createComplex(361.47033, 1.0);
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex6.pow(316.82243773);
      complex8.reciprocal();
      complex9.multiply(693);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(761.971837);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex3.divide(complex1);
      complex5.asin();
      Complex complex7 = complex6.multiply(Double.NaN);
      Complex complex8 = complex2.exp();
      complex3.log();
      Complex complex9 = complex3.createComplex(777.236213, (-2754.793636001537));
      complex7.atan();
      complex8.pow(782.34710214);
      complex9.multiply(4248);
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex10.negate();
      complex4.subtract((-2754.793636001537));
      Complex complex12 = complex11.exp();
      complex12.isNaN();
      object0.toString();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-264.7113));
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.isInfinite();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex0.tanh();
      complex4.NaN.abs();
      complex4.I.sin();
      complex0.conjugate();
      Complex complex5 = new Complex(785.104421133, Double.NaN);
//      try { 
        complex3.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.createComplex(3095.4165503, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.exp();
      complex0.negate();
      complex1.divide(complex0);
      complex4.divide(complex0);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.exp();
      complex6.log();
      complex3.createComplex(3095.4165503, 2401.306904);
      Complex complex7 = complex0.atan();
      complex1.pow((-2239.906));
      complex2.multiply(5501);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex8.negate();
      Complex complex9 = complex6.subtract((double) 5501);
      complex7.exp();
      complex5.isNaN();
      complex6.toString();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.createComplex(3095.4165503, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.exp();
      complex0.negate();
      complex1.divide(complex0);
      complex1.divide(complex0);
      complex3.asin();
      complex2.multiply(3095.4165503);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex4.log();
      Complex complex7 = complex1.createComplex(Double.POSITIVE_INFINITY, 782.34710214);
      complex7.atan();
      Complex complex8 = complex5.pow((double) 5501);
      Complex complex9 = complex8.multiply(2979);
      complex9.negate();
      complex0.subtract((-20.0));
      complex2.exp();
      complex6.isNaN();
      complex1.toString();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-264.7113));
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.exp();
      complex1.pow(Double.NaN);
      double double0 = 1578.1;
      Complex complex2 = complex1.createComplex(1578.1, (-1865.3));
      Complex complex3 = complex1.add(complex2);
      complex3.atan();
      // Undeclared exception!
      complex3.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-1.0524557502830645E-8), (-2.782159649779516));
      complex2.equals(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sqrt();
      complex4.add(complex0);
      Complex complex5 = complex2.tanh();
      Complex complex6 = new Complex((-1.0524557502830645E-8), (-1.0524557502830645E-8));
      complex6.abs();
      complex5.sin();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex1.cosh();
      complex1.atan();
      Complex complex9 = complex7.sinh();
      complex7.hashCode();
      complex7.sqrt();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex10.multiply((-2138743782));
      Complex complex12 = complex7.negate();
      complex9.pow((double) (-391));
      complex1.sqrt();
      Complex complex13 = complex9.exp();
      Complex complex14 = new Complex(264.7113);
      Complex complex15 = new Complex((-1.0524557502830645E-8), 2094.956913964368);
      complex13.subtract(complex15);
      Complex complex16 = complex12.conjugate();
      complex8.getField();
      Complex complex17 = Complex.ONE;
      complex11.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1719.7, 1719.7);
      Complex complex1 = complex0.I.tanh();
      complex0.NaN.hashCode();
      Complex complex2 = Complex.I;
      complex2.multiply(complex1);
      Complex complex3 = Complex.INF;
      complex3.abs();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 1719.7);
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.sqrt();
      complex4.hashCode();
      complex0.cos();
      complex0.abs();
      complex5.acos();
      complex0.sqrt();
      Complex complex7 = complex0.tan();
      complex7.multiply(1425);
      Complex.valueOf(1719.7, 2785.30241);
      Complex complex8 = Complex.valueOf((double) 1425);
      Complex complex9 = complex8.exp();
      complex6.readResolve();
      complex9.subtract(Double.POSITIVE_INFINITY);
      Complex.valueOf(2.0, 20.0);
      complex2.subtract(1719.7);
      complex4.negate();
      Complex complex10 = new Complex((-2524.1183142454474));
      Complex complex11 = complex10.tanh();
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide((-4046.84416));
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex3.atan();
      complex4.hashCode();
      complex2.getArgument();
      Complex complex7 = new Complex(0.0);
      complex7.abs();
      Complex complex8 = complex6.multiply(448.994466398);
      Complex complex9 = complex6.multiply(complex8);
      complex7.multiply(2308);
      complex5.acos();
      Complex complex10 = Complex.I;
      complex10.reciprocal();
      complex6.subtract(448.994466398);
      complex3.createComplex(Double.NaN, 0.0);
      complex5.reciprocal();
      complex10.pow((-3240.088776485949));
      complex9.reciprocal();
      complex9.multiply(693);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide((-1.0));
      Complex complex4 = complex3.multiply(complex0);
      complex3.NaN.abs();
      Complex complex5 = complex0.divide(complex1);
      complex5.ZERO.sqrt();
      complex2.I.hashCode();
      Complex complex6 = complex3.ONE.cos();
      complex1.abs();
      complex3.acos();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex4.I.tan();
      complex8.INF.multiply((-5));
      Complex complex9 = Complex.valueOf(4.218682431618625E286, (-20.0));
      complex9.ONE.exp();
      Complex complex10 = complex9.exp();
      Complex complex11 = new Complex(6.283185307179586);
      complex6.subtract(complex11);
      complex2.conjugate();
      complex10.getField();
      Complex complex12 = Complex.ONE;
      complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-264.7113));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.tanh();
      complex3.NaN.abs();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex0.conjugate();
      complex5.INF.cosh();
      Complex complex6 = complex0.atan();
      complex5.sinh();
      complex3.hashCode();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex1.sqrt();
      complex8.multiply((-391));
      Complex complex9 = complex2.negate();
      complex2.pow((double) (-391));
      Complex complex10 = complex1.INF.sqrt();
      complex0.readResolve();
      complex3.subtract((-5.907349480138712E-8));
      Complex.valueOf((-5.907349480138712E-8), (-20.0));
      complex4.subtract(Double.NaN);
      complex10.negate();
      complex4.tanh();
      complex3.getArgument();
      complex9.add(complex8);
      complex5.add(complex4);
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1719.7, 1719.7);
      Complex complex1 = complex0.I.tanh();
      complex0.NaN.hashCode();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.ONE.atan();
      complex4.NaN.atan();
      complex0.hashCode();
      complex1.getArgument();
      complex3.abs();
      Complex complex5 = complex1.multiply((-3461.470886051));
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex6.ZERO.multiply(2308);
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex6.I.reciprocal();
      complex4.INF.subtract(1719.7);
      Complex complex10 = complex8.createComplex(1719.7, 361.47033);
      complex4.reciprocal();
      complex2.pow(2881.7);
      complex9.reciprocal();
      complex10.multiply(1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.I.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.sinh();
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.I.divide(complex1);
      Complex complex2 = complex0.NaN.createComplex(0.0, 847.0);
      Complex complex3 = complex2.ONE.atan();
      complex0.hashCode();
      complex0.add(complex3);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(761.971837);
      complex0.readResolve();
      complex0.isInfinite();
      complex2.sqrt1z();
      complex1.createComplex(2.0923361778259277, 2.0923361778259277);
      Complex complex3 = complex0.reciprocal();
      complex3.INF.log();
      Complex complex4 = complex1.sinh();
      complex4.I.getField();
      complex4.NaN.pow(complex3);
      complex4.INF.asin();
      Complex complex5 = complex4.I.multiply(1);
      Complex.valueOf(0.0, (-1828.8024));
      complex5.ONE.sin();
      complex2.I.pow(2.0923361778259277);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.pow(761.971837);
      complex7.ZERO.multiply(1);
      Complex complex8 = complex3.tan();
      complex8.nthRoot(1);
      complex4.acos();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(507.3238426097197);
      Complex complex1 = complex0.multiply(602);
      complex1.I.readResolve();
      Complex complex2 = complex0.cos();
      complex2.INF.cos();
      Complex complex3 = complex0.negate();
      complex0.divide((double) 602);
      complex1.hashCode();
      complex1.getArgument();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-264.7113));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.tanh();
      complex3.NaN.abs();
      complex3.I.sin();
      Complex complex4 = complex0.conjugate();
      complex4.INF.cosh();
      Complex complex5 = complex0.atan();
      complex4.sinh();
      complex3.hashCode();
      complex5.sqrt();
      Complex complex6 = complex1.sqrt();
      complex6.multiply((-391));
      Complex complex7 = complex2.negate();
      complex2.pow((double) (-391));
      complex1.INF.sqrt();
      complex3.exp();
      Complex complex8 = new Complex(6.283185307179586);
      complex7.subtract(complex8);
      Complex complex9 = complex7.conjugate();
      complex9.getField();
      Complex complex10 = Complex.ONE;
      complex6.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      complex1.I.cosh();
      complex0.toString();
      double double1 = (-5561.854385600919);
      Complex complex2 = complex0.subtract((-5561.854385600919));
      int int0 = 1811;
      complex2.INF.multiply(1811);
      Complex complex3 = complex2.ZERO.cos();
      complex3.I.toString();
      Complex complex4 = complex3.tanh();
      complex4.acos();
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0183920005400422E109);
      Complex complex1 = complex0.tanh();
      complex0.createComplex(1.0183920005400422E109, (-410.0));
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide((-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      complex1.NaN.reciprocal();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex1.ONE.pow(complex0);
      complex0.equals("");
      complex1.I.hashCode();
      complex1.getField();
      complex1.ZERO.divide((-2179.10321));
      Complex complex5 = complex4.tanh();
      complex5.INF.exp();
      complex5.subtract(complex3);
      Complex.valueOf((-20.0));
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.createComplex(3095.4165503, Double.POSITIVE_INFINITY);
      complex2.exp();
      complex0.negate();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex6.I.multiply(3095.4165503);
      complex7.exp();
      complex4.ONE.log();
      complex5.createComplex(3095.4165503, 782.34710214);
      complex0.atan();
      complex3.ZERO.pow(1057.890903134);
      Complex complex8 = complex2.multiply(5501);
      Complex complex9 = complex8.ONE.negate();
      complex8.subtract(2.0);
      complex4.exp();
      complex3.isNaN();
      complex1.toString();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.05786345899105072, 0.05786345899105072);
      complex0.multiply(0.05786345899105072);
      double double0 = (-990.622334);
      complex1.ZERO.tan();
      complex1.getField();
      Complex complex2 = complex0.multiply((-990.622334));
      complex1.getReal();
      complex2.sqrt();
      int int0 = 0;
      complex2.INF.conjugate();
//      try { 
        complex2.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf((-491.0));
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.ONE.subtract(0.0);
      Complex complex4 = complex3.NaN.negate();
      complex4.INF.log();
      complex3.ONE.divide(4236.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.ONE.pow(0.0);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex0.pow(complex5);
      complex4.acos();
      complex8.INF.createComplex(0.0, 20.0);
      complex3.nthRoot(1634);
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      Complex complex9 = complex8.multiply(complex0);
      complex0.ZERO.acos();
      complex2.equals(object0);
      Complex complex10 = complex0.log();
      Complex complex11 = Complex.valueOf(1041.1093614);
      complex11.ONE.getArgument();
      Complex complex12 = complex10.INF.atan();
      complex12.atan();
      complex9.createComplex(6.283185307179586, (-1.1357810855950775E-7));
      Complex complex13 = complex5.conjugate();
      complex0.sin();
      complex7.divide(complex6);
      complex1.reciprocal();
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.ZERO.subtract(0.0);
      complex3.INF.getArgument();
      Complex complex4 = complex2.INF.acos();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.ONE.sqrt();
      Complex complex7 = complex0.conjugate();
      complex2.INF.multiply((-1062));
      Complex complex8 = complex1.multiply(0);
      Complex complex9 = complex8.NaN.add(0.0);
      complex8.nthRoot(762);
      Complex complex10 = complex1.multiply(2115);
      Complex complex11 = complex10.I.tanh();
      Complex.valueOf((-1270.809));
      complex0.sqrt1z();
      complex6.pow((-669.11572281716));
      complex1.toString();
      complex7.multiply(complex4);
      complex10.sin();
      complex5.subtract(complex6);
      Complex complex12 = complex9.divide(complex10);
      Complex.valueOf(350.7687, (-2920.159154152));
      complex11.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex0.abs();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.ONE.sin();
      complex6.NaN.atan();
      Complex complex7 = complex0.subtract(0.0);
      complex1.isInfinite();
      complex0.readResolve();
      Complex complex8 = complex1.multiply(973.23356671166);
      Complex complex9 = complex7.negate();
      complex9.NaN.createComplex(884.30411913, 0.0);
      complex9.NaN.getArgument();
      complex3.acos();
      complex3.multiply(1);
      complex9.ONE.toString();
      complex0.getImaginary();
      complex8.toString();
      complex8.getImaginary();
      Complex complex10 = complex0.cosh();
      complex10.I.getField();
      Complex complex11 = complex4.sqrt();
      complex11.reciprocal();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-345.28017217), (-345.28017217));
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.NaN.subtract(0.0);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = Complex.valueOf(1.308072566986084, 645.544);
      Complex complex5 = complex4.INF.multiply((-601));
      complex4.ZERO.cosh();
      complex5.NaN.hashCode();
      complex0.multiply(complex4);
      complex3.ZERO.createComplex((-601), (-601));
      complex1.hashCode();
      Complex complex6 = complex0.log();
      complex6.I.createComplex(0.0, 0.0);
      Complex complex7 = complex6.subtract(complex3);
      complex7.NaN.pow(complex1);
      complex2.negate();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.log();
      Object object0 = new Object();
      complex4.ZERO.abs();
      complex3.NaN.multiply(17);
      complex3.equals(object0);
      complex1.sinh();
      complex0.equals(complex1);
      complex1.abs();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.ZERO.sinh();
      complex6.abs();
      complex6.I.hashCode();
      Complex complex7 = complex6.I.subtract(20.0);
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex5.tan();
      complex8.I.atan();
      complex6.pow(complex7);
      complex4.getField();
      complex1.cos();
      complex2.abs();
      complex5.hashCode();
      complex9.isNaN();
      complex5.log();
      complex8.abs();
      complex1.cosh();
      complex6.subtract(0.0);
      Complex complex10 = Complex.NaN;
      complex1.subtract(complex10);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.getArgument();
      Complex complex1 = complex0.I.multiply(930);
      Complex complex2 = complex0.I.createComplex(0.0, 0.0);
      complex0.multiply(0.0);
      Complex complex3 = complex2.sqrt1z();
      complex3.I.abs();
      complex0.cosh();
      Complex complex4 = complex0.multiply(930);
      complex3.hashCode();
      complex3.hashCode();
      complex4.getReal();
      Complex complex5 = complex1.pow(complex4);
      complex1.I.multiply(930);
      complex4.abs();
      Complex complex6 = complex5.ZERO.multiply(0.0);
      complex5.ZERO.cos();
      complex5.ZERO.tanh();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.ONE.reciprocal();
      complex8.I.exp();
      complex5.ZERO.divide(complex0);
      Complex complex9 = complex5.add(0.0);
      complex9.ZERO.cos();
      complex4.tanh();
      complex4.sqrt1z();
      complex0.isInfinite();
      complex6.nthRoot(985);
      complex3.createComplex(930, 0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.16276302933692932, 0.16276302933692932);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.NaN.divide((-648.4538354747539));
      complex1.INF.nthRoot(858);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.nthRoot(3128);
      complex1.INF.add(0.0);
      complex0.NaN.hashCode();
      Complex complex3 = complex1.I.cosh();
      complex1.NaN.getArgument();
      complex0.getArgument();
      Complex complex4 = complex1.sin();
      complex4.ONE.atan();
      complex1.abs();
      complex1.readResolve();
      Complex complex5 = complex4.add(Double.NaN);
      Complex complex6 = Complex.ZERO;
      complex5.INF.divide(complex6);
      Object object0 = new Object();
      complex0.equals(object0);
      complex3.divide(complex5);
      Object object1 = new Object();
      complex1.equals(object1);
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6398000717163086);
      int int0 = (-233);
//      try { 
        complex0.nthRoot((-233));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -233
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3769.70224, 0.0);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.I;
      complex1.add(complex2);
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex0.I.createComplex(0.0, 3627.639);
      complex3.INF.hashCode();
      Complex complex5 = complex0.sqrt();
      complex5.I.getArgument();
      Complex complex6 = complex3.add((double) 0);
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex6.sqrt1z();
      complex8.I.pow(complex3);
      complex0.createComplex((-2284.2151309098194), 2759.31304717455);
      complex2.isInfinite();
      complex7.subtract(3596.322950422);
      Complex.valueOf(0.0, 0.0);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.2), 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.acos();
      Complex.valueOf((-167.2), Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.pow(complex4);
      complex7.NaN.log();
      complex6.INF.nthRoot(1);
      complex0.getArgument();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex4.multiply(0);
      complex1.ZERO.readResolve();
      complex9.readResolve();
      complex1.getReal();
      Complex complex10 = complex7.sqrt1z();
      complex2.toString();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex8.tanh();
      complex12.ONE.sin();
      complex12.INF.add(complex5);
      Complex complex13 = complex7.multiply(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex14 = complex11.asin();
      complex14.ZERO.divide(complex13);
      complex4.atan();
      complex3.subtract(0.05694137513637543);
      complex10.add((double) 0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1293.137492));
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex1.ZERO.sqrt1z();
      complex4.INF.hashCode();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.cosh();
      Complex.valueOf(0.0, 0.0);
      complex5.isInfinite();
      complex0.getArgument();
      complex3.NaN.readResolve();
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex5.conjugate();
      complex8.ZERO.negate();
      complex1.getField();
      complex6.toString();
      complex7.NaN.toString();
      complex8.I.readResolve();
      complex4.equals(complex0);
      complex1.hashCode();
      complex3.I.multiply(complex4);
      complex8.isInfinite();
      complex7.getImaginary();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.6262783092357));
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.log();
      complex2.I.acos();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex3.ONE.cos();
      Complex complex7 = complex5.I.multiply(1928.9418582767);
      Complex complex8 = complex7.subtract(complex3);
      complex0.reciprocal();
      complex3.INF.abs();
      complex5.readResolve();
      complex8.I.hashCode();
      complex5.ONE.multiply((-842.6262783092357));
      complex4.hashCode();
      complex5.INF.conjugate();
      complex3.I.add(complex8);
      Complex complex9 = complex1.INF.log();
      complex3.subtract(0.0);
      complex6.pow(complex4);
      complex9.pow(0.0);
      complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.exp();
      complex2.INF.nthRoot(1050);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.I.subtract((-1.0));
      Complex complex5 = complex3.multiply(complex0);
      complex5.INF.reciprocal();
      complex5.multiply((-1.0));
      complex4.NaN.cos();
      Complex complex6 = complex0.subtract((-1.0));
      complex6.tanh();
      complex6.abs();
      complex5.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1313.3154190679038);
      complex4.cos();
      Complex complex7 = complex0.sqrt();
      complex4.abs();
      complex5.getReal();
      complex7.multiply(3211.45096745353);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.sinh();
      complex1.hashCode();
      complex1.isNaN();
      Complex complex2 = complex1.multiply(37);
      complex1.cosh();
      complex0.conjugate();
      complex2.divide(0.0);
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.createComplex(2553.0, 0.0);
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex2.I.pow(complex1);
      complex4.ZERO.getField();
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex5.ONE.add(complex2);
      complex6.NaN.toString();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.subtract(complex1);
      complex7.I.exp();
      complex5.getReal();
      complex8.getImaginary();
      Complex complex9 = new Complex(0.0);
      complex1.INF.tan();
      Object object0 = complex9.readResolve();
      complex5.equals(object0);
      complex6.add(0.0);
      complex7.isInfinite();
      complex3.tanh();
      complex6.multiply(0.0);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1546.062));
      Complex complex1 = complex0.add(1.8976664543151855);
      complex1.INF.add((-1.0672213971363184E-7));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.NaN.tan();
      complex1.ONE.hashCode();
      complex4.getImaginary();
      Complex complex6 = complex4.ZERO.cos();
      complex6.INF.subtract(complex1);
      Complex complex7 = complex2.add(0.0);
      complex4.reciprocal();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex7.divide(complex1);
      complex0.getImaginary();
      complex3.isNaN();
      complex5.getReal();
      complex3.abs();
      complex6.subtract(complex8);
      complex9.multiply(1);
      complex5.abs();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(2.1076716069929933E-95, 781.034713128862);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tan();
      complex3.INF.log();
      complex2.INF.getArgument();
      Complex complex4 = complex1.sqrt();
      complex4.I.abs();
//      try { 
        complex4.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide((-4046.84416));
      Complex complex4 = complex3.multiply(complex0);
      complex3.NaN.abs();
      Complex complex5 = complex0.divide(complex1);
      complex5.ZERO.sqrt();
      complex2.I.hashCode();
      Complex complex6 = complex3.ONE.cos();
      complex1.abs();
      complex3.acos();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex4.I.tan();
      complex8.INF.multiply(1);
      Complex complex9 = Complex.valueOf(4.218682431618625E286, (-20.0));
      complex9.ONE.exp();
      complex4.readResolve();
      complex4.subtract(0.0);
      Complex.valueOf(1.0, 4.218682431618625E286);
      complex7.subtract(0.0);
      Complex complex10 = complex2.negate();
      complex10.tanh();
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(122.07086676566);
      Complex.valueOf(122.07086676566);
      complex1.I.getField();
      Complex complex2 = complex0.divide((-961.334870900948));
      complex0.hashCode();
      complex0.equals(complex2);
      Complex complex3 = complex2.cosh();
      complex3.ONE.divide(complex0);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.I.subtract(complex0);
      complex0.I.cos();
      complex0.ONE.nthRoot(1);
      Complex complex4 = complex0.negate();
      complex4.toString();
      complex2.ONE.nthRoot(1);
      Complex complex5 = Complex.valueOf((-143.37754694), (double) 1);
      Complex complex6 = Complex.valueOf(1.5925182066949723E-180);
      complex2.ZERO.readResolve();
      Complex complex7 = complex5.atan();
      complex2.NaN.atan();
      complex7.ONE.readResolve();
      complex0.ONE.toString();
      Complex complex8 = complex5.subtract(complex6);
      Complex complex9 = complex8.NaN.cosh();
      complex9.ONE.cos();
      complex6.ZERO.asin();
      Complex complex10 = complex3.log();
      complex10.NaN.atan();
      complex9.abs();
      complex2.add(2029.0);
      complex10.isInfinite();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7660059778220905E-220);
      Complex complex1 = Complex.valueOf(1.7660059778220905E-220);
      Complex complex2 = complex1.ONE.sqrt();
      complex2.INF.multiply(complex1);
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.add(complex1);
      complex3.INF.multiply(1343.617405666);
      complex0.getArgument();
      complex4.INF.nthRoot(458);
      Complex.valueOf((double) 458, (-3862.21223411514));
      complex4.readResolve();
      complex3.getField();
      complex0.exp();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-714.77042606));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex.valueOf((-714.77042606), 0.0);
      Complex complex2 = complex0.I.pow(complex1);
      complex2.INF.multiply(complex1);
      Complex complex3 = complex0.INF.add(634.843);
      complex3.NaN.negate();
      complex3.NaN.tan();
      Complex complex4 = complex1.NaN.divide(1932.9594677574);
      complex0.getReal();
      Complex complex5 = complex0.exp();
      complex5.INF.negate();
      complex1.I.getField();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.add(complex1);
      complex5.log();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex7.INF.acos();
      Complex complex10 = complex7.negate();
      complex10.ZERO.readResolve();
      complex8.hashCode();
      complex7.add((-714.77042606));
      complex8.negate();
      Complex complex11 = complex5.multiply((-1920));
      complex11.I.sin();
      complex4.readResolve();
      complex4.add((-2735.606710867));
      complex5.add(0.0);
      complex9.getReal();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.toString();
      complex0.getImaginary();
      complex0.divide(0.0);
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex1.INF.add(0.0);
      complex0.exp();
      Complex complex5 = complex1.tan();
      complex0.I.readResolve();
      Complex complex6 = complex5.pow(complex1);
      complex6.I.subtract(complex4);
      complex0.readResolve();
      Complex complex7 = complex0.multiply(0.0);
      complex7.ZERO.atan();
      Complex complex8 = complex6.createComplex(0.0, 6470.52359373746);
      complex8.exp();
      Complex complex9 = complex8.exp();
      complex9.NaN.multiply(912);
      Complex complex10 = new Complex(0.0, 0.6739205121994019);
      complex4.equals(complex10);
      complex4.equals(complex3);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.cos();
      complex2.pow(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex2.cos();
      complex6.I.negate();
      Complex complex8 = complex5.INF.reciprocal();
      Complex complex9 = complex4.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex8.INF.acos();
      Complex complex11 = complex0.createComplex(0.0, 0.0);
      Complex complex12 = complex11.ONE.negate();
      Complex complex13 = complex7.exp();
      Complex complex14 = complex13.ONE.acos();
      Complex complex15 = complex14.ZERO.tan();
      Complex complex16 = complex15.NaN.sin();
      Complex complex17 = complex16.multiply(1);
      Complex complex18 = complex15.ZERO.conjugate();
      Complex complex19 = complex13.conjugate();
      Complex complex20 = complex19.ONE.reciprocal();
      complex20.I.conjugate();
      Complex complex21 = complex3.subtract(complex11);
      complex19.divide(complex5);
      Complex complex22 = complex13.add(complex11);
      complex22.getArgument();
      Complex complex23 = complex6.tan();
      Complex complex24 = complex20.ZERO.add(0.0);
      Complex complex25 = complex12.asin();
      assertEquals(0.0, complex25.getImaginary(), 0.01);
      
      complex23.isInfinite();
      double double0 = complex4.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex8.sqrt();
      assertTrue(complex8.equals((Object)complex24));
      
      complex18.multiply(complex20);
      assertTrue(complex15.equals((Object)complex1));
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertSame(complex13, complex23);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(1.0, complex20.getReal(), 0.01);
      
      complex21.reciprocal();
      Complex complex26 = complex6.conjugate();
      assertSame(complex6, complex17);
      assertSame(complex26, complex10);
  }
}
