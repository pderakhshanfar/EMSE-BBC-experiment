/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:01:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.acos();
      complex1.tan();
      Complex complex2 = Complex.valueOf((-1595.8584169677));
      Complex complex3 = complex2.conjugate();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-2.2E-9), (-2.2E-9));
      Complex complex1 = complex0.acos();
      complex1.tan();
      Complex.valueOf((-2.2E-9));
      Complex complex2 = Complex.I;
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(30152.34361707, 30152.34361707);
      Complex complex2 = Complex.valueOf(3066.9153, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.sqrt1z();
      complex2.acos();
      complex1.multiply(complex3);
      complex3.tan();
      complex2.sinh();
      complex1.sqrt();
      Complex complex4 = complex2.multiply(complex3);
      complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-3.4893601256685762E283), 5.485621942658485);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1829.3159268115, Double.NaN);
      complex1.NaN.pow(complex0);
      Complex complex2 = complex0.sqrt1z();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-2.8883532688356087E-8), Double.POSITIVE_INFINITY);
      complex0.multiply((-135));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.0573438849721875));
      Complex complex1 = Complex.valueOf((-292.498), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ZERO.sin();
      complex0.I.abs();
      complex0.INF.getField();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.pow(complex3);
      Complex.valueOf(1.5707963267948966, 1.0);
      Complex complex5 = complex4.I.negate();
      Complex complex6 = Complex.valueOf(2568.205256310128);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex4.exp();
      Complex.valueOf(187820.9617926978);
      Complex complex9 = complex1.add(187820.9617926978);
      complex9.ZERO.getField();
      complex8.subtract(complex7);
      complex5.conjugate();
      complex2.createComplex((-2491.585100510923), (-2499.34227));
      complex6.nthRoot(51);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(3.141592653589793, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt1z();
      complex2.ONE.pow(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.0), (-4.905712741596318E-9));
      Complex complex2 = complex1.sqrt1z();
      complex2.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(964.9654342, (-1822.73));
      Complex complex1 = new Complex(964.9654342);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = new Complex(964.9654342, (-0.40808787065954366));
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = Complex.valueOf((-1.0));
      Complex complex10 = complex5.multiply((-1822.73));
      Complex complex11 = complex8.atan();
      complex5.pow(complex9);
      complex6.nthRoot(7);
      Complex complex12 = complex2.log();
      Complex complex13 = complex4.asin();
      complex3.NaN.pow(complex12);
      Complex complex14 = complex8.cosh();
      complex14.abs();
      Complex complex15 = Complex.INF;
      complex2.pow(complex15);
      complex4.sin();
      complex11.add((-0.40808787065954366));
      Complex complex16 = Complex.valueOf((-2085.6695));
      complex16.negate();
      complex15.reciprocal();
      Complex complex17 = complex16.tan();
      complex10.equals(complex13);
      complex17.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.408112967339146E-255, 7.408112967339146E-255);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.ZERO.getArgument();
      complex3.ZERO.readResolve();
      complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex2.ZERO.subtract(complex5);
      Complex complex7 = complex6.ONE.sqrt1z();
      complex7.NaN.add(22.1938386);
      Complex complex8 = complex2.INF.divide((-2.2258513086839407E-9));
      complex8.INF.cosh();
      complex1.INF.sqrt1z();
      Complex.valueOf(0.0);
      complex4.INF.cos();
      complex5.NaN.toString();
      Complex complex9 = complex4.I.asin();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex10.NaN.sin();
      complex2.divide((-51.20736031621));
      Complex complex12 = complex5.divide(complex0);
      Complex complex13 = complex12.pow((-51.20736031621));
      complex3.log();
      Complex complex14 = complex5.negate();
      complex0.ZERO.sin();
      complex11.readResolve();
      complex8.reciprocal();
      complex14.sqrt();
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex0.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(2203, 2203);
      complex0.sqrt1z();
      Complex complex1 = new Complex(201.3494, 2.7211316452521414E287);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(3.141592653589793, Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      complex0.log();
      complex0.conjugate();
      Complex complex1 = new Complex((-2.2258513086839407E-9));
      complex1.ONE.createComplex(789.22, (-825.1184877833865));
      Complex.valueOf((-2.2258513086839407E-9));
      Complex complex2 = complex0.divide(Double.NaN);
      complex2.createComplex(20.0, (-4.8279217213630774E-67));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.NaN.add(complex1);
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.INF.hashCode();
      complex2.I.tan();
      complex0.ZERO.conjugate();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = Complex.ONE;
      complex3.NaN.nthRoot(183);
      Complex complex5 = complex0.multiply(complex4);
      complex4.ZERO.exp();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.ZERO.acos();
      complex8.ZERO.log();
      Complex complex9 = complex6.ZERO.multiply(20.0);
      Complex complex10 = complex6.I.sqrt1z();
      complex6.nthRoot(2166);
      complex4.ZERO.cos();
      complex10.INF.atan();
      complex4.I.toString();
      Complex complex11 = complex3.add(20.0);
      complex11.I.conjugate();
      complex6.INF.readResolve();
      Complex complex12 = Complex.valueOf(377.9690197, (double) 183);
      Complex complex13 = complex10.tan();
      complex13.I.hashCode();
      Complex complex14 = complex12.tanh();
      complex0.asin();
      complex9.getField();
      complex5.subtract((double) 2166);
      complex8.divide(complex14);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.cosh();
      complex4.ONE.multiply((-1.0));
      complex3.ONE.createComplex(3.156243682143956E47, (-1.0));
      complex4.getField();
      complex0.reciprocal();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.divide(Double.POSITIVE_INFINITY);
      complex6.readResolve();
      complex1.tanh();
      complex5.NaN.tanh();
      complex3.pow(Double.POSITIVE_INFINITY);
      complex2.cosh();
      complex6.abs();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex6.negate();
      complex8.INF.cos();
      Complex complex9 = complex7.tan();
      complex9.divide(3783.61330228367);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.multiply(526);
      complex3.INF.atan();
      complex1.divide(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(-0.0);
      complex1.NaN.acos();
      Complex complex2 = complex0.multiply(Double.NaN);
      complex2.ZERO.abs();
      Complex complex3 = complex1.sinh();
      complex2.ONE.add(complex3);
      complex0.INF.nthRoot(499);
      Complex complex4 = complex3.exp();
      complex1.readResolve();
      Complex complex5 = complex2.createComplex(0.0, (-676.335122));
      complex3.acos();
      complex5.sin();
      Complex complex6 = complex4.multiply(complex1);
      Complex complex7 = complex0.negate();
      complex6.divide(Double.NaN);
      Complex complex8 = complex5.reciprocal();
      complex8.ZERO.tan();
      Complex complex9 = complex3.pow(Double.NaN);
      complex9.INF.sqrt1z();
      Complex complex10 = complex1.acos();
      complex10.nthRoot(499);
      Complex.valueOf(0.0);
      complex10.sin();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-752));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.multiply(complex2);
      complex0.I.exp();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.multiply((-2485.306197756837));
      Complex complex6 = Complex.INF;
      complex5.log();
      complex5.getReal();
      Complex complex7 = new Complex((-20.0), 950.0809);
      Complex complex8 = new Complex((-20.0), 6.283185307179586);
      complex8.tanh();
      complex2.subtract(655.903633457);
      complex5.multiply(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      complex1.conjugate();
      Complex complex2 = complex1.NaN.add(complex0);
      complex0.exp();
      Complex complex3 = complex2.I.divide(complex1);
      Complex.valueOf((-346.0));
      complex0.getArgument();
      complex0.I.exp();
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = Complex.valueOf((-2.2258513086839407E-9), Double.POSITIVE_INFINITY);
      complex5.I.acos();
      complex2.negate();
      complex5.log();
      complex3.getReal();
      complex1.tanh();
      Complex complex7 = complex6.subtract(Double.POSITIVE_INFINITY);
      complex7.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2258513086839407E-9));
      Complex complex1 = complex0.sqrt1z();
      complex0.cos();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1822.73), (-1822.73));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex4.divide(complex7);
      Complex complex9 = Complex.valueOf(832.4667206948286);
      complex9.getArgument();
      complex8.exp();
      complex6.exp();
      Complex complex10 = Complex.I;
      Complex.valueOf(3699.505304469672, (-1822.73));
      complex2.negate();
      complex6.log();
      Complex complex11 = new Complex(3699.505304469672, Double.POSITIVE_INFINITY);
      complex11.getReal();
      Complex complex12 = Complex.I;
      Complex.valueOf(Double.POSITIVE_INFINITY, 3699.505304469672);
      complex8.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.toString();
      Complex complex1 = new Complex((-4440.2137523157), (-4440.2137523157));
      Complex complex2 = complex0.divide(complex0);
      Complex complex3 = complex0.createComplex((-1364.0559), (-4440.2137523157));
      Complex complex4 = complex2.INF.pow((-4440.2137523157));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.pow(914.4093);
      complex4.NaN.cosh();
      Complex complex7 = new Complex(1065.00761740244, (-1295.5410478));
      complex7.reciprocal();
      Complex complex8 = complex1.exp();
      complex3.abs();
      Complex complex9 = complex4.divide(659.4850111008948);
      complex6.asin();
      Complex complex10 = Complex.INF;
      complex10.createComplex(6.283185307179586, 49.4100789916346);
      Complex.valueOf(4645.013096276293);
      complex2.multiply((-2447.16));
      Complex complex11 = complex9.log();
      complex11.INF.divide(complex10);
      complex8.getReal();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.isInfinite();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.log();
      complex1.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      complex2.NaN.negate();
      Complex complex3 = complex0.INF.pow((-3297.2));
      complex3.multiply(complex2);
      complex3.INF.tan();
      complex0.NaN.sqrt1z();
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(4108.112726127802);
      Complex complex4 = complex2.multiply(4108.112726127802);
      complex3.atan();
      Complex complex5 = complex1.pow(complex4);
      complex4.nthRoot(1429);
      Complex complex6 = complex2.log();
      Complex complex7 = complex0.asin();
      complex4.cosh();
      complex7.abs();
      complex2.pow(complex6);
      complex6.sin();
      Complex complex8 = complex3.add((-1364.0559));
      Complex complex9 = complex5.negate();
      complex9.reciprocal();
      complex8.tan();
      Complex complex10 = Complex.I;
      complex2.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0, 1471.2794763045054);
      Complex complex3 = complex2.atan();
      Complex complex4 = new Complex(0.0, 1471.2794763045054);
      complex3.pow(complex4);
      complex0.nthRoot(4958);
      Complex complex5 = complex2.log();
      Complex complex6 = complex2.pow(366.94000793);
      complex6.asin();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.cosh();
      complex5.abs();
      complex4.pow(complex2);
      complex0.sin();
      complex8.add(366.94000793);
      complex0.negate();
      complex1.reciprocal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      complex1.conjugate();
      Complex complex2 = Complex.valueOf((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.exp();
      complex2.I.divide(complex1);
      Complex complex3 = Complex.valueOf((-346.0));
      complex0.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.NaN.exp();
      complex5.INF.cosh();
      Complex complex6 = Complex.valueOf((-2.2258513086839407E-9), Double.POSITIVE_INFINITY);
      complex2.negate();
      complex4.tan();
      complex3.multiply(Double.NaN);
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1929.930754968162, 1929.930754968162);
      Complex complex1 = complex0.I.multiply(551);
      complex1.nthRoot(551);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.cos();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf((double) 551);
      complex4.getReal();
      complex2.getArgument();
      complex4.tan();
      complex4.multiply(551.0);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = new Complex((-2.2258513086839407E-9), (-1.0));
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = Complex.valueOf(1.8801780837695253E-18);
      complex6.multiply(0.8154265443661354);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.pow(complex4);
      Complex complex9 = new Complex((-1.0), (-0.40808787065954366));
      complex9.nthRoot(1429);
      complex8.log();
      complex1.pow((-2.2258513086839407E-9));
      Complex complex10 = complex1.asin();
      complex3.cosh();
      complex6.abs();
      complex5.pow(complex3);
      complex10.sin();
      complex9.add(1.8801780837695253E-18);
      Complex complex11 = complex7.negate();
      complex3.reciprocal();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(964.9654342, 964.9654342);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.divide(964.9654342);
      Complex complex3 = complex0.cos();
      complex1.multiply(complex3);
      complex2.createComplex(Double.POSITIVE_INFINITY, 1024.6308962823);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      complex0.abs();
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = Complex.valueOf(1.0);
      complex1.multiply(7);
//      try { 
        complex2.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.reciprocal();
      complex0.exp();
      complex3.abs();
      Complex complex4 = complex2.divide(2.1266607370981174);
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.ONE;
      complex1.getArgument();
      complex0.add(complex5);
      Complex complex7 = new Complex(Double.NaN);
      complex7.acos();
      complex2.multiply(753);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1822.73), (-1822.73));
      Complex complex2 = complex0.multiply(complex1);
      complex1.multiply(complex2);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = new Complex((-1.0), (-0.40808787065954366));
      Complex complex6 = complex5.add(complex1);
      Complex.valueOf((-0.40808787065954366));
      complex6.cos();
      complex6.readResolve();
      Complex.valueOf((-0.40808787065954366));
      complex6.add(complex2);
      Complex complex7 = Complex.valueOf((-2281.58294255), 0.9921976327896118);
      complex7.getReal();
      complex4.getArgument();
      Complex complex8 = complex1.tan();
      complex2.subtract(complex8);
      complex2.multiply(318.49);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.exp();
      complex2.divide(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.createComplex((-1599.0), (-2.2258513086839407E-9));
      Complex complex7 = complex2.pow(3581.93037);
      Complex complex8 = Complex.ZERO;
      complex5.pow((-2.2258513086839407E-9));
      Complex complex9 = complex4.reciprocal();
      complex3.exp();
      Complex complex10 = Complex.valueOf((-1599.0));
      complex10.abs();
      complex5.divide((-1599.0));
      Complex complex11 = Complex.valueOf((-2.2258513086839407E-9), 0.680370569229126);
      complex11.asin();
      complex7.createComplex((-1599.0), (-2926.57949148135));
      Complex.valueOf(3581.93037);
      complex6.multiply(0.0);
      complex9.log();
      complex8.getReal();
      complex9.tanh();
      complex0.subtract(0.680370569229126);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(5028.0, (-1822.73));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.multiply(complex0);
      complex2.multiply(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.divide(complex5);
      Complex.valueOf((-1822.73));
      complex5.sqrt1z();
      complex3.cos();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      complex1.conjugate();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = Complex.valueOf((-346.0));
      complex0.getArgument();
      complex2.pow(5.436149712942365E-10);
      complex0.reciprocal();
      complex3.exp();
      complex5.abs();
      complex5.divide(8.98079409878202E234);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex4.createComplex(5.436149712942365E-10, (-2.2258513086839407E-9));
      Complex.valueOf(4399.989);
      Complex complex8 = complex1.multiply(2977.813172);
      complex8.log();
      complex6.getReal();
      complex7.tanh();
      complex4.subtract(352.5429371);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.664920449256897);
      Complex complex1 = complex0.sqrt();
      complex1.toString();
      complex0.readResolve();
      Complex complex2 = new Complex(0.664920449256897, 0.664920449256897);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.createComplex(1643.857379884, 1.2074086666107178);
      Complex complex5 = complex1.pow((-2.2258513086839407E-9));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.INF;
      complex7.exp();
      complex4.exp();
      complex5.cosh();
      Complex.valueOf((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      Complex complex8 = complex0.negate();
      complex1.nthRoot(835);
      Complex complex9 = complex0.log();
      complex9.getReal();
      complex5.tanh();
      complex0.subtract((-3058.2117));
      Complex.valueOf((-2.2258513086839407E-9), 1643.857379884);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex2.multiply(complex0);
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4440.2137523157));
      complex0.NaN.toString();
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.divide(complex0);
      Complex complex3 = complex0.createComplex((-1364.0559), (-4440.2137523157));
      Complex complex4 = complex2.INF.pow((-4440.2137523157));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.pow(914.4093);
      Complex complex7 = new Complex(1065.00761740244, (-1295.5410478));
      complex7.reciprocal();
      Complex complex8 = complex1.exp();
      complex3.abs();
      Complex complex9 = complex4.divide(660.4260967);
      complex6.asin();
      Complex complex10 = Complex.INF;
      complex10.createComplex(6.283185307179586, 49.4100789916346);
      Complex.valueOf(4645.013096276293);
      complex2.multiply((-2447.16));
      complex9.log();
      complex8.getReal();
      complex6.tanh();
      complex1.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.664920449256897);
      Complex complex1 = complex0.sqrt();
      complex1.toString();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.createComplex(1643.857379884, 1.2074086666107178);
      Complex complex6 = complex1.pow((-2.2258513086839407E-9));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.pow((-398.2951557507));
      Complex complex9 = complex5.reciprocal();
      complex8.exp();
      complex3.abs();
      complex2.divide(2.2258513136383547E-9);
      complex9.asin();
      complex6.createComplex((-669.111477152648), (-1364.0559));
      Complex.valueOf((-1366.4));
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.multiply((-2818.0));
      Complex complex12 = complex10.log();
      complex9.getReal();
      complex12.tanh();
      complex11.subtract(7.415557606805398E-8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      complex0.toString();
      complex0.readResolve();
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = Complex.valueOf((-334.12));
      Complex complex3 = Complex.I;
      complex3.createComplex(1643.857379884, (-2.2258513086839407E-9));
      complex1.pow(0.5222272996517731);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
      complex5.pow(1.2074086666107178);
      Complex complex6 = complex5.reciprocal();
      complex6.exp();
      complex5.abs();
      complex2.divide(346.0);
      complex0.asin();
      Complex complex7 = complex1.createComplex(816.969, (-1364.0559));
      Complex.valueOf(1.2074086666107178);
      Complex complex8 = Complex.I;
      complex8.multiply(5.399227989109673E44);
      complex5.log();
      complex7.getReal();
      complex3.tanh();
      complex0.subtract(5.399227989109673E44);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3711958590112228E-9, 0.0);
      Complex complex1 = new Complex((-4029.447941136), (-4029.447941136));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex2.multiply((double) 551);
      Complex complex5 = complex2.atan();
      complex5.ONE.multiply(900);
      Complex complex6 = new Complex(551, (-20.0));
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = Complex.valueOf((-20.0), (-20.0));
      complex3.pow(complex6);
      complex1.getField();
      complex5.abs();
      Complex complex9 = Complex.ONE;
      complex4.acos();
      complex0.getField();
      complex2.nthRoot(551);
      complex7.getImaginary();
      complex6.isNaN();
      complex8.hashCode();
      complex3.readResolve();
      complex7.equals("P)fZL4;M_it.9jm");
      Complex.valueOf(Double.NEGATIVE_INFINITY, (-4029.447941136));
      complex3.tan();
      Complex.valueOf((-1256.4598), 1.3711958590112228E-9);
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.divide(complex1);
      Complex.valueOf(0.0);
      complex3.getArgument();
      Complex complex6 = new Complex((-2.2258513086839407E-9));
      complex6.exp();
      Complex complex7 = new Complex((-3.021810837087174));
      complex7.exp();
      complex4.cosh();
      Complex.valueOf((-935.2), 3471.21346666339);
      complex1.negate();
      // Undeclared exception!
      complex5.nthRoot(2147483437);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.multiply((-4646.3581379));
      complex3.atan();
      Complex complex7 = complex4.pow(complex5);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.pow(complex8);
      complex8.getField();
      complex7.abs();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.subtract(Double.NaN);
      complex3.acos();
      complex1.getField();
      complex4.nthRoot(472);
      complex9.getImaginary();
      complex6.isNaN();
      complex5.hashCode();
      complex0.readResolve();
      complex8.equals("number of successes ({0})");
      complex0.tan();
      Complex.valueOf(0.0, (-2.2258513086839407E-9));
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      complex1.conjugate();
      Complex complex2 = complex1.NaN.add(complex0);
      complex0.exp();
      complex2.I.divide(complex1);
      Complex complex3 = complex1.sinh();
      complex0.sinh();
      complex3.multiply(1832);
      Complex complex4 = Complex.valueOf(57.5757248);
      complex4.hashCode();
      complex0.nthRoot(1379);
      complex1.createComplex(1.1863701343536377, 0.0403276926464803);
      complex2.nthRoot(1832);
//      try { 
        complex3.nthRoot((-224));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -224
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4440.2137523157));
      Complex complex1 = new Complex((-4440.2137523157), (-20.0));
      complex1.NaN.toString();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.createComplex((-1364.0559), (-4440.2137523157));
      Complex complex5 = complex3.INF.pow((-4440.2137523157));
      complex1.pow(6.283185307179586);
      Complex complex6 = Complex.ONE;
      complex0.cos();
      complex4.log();
      complex6.multiply(complex5);
      complex5.getField();
      Complex complex7 = Complex.I;
      complex7.readResolve();
      complex4.equals("(NaN, NaN)");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4440.2137523157));
      Complex complex1 = new Complex((-4440.2137523157), (-20.0));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.log();
      complex3.sinh();
      complex4.hashCode();
      complex4.tanh();
      complex0.createComplex(1.0, 1183);
      complex5.nthRoot(1454);
      complex4.nthRoot(1438);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 751.1535108;
      double double1 = 0.0;
      Complex complex0 = new Complex(751.1535108, 0.0);
      complex0.toString();
      complex0.readResolve();
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1893.982266));
      Complex complex2 = (Complex)complex1.NaN.readResolve();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply(0.09589041095890412);
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(0.09589041095890412);
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = complex7.pow(complex2);
      complex0.getField();
      Complex complex9 = Complex.ZERO;
      complex9.abs();
      Complex complex10 = complex3.subtract((-1893.982266));
      Complex complex11 = complex7.acos();
      complex11.getField();
      complex10.nthRoot(1);
      complex5.getImaginary();
      complex4.isNaN();
      Complex complex12 = Complex.valueOf(533.254057);
      complex12.hashCode();
      complex11.readResolve();
      complex6.equals(complex4);
      complex12.tan();
      Complex.valueOf(0.7853981633974483, (-1727.27744307));
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex2.I.divide(complex1);
      complex4.ZERO.add(complex2);
      Complex complex5 = complex2.I.add(complex1);
      complex5.divide((-1707.867));
      Complex complex6 = complex2.cosh();
      complex3.getArgument();
      Complex complex7 = complex2.subtract(2686.19816002346);
      complex3.getField();
      complex3.reciprocal();
      complex7.exp();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1822.73), (-1822.73));
      Complex complex2 = complex0.multiply(complex1);
      complex1.multiply(complex2);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.add(complex0);
      double double0 = (-1.0);
      Complex complex5 = new Complex((-1.0), (-0.40808787065954366));
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = Complex.valueOf((-0.40808787065954366));
      Complex complex8 = complex2.multiply((-1.0));
      Complex complex9 = complex8.atan();
      complex9.pow(complex2);
      Complex complex10 = Complex.valueOf((-1.0), 2.2258513086839407E-9);
      complex10.pow(complex4);
      complex6.getField();
      complex7.abs();
      complex4.subtract((-1822.73));
      complex1.acos();
      complex10.getField();
      int int0 = (-4387);
//      try { 
        complex7.nthRoot((-4387));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,387
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.664920449256897);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.multiply(0.664920449256897);
      Complex complex4 = complex2.ONE.atan();
      complex3.ONE.conjugate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex4.multiply((-1878));
      complex7.hashCode();
      Complex complex8 = complex7.tanh();
      complex6.nthRoot(1454);
      Complex complex9 = Complex.ONE;
      complex9.createComplex(926, (-20.0));
//      try { 
        complex8.nthRoot((-1878));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,878
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex4.ZERO.add(complex2);
      Complex complex6 = complex2.I.add(complex1);
      complex6.INF.tan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.atan();
      complex1.NaN.pow(complex3);
      Complex complex9 = complex6.pow(complex5);
      complex2.getField();
      complex0.NaN.abs();
      Complex complex10 = complex1.subtract(0.0);
      Complex complex11 = complex10.ONE.acos();
      complex0.I.getField();
      complex1.nthRoot(3);
      complex3.getImaginary();
      complex6.isNaN();
      complex6.hashCode();
      complex11.readResolve();
      complex0.isInfinite();
      complex9.tan();
      Complex.valueOf(0.3831497249319151, (double) 3);
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex4.ZERO.add(complex2);
      Complex complex6 = complex2.I.add(complex1);
      Complex complex7 = complex6.INF.tan();
      complex7.multiply((-7.126913872617518E298));
      complex6.atan();
      Complex complex8 = complex1.NaN.pow(complex3);
      Complex complex9 = complex6.pow(complex5);
      ComplexField complexField0 = complex2.getField();
      complex0.NaN.abs();
      Complex complex10 = complex1.subtract(0.0);
      complex10.ONE.acos();
      complex0.I.getField();
      complex1.nthRoot(1);
      complex3.getImaginary();
      complex6.isNaN();
      complex0.hashCode();
      complex3.readResolve();
      complex8.equals(complexField0);
      complex9.tan();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.1927368634152904E7);
      complex3.isNaN();
      complex11.cosh();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.createComplex((-2.2258513086839407E-9), (-78.162425869));
      complex4.pow((-78.162425869));
      Complex complex6 = complex4.pow((-2512.23436));
      Complex complex7 = complex3.reciprocal();
      complex4.exp();
      complex4.abs();
      complex2.divide((-2512.23436));
      complex0.asin();
      complex7.createComplex(6.283185307179586, (-1.2531793589140273E-8));
      complex5.multiply(816.969);
      complex0.log();
      complex7.getReal();
      complex0.tanh();
      complex6.subtract(7.01199184127881E-8);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      Complex.valueOf((-346.0));
      complex0.getArgument();
      complex0.I.exp();
      Complex complex6 = complex0.NaN.exp();
      complex6.INF.cosh();
      Complex.valueOf((-2.2258513086839407E-9), Double.POSITIVE_INFINITY);
      complex3.negate();
      complex2.nthRoot(835);
      Complex complex7 = complex6.tanh();
      complex5.log();
      Object object0 = new Object();
      complex7.equals(object0);
      complex4.negate();
      complex0.pow((-2.356194490192345));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.664920449256897);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.multiply(0.664920449256897);
      Complex complex4 = complex2.ONE.atan();
      complex3.ONE.conjugate();
      complex1.NaN.conjugate();
      complex2.nthRoot(926);
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.pow((double) 926);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex1.cosh();
      complex4.abs();
      complex8.pow(complex7);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.add((-1890.47));
      complex5.sqrt();
      complex9.conjugate();
      complex10.sqrt1z();
      complex5.cosh();
      complex5.hashCode();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4440.2137523157));
      Complex complex1 = new Complex((-4440.2137523157), (-20.0));
      complex1.NaN.toString();
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.divide(complex1);
      complex0.createComplex((-1364.0559), (-4440.2137523157));
      complex2.INF.pow((-4440.2137523157));
      Complex complex3 = complex1.pow(6.283185307179586);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex0.exp();
      complex0.abs();
      Complex complex6 = complex0.divide(4440.2137523157);
      complex6.asin();
      complex2.createComplex(816.969, 626.0);
      Complex complex7 = complex4.multiply((-1692.9099292640103));
      complex7.NaN.log();
      complex0.getReal();
      complex5.tanh();
      complex2.subtract(709.74568683);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2050.0, 2050.0);
      Complex complex2 = Complex.valueOf(2050.0);
      Complex complex3 = complex1.ZERO.divide(2050.0);
      Complex complex4 = complex0.add(complex1);
      complex3.ONE.sqrt1z();
      complex0.NaN.acos();
      Complex complex5 = complex1.cos();
      complex5.INF.toString();
      complex1.abs();
      Complex complex6 = complex5.sqrt1z();
      complex6.ONE.divide(complex4);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.multiply(complex2);
      int int0 = 157;
//      try { 
        complex8.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex0.abs();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.multiply(0);
      complex0.cos();
      complex1.log();
      complex3.multiply(complex0);
      complex2.getField();
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
//      try { 
        complex0.ONE.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      complex0.ONE.cos();
      Complex complex2 = complex0.cosh();
      complex2.I.pow(complex1);
      complex2.exp();
      complex2.ONE.multiply(0);
      complex0.ONE.atan();
      complex2.getImaginary();
      Complex.valueOf(Double.NaN);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1655.0, 3286.68190525018);
      Complex complex2 = complex0.multiply(complex1);
      complex0.NaN.cosh();
      Complex complex3 = Complex.valueOf(886.8086352309, 296.3521);
      complex2.ZERO.log();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex1.multiply(3629);
      complex0.hashCode();
      complex5.ZERO.hashCode();
      complex5.INF.tan();
      Complex complex6 = complex0.subtract(complex2);
      complex1.ZERO.getArgument();
      Complex complex7 = complex5.pow(299.6414315);
      Complex complex8 = complex7.ONE.pow(complex3);
      complex8.NaN.log();
      complex6.multiply(1655.0);
      complex5.exp();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tanh();
      int int0 = 627;
      complex0.INF.multiply(627);
      double double0 = 0.0;
      Complex complex1 = complex0.pow(0.0);
      complex1.NaN.toString();
      Complex complex2 = complex1.multiply((-2227));
      complex1.I.tan();
      complex2.I.readResolve();
      complex1.getField();
      complex2.sin();
      Complex complex3 = complex0.add(0.0);
      complex3.sqrt();
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex0.I.divide(complex1);
      complex0.ZERO.sin();
      Complex complex3 = Complex.INF;
      complex3.getArgument();
      complex0.multiply(complex3);
      complex1.tan();
      complex1.ZERO.add(complex3);
      complex0.getArgument();
      Complex complex4 = complex0.add(complex2);
      complex0.INF.acos();
      complex4.ZERO.multiply(930);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-6.036655299348577E-8));
      Object object0 = new Object();
      Complex complex1 = complex0.subtract(2.0);
      Complex complex2 = complex0.INF.cosh();
      complex2.I.cosh();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = Complex.valueOf((-6.036655299348577E-8), (-6.036655299348577E-8));
      complex0.equals(object0);
      Complex complex5 = complex0.sqrt();
      Complex.valueOf(2.0, 1322.21431023308);
      Complex complex6 = complex5.NaN.add(complex4);
      complex6.NaN.sqrt1z();
      complex3.ONE.abs();
      complex5.INF.conjugate();
      Complex complex7 = complex0.pow(1.0);
      complex7.NaN.cosh();
      complex2.ONE.atan();
      Complex complex8 = Complex.valueOf(1674.58263847203);
      Complex complex9 = complex1.reciprocal();
      complex9.getImaginary();
      complex9.I.abs();
      complex2.multiply(complex9);
      complex0.isInfinite();
      Complex complex10 = complex9.divide(complex5);
      complex10.ONE.multiply(17);
      complex4.readResolve();
      complex5.cosh();
      complex3.isNaN();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex4.ZERO.add(complex2);
      Complex complex6 = complex2.I.add(complex1);
      Complex complex7 = complex6.INF.tan();
      complex7.multiply((-7.126913872617518E298));
      Complex complex8 = complex6.atan();
      complex1.NaN.pow(complex3);
      complex6.pow(complex5);
      complex2.getField();
      complex0.NaN.abs();
      Complex complex9 = complex1.subtract(0.0);
      complex9.ONE.acos();
      complex0.I.getField();
      complex1.nthRoot(1);
      complex3.getImaginary();
      complex6.isNaN();
      complex8.hashCode();
      Object object0 = complex8.readResolve();
      complex7.equals(object0);
      complex0.tan();
      Complex.valueOf((-7.126913872617518E298), 0.0);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9125502109527588, 0.0);
//      try { 
        complex0.I.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(157.4629, 157.4629);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.readResolve();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.INF.tan();
      Complex complex5 = complex3.createComplex(1.0, 2890.7);
      Complex complex6 = complex5.I.tanh();
      complex6.ONE.createComplex(193, 193);
      Complex complex7 = complex5.multiply(193);
      Complex complex8 = complex5.NaN.cos();
      Complex complex9 = Complex.NaN;
      complex2.I.divide(complex9);
      complex5.hashCode();
      complex3.pow(157.4629);
      complex1.ONE.cos();
      Complex complex10 = complex5.INF.multiply(complex1);
      complex10.I.asin();
      complex1.tanh();
      Complex complex11 = complex3.subtract(complex0);
      complex11.ONE.cos();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex12.ZERO.log();
      complex13.INF.atan();
      complex4.pow(complex12);
      complex1.I.readResolve();
      complex0.sinh();
      complex8.abs();
      complex3.getArgument();
      complex9.abs();
      complex1.isInfinite();
      complex13.reciprocal();
      complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1093.9));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.multiply((-1093.9));
      complex1.ZERO.asin();
      complex1.INF.negate();
      Complex complex3 = complex0.subtract(2090.8783);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.multiply(complex3);
      complex5.exp();
      Complex complex7 = complex2.pow(2090.8783);
      Complex complex8 = complex3.multiply(2090.8783);
      Complex complex9 = complex4.divide(complex8);
      complex7.acos();
      complex9.sinh();
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3711958590112228E-9, 0.0);
      Complex complex1 = complex0.I.multiply(551);
      complex1.ONE.nthRoot(551);
      complex1.ONE.atan();
      Complex complex2 = complex0.cos();
      complex2.readResolve();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.NaN.add(complex1);
      complex0.getReal();
      complex3.getArgument();
      complex1.tan();
      complex4.multiply(1.3711958590112228E-9);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(0.8333333333333334, 0.8333333333333334);
      complex0.getImaginary();
      complex5.ZERO.toString();
      Complex complex6 = complex1.reciprocal();
      complex3.isNaN();
      Complex complex7 = complex5.negate();
      Complex complex8 = Complex.valueOf(1.2715470790863037, 2086.0);
      Complex complex9 = complex8.divide(complex6);
      complex9.INF.toString();
      complex7.atan();
      Complex complex10 = complex6.asin();
      complex10.NaN.readResolve();
      Complex complex11 = complex2.tanh();
      complex11.ONE.divide(3419.4448535739225);
      Complex.valueOf(1.2715470790863037, 2086.0);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.664920449256897);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.multiply(0.664920449256897);
      Complex complex4 = complex2.ONE.atan();
      complex3.ONE.conjugate();
      complex1.NaN.conjugate();
      complex2.nthRoot(926);
      Complex complex5 = complex3.log();
      complex5.pow((double) 926);
      Complex complex6 = complex4.asin();
      Complex complex7 = complex1.cosh();
      complex4.abs();
      complex7.pow(complex6);
      complex3.sin();
      Complex complex8 = complex0.add((double) 926);
      complex8.ZERO.negate();
      complex6.reciprocal();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(751.1535108, 0.0);
      Complex complex1 = complex0.tanh();
      complex1.NaN.sin();
      complex1.NaN.cosh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex2.sinh();
      complex4.ZERO.multiply(1183);
      complex0.hashCode();
      Complex complex5 = complex3.tanh();
      double double0 = (-1295.460178885888);
//      try { 
        complex5.ZERO.nthRoot((-224));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -224
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add((-6.729414275200856E-14));
      Complex complex2 = complex0.cos();
      complex0.isInfinite();
      Complex complex3 = complex0.sqrt();
      complex0.abs();
      complex2.getReal();
      Complex complex4 = complex1.subtract(complex3);
      complex3.INF.createComplex(1.5430806348152437, 1.0);
      Complex complex5 = complex4.ZERO.divide((-3465.7840926));
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex6.ONE.acos();
      complex7.ZERO.sqrt1z();
      Complex complex8 = complex1.NaN.multiply(0.0);
      complex5.INF.sqrt();
      Complex complex9 = complex4.I.asin();
      complex9.hashCode();
      complex3.getArgument();
      Complex complex10 = complex2.divide(complex1);
      complex10.INF.reciprocal();
      complex10.atan();
      complex1.log();
//      try { 
        complex8.nthRoot((-232));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -232
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-379.2655025));
      Complex complex1 = complex0.atan();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.INF.subtract((-379.2655025));
      complex2.ONE.sin();
      complex0.ZERO.readResolve();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex1.subtract((-379.2655025));
      Complex complex5 = Complex.valueOf((-3702.02557138856), (-379.2655025));
      Complex complex6 = complex5.ZERO.divide(0.0);
      Complex complex7 = complex4.ONE.reciprocal();
      complex7.INF.getArgument();
      Complex.valueOf(0.0, 0.0);
      complex3.NaN.getArgument();
      Complex complex8 = complex4.INF.divide(complex3);
      complex8.I.add(0.0);
      Complex complex9 = complex8.I.sin();
      complex9.ZERO.getField();
      complex1.getReal();
      complex3.getImaginary();
      complex6.NaN.readResolve();
      Complex complex10 = complex2.subtract(0.0);
      complex10.INF.sqrt1z();
      complex6.sqrt1z();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(20.0);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex1.NaN.subtract(0.0);
      Complex complex4 = complex2.sqrt();
      complex4.INF.tan();
      Complex complex5 = complex4.negate();
      complex5.toString();
      complex2.acos();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.NaN.divide(20.0);
      complex4.nthRoot(847);
      Complex complex8 = complex0.divide(20.0);
      complex0.getImaginary();
      Complex complex9 = complex7.sqrt();
      complex8.I.nthRoot(847);
      complex8.createComplex((-1.0188117475357564E-260), 0.0);
      complex1.abs();
      complex0.NaN.toString();
      complex9.atan();
      complex3.divide((-1.0188117475357564E-260));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9), (-2.2258513086839407E-9));
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.I.divide(complex1);
      Complex.valueOf((-346.0));
      complex0.getArgument();
      complex0.I.exp();
      Complex complex6 = complex0.NaN.exp();
      complex6.INF.cosh();
      Complex.valueOf((-2.2258513086839407E-9), Double.POSITIVE_INFINITY);
      complex3.negate();
      complex2.nthRoot(835);
      Complex complex7 = complex6.tanh();
      complex5.log();
      Object object0 = new Object();
      complex7.equals(object0);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(419.81454981559705);
      complex0.ONE.sqrt1z();
      complex0.cos();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.multiply(complex2);
      complex4.acos();
      Complex complex5 = complex2.log();
      complex5.ONE.add((-20.5938527632259));
      complex5.ZERO.readResolve();
//      try { 
        complex1.INF.nthRoot((-214));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -214
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.621538067089515E-8));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.pow((-9.621538067089515E-8));
      complex2.I.abs();
      complex0.abs();
      Complex complex3 = complex0.sqrt();
      complex3.ZERO.abs();
      complex1.cos();
      Complex complex4 = Complex.valueOf(455.0608417, 1.0);
      Complex complex5 = complex1.createComplex(0.0, 9.621538067089515E-8);
      complex1.NaN.abs();
      Complex complex6 = complex5.NaN.divide(434.8576671742);
      complex6.INF.sin();
      complex5.ZERO.getField();
      complex0.readResolve();
      complex1.cos();
      complex6.reciprocal();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.INF.divide(complex1);
      complex0.ZERO.getArgument();
      complex0.hashCode();
      complex0.getField();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(2.0);
      complex1.subtract(2.0);
      complex1.ZERO.sqrt();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1419.0391));
      Complex complex1 = complex0.sinh();
      complex1.toString();
      complex0.NaN.abs();
      complex0.NaN.hashCode();
      Complex complex2 = complex1.I.add((-1419.0391));
      complex1.I.toString();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex1.NaN.sqrt1z();
      complex0.ZERO.cosh();
      complex1.I.asin();
      complex5.NaN.createComplex(0.0, Double.NaN);
      Complex.valueOf((-1419.0391), Double.NaN);
      complex1.readResolve();
      Complex complex6 = complex0.NaN.add(478.1783);
      complex6.INF.tanh();
      complex3.multiply(3193.1274163);
      complex2.subtract(complex3);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ONE.pow((-1.0));
      complex1.ONE.getField();
      complex1.nthRoot(436);
      Complex complex3 = complex1.atan();
      complex0.ONE.pow(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.subtract(complex4);
      complex5.ZERO.createComplex(0.0, 436);
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.exp();
      complex7.I.reciprocal();
      Complex complex8 = Complex.valueOf((-468.53));
      Complex complex9 = complex4.cos();
      complex2.createComplex((-1.0), (-1122.65));
      complex3.tanh();
      Complex complex10 = complex1.divide(complex2);
      complex6.getImaginary();
      Complex complex11 = complex0.divide(complex3);
      complex9.getArgument();
      complex3.tan();
      complex10.exp();
      Complex complex12 = complex8.multiply(complex3);
      complex12.INF.add((-1.0));
      complex12.subtract((-1122.65));
      complex11.multiply((-704.4210833870378));
      complex10.readResolve();
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.getReal();
      Complex complex2 = complex1.createComplex(-0.0, -0.0);
      complex2.pow(complex1);
      Complex complex3 = complex0.pow(complex1);
      complex1.INF.getArgument();
      complex1.INF.multiply(563);
      complex3.ZERO.pow(complex1);
      complex3.INF.hashCode();
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex3.INF.tanh();
      complex3.ONE.asin();
      complex5.I.hashCode();
      complex4.add(complex0);
      complex4.NaN.getArgument();
      complex3.I.negate();
      complex1.getArgument();
      complex3.isInfinite();
      Complex complex6 = complex0.multiply(7);
      complex6.acos();
      complex6.pow(-0.0);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(4138.7015252126);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.atan();
      complex3.NaN.conjugate();
      Complex complex4 = complex2.ZERO.pow(4138.7015252126);
      complex4.ONE.tan();
      Complex complex5 = complex0.tanh();
      complex5.I.getArgument();
      Complex complex6 = complex1.multiply(1);
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex7 = complex6.negate();
      complex7.NaN.abs();
      Complex.valueOf(0.0);
      complex2.getReal();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-654.222));
      Complex complex1 = complex0.NaN.tan();
      complex1.add((-654.222));
      Complex complex2 = complex0.asin();
      complex0.getArgument();
      complex0.NaN.multiply(388);
      Complex complex3 = Complex.valueOf(5255.32329278633);
      complex3.NaN.subtract(3.141592653589793);
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex4.NaN.acos();
      complex5.INF.divide(5255.32329278633);
      Complex complex6 = complex3.asin();
//      try { 
        complex6.NaN.nthRoot((-2451));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,451
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.cos();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.ZERO.pow(0.0);
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex0.sqrt1z();
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.ONE.acos();
      complex5.NaN.readResolve();
      complex0.isNaN();
      Complex complex6 = complex5.multiply(1);
      complex5.ONE.multiply(827.44070447833);
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex0.tanh();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.exp();
      Complex complex11 = complex9.exp();
      Complex complex12 = complex8.negate();
      complex12.cos();
      complex4.ONE.multiply(complex9);
      complex6.tanh();
      Complex complex13 = complex11.pow(0.0);
      complex13.NaN.negate();
      complex2.abs();
      complex1.divide(0.0);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(964.9654342, 964.9654342);
      Complex complex1 = complex0.NaN.exp();
      complex0.divide(964.9654342);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.multiply(complex2);
      complex3.createComplex(1024.6308962823, 0.0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.pow((-1278.22));
      complex0.cos();
      complex1.multiply(complex0);
      complex2.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(596.1173593532731);
      Complex complex1 = complex0.INF.add(596.1173593532731);
      Complex complex2 = Complex.valueOf(596.1173593532731, 596.1173593532731);
      Complex complex3 = complex2.INF.asin();
      complex1.INF.readResolve();
      Complex complex4 = complex0.ZERO.subtract(596.1173593532731);
      complex4.INF.atan();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.ONE.add(complex1);
      Complex complex7 = complex6.INF.add(544.1628948313946);
      Complex complex8 = complex7.INF.sqrt1z();
      Complex.valueOf(307.1330315, 904.1716568192227);
      Complex complex9 = complex7.ZERO.subtract((-1657.838396));
      complex7.ONE.divide(complex5);
      complex1.getReal();
      complex1.readResolve();
      complex1.isInfinite();
      complex1.ONE.reciprocal();
      Complex complex10 = complex8.log();
      complex10.NaN.acos();
      Complex complex11 = complex6.multiply(753);
      complex11.sin();
      complex10.tan();
      complex6.conjugate();
      complex1.getImaginary();
      complex3.log();
      Complex complex12 = complex9.atan();
      complex6.getField();
      complex12.sqrt();
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      complex0.nthRoot(7);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((double) 7, (double) 7);
      Complex.valueOf((double) 7, (double) (-1747));
      Complex complex4 = complex0.INF.subtract((-173.647551516337));
      Complex complex5 = complex0.multiply((-1747));
      Complex complex6 = complex2.NaN.reciprocal();
      complex6.sinh();
      complex6.I.subtract((double) (-1747));
      Complex complex7 = complex5.NaN.sqrt1z();
      complex0.toString();
      Complex complex8 = complex2.pow(complex1);
      Complex complex9 = complex2.sin();
      complex9.ONE.hashCode();
      Complex complex10 = complex9.INF.cosh();
      Complex complex11 = complex10.I.divide((double) 7);
      assertEquals(0.14285714285714285, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex5.divide(complex8);
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex13.ONE.log();
      Complex complex15 = complex7.add(0.0);
      Complex complex16 = complex1.pow(complex4);
      Complex complex17 = Complex.valueOf((-612.0556289995254), Double.POSITIVE_INFINITY);
      assertTrue(complex17.isInfinite());
      
      Complex complex18 = complex13.NaN.cos();
      complex3.createComplex((-9.441128675514), (-173.647551516337));
      complex6.reciprocal();
      assertSame(complex6, complex8);
      
      Complex complex19 = complex14.sin();
      assertEquals(0.0, complex19.getReal(), 0.01);
      
      Complex complex20 = complex18.sin();
      assertSame(complex5, complex12);
      
      Complex complex21 = complex4.add(complex16);
      assertEquals(0.8813735870195428, complex1.getImaginary(), 0.01);
      assertSame(complex21, complex15);
      
      Complex complex22 = complex4.add(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex22.getReal(), 0.01);
      assertSame(complex0, complex20);
      assertTrue(complex22.isInfinite());
      assertNotSame(complex0, complex16);
  }
}
