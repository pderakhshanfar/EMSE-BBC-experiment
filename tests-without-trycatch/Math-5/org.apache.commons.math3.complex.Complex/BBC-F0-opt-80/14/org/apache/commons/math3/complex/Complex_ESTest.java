/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:41:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add((-1204.6145312767396));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.sin();
      complex2.I.readResolve();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.atan();
      Complex.valueOf((-2493.3098));
      complex6.NaN.getField();
      complex5.cos();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex7.ONE.multiply(3164);
      complex6.INF.readResolve();
      complex1.abs();
      complex0.nthRoot(740);
      Complex complex9 = complex1.add(complex5);
      complex9.NaN.abs();
      complex9.exp();
      complex4.createComplex(3164, 20.0);
      complex7.sqrt();
      complex8.log();
      complex3.tan();
      complex5.cosh();
      Complex complex10 = complex9.multiply(6.283185307179586);
      Complex complex11 = Complex.I;
      complex10.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex(1.0, (-6.5852069307614425));
      Complex complex1 = Complex.valueOf(2096.482385, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex((-1301.9));
      Complex complex4 = new Complex((-1301.9));
      Complex complex5 = complex3.divide((-20.0));
      complex5.abs();
      Complex complex6 = Complex.ZERO;
      complex2.acos();
      complex1.toString();
      Complex.valueOf(1761.3931791);
      complex0.exp();
      complex1.multiply(2368);
      complex0.nthRoot(2201);
      // Undeclared exception!
      complex3.nthRoot(2368);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.593320608139038);
      Complex complex1 = new Complex(1.593320608139038, 1.593320608139038);
      complex0.NaN.multiply(complex1);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.sin();
      complex0.readResolve();
      complex1.getField();
      Complex complex4 = complex1.multiply(1.593320608139038);
      Complex complex5 = complex2.atan();
      complex3.ONE.log();
      Complex complex6 = complex0.createComplex(1.593320608139038, 4789.0);
      Complex complex7 = complex5.cosh();
      complex2.getField();
      Complex complex8 = complex1.subtract((-2.437796532151255E213));
      complex0.INF.log();
      Complex complex9 = complex3.multiply((-1513));
      Complex complex10 = complex9.INF.sqrt();
      complex0.subtract((-624.4908661692));
      complex0.ONE.tan();
      Complex complex11 = complex8.sqrt1z();
      complex11.multiply(complex6);
      complex2.cosh();
      complex7.readResolve();
      complex7.getField();
      complex6.getField();
      complex10.exp();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.reciprocal();
      complex3.NaN.sinh();
      Complex complex4 = complex2.INF.multiply(complex1);
      complex4.hashCode();
      Complex complex5 = complex2.ZERO.negate();
      Complex complex6 = complex5.I.cosh();
      complex6.getField();
      Complex complex7 = complex5.ZERO.reciprocal();
      complex7.divide(complex5);
      Complex complex8 = complex0.subtract(complex1);
      complex0.getField();
      complex2.sin();
      Complex complex9 = complex8.createComplex(2765.362919, 2765.362919);
      Complex complex10 = complex3.tan();
      complex0.sinh();
      complex1.NaN.cos();
      Complex complex11 = complex9.sin();
      complex9.log();
      complex8.subtract(2765.362919);
      complex10.pow(2765.362919);
      complex11.sinh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(2094.3453256394);
      Complex complex1 = complex0.add((-20.0));
      complex0.pow(complex1);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.conjugate();
      complex2.log();
      complex3.tanh();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(20.0);
      complex1.pow(complex0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.pow(1619.469);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.tanh();
      complex0.conjugate();
      complex6.multiply(complex1);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(146.0, (-20.0));
      Complex complex2 = complex1.multiply(8.344717266683004E69);
      Complex complex3 = new Complex(4.1320545358303207E-4);
      complex0.cosh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf((-20.0), (-0.048559074375794424));
      complex1.tan();
      complex5.abs();
      complex2.exp();
      complex4.tan();
      complex1.nthRoot(47);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-4.8279217213630774E-67));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      complex0.tanh();
      Complex complex4 = complex3.multiply((-4.8279217213630774E-67));
      Complex complex5 = Complex.ONE;
      complex0.conjugate();
      Complex complex6 = complex0.log();
      complex4.sinh();
      complex1.tanh();
      Complex complex7 = new Complex(3567.7, Double.POSITIVE_INFINITY);
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(152.698785140968);
      complex0.NaN.sin();
      complex0.divide((-3144.598349615264));
      Complex complex1 = new Complex((-3144.598349615264));
      complex0.ZERO.add((-3144.598349615264));
      complex0.pow(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.INF;
      complex2.hashCode();
      complex1.nthRoot(1646);
//      try { 
        complex1.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(2.1032952349742118E-4);
      Complex complex3 = new Complex((-2356.7002907662536), Double.POSITIVE_INFINITY);
      complex3.NaN.cosh();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      complex2.getArgument();
      Complex complex3 = complex1.createComplex(3.141592653589793, (-1.0));
      complex1.multiply(1.0672213971363184E-7);
      Complex complex4 = new Complex(3.141592653589793);
      complex1.cosh();
      complex1.sqrt1z();
      Complex complex5 = Complex.valueOf((double) 1308, (-1315.0));
      complex5.sinh();
      complex2.tan();
      complex4.abs();
      Complex complex6 = complex3.exp();
      complex6.tan();
      complex0.add(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
      Complex complex1 = complex0.log();
      complex0.multiply(1);
      complex0.INF.cos();
      complex0.equals(complex1);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-1441.7010832851), 20.0);
      complex0.tan();
      complex0.tan();
      Complex complex1 = complex0.multiply(17);
      complex1.sqrt1z();
      Complex complex2 = Complex.I;
      Complex.valueOf((double) 17, (-2107.0559409));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      complex2.getArgument();
      complex1.createComplex(3.141592653589793, (-1.0));
      Complex complex3 = complex1.multiply(1.0672213971363184E-7);
      complex1.multiply(270);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.sqrt1z();
      complex3.I.sin();
      Complex complex6 = complex5.asin();
      complex6.divide(Double.POSITIVE_INFINITY);
      complex4.conjugate();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = (-2107.0559409);
      Complex complex0 = Complex.INF;
      complex0.negate();
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.multiply(1.0);
      Complex complex2 = complex1.reciprocal();
      complex1.pow(complex2);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex3.hashCode();
      Complex complex4 = complex1.cosh();
      complex1.subtract(complex0);
      Complex.valueOf((-3612.1818017), Double.POSITIVE_INFINITY);
      complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      complex1.getArgument();
      complex2.getArgument();
      Complex complex3 = complex2.createComplex(3723.365369719485, 0.0);
      complex1.multiply(385.3601702309);
      complex3.log();
      complex0.multiply(17);
      complex0.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.valueOf((-20.0), 0.0);
      complex4.tan();
      Complex complex8 = new Complex((-5.003410681432538E-8));
      complex4.abs();
      complex5.acos();
      complex7.exp();
      Complex complex9 = Complex.valueOf(1069.237);
      complex9.nthRoot(17);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.ONE;
      Complex.valueOf((double) 17);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
      Complex complex1 = complex0.multiply((-2030.25));
      complex1.acos();
      Complex complex2 = complex1.exp();
      complex2.sqrt();
//      try { 
        complex2.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.ONE.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      complex3.tanh();
      Complex complex4 = Complex.valueOf(0.0, 1378.2377046);
      complex4.sqrt1z();
      Complex complex5 = complex2.atan();
      complex2.getField();
      complex5.pow(3351.3538274);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply(17);
      complex3.cosh();
      Complex.valueOf((double) 17);
      Complex complex5 = complex3.sqrt1z();
      complex2.createComplex(904, 17);
      Complex.valueOf(Double.NaN, (double) 17);
      complex4.tan();
      Complex complex6 = complex5.subtract((double) 17);
      complex0.abs();
      Complex complex7 = complex6.acos();
      complex3.exp();
      complex2.asin();
      Complex complex8 = complex2.divide(Double.NaN);
      complex8.createComplex((-3619.4763), (-380.8));
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.ZERO;
      complex10.INF.add(complex9);
      complex9.add(complex10);
      complex3.equals((Object) null);
      complex5.tanh();
      complex7.isNaN();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.16132);
      complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.tan();
      complex2.multiply(48);
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.valueOf((double) 17);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex0.createComplex(48, 904);
      Complex complex8 = Complex.valueOf(1448.298236, 0.0);
      complex8.tan();
      complex2.subtract(Double.NaN);
      complex6.abs();
      complex2.acos();
      complex8.exp();
      complex3.tan();
      complex6.sqrt();
      complex1.pow(complex2);
      complex3.getField();
      complex5.sqrt1z();
      complex1.atan();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply(17);
      complex3.cosh();
      Complex complex5 = Complex.valueOf((double) 17);
      Complex complex6 = complex3.sqrt1z();
      complex2.createComplex(904, 17);
      Complex complex7 = Complex.valueOf(Double.NaN, (double) 17);
      complex4.tan();
      Complex complex8 = complex6.subtract((-2321.42));
      complex0.abs();
      complex8.acos();
      Complex complex9 = complex3.exp();
      complex5.tan();
      complex8.sqrt();
      complex4.pow(complex1);
      complex7.getField();
      complex9.sqrt1z();
      complex7.atan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.divide(complex0);
      complex2.getArgument();
      complex3.getArgument();
      complex1.getArgument();
      complex3.getArgument();
      Complex complex4 = complex0.createComplex((-1.0), Double.POSITIVE_INFINITY);
      complex4.multiply(1536.8448);
      Complex complex5 = complex0.log();
      complex0.multiply((-2798));
      complex3.cosh();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex2.createComplex(8353.82162, -0.0);
      Complex.valueOf(Double.NaN, 3.141592653589793);
      Complex complex8 = complex0.tan();
      complex4.subtract(1.5392257142577226E220);
      complex3.abs();
      Complex complex9 = complex4.acos();
      complex6.exp();
      complex8.tan();
      complex1.sqrt();
      complex9.getField();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2107.0559409), (-2107.0559409));
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.sin();
      complex4.ONE.hashCode();
      Complex complex5 = complex0.tan();
      complex5.ZERO.reciprocal();
      complex5.NaN.hashCode();
      int int0 = 2040109465;
      complex0.NaN.atan();
      Complex complex6 = complex3.ONE.multiply(2040109465);
      double double0 = 372.24415103623375;
      // Undeclared exception!
      complex6.nthRoot(2040109465);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-840.609122), (-1705.162800997));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.valueOf((-1705.162800997), (-840.609122));
      complex2.toString();
      complex4.isInfinite();
      complex1.abs();
      Complex complex5 = complex2.multiply(Double.NaN);
      Complex complex6 = complex4.reciprocal();
      complex4.pow(complex0);
      complex6.hashCode();
      Complex complex7 = complex3.cosh();
      Complex complex8 = Complex.valueOf((-1705.162800997));
      Complex complex9 = complex8.subtract(complex5);
      complex2.subtract((-1705.162800997));
      Complex complex10 = Complex.valueOf(Double.NaN, 0.0);
      complex10.asin();
      Complex complex11 = complex5.tanh();
      complex6.asin();
      complex3.divide(3493.6);
      complex4.createComplex(0.0, Double.NaN);
      Complex complex12 = Complex.ONE;
      complex9.add(complex12);
      complex9.equals((Object) null);
      complex7.tanh();
      complex3.isNaN();
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      Complex complex1 = complex0.tan();
      complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.divide(complex1);
      complex3.getArgument();
      Complex complex5 = Complex.valueOf(4235.378754533502, Double.NaN);
      complex5.getArgument();
      complex2.createComplex(1455.490752884, Double.NaN);
      Complex complex6 = complex3.multiply(4235.378754533502);
      complex4.log();
      complex3.multiply(1973);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex7.createComplex(17, 1455.490752884);
      Complex.valueOf(4235.378754533502, (double) 1973);
      Complex complex10 = Complex.ONE;
      complex10.tan();
      complex1.subtract(440.422643251);
      complex9.abs();
      complex8.acos();
      complex0.exp();
      complex2.tan();
      complex7.sqrt();
      Complex complex11 = Complex.valueOf(1455.5900287274685, 0.0);
      complex11.getField();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-840.609122), (-1705.162800997));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf((-1705.162800997), 2200957.4819143238);
      complex2.toString();
      complex1.abs();
      Complex complex4 = complex3.multiply((-1705.162800997));
      Complex complex5 = Complex.NaN;
      complex5.pow(complex2);
      complex4.hashCode();
      complex3.cosh();
      double double0 = (-526.2029774581539);
      Complex complex6 = Complex.NaN;
//      try { 
        complex6.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex.valueOf((-2107.0559409), 0.0);
      complex3.toString();
      complex2.isInfinite();
      complex2.abs();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.INF.pow(complex2);
      complex6.NaN.hashCode();
      complex0.INF.cosh();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-526.2029774581539));
      complex4.INF.subtract((-526.2029774581539));
      complex4.INF.multiply((-2107.0559409));
      Complex complex8 = new Complex((-2107.0559409), (-2107.0559409));
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex9.divide(0.0);
      complex10.reciprocal();
      complex10.INF.subtract((-116.839));
      complex11.ZERO.createComplex(0.45160030615905045, 3460.344782);
      complex3.add(complex0);
      complex10.equals(complex3);
      Complex complex12 = Complex.I;
      complex1.isNaN();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      complex0.tan();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf((-2107.0559409), 0.0);
      complex2.toString();
      complex1.isInfinite();
      complex1.abs();
      Complex complex4 = complex1.multiply(0.0);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.INF.pow(complex1);
      complex6.NaN.hashCode();
      Complex complex7 = complex6.cosh();
      complex2.hashCode();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex5.subtract(complex4);
      complex8.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.multiply(0.0);
      Complex complex11 = complex10.asin();
      complex8.tanh();
      complex11.asin();
      complex0.divide(0.0);
      Complex complex12 = complex7.createComplex(0.0, (-0.9999995495176643));
      Complex complex13 = new Complex((-840.609122), Double.POSITIVE_INFINITY);
      complex13.add(complex0);
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      Complex complex14 = complex11.tanh();
      complex14.isNaN();
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      complex0.abs();
      Complex complex2 = complex1.multiply(763.5107727);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = new Complex(763.5107727, 1.0);
      complex4.hashCode();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.subtract(complex3);
      Complex complex7 = complex5.subtract(1.0);
      Complex complex8 = complex6.multiply(763.5107727);
      complex7.asin();
      complex4.tanh();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex5.divide((-569.3393));
      complex10.createComplex(1822.706, 3460.344782);
      Complex complex11 = Complex.I;
      complex9.equals(complex5);
      Complex complex12 = Complex.valueOf((-569.3393));
      complex12.tanh();
      complex2.isNaN();
      complex9.getField();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = new Complex((-1.0));
      complex5.multiply(1481.0368);
      complex5.asin();
      Complex complex6 = complex1.tanh();
      complex5.asin();
      complex2.divide(1481.0368);
      complex3.createComplex(4479.1803, 2341.516256);
      Complex complex7 = new Complex(3460.344782);
      complex7.add(complex4);
      complex6.isNaN();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-840.609122), (-1705.162800997));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex2.divide(complex0);
      complex2.getArgument();
      complex2.ZERO.getArgument();
      complex0.conjugate();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.tanh();
      complex5.ONE.toString();
      Complex complex6 = Complex.I;
      complex4.sqrt();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.divide(complex2);
      complex2.getArgument();
      complex0.createComplex((-1321.2124861148873), (-4609.819208245955));
      complex2.multiply((-4609.819208245955));
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.multiply(17);
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.NaN;
      complex7.sqrt1z();
      Complex complex8 = Complex.valueOf(1.7949577687638785, 1.7768193998956956);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.tan();
      complex10.subtract((-1705.162800997));
      complex5.abs();
      complex2.divide(complex3);
      complex8.pow(1576.423299);
      complex0.divide(complex4);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.divide(complex0);
      complex2.getArgument();
      complex1.getArgument();
      complex2.createComplex((-3.141592653589793), Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.multiply(0.0);
      complex4.log();
      Complex complex5 = complex1.multiply(17);
      complex3.cosh();
      complex1.sqrt1z();
      Complex.valueOf((-3.141592653589793), (double) 17);
      Complex complex6 = new Complex((-3.141592653589793), (-3.141592653589793));
      complex6.tan();
      complex0.abs();
      Complex complex7 = complex4.exp();
      complex5.tan();
      Complex complex8 = new Complex((-3.141592653589793));
      complex8.getReal();
      Complex.valueOf(20.0, 374.45668452);
      complex1.sqrt();
      Complex complex9 = Complex.NaN;
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.reciprocal();
      complex2.divide(complex0);
      complex2.getArgument();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.createComplex((-840.609122), (-1705.162800997));
      complex0.I.multiply(0.0);
      Complex complex4 = complex3.log();
      complex0.ZERO.multiply(17);
      Complex complex5 = Complex.INF;
      complex4.INF.sqrt1z();
      Complex complex6 = Complex.valueOf((-1705.162800997), (-1705.162800997));
      complex4.tan();
      Complex complex7 = complex1.subtract((-1705.162800997));
      complex7.ZERO.abs();
      complex6.pow(Double.POSITIVE_INFINITY);
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex1.multiply((-2030.25));
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.asin();
      complex4.ZERO.readResolve();
      complex1.divide((-994.224845775106));
      complex1.createComplex((-994.224845775106), 3460.344782);
      Complex complex6 = complex1.add(complex5);
      complex6.equals(complex2);
      complex0.tanh();
      complex4.isNaN();
      complex5.getField();
      complex1.add(3460.344782);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      complex0.tan();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex.valueOf((-2107.0559409), 0.0);
      complex2.toString();
      complex1.isInfinite();
      complex1.abs();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex4.INF.pow(complex1);
      complex5.NaN.hashCode();
      complex0.INF.cosh();
      complex1.ZERO.subtract(complex0);
      complex3.INF.subtract((-526.2029774581539));
      Complex complex6 = complex3.INF.multiply((-2107.0559409));
      complex6.ONE.asin();
      Complex complex7 = complex1.tanh();
      complex7.NaN.asin();
      complex7.divide(0.0);
      Complex.valueOf(0.613389253616333, 1.0);
      Complex complex8 = Complex.ZERO;
      complex8.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(116.839, 116.839);
      Complex complex1 = complex0.I.cos();
      complex0.NaN.multiply(20.0);
      Complex complex2 = complex0.sqrt();
      complex2.I.atan();
      complex1.log();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      complex3.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt();
      complex5.sqrt();
      complex3.multiply(complex1);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex.valueOf((-2107.0559409), 0.0);
      complex3.toString();
      complex2.isInfinite();
      complex2.abs();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.INF.pow(complex2);
      complex6.NaN.hashCode();
      complex0.INF.cosh();
      Complex complex7 = complex2.ZERO.subtract(complex0);
      complex4.INF.subtract((-526.2029774581539));
      Complex complex8 = complex4.INF.multiply((-2107.0559409));
      complex8.ONE.asin();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex9.divide(0.0);
      complex11.ZERO.createComplex(0.613389253616333, 3460.344782);
      complex3.add(complex0);
      complex10.equals(complex3);
      complex3.tanh();
      complex1.isNaN();
      complex7.abs();
      complex8.cos();
      Object object0 = new Object();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      complex0.getField();
      Complex complex2 = complex0.multiply((-456));
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.sqrt1z();
      Complex.valueOf(0.0, (-3000.7963503));
      complex3.tan();
      Complex complex5 = complex3.subtract((-796.3163616));
      complex2.abs();
      Complex complex6 = complex0.acos();
      complex6.exp();
      Complex complex7 = complex6.tan();
      complex7.getReal();
      complex3.pow(6.283185307179586);
      complex0.sqrt1z();
      complex4.getArgument();
      complex2.multiply(6.283185307179586);
      complex5.sqrt();
      Complex complex8 = complex2.sinh();
      complex7.exp();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-840.609122), (-1705.162800997));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.reciprocal();
      complex2.divide(complex0);
      complex2.getArgument();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.createComplex((-840.609122), (-1705.162800997));
      complex0.I.multiply(0.0);
      complex3.log();
      complex3.getReal();
      Complex complex4 = Complex.INF;
      complex3.divide(complex1);
      complex4.pow((double) 17);
      Complex complex5 = new Complex(Double.NaN, Double.NaN);
      complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(483.58233, 0.0);
      Complex complex1 = complex0.pow(6.283185307179586);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sqrt1z();
      complex1.getArgument();
      complex3.multiply(1.8251046352720517E-78);
      complex2.sqrt();
      complex3.sinh();
      complex3.exp();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      complex0.getField();
      complex1.getReal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      complex1.createComplex(2466.0, 3460.344782);
      Complex complex4 = complex3.add(complex0);
      complex3.equals((Object) null);
      Complex complex5 = complex0.tanh();
      complex5.isNaN();
      complex4.abs();
      complex5.cos();
      Object object0 = new Object();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.I;
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      complex3.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex0.divide(0.2750702527922076);
      complex5.add(complex0);
      Complex complex7 = complex4.divide(0.2750702527922076);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.tan();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex6.sinh();
      Complex.valueOf(0.2750702527922076);
      complex10.exp();
      Complex complex12 = Complex.I;
      complex10.pow((-1.5277127454062126E112));
      complex11.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      complex0.getArgument();
      complex2.getArgument();
      Complex complex3 = complex1.createComplex(0.0, 1.0);
      Complex complex4 = complex0.multiply(497.538806119173);
      Complex complex5 = complex1.log();
      complex1.multiply((-897));
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = Complex.valueOf((-350.27606135), 177.0367);
      complex5.tan();
      complex1.subtract(1.0);
      complex4.abs();
      Complex complex9 = complex5.acos();
      Complex complex10 = new Complex(497.538806119173);
      complex10.exp();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.tan();
      complex5.getReal();
      complex7.pow(0.4204066274175615);
      complex4.sqrt1z();
      complex3.getArgument();
      complex7.multiply(1.5707963267948966);
      complex12.sqrt();
      complex9.sinh();
      complex8.exp();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      complex0.getField();
      complex1.getReal();
      Complex complex2 = Complex.INF;
      complex1.divide(complex0);
      complex1.pow(3.4405490416979487E257);
      Complex complex3 = Complex.valueOf(Double.NaN, 3.4405490416979487E257);
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      complex1.equals((Object) null);
      complex0.abs();
      Complex complex2 = complex1.multiply(3153.2653067);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.pow(complex0);
      complex4.hashCode();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex3.subtract(3511.0894);
      Complex complex7 = complex5.multiply(0.0);
      Complex complex8 = complex1.asin();
      complex6.tanh();
      complex7.asin();
      Complex complex9 = complex1.divide(2982.1);
      complex8.createComplex(538.137, 0.0);
      Complex complex10 = complex0.add(complex5);
      complex9.equals("");
      complex10.tanh();
      complex5.isNaN();
      complex5.abs();
      Complex complex11 = Complex.INF;
      complex11.cos();
      Object object0 = new Object();
      complex7.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      complex3.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt();
      complex5.sqrt();
      Complex.valueOf(582.6300072034963, 808.11762);
      complex0.multiply((-5.7073928E7));
      complex1.pow(1534.995);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-840.609122), (-1705.162800997));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.reciprocal();
      complex2.divide(complex0);
      complex2.getArgument();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.createComplex((-840.609122), (-1705.162800997));
      complex0.I.multiply(0.0);
      Complex complex4 = complex3.log();
      complex0.ZERO.multiply(17);
      complex1.INF.cosh();
      complex4.INF.sqrt1z();
      Complex.valueOf((-1705.162800997), (-1705.162800997));
      complex4.tan();
      Complex complex5 = complex1.subtract((-1705.162800997));
      complex5.ZERO.abs();
      complex2.sqrt1z();
      complex2.NaN.getField();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.multiply(Double.NaN);
      complex5.pow((-2.6778729562324134E-8));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      complex2.ONE.readResolve();
      Complex complex3 = Complex.valueOf((-942.8831564578), (-942.8831564578));
      Complex complex4 = complex0.ZERO.subtract((-240.328942568379));
      Complex complex5 = complex4.multiply(complex2);
      complex1.tan();
      Complex complex6 = complex4.subtract(725.26058);
      complex4.abs();
      Complex complex7 = Complex.ONE;
      complex7.acos();
      Complex complex8 = complex6.exp();
      complex3.tan();
      complex1.getReal();
      complex7.pow((-240.328942568379));
      Complex complex9 = new Complex((-20.0));
      Complex complex10 = complex9.sqrt1z();
      complex9.getArgument();
      complex8.multiply((-240.328942568379));
      complex9.sqrt();
      complex5.multiply((-1194));
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.multiply(1);
      complex12.tan();
      complex10.pow(0.0);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(725.26058, 4.102052341676543E-46);
      Complex complex2 = Complex.valueOf((-1.0), (-308.3109795));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.ONE;
      complex4.getField();
      complex3.hashCode();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex2.subtract(complex5);
      complex6.reciprocal();
      complex0.nthRoot(380);
      Complex complex7 = new Complex(2.000000112620603);
      complex7.getField();
      Complex complex8 = complex0.sin();
      complex0.getField();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.pow(complex8);
      complex1.atan();
      complex5.readResolve();
      complex5.atan();
      complex7.sinh();
      complex10.add((double) 1);
      Complex.valueOf(4.102052341676543E-46);
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      complex3.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt();
      complex5.sqrt();
      Complex complex6 = complex2.negate();
      complex2.sqrt();
      complex5.cosh();
      complex6.add((-1957.71079));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.getField();
      complex1.getReal();
      Complex complex2 = Complex.INF;
      complex1.divide(complex0);
      Complex complex3 = complex1.pow(5012.76723);
      Complex complex4 = Complex.NaN;
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2540.703);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.sqrt();
      complex1.sqrt();
      complex1.negate();
      complex4.sqrt();
      complex2.cosh();
      complex1.add(2540.703);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1732.97992216), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-1732.97992216));
      complex1.ONE.pow(1.0);
      complex1.I.createComplex(0.0, 3225.985683968212);
      complex1.getReal();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.I;
      complex2.NaN.subtract(complex3);
      Complex complex4 = Complex.INF;
      complex4.reciprocal();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      complex0.getField();
      complex1.getReal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      complex0.pow(5012.76723);
      complex1.divide(complex3);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      complex0.tan();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex.valueOf((-2107.0559409), 0.0);
      complex2.toString();
      complex1.equals("(3.1411180577244773, -8.346194200345744)");
      complex1.abs();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.NaN.reciprocal();
      complex4.ONE.multiply(complex0);
      Complex complex5 = complex4.INF.pow(complex1);
      complex5.NaN.hashCode();
      Complex complex6 = complex0.INF.cosh();
      complex1.ZERO.subtract(complex0);
      complex3.INF.subtract((-503.458));
      Complex complex7 = complex3.INF.multiply((-2107.0559409));
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex1.tanh();
      complex9.NaN.asin();
      Complex complex10 = complex9.divide(0.0);
      complex10.ZERO.createComplex(0.613389253616333, 3460.344782);
      Complex complex11 = complex2.add(complex0);
      Complex complex12 = complex6.pow(0.007326714141736199);
      complex12.hashCode();
      complex3.divide(complex11);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2540.703, 1732.97992216);
      Complex complex1 = complex0.createComplex(1246.4, 1246.4);
      complex0.pow(1.7858231429575898E-263);
      Complex complex2 = complex1.createComplex(1.7858231429575898E-263, 1246.4);
      complex0.getReal();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex2.tanh();
      complex4.sqrt();
      complex0.sqrt();
      Complex complex6 = Complex.ZERO;
      complex6.negate();
      complex0.sqrt();
      complex5.cosh();
      complex5.add(805.8959637622609);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2293.7), 2540.703);
      Complex complex1 = complex0.createComplex((-3130.548104), (-2293.7));
      complex0.getReal();
      Complex complex2 = complex0.negate();
      Complex complex3 = new Complex((-1019.9291850546), (-2293.7));
      Complex complex4 = complex2.subtract(complex3);
      complex4.tanh();
      complex3.sqrt();
      complex4.sqrt();
      complex1.negate();
      complex2.sqrt();
      complex2.cosh();
      Complex complex5 = Complex.NaN;
      complex5.add(1696.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(120.063595173199, 120.063595173199);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.NaN;
      complex3.getField();
      complex1.hashCode();
      Complex complex4 = Complex.valueOf((-272.97));
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.subtract(complex0);
      complex2.reciprocal();
      complex2.nthRoot(1350);
      complex6.getField();
      Complex complex7 = complex4.sin();
      complex3.getField();
      complex4.pow(complex7);
      complex4.atan();
      complex7.readResolve();
      Complex complex8 = Complex.ONE;
      complex8.sinh();
      complex1.add(1.4793481826782227);
      Complex.valueOf((-4439682.738081985));
      Complex complex9 = Complex.valueOf(1215.8997360953374);
      complex9.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(5342.0, 5342.0);
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex1.ONE.toString();
      complex1.I.sqrt();
      Complex complex2 = complex0.I.multiply(5342.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.divide(1830.619251213158);
      complex3.add(complex2);
      Complex complex5 = complex3.divide(1534.995);
      complex5.INF.tan();
      complex0.sqrt();
      complex5.multiply(1);
      complex4.multiply((-857));
      complex0.pow(1830.619251213158);
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(5342.0, 5342.0);
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex1.ONE.toString();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.multiply((-136.273402959866));
      Complex complex4 = Complex.NaN;
      complex3.pow(complex4);
      complex0.cosh();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.subtract(5342.0);
      Complex complex7 = complex6.multiply(1449.1614957925335);
      complex4.asin();
      complex0.tanh();
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.divide((-136.273402959866));
      complex9.createComplex(765.5328, 2.421919051875786);
      complex5.add(complex7);
      complex10.equals("(1.0, 0.0)");
      Complex complex11 = Complex.NaN;
      complex11.tanh();
      complex1.isNaN();
      complex10.abs();
      complex8.cos();
      Object object0 = new Object();
      complex2.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-2107.0559409), 0.0);
      complex3.toString();
      complex2.equals("(3.1411180577244773, -8.346194200345744)");
      complex2.abs();
      complex2.multiply((-1335.61));
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.add(complex6);
      Complex complex9 = complex8.I.pow(complex4);
      complex9.INF.log();
      complex5.divide(1830.619251213158);
      complex0.tan();
      complex3.sqrt();
      complex1.sinh();
      complex0.exp();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1732.97992216), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-1732.97992216));
      Complex complex2 = complex1.ONE.pow(1.0);
      Complex complex3 = complex1.I.createComplex(0.0, 3225.985683968212);
      complex0.getReal();
      complex0.negate();
      complex1.INF.subtract(complex3);
      Complex complex4 = complex1.tanh();
      complex1.ZERO.sqrt();
      Complex complex5 = complex3.sqrt();
      complex5.ZERO.negate();
      complex4.sqrt();
      complex0.cosh();
      complex2.add(1.0);
      complex3.multiply((-1732.97992216));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      Complex complex1 = Complex.NaN;
      complex0.NaN.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ONE.pow((-1920.4385748750117));
      complex3.ZERO.sqrt1z();
      complex3.sqrt1z();
      Complex complex4 = complex2.NaN.pow(0.0);
      Complex complex5 = complex4.INF.multiply(complex1);
      complex5.INF.getField();
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex6.INF.acos();
      complex7.ZERO.getArgument();
      Complex complex8 = complex5.ONE.tan();
      double double0 = 3922.98;
      complex8.ZERO.cos();
      complex5.ZERO.add(3922.98);
      Complex complex9 = complex8.INF.add(complex0);
      complex9.NaN.cos();
      complex1.ZERO.reciprocal();
      complex2.getArgument();
      complex1.sqrt1z();
      complex2.toString();
      complex1.sqrt();
//      try { 
        complex8.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-450.1425895612), (-3380.52));
      int int0 = (-2494);
//      try { 
        complex1.nthRoot((-2494));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,494
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 0.0);
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf(0.0, 181.59);
      complex1.reciprocal();
      complex1.ONE.asin();
      complex0.multiply((-20.0));
      Complex complex2 = complex0.asin();
      complex2.readResolve();
      Complex complex3 = complex2.createComplex(3.6613751875298095E-8, 0.0);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.INF.divide(complex3);
      Complex complex5 = complex4.I.subtract(complex0);
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex6.NaN.add(3406.0);
      Complex.valueOf(2.7668218233914262E48);
      complex7.INF.multiply(complex0);
      Complex complex8 = complex0.sqrt1z();
      complex0.ZERO.abs();
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex0.sin();
      complex8.readResolve();
      Complex complex11 = complex9.multiply(0);
      complex11.tan();
      Complex complex12 = complex10.cos();
      complex4.multiply((-420));
      complex12.ONE.multiply((-420));
      complex7.createComplex(Double.NaN, (-710.766));
      complex0.sqrt();
      complex4.getField();
      complex4.createComplex(310.502, (-2847.98173));
      Complex complex13 = complex5.multiply((-420));
      complex9.cos();
      complex8.log();
      complex1.sin();
      complex13.add(0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1686.145035941134);
      Complex complex2 = complex1.ZERO.cos();
      complex1.I.nthRoot(516);
      complex0.NaN.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.sqrt1z();
      complex4.abs();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = Complex.valueOf((double) 516, 1686.145035941134);
      Complex complex8 = complex7.add(complex6);
      Complex complex9 = complex7.sqrt1z();
      complex9.multiply(516);
      Complex complex10 = complex5.exp();
      complex10.INF.cosh();
      complex4.reciprocal();
      complex6.pow((double) 516);
      complex0.sqrt();
      complex6.sqrt();
      complex0.getImaginary();
      complex2.toString();
      complex10.getArgument();
      complex8.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.conjugate();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.createComplex((-1344.4863538402033), 0.0);
      complex2.INF.getField();
      Complex complex4 = complex0.INF.subtract(complex1);
      complex4.NaN.nthRoot(151);
      complex0.getImaginary();
      complex0.isNaN();
      complex1.equals(complex4);
      complex0.nthRoot(151);
      Complex complex5 = complex4.multiply(151);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.cos();
      complex7.I.multiply(0.23941665887832642);
      Complex complex8 = complex5.I.pow(0.0);
      complex0.getField();
      Complex complex9 = complex5.divide((-668.82013));
      complex9.cosh();
      complex2.getField();
      complex6.add(complex9);
      complex0.ZERO.cosh();
      complex6.getReal();
      complex5.multiply(0);
      complex9.divide(0.0);
      complex6.tan();
      Complex complex10 = complex3.subtract((-3740.8191));
      complex8.acos();
      complex10.asin();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.411186219855533E217));
      Complex complex1 = complex0.I.add((-3.411186219855533E217));
      complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex0.asin();
      complex4.I.cosh();
      complex0.toString();
      complex2.I.cosh();
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex4.createComplex(2.1478649410390003E-162, 2720.21083);
      complex2.isNaN();
      complex6.sqrt1z();
      complex6.ZERO.cosh();
      complex0.ZERO.getField();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.I.exp();
      complex2.add(complex4);
      Complex complex9 = complex6.INF.cos();
      complex9.I.abs();
      complex6.nthRoot(2148);
      complex8.sqrt();
      Complex.valueOf((-3.411186219855533E217), 0.0);
      complex0.createComplex(0.010169003920808009, 749.68075037);
      complex5.cosh();
      complex5.multiply((double) 2148);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5016.006));
      Complex complex1 = complex0.sinh();
      complex1.I.hashCode();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.createComplex(0.6816387176513672, 141.6933891837);
      Complex complex4 = complex1.pow((-5016.006));
      Complex complex5 = complex4.I.divide((-753.009539029));
      Complex complex6 = complex4.ZERO.divide(complex2);
      Complex complex7 = complex4.I.pow(complex3);
      complex4.ZERO.toString();
      Complex complex8 = complex7.ONE.log();
      complex7.INF.pow(complex0);
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.asin();
      Complex.valueOf((-5016.006));
      Complex complex11 = complex9.sinh();
      complex11.NaN.subtract((-1187.578607));
      complex8.toString();
      Complex complex12 = complex6.multiply(0);
      complex10.equals(complex5);
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(770.1182811922226, 1996.0945);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.reciprocal();
      complex2.cosh();
      Complex complex3 = complex0.createComplex(770.1182811922226, 1996.0945);
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.ZERO.multiply((-1414));
      complex6.ZERO.conjugate();
      Complex complex7 = complex3.ONE.reciprocal();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex2.NaN.cos();
      complex10.ZERO.divide(complex9);
      complex3.asin();
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex12.cos();
      complex13.INF.tan();
      Complex complex14 = new Complex(1008.9599106, 0.0);
      complex14.ZERO.sqrt1z();
      complex8.ZERO.pow(complex14);
      complex11.divide((-1936.51853308652));
      complex4.hashCode();
      Complex complex15 = complex7.divide(770.1182811922226);
      complex15.NaN.divide(complex1);
      complex8.acos();
      Complex.valueOf((-1936.51853308652));
      complex14.add(complex4);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-415.8602886));
      Complex complex2 = complex0.INF.divide((-415.8602886));
      complex0.readResolve();
      Complex complex3 = complex0.ZERO.log();
      complex3.NaN.pow(complex1);
      complex1.subtract(complex0);
      complex2.exp();
      int int0 = 0;
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.ONE.multiply((-5628.3));
      Complex complex4 = complex1.log();
      complex1.hashCode();
      complex3.sin();
      complex0.toString();
      complex0.multiply(0.0);
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sqrt1z();
      complex0.ONE.add(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.ZERO.sqrt1z();
      complex2.NaN.nthRoot(123);
      Complex complex4 = complex2.cos();
      complex4.I.multiply((-3000));
      complex0.ZERO.getField();
      Complex complex5 = complex0.sinh();
      complex0.toString();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex5.asin();
      complex5.getField();
      Complex complex8 = complex6.log();
      complex5.NaN.subtract((double) 123);
      complex7.getField();
      Complex complex9 = complex7.add(complex3);
      Complex complex10 = new Complex(123);
      complex8.multiply(complex10);
      complex0.acos();
      complex2.pow(complex10);
      complex6.reciprocal();
      complex6.getImaginary();
      complex9.pow((-2943.02484316293));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.createComplex(0.49999999999999994, 1491.680216350155);
      Complex.valueOf(1491.680216350155);
      complex3.NaN.abs();
      complex1.INF.pow(394.9);
      Complex complex4 = complex2.negate();
      complex1.atan();
      complex4.asin();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex5.cos();
      complex6.getReal();
      complex2.getArgument();
      complex6.NaN.multiply(0);
      complex0.divide(complex4);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.NaN.negate();
      complex4.multiply(1);
      complex8.getReal();
      Complex complex10 = complex1.ONE.negate();
      complex7.toString();
      complex1.cosh();
      complex9.conjugate();
      complex1.toString();
      complex10.add((-1154.0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1317.82836114541), (-1317.82836114541));
      Complex complex1 = complex0.cosh();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1732.97992216), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-1732.97992216));
      Complex complex2 = complex1.ONE.pow(1.0);
      Complex complex3 = complex1.I.createComplex(0.0, 3225.985683968212);
      complex1.getReal();
      complex0.negate();
      complex1.INF.subtract(complex3);
      Complex complex4 = complex1.tanh();
      complex1.ZERO.sqrt();
      Complex complex5 = complex3.sqrt();
      complex5.ZERO.negate();
      complex4.sqrt();
      complex0.cosh();
      complex2.add(1.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(333.60995871978855);
      Complex complex1 = complex0.ZERO.subtract(333.60995871978855);
      Complex complex2 = complex1.ZERO.add(333.60995871978855);
      complex1.INF.nthRoot(37);
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.I.subtract(complex2);
      complex5.I.atan();
      complex5.NaN.log();
      complex5.INF.asin();
      complex1.INF.pow(complex4);
      Complex.valueOf(8.979279989292184E-9);
      complex1.ONE.subtract(complex3);
      complex0.isInfinite();
      Complex complex6 = complex0.sqrt();
      complex3.isNaN();
      complex1.abs();
      complex6.sqrt();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.getField();
      complex0.INF.hashCode();
      Complex complex2 = Complex.valueOf(6.283185307179586);
      Complex complex3 = complex2.I.subtract(complex0);
      complex2.ZERO.reciprocal();
      complex1.NaN.nthRoot(1);
      complex0.getField();
      Complex complex4 = complex1.INF.sin();
      complex1.getField();
      complex3.I.pow(complex1);
      Complex complex5 = complex1.atan();
      complex5.ONE.readResolve();
      complex5.atan();
      complex3.sinh();
      complex3.add(0.0);
      Complex complex6 = Complex.valueOf(221.8376450265);
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-605.02569), (-605.02569));
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.createComplex((-20.0), (-20.0));
      complex4.ZERO.multiply(complex3);
      Complex complex5 = complex4.INF.cos();
      complex4.INF.cosh();
      complex1.acos();
      complex1.reciprocal();
      complex2.hashCode();
      complex5.cos();
      complex1.I.subtract(complex2);
      Complex complex6 = complex2.pow(6.283185307179586);
      complex1.subtract(complex2);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 0;
      complex0.ONE.tan();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2428.3996033));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.add(1080.94486697);
      Complex.valueOf(1164.024359900863);
      Complex complex3 = complex0.log();
      complex3.ONE.tanh();
      Complex complex4 = complex0.pow(0.0);
      complex4.isNaN();
      complex1.acos();
      Complex.valueOf(6.283185307179586, 200.894);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getField();
      Complex complex1 = Complex.valueOf(110.4977384);
      complex0.NaN.nthRoot(37);
      Complex complex2 = complex0.pow(complex1);
      complex1.pow(110.4977384);
      Complex complex3 = complex2.subtract((-1121.9411486552913));
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex2.INF.conjugate();
      complex5.I.readResolve();
      complex2.hashCode();
      Complex complex6 = Complex.valueOf((double) 37, (-3528.4958936));
      complex0.getArgument();
      Complex complex7 = complex2.sinh();
      complex4.nthRoot(37);
      complex4.getImaginary();
      complex2.ZERO.subtract(complex7);
      Complex complex8 = complex7.pow(20.0);
      complex3.getImaginary();
      complex2.acos();
      complex6.multiply(975.9);
      complex8.readResolve();
      complex7.divide(0.0);
      Complex.valueOf((-1905.0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-840.609122), (-1705.162800997));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.reciprocal();
      complex2.divide(complex0);
      complex2.getArgument();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.createComplex((-840.609122), (-1705.162800997));
      complex0.I.multiply(0.0);
      Complex complex4 = complex3.log();
      complex0.ZERO.multiply(17);
      Complex complex5 = complex1.INF.cosh();
      complex4.INF.sqrt1z();
      Complex.valueOf((-1705.162800997), (-1705.162800997));
      complex4.tan();
      Complex complex6 = complex1.subtract((-1705.162800997));
      complex6.ZERO.abs();
      Complex complex7 = complex3.acos();
      complex7.ONE.exp();
      complex7.ONE.tan();
      complex5.getReal();
      Complex complex8 = complex4.ZERO.pow(6.283185307179586);
      complex8.INF.sqrt1z();
      complex4.getArgument();
      Complex complex9 = complex5.multiply(0.0);
      complex7.sqrt();
      complex0.multiply(1);
      complex4.multiply(1);
      complex9.pow((-7.0));
      Complex.valueOf((-3022.27203938));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.subtract(complex1);
      complex0.getField();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-116.839), (-116.839));
      complex0.atan();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(5342.0, 5342.0);
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex1.ONE.toString();
      complex1.I.sqrt();
      Complex complex2 = complex0.I.multiply(5342.0);
      Complex complex3 = complex0.sqrt1z();
      complex0.divide(1830.619251213158);
      complex3.add(complex2);
      Complex complex4 = complex3.divide(1534.995);
      complex4.INF.tan();
      Complex complex5 = complex0.sqrt();
      complex5.NaN.sinh();
      complex5.exp();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(1761.0, 1761.0);
      Complex complex1 = complex0.acos();
      complex1.I.cos();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.reciprocal();
      complex3.getImaginary();
      Complex complex5 = complex3.pow((-1842.575958764));
      complex4.sinh();
      Complex complex6 = complex4.exp();
      complex6.I.getField();
      Complex complex7 = complex5.pow((-1842.575958764));
      complex7.INF.hashCode();
      Complex complex8 = complex2.divide(1761.0);
      complex8.ONE.sqrt();
      Complex complex9 = complex3.ZERO.pow(complex7);
      complex4.exp();
      Complex complex10 = complex3.cos();
      complex5.divide((-2346.6733));
      complex0.NaN.tanh();
      complex0.INF.getField();
      complex10.subtract(complex9);
      complex10.atan();
      complex7.subtract(5.999390491704392E-152);
      complex0.pow((-1.1036542789147287E-244));
      complex2.hashCode();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.ONE.multiply(0.0);
      Object object0 = complex1.readResolve();
      complex2.abs();
      complex0.cosh();
      complex1.equals(object0);
      Complex complex3 = complex0.I.multiply(282);
      Complex complex4 = complex1.sqrt1z();
      complex0.getImaginary();
      complex1.abs();
      complex4.NaN.acos();
      complex2.abs();
      Complex complex5 = complex4.add((-2818.45576214));
      complex5.I.atan();
      complex4.getImaginary();
      Complex complex6 = complex5.pow(Double.NaN);
      complex6.INF.log();
      complex5.isNaN();
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = Complex.valueOf((-2.1275002921718894E-6), (-2036.727415849683));
      complex9.ZERO.readResolve();
      complex6.getArgument();
      Complex.valueOf((-2818.45576214));
      complex5.getReal();
      complex6.add(complex0);
      Complex complex10 = new Complex(0.0, Double.NaN);
      complex8.divide(complex10);
      complex5.tanh();
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.cos();
      complex3.INF.createComplex(299.83, (-1091.6293));
      complex3.I.subtract(complex1);
      complex3.NaN.hashCode();
      complex1.createComplex(0.0, 0.0);
      complex0.hashCode();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.conjugate();
      complex1.multiply(1.5203571319580078);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.I.readResolve();
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex0.getArgument();
      complex0.toString();
      Complex complex4 = complex0.asin();
      complex4.NaN.add(complex1);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex3.getArgument();
      Complex complex6 = new Complex(0.0, 0.0);
      complex5.ONE.divide(complex6);
      Complex complex7 = complex0.subtract((-258.41898710936));
      complex0.abs();
      complex3.sqrt();
      complex5.getField();
      complex0.multiply(0);
      Complex complex8 = complex4.tanh();
      complex8.NaN.abs();
      complex8.multiply(0);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex7.multiply(complex1);
      complex11.NaN.multiply(complex2);
      complex1.multiply(0.0);
      Object object0 = new Object();
      complex10.equals(object0);
      complex9.multiply((-145));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1576.423299);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex3.ZERO.tan();
      complex2.NaN.toString();
      Complex complex5 = Complex.valueOf(1576.423299);
      complex2.cos();
      complex0.getImaginary();
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex5.exp();
      complex5.abs();
      complex1.isInfinite();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex8.INF.add(complex1);
      complex8.NaN.sin();
      Complex complex10 = complex5.reciprocal();
      complex6.cos();
      Complex complex11 = complex6.negate();
      complex6.ZERO.cos();
      complex11.INF.multiply(1572);
      complex9.sqrt();
      Complex complex12 = complex10.subtract(complex11);
      complex12.INF.add(Double.NaN);
      Complex complex13 = complex4.log();
      Complex complex14 = complex13.INF.log();
      Complex complex15 = complex7.tan();
      complex15.getImaginary();
      complex14.add(complex13);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      complex0.hashCode();
      complex1.NaN.exp();
      complex0.sqrt();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.multiply(complex1);
      complex0.readResolve();
      Complex complex4 = complex3.I.asin();
      complex0.equals(complex1);
      Complex complex5 = complex2.subtract(complex1);
      complex1.I.nthRoot(1445);
      Complex complex6 = complex5.log();
      complex6.createComplex(574.4426430666905, 1445);
      complex5.acos();
      complex4.reciprocal();
      Complex.valueOf((-143.5658433));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.ZERO.add(0.0);
      complex1.NaN.sqrt();
      complex0.ZERO.abs();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex0.ONE.multiply(0.0);
      complex4.NaN.readResolve();
      Complex complex5 = complex4.ONE.asin();
      complex5.asin();
      complex0.toString();
      complex0.readResolve();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex6.ZERO.add(complex2);
      complex6.conjugate();
      Complex complex9 = complex6.log();
      complex9.ZERO.createComplex(2.4342737197875977, 1.6711060014400145E-276);
      Complex.valueOf(0.0);
      Complex complex10 = complex3.subtract(0.0);
      Complex complex11 = complex10.INF.divide(0.0);
      complex11.ONE.log();
      complex0.INF.exp();
      complex10.multiply(complex8);
      complex2.isNaN();
      complex10.asin();
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.NaN.asin();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      complex0.getField();
      Complex complex4 = complex0.conjugate();
      complex4.getField();
      complex3.I.atan();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.conjugate();
      complex5.NaN.sqrt1z();
      complex5.NaN.readResolve();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(0.20739519596099854);
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex1.NaN.pow((-4419.39));
      Complex complex4 = complex0.I.divide(0.20739519596099854);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex7.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex8.NaN.atan();
      complex3.I.asin();
      Complex complex11 = complex1.pow(complex4);
      Complex complex12 = complex7.INF.pow(complex4);
      List<Complex> list0 = complex3.nthRoot(2539);
      assertTrue(list0.contains(complex12));
      
      Complex complex13 = complex5.sinh();
      complex13.ZERO.add(complex3);
      Complex complex14 = complex1.cos();
      complex11.getReal();
      double double0 = complex11.getImaginary();
      assertEquals((-2.543821399946782E-7), double0, 0.01);
      
      Complex complex15 = complex3.negate();
      Complex complex16 = complex2.add(7.007522743867177E-8);
      Complex complex17 = complex14.atan();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(1.1102230246251564E-16, complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex10.tanh();
      assertEquals(2.2768601034931972, complex8.getImaginary(), 0.01);
      
      Complex complex19 = complex16.cos();
      complex2.negate();
      complex7.log();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      complex1.isNaN();
      complex5.sin();
      Complex complex20 = complex15.conjugate();
      assertSame(complex20, complex19);
      assertSame(complex20, complex18);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-2107.0559409), 1.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-2107.0559409), 0.0);
      String string0 = complex3.toString();
      assertEquals("(3.1411180577244773, -8.346194200345744)", string0);
      
      complex2.equals("(3.1411180577244773, -8.346194200345744)");
      complex2.abs();
      Complex complex5 = complex2.multiply(0.0);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex6.INF.pow(complex2);
      complex7.NaN.hashCode();
      complex0.INF.cosh();
      Complex complex8 = complex2.ZERO.subtract(complex0);
      Complex complex9 = complex5.INF.subtract((-503.458));
      Complex complex10 = complex5.INF.multiply((-2107.0559409));
      Complex complex11 = complex10.ONE.asin();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.equals((Object)complex4));
      
      Complex complex12 = complex2.tanh();
      Complex complex13 = complex12.NaN.asin();
      Complex complex14 = complex12.divide(0.0);
      complex14.ZERO.createComplex(0.613389253616333, 3460.344782);
      complex3.add(complex0);
      complex13.equals(complex3);
      Complex complex15 = complex3.tanh();
      assertEquals(1.0020659102039693, complex15.getReal(), 0.01);
      assertEquals(0.0031203866258356517, complex15.getImaginary(), 0.01);
      
      complex1.isNaN();
      assertEquals(1.0562405197041327, complex1.getImaginary(), 0.01);
      assertEquals(0.2750702527922076, complex1.getReal(), 0.01);
      
      complex8.abs();
      Complex complex16 = complex10.cos();
      assertTrue(complex16.equals((Object)complex13));
      
      Object object0 = new Object();
      complex6.equals(object0);
      assertTrue(complex5.equals((Object)complex9));
      assertNotSame(complex6, complex11);
  }
}
