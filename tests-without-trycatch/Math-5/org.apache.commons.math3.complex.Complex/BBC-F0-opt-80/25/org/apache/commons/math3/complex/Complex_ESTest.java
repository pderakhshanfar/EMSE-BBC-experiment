/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:04:59 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.readResolve();
      complex0.toString();
      Complex complex1 = complex0.pow(440.0);
      complex1.nthRoot(1);
      complex0.tanh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add((-3309.26));
      complex0.getArgument();
      complex0.cosh();
      complex0.add(1.5707963267948966);
      Complex complex4 = Complex.INF;
      complex4.getArgument();
      complex3.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ONE;
      complex2.subtract(complex6);
      Complex complex7 = new Complex(2.0, 2.5707689593428096E215);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-240.614127));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.add((-20.0));
      Complex complex2 = complex0.sqrt1z();
      complex0.getField();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.cos();
      complex4.ONE.getArgument();
      Complex complex5 = Complex.ONE;
      complex5.multiply(complex0);
      complex3.asin();
      complex1.multiply(823);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(2527);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3083870531380308E144, 2.4831973702787362E7);
      Complex complex1 = complex0.INF.pow(6.538898578156704E-8);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.sqrt();
      complex0.NaN.toString();
      complex3.INF.pow(1.0033734906755853E-4);
      complex0.asin();
      Complex complex4 = complex0.multiply(2.4831973702787362E7);
      complex3.NaN.hashCode();
      complex4.ZERO.cosh();
      complex3.readResolve();
      Complex complex5 = complex1.NaN.cosh();
      complex5.ONE.atan();
      complex0.sqrt1z();
      complex1.readResolve();
      Complex complex6 = complex3.asin();
      complex2.pow(6.283185307179586);
      complex2.multiply(complex6);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ZERO;
      complex3.atan();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex.valueOf((-20.0));
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(1.3810978455418157);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.tan();
      complex0.getArgument();
      Complex complex5 = complex4.tan();
      complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.021716833114624, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.sinh();
      complex3.acos();
      complex3.log();
      Complex complex4 = Complex.ZERO;
      complex0.tanh();
      complex2.pow((-3310.82004726));
      Complex complex5 = new Complex((-2.467842129213774E53), 8991.99988879004);
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-2922.0), 2606.78499);
      Complex complex2 = complex1.tanh();
      complex2.pow(21.95964);
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.multiply((-2105026424));
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.42088056939160057, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.198381139, 1.021716833114624);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.divide(3.198381139);
      complex2.acos();
      Complex complex4 = complex0.log();
      Complex.valueOf(3.198381139);
      complex4.sqrt1z();
      Complex complex5 = complex2.tan();
      complex3.divide(complex5);
      complex1.atan();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(3.198381139);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sinh();
      complex0.divide(3.198381139);
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.ONE;
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-145.491), 5.579910641313343E186);
      Complex complex1 = complex0.multiply(2124);
      complex1.log();
      Complex complex2 = Complex.NaN;
      complex2.reciprocal();
      complex0.readResolve();
      Complex complex3 = complex1.acos();
      complex0.conjugate();
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex3.tan();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, 12.28114);
      Complex complex0 = Complex.valueOf(12.28114, Double.POSITIVE_INFINITY);
      complex0.acos();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2066.4354774357334), (-2066.4354774357334));
      Complex complex1 = complex0.multiply(2124);
      Complex complex2 = complex0.log();
      complex0.cosh();
      complex2.readResolve();
      complex0.acos();
      Complex complex3 = Complex.ZERO;
      complex3.NaN.add(complex0);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 12.281143584449133);
      Complex complex1 = complex0.tanh();
      complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, 12.281143584449133);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.sinh();
      complex4.add(40.871968403511325);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex0.ZERO.subtract((-2878.84683));
      Complex complex3 = complex0.multiply((-1784));
      Complex complex4 = complex0.multiply((double) (-1784));
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex2.ONE.pow((-7.29821745001452E-8));
      Complex complex7 = complex4.negate();
      Complex complex8 = complex1.multiply(complex0);
      complex7.getArgument();
      complex2.tanh();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex9.ONE.reciprocal();
      complex3.I.reciprocal();
      complex0.reciprocal();
      Complex complex11 = complex7.acos();
      complex3.acos();
      complex0.multiply((-1784));
      Complex complex12 = complex2.ONE.sqrt();
      Complex complex13 = complex0.atan();
      complex13.tan();
      complex2.createComplex((-20.0), (-1784));
      complex6.multiply((-3333));
      complex8.sqrt1z();
      complex5.multiply((double) (-1784));
      complex10.add(Double.NaN);
      complex11.cos();
//      try { 
        complex12.nthRoot((-3697));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,697
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-505.1));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(complex0);
      complex2.ONE.multiply((-58));
      Complex complex3 = complex0.acos();
      complex1.INF.multiply((-73));
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex2.pow((-505.1));
      complex5.multiply((-505.1));
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex0.add((double) (-73));
      complex8.INF.sinh();
      Complex complex9 = complex8.divide((-505.1));
      complex9.ONE.subtract((-505.1));
      Complex.valueOf((double) (-73), (-2043.9455320306795));
      complex4.sqrt();
      complex3.cos();
      complex5.acos();
      complex7.I.sinh();
      complex8.sinh();
      complex5.multiply(complex7);
      complex1.createComplex((-58), (-58));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2066.4354774357334), (-2066.4354774357334));
      complex0.subtract((double) 2124);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex(2.2638862982382794E248);
      complex2.pow(complex3);
      Complex.valueOf((double) 2124);
      Complex complex4 = complex0.sin();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ONE.reciprocal();
      complex2.ONE.log();
      complex1.I.toString();
      double double0 = (-3.6897084415718804E137);
      Complex complex3 = complex1.ZERO.pow((-3.6897084415718804E137));
      complex3.INF.sin();
      complex0.ONE.multiply((-3.6897084415718804E137));
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex1.acos();
      complex2.log();
      Complex.valueOf((-20.0));
      complex0.getArgument();
      double double0 = 0.2919265817264288;
      Complex complex3 = Complex.valueOf(0.0);
      complex3.sqrt1z();
      complex1.tan();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.ZERO;
//      try { 
        complex5.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.46615558263374));
      Complex.valueOf(0.301261305809021, 69.77417262089506);
      Complex complex0 = Complex.valueOf(627.0912552, (-1.46615558263374));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add(627.0912552);
      complex2.INF.conjugate();
      complex1.tan();
      complex1.add(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2066.4354774357334), (-2066.4354774357334));
      Complex complex1 = complex0.multiply(2124);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf((-2066.4354774357334));
      Complex complex4 = complex3.INF.reciprocal();
      complex4.readResolve();
      complex0.acos();
      Complex complex5 = complex3.conjugate();
      complex5.multiply(complex1);
      Complex complex6 = complex5.NaN.add(complex0);
      complex6.getArgument();
      Complex.valueOf(Double.NaN);
      complex2.sqrt1z();
      complex3.tan();
      Complex complex7 = Complex.INF;
      complex0.subtract(complex3);
      complex4.cos();
      Complex complex8 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1251.91964833, 1251.91964833);
      Complex complex1 = complex0.multiply(258);
      Complex.valueOf(3486.4, 0.8813735870195428);
      Complex complex2 = complex0.divide((double) 1095);
      Complex complex3 = complex1.log();
      complex0.hashCode();
      complex3.multiply(258);
      complex2.conjugate();
      Complex complex4 = new Complex(1.7826926708221436);
      complex4.conjugate();
      Complex complex5 = Complex.ONE;
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1251.91964833, 1251.91964833);
      Complex complex1 = complex0.multiply(449);
      Complex complex2 = Complex.valueOf(69.77417262089506, Double.NaN);
      Complex complex3 = complex1.divide((double) 449);
      complex2.log();
      complex3.multiply(1335);
      Complex complex4 = complex3.conjugate();
      complex4.conjugate();
      Complex complex5 = Complex.ONE;
      complex5.multiply((double) 449);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.1892591576149107E49, (-2507.9524292));
      Complex complex2 = new Complex(0.9995660479631334);
      complex1.cos();
      Complex complex3 = Complex.ONE;
      complex3.divide(0.4004714262853865);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.46615558263374));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.I;
      complex0.NaN.multiply(complex2);
      Complex complex3 = Complex.valueOf((-2507.9524292), 0.9995660479631334);
      Complex complex4 = new Complex((-1.0));
      Complex complex5 = Complex.ONE;
      complex3.multiply(246.998);
      complex1.pow(1.512274346576166E-160);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(3.1613917467297413E135);
      Complex complex1 = Complex.I;
      complex1.INF.multiply(52);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.subtract(2.561702766944378E139);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.multiply((-1444.211794));
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.ONE.asin();
      complex7.abs();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex0.subtract(complex8);
      Complex complex10 = complex6.tanh();
      complex10.INF.subtract((-1444.211794));
      complex10.I.hashCode();
      complex10.INF.divide((-1022.6541931139011));
      complex6.getField();
      complex1.divide(complex6);
      Complex complex11 = complex6.exp();
      complex11.I.createComplex((-1022.6541931139011), 6.283185307179586);
      complex8.pow(5151.774077);
      complex4.toString();
      complex1.createComplex((-3386.09943), 2.561702766944378E139);
      complex9.pow(2.0214014E7);
      complex11.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.131762373533769E79, 8.131762373533769E79);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.sqrt();
      complex1.multiply(37);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex7.ONE.sqrt();
      complex8.I.multiply((-44.10652897));
      Complex complex9 = complex7.log();
      complex0.ZERO.getArgument();
      Complex complex10 = complex0.divide(complex4);
      Complex complex11 = complex10.ZERO.negate();
      complex6.cos();
      complex10.createComplex(2.718281828459045, 1.0);
      Complex complex12 = complex10.log();
      complex4.sinh();
      Complex complex13 = complex11.multiply(704.578);
      complex12.abs();
      complex2.pow(Double.NaN);
      Complex complex14 = complex9.acos();
      complex7.log();
      complex14.divide(complex6);
      Complex complex15 = complex13.pow(8.131762373533769E79);
      complex9.sin();
      complex10.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4496.0, (-1.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add((-2470.46042));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.pow(4496.0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = new Complex(570.7261063094);
      complex6.sin();
      complex3.getField();
      complex5.readResolve();
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.cos();
      complex5.exp();
      complex3.INF.createComplex(1594.3413, (-274.4303243363));
      complex0.I.multiply(1594.3413);
      Complex complex7 = complex0.reciprocal();
      complex0.negate();
      complex4.tanh();
      complex1.toString();
      complex3.sqrt();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = Complex.INF;
      complex7.tan();
      complex4.getField();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.negate();
      complex1.asin();
      Complex complex2 = Complex.I;
      complex0.INF.toString();
      complex0.NaN.abs();
      complex0.readResolve();
      complex0.conjugate();
      complex2.readResolve();
      Complex complex3 = new Complex(1532.0421486599);
      complex3.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.46615558263374));
      complex0.tanh();
      Complex complex1 = Complex.I;
      complex0.NaN.multiply(complex1);
      Complex.valueOf((-2507.9524292), 0.9995660479631334);
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.add(Double.POSITIVE_INFINITY);
      complex3.NaN.divide(complex0);
      complex0.INF.toString();
      complex0.NaN.abs();
      complex0.readResolve();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = (Complex)complex2.readResolve();
      complex1.sin();
      complex4.getField();
      complex2.readResolve();
//      try { 
        complex5.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.subtract(0.9995660479631334);
      complex0.nthRoot(599);
      Complex complex3 = complex0.sqrt1z();
      complex3.NaN.createComplex((-118.9), 599);
      complex2.negate();
      complex3.log();
      complex1.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex(599, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide((-3514.5958083777));
      complex1.INF.abs();
      Complex complex2 = complex0.I.multiply(641.0);
      complex0.readResolve();
      complex2.ZERO.abs();
      Complex complex3 = complex2.cos();
      complex1.NaN.nthRoot(1169);
      complex3.exp();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf(1499.0, 0.0);
      Complex complex5 = complex4.I.tan();
      complex1.abs();
      complex5.INF.sinh();
      Complex complex6 = complex2.exp();
      complex5.ONE.subtract(complex3);
      complex6.getArgument();
      complex6.I.multiply(9.10409058450113);
      Complex complex7 = complex5.subtract((-2442.65));
      complex2.I.readResolve();
      Complex complex8 = new Complex(2.845277393253335E-4, 0.0);
      complex5.INF.pow(complex8);
      Complex complex9 = complex7.ZERO.cosh();
      complex9.ZERO.add(0.006812678650021553);
      complex4.sin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.220665454652531E-8);
      Complex complex1 = Complex.valueOf((-1423.045012871537));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sqrt1z();
      complex2.exp();
      Complex complex4 = complex2.cos();
      complex3.exp();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.valueOf(3.220665454652531E-8);
      Complex complex8 = complex7.negate();
      complex4.tanh();
      complex5.toString();
      Complex complex9 = complex6.sqrt();
      complex9.NaN.exp();
      complex5.reciprocal();
      complex6.getReal();
      Complex complex10 = complex3.tan();
      complex10.getField();
      complex8.add(complex7);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4496.0, (-1.0));
      Complex complex1 = Complex.valueOf(4496.0, 4496.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.exp();
      complex0.reciprocal();
      complex4.negate();
      complex5.tanh();
      complex3.toString();
      complex6.sqrt();
      complex6.reciprocal();
      Complex complex7 = Complex.INF;
      complex7.getReal();
      complex4.tan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.198381139, 1.021716833114624);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex(3.198381139);
      Complex complex4 = complex3.createComplex(3.198381139, 1.021716833114624);
      complex1.getReal();
      Complex complex5 = Complex.ZERO;
      complex1.divide(complex2);
      complex0.nthRoot(627);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.acos();
      complex4.equals("`M5Qogr0b_}@+ToW_H%");
      complex7.sqrt1z();
      Complex complex8 = new Complex(627, Double.NaN);
      complex8.negate();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.NaN, (-1106.98));
      Complex complex1 = Complex.valueOf((-1106.98));
      complex1.divide(Double.NaN);
      Complex complex2 = new Complex(2165.46837225017);
      complex1.atan();
      complex1.cos();
      complex1.divide(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(Double.NaN);
      complex2.getField();
      complex0.asin();
      Complex complex5 = complex2.subtract(complex4);
      complex5.divide((-1.0));
      Complex complex6 = Complex.valueOf(2.5685958862304688);
      complex4.asin();
      Complex complex7 = new Complex(528.6499567467, (-1448.408563361192));
      complex6.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.220665454652531E-8);
      Complex complex1 = Complex.valueOf((-1422.060898671707));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sqrt1z();
      complex2.exp();
      Complex complex4 = complex2.cos();
      complex3.exp();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.valueOf(3.220665454652531E-8);
      complex7.negate();
      complex4.tanh();
      complex5.toString();
      Complex complex8 = complex6.sqrt();
      complex5.reciprocal();
      complex6.getReal();
      complex3.tan();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.asin();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.atan();
      Complex complex4 = complex0.cos();
      complex3.divide(complex4);
      Complex complex5 = Complex.NaN;
      complex2.divide(3764.6588538);
      complex3.getField();
      complex0.asin();
      Complex complex6 = complex1.subtract(complex3);
      complex4.divide(1260.1163601235028);
      Complex.valueOf(1076.866);
      complex0.asin();
      Complex complex7 = new Complex(1412.28856189, 1076.866);
      complex6.nthRoot(104);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      complex0.equals(complex1);
      complex2.getReal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.divide(complex1);
      complex5.nthRoot(7);
      Complex complex6 = Complex.INF;
      complex4.acos();
      complex0.equals(complex5);
      complex1.sqrt1z();
      complex1.negate();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4496.0, (-1.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      complex0.nthRoot(1726);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.valueOf((-1.0));
      complex4.hashCode();
      complex1.abs();
      complex4.toString();
      Complex complex5 = complex0.conjugate();
      complex3.pow(complex1);
      complex5.getImaginary();
      complex4.divide(complex3);
      complex4.isNaN();
      complex2.cos();
      complex0.multiply((-2832.2869626623988));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4496.0, (-1.0));
      Complex complex1 = complex0.sinh();
      complex1.nthRoot(1726);
      Complex complex2 = complex0.sqrt();
      complex1.hashCode();
      complex2.abs();
      complex0.toString();
      complex0.conjugate();
      Complex complex3 = complex1.pow(complex0);
      complex3.getImaginary();
      complex1.divide(complex0);
      complex2.isNaN();
      Complex complex4 = new Complex(Double.NaN);
      complex0.multiply(602.6076552509318);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-2485.687758), (-2485.687758));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.ZERO.divide((-2485.687758));
      complex1.ONE.sin();
      Complex complex4 = Complex.ONE;
      complex0.ONE.tan();
      complex4.reciprocal();
      complex0.hashCode();
      Complex complex5 = complex1.exp();
      complex2.getReal();
      Complex.valueOf((-2485.687758));
      Complex complex6 = complex0.reciprocal();
      complex1.negate();
      complex5.readResolve();
      // Undeclared exception!
      complex6.nthRoot(270037759);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-2587.711729));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      complex2.sqrt();
      Complex complex3 = complex2.divide(6.283185307179586);
      Complex complex4 = complex1.sin();
      Complex complex5 = Complex.valueOf(3.220665454652531E-8);
      Complex complex6 = complex3.tan();
      complex5.hashCode();
      complex1.exp();
      complex3.getReal();
      Complex.valueOf(0.0);
      complex4.reciprocal();
      complex6.negate();
      complex2.readResolve();
      complex6.isInfinite();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-2485.687758), (-2485.687758));
      complex0.tan();
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex((-2485.687758));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.divide(2.0);
      complex1.sin();
      Complex.valueOf((-856.4240893610701));
      Complex complex5 = complex3.tan();
      complex5.reciprocal();
      complex2.hashCode();
      complex4.exp();
      complex2.getReal();
      Complex.valueOf((-2551.4391816333014));
      complex2.reciprocal();
      complex2.negate();
      complex4.readResolve();
      Complex complex6 = Complex.ONE;
      complex6.divide((-2485.687758));
      Complex complex7 = Complex.valueOf((-1026.96973067));
      complex7.isInfinite();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1912.8943300293997);
      Complex complex1 = Complex.valueOf(1912.8943300293997, 0.1212492436170578);
      Complex complex2 = complex0.pow(complex1);
      complex0.ZERO.sin();
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex2.log();
      complex5.ONE.add(complex4);
      Object object0 = complex1.I.readResolve();
      complex2.ONE.readResolve();
      complex0.equals(complex1);
      complex2.sqrt1z();
      Complex complex6 = complex3.multiply((-1));
      complex6.equals(object0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(5.203055142575272E97, 496.5350904388);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex2.exp();
      complex3.cos();
      complex1.exp();
      complex5.reciprocal();
      Complex complex6 = complex3.negate();
      complex4.tanh();
      complex0.toString();
      complex0.sqrt();
      Complex complex7 = complex4.reciprocal();
      complex7.getReal();
      complex6.tan();
      Complex complex8 = new Complex(496.5350904388);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.220665454652531E-8);
      Complex complex1 = Complex.valueOf((-1423.045012871537));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sqrt1z();
      complex2.exp();
      Complex complex4 = complex2.cos();
      complex3.exp();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.valueOf(3.220665454652531E-8);
      complex7.negate();
      complex4.tanh();
      complex5.toString();
      complex6.sqrt();
      complex5.reciprocal();
      complex6.getReal();
      Complex complex8 = complex3.tan();
      complex8.getField();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.I.subtract(2.0);
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = complex0.multiply((-1722));
      Complex complex6 = complex5.INF.multiply(complex0);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.ONE.divide(complex3);
      Complex complex9 = complex8.ONE.add((-1883.8));
      complex9.INF.log();
      complex6.I.reciprocal();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex1.log();
      complex11.I.negate();
      complex11.NaN.cosh();
      Complex complex12 = complex10.NaN.reciprocal();
      complex2.I.tan();
      complex4.readResolve();
      complex12.divide(0.23957195317984703);
      complex3.isInfinite();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4496.0, (-1.0));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.nthRoot(1726);
      Complex complex2 = complex0.ONE.sqrt();
      complex1.ZERO.hashCode();
      complex1.ZERO.abs();
      complex2.INF.toString();
      Complex complex3 = complex0.conjugate();
      complex0.pow(complex2);
      complex2.getImaginary();
      complex3.divide(complex1);
      complex3.isNaN();
      Complex complex4 = complex0.exp();
      complex2.acos();
      complex4.multiply((double) 1726);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-1106.98), (-1106.98));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.subtract(complex2);
      complex0.asin();
      complex1.negate();
      complex3.subtract((-1106.98));
      Complex.valueOf((-1106.98), (-1106.98));
      Complex complex4 = complex2.asin();
      Complex complex5 = new Complex(1.0);
      complex5.pow(complex2);
      Complex complex6 = complex1.multiply(complex5);
      complex5.asin();
      complex1.subtract(complex3);
      complex0.divide(complex6);
      Complex complex7 = Complex.I;
      complex7.exp();
      complex4.acos();
      complex0.multiply((-1106.98));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((double) 1);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.divide((-2470.46042));
      Complex complex4 = complex3.tanh();
      complex1.divide(0.3594330038102771);
      Complex complex5 = complex3.conjugate();
      complex0.atan();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex3.divide(complex6);
      Complex complex8 = Complex.valueOf((double) 1);
      Complex complex9 = complex8.divide((-3246.6066297394677));
      complex9.getField();
      complex7.acos();
      Complex complex10 = complex8.acos();
      complex4.log();
      complex1.getArgument();
      Complex complex11 = Complex.valueOf(0.7853981633974483);
      complex10.asin();
      complex2.getReal();
      Complex complex12 = complex10.sqrt1z();
      complex8.tan();
      complex12.subtract(complex5);
      complex6.divide((-20.0));
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex2.add(430.79427809);
      complex5.reciprocal();
      complex7.conjugate();
      Complex complex8 = complex6.log();
      Complex complex9 = complex2.negate();
      complex0.cosh();
      complex1.reciprocal();
      Complex complex10 = complex9.tan();
      complex1.isInfinite();
      complex8.getReal();
      complex10.getField();
      complex3.divide(Double.NaN);
      complex9.acos();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4496.0, (-1.0));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.nthRoot(1726);
      complex0.nthRoot(1726);
      Complex complex2 = Complex.valueOf((-0.6905817003766439));
      complex0.equals(complex2);
      complex1.sqrt1z();
      complex0.negate();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.198381139, 1.021716833114624);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = new Complex(3.198381139);
      complex0.abs();
      complex0.divide((-145.491));
      Complex complex3 = complex1.acos();
      complex3.asin();
      Complex complex4 = complex3.ONE.subtract(complex0);
      complex0.divide((-3601.636766));
      complex0.getReal();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex1.subtract(complex2);
      complex6.divide(463214.67940025);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(496.5350904388);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.divide((-2470.46042));
      complex3.tanh();
      Complex complex4 = new Complex((-2470.46042));
      Complex complex5 = complex4.exp();
      complex4.cos();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex3.reciprocal();
      complex7.negate();
      Complex complex8 = complex7.tanh();
      complex5.toString();
      complex5.sqrt();
      complex6.reciprocal();
      complex0.getReal();
      complex8.tan();
      complex3.getField();
      Complex complex9 = Complex.I;
      complex3.subtract(complex9);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.divide((-2470.46042));
      complex3.sinh();
      complex2.abs();
      Complex complex4 = complex0.divide((-2470.46042));
      Complex complex5 = complex3.acos();
      complex5.asin();
      complex0.subtract(complex4);
      Complex complex6 = Complex.valueOf((-2470.46042), (-231.687751));
      complex6.divide((-3601.636766));
      Complex complex7 = Complex.ONE;
      complex5.asin();
      complex7.nthRoot(1691);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.ONE.exp();
      complex3.ZERO.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.I.negate();
      complex0.ONE.tanh();
      Complex complex6 = Complex.INF;
      complex6.pow(complex2);
      complex3.getImaginary();
      Complex complex7 = complex4.divide(complex2);
      complex7.isNaN();
      Complex complex8 = new Complex(2.161656025361765E166, 0.0);
      complex8.cos();
      complex7.multiply(2769.020195);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex1.ONE.conjugate();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.add(0.0);
      complex0.readResolve();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.pow(complex3);
      complex0.I.hashCode();
      complex4.ONE.multiply(complex0);
      complex2.ZERO.negate();
      complex0.readResolve();
      complex0.isNaN();
      Complex complex6 = complex4.sin();
      complex2.toString();
      complex1.divide(complex5);
      complex1.multiply(complex6);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(2258.84, (-2314.8));
      complex0.INF.createComplex(2258.84, 0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.NaN.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.add(2258.84);
      Complex complex4 = complex3.createComplex((-2314.8), 0.0);
      complex4.ONE.cosh();
      Complex complex5 = complex3.ZERO.multiply(1.0);
      complex2.ONE.conjugate();
      Complex complex6 = complex5.NaN.multiply(complex3);
      Complex complex7 = complex1.I.createComplex(1910.89607, 0.0);
      complex7.ZERO.sqrt();
      complex6.ONE.sin();
      complex1.isNaN();
      complex4.tanh();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(433.4, 433.4);
      Complex complex1 = complex0.ZERO.sin();
      Complex.valueOf(2.0, 6.260072525);
      Complex complex2 = complex1.asin();
      complex0.getField();
      complex2.reciprocal();
      complex2.acos();
      Complex.valueOf(2.0);
      Complex complex3 = complex0.acos();
      complex3.sqrt1z();
      Complex.valueOf(1473.6362, (-4177.6156144135));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1177.0, 1177.0);
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.multiply((-1.0));
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex1.tan();
      Complex.valueOf((-292.548656), 0.41647201776504517);
      Complex complex9 = complex8.ONE.multiply(17);
      complex0.sqrt1z();
      complex9.ZERO.subtract(complex2);
      complex8.tanh();
      complex3.getArgument();
      Complex complex10 = complex6.subtract((-701.4311676344));
      complex10.NaN.readResolve();
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex11.atan();
      complex12.getImaginary();
      Complex complex13 = Complex.ZERO;
      complex13.hashCode();
      complex13.INF.readResolve();
      Complex complex14 = complex7.divide(complex13);
      complex13.cosh();
      complex7.sinh();
      complex0.asin();
      complex7.cos();
      complex14.sin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.add(Double.POSITIVE_INFINITY);
      complex0.INF.toString();
      complex0.NaN.abs();
      complex0.readResolve();
      Complex complex4 = complex0.conjugate();
      complex2.readResolve();
      Complex complex5 = complex1.tan();
      complex1.getImaginary();
      complex4.subtract(0.0);
      complex3.reciprocal();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.198381139, 1.021716833114624);
      Complex complex1 = complex0.I.conjugate();
      complex0.sinh();
      complex0.abs();
      complex0.divide((-145.491));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.asin();
      complex2.ONE.subtract(complex0);
      complex0.divide((-3601.636766));
      Complex.valueOf(1.021716833114624);
      complex3.asin();
//      try { 
        complex3.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4496.0, (-1.0));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.nthRoot(1726);
      Complex complex2 = complex0.ONE.sqrt();
      complex1.ZERO.hashCode();
      complex1.ZERO.abs();
      complex2.INF.toString();
      Complex complex3 = complex0.conjugate();
      complex0.pow(complex2);
      complex2.getImaginary();
      complex3.divide(complex1);
      complex3.isNaN();
      complex0.cos();
      complex2.multiply(4496.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      complex1.ZERO.hashCode();
      complex1.ONE.conjugate();
      Complex complex2 = complex0.divide(complex1);
      Complex.valueOf(0.0);
      complex2.ZERO.sqrt1z();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(496.5350904388);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.divide((-2470.46042));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.divide((-3246.6066297394677));
      complex5.ONE.conjugate();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.cos();
      complex3.divide(complex5);
      complex0.NaN.divide((-2470.46042));
      complex7.NaN.getField();
      complex6.ZERO.acos();
      complex3.NaN.acos();
      complex7.log();
      complex4.getArgument();
      Complex.valueOf(0.0);
      Complex complex8 = complex0.asin();
      complex8.getReal();
      complex0.sqrt1z();
      Complex complex9 = complex2.tan();
      complex3.subtract(complex9);
      complex1.divide(1311.142772120935);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-2485.687758), (-2485.687758));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.ZERO.divide((-2485.687758));
      complex1.ONE.sin();
      Complex complex4 = Complex.valueOf((-2485.687758));
      Complex complex5 = complex0.ONE.tan();
      complex4.reciprocal();
      complex0.hashCode();
      Complex complex6 = complex1.exp();
      complex2.getReal();
      Complex.valueOf((-2485.687758));
      complex0.reciprocal();
      Complex complex7 = complex1.negate();
      complex6.readResolve();
      complex5.divide(0.0);
      complex5.isInfinite();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(12);
      complex1.NaN.hashCode();
      complex0.ONE.readResolve();
      complex0.ONE.nthRoot(12);
      Complex complex2 = complex1.multiply(12);
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex2.INF.multiply((-89));
      complex2.toString();
      complex2.multiply(12);
      Complex complex5 = complex1.I.pow(27.59935);
      complex5.atan();
      Complex complex6 = complex2.log();
      complex0.getArgument();
      complex6.NaN.createComplex((-89), 12);
      complex0.INF.hashCode();
      complex2.isNaN();
      Complex complex7 = complex3.ZERO.subtract(27.59935);
      Complex complex8 = complex0.createComplex(0.0, 0.0);
      complex8.multiply(complex4);
      complex8.negate();
      complex3.cosh();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.I.subtract(2.0);
      complex1.INF.tanh();
      Complex complex4 = complex0.multiply((-1722));
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.divide(complex3);
      complex7.ONE.add((-1883.8));
      complex5.I.reciprocal();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex1.log();
      complex9.I.negate();
      complex9.NaN.cosh();
      complex8.NaN.reciprocal();
      complex2.I.tan();
      complex8.isInfinite();
      complex0.getReal();
      complex6.getField();
      complex7.divide((double) 1);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      complex0.subtract(complex1);
      Complex complex2 = complex0.sinh();
      complex2.ZERO.reciprocal();
      complex1.toString();
      Complex.valueOf(0.0, (-1709.4629954901984));
      complex1.reciprocal();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.subtract((-5256.7));
      Complex complex3 = complex2.cosh();
      complex3.INF.reciprocal();
      Complex complex4 = complex3.NaN.asin();
      complex4.ONE.abs();
      complex3.INF.add((-1261.07));
      Complex complex5 = complex1.ONE.asin();
      Complex complex6 = complex2.NaN.sqrt1z();
      Complex complex7 = complex0.pow((-934.7622936425));
      complex5.ONE.pow((-1261.07));
      Complex complex8 = complex7.pow((-7.955085231106037E-8));
      complex6.ONE.getArgument();
      complex0.getReal();
      complex1.atan();
      Object object0 = complex2.readResolve();
      complex7.equals(object0);
      complex6.sin();
      complex5.add(complex3);
      complex7.getImaginary();
      complex6.negate();
      Complex.valueOf(1.0);
      complex8.reciprocal();
      Complex complex9 = complex0.acos();
      complex9.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.add(0.0);
      complex2.INF.cosh();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex0.INF.getField();
      Complex complex4 = complex0.negate();
      complex3.ZERO.cosh();
      complex3.INF.sqrt1z();
      complex0.toString();
      Complex complex5 = complex0.ONE.cos();
      Complex complex6 = complex3.log();
      complex6.equals(complex2);
      complex4.getArgument();
      complex3.toString();
      complex5.add(1362.66838788972);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.add(2359.1);
      Complex complex3 = complex0.ZERO.tan();
      complex3.NaN.tan();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.sqrt();
      complex6.ZERO.divide(complex4);
      Complex complex7 = complex3.multiply(2359.1);
      complex7.NaN.tanh();
      complex2.getField();
      complex0.tanh();
      complex5.log();
      complex1.exp();
      complex7.tan();
      complex7.abs();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.6853040456771851);
      Complex complex1 = complex0.ONE.add(0.0);
      complex1.NaN.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.INF.pow(47.62);
      Complex complex4 = Complex.NaN;
      complex2.I.createComplex(0.3339579105377197, 0.0);
      Complex complex5 = complex2.ONE.divide(complex4);
      complex2.toString();
      Complex complex6 = complex0.createComplex((-1.0), (-1.0));
      Complex complex7 = complex6.ONE.multiply((-152));
      Complex complex8 = complex1.tanh();
      complex6.ONE.cos();
      Complex complex9 = complex6.add(0.6853040456771851);
      complex9.INF.add(complex7);
      Complex complex10 = complex9.add(3683.2710350278);
      complex10.ZERO.getArgument();
      complex5.atan();
      Complex complex11 = complex1.divide(0.0);
      complex5.log();
      complex11.getField();
      complex0.getArgument();
      complex0.hashCode();
      complex8.getArgument();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      complex2.add(complex1);
      Complex complex12 = complex4.subtract((-1982.2529));
      complex12.INF.multiply(0.3339579105377197);
      Complex.valueOf((-1.0), 2.4342737197875977);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.createComplex(631.4372, 1335.0);
      Complex complex3 = complex2.divide(1335.0);
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex4.sqrt1z();
      complex5.I.readResolve();
      complex0.toString();
      complex1.I.readResolve();
      complex0.negate();
      complex0.asin();
      Complex complex6 = Complex.valueOf(1759.726289967756);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.sinh();
      complex7.pow(complex6);
      Complex complex9 = complex0.conjugate();
      complex9.ZERO.getArgument();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex1.ZERO.abs();
      Complex complex2 = complex1.I.add(complex0);
      complex2.I.atan();
      complex2.INF.negate();
      Complex complex3 = complex2.I.reciprocal();
      complex3.INF.sqrt1z();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.NaN.multiply((-109.87));
      Complex complex7 = complex5.ZERO.multiply((-109.87));
      Complex complex8 = complex0.add(244.7);
      Complex complex9 = complex8.ONE.pow((-109.87));
      complex5.ZERO.conjugate();
      complex5.divide(complex4);
      complex6.abs();
      complex9.sinh();
      complex0.nthRoot(1);
      complex6.subtract(complex1);
      Complex complex10 = Complex.ONE;
      complex6.ONE.pow(complex10);
      Complex complex11 = complex7.createComplex(Double.NaN, (-20.0));
      complex11.tanh();
      complex11.log();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1425.31038498686);
      complex0.ZERO.getField();
      Complex complex1 = complex0.ZERO.exp();
      complex1.ONE.sinh();
      Complex complex2 = complex0.tan();
      complex2.nthRoot(1460);
      complex2.ZERO.abs();
      complex2.NaN.add(1425.31038498686);
      Complex complex3 = complex2.I.pow(1.1875293254852295);
      complex0.getField();
      complex0.toString();
      Complex complex4 = complex2.cos();
      complex4.multiply(complex1);
      complex3.getImaginary();
      complex2.subtract(complex0);
      complex2.toString();
      complex0.getArgument();
      complex0.multiply(2368.0);
      complex0.getReal();
      complex1.add(1425.31038498686);
      complex1.nthRoot(1460);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex1.NaN.cos();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = Complex.valueOf((-2423.0), (-2423.0));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = Complex.valueOf((-2423.0), (-2423.0));
      Complex complex7 = complex5.ONE.subtract((-928.2312504485758));
      complex7.ZERO.subtract(complex4);
      Complex complex8 = complex5.multiply((-1630));
      complex1.hashCode();
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = Complex.valueOf((-928.2312504485758));
      complex10.I.hashCode();
      complex3.equals(complex10);
      Complex.valueOf((-928.2312504485758), (-2802.2485902955));
      Complex complex11 = complex8.cosh();
      complex11.I.divide(complex6);
      Complex complex12 = complex4.sin();
      complex12.abs();
      complex9.isInfinite();
      complex5.getArgument();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      complex0.equals(object0);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex2.asin();
      complex4.ZERO.negate();
      complex0.subtract(0.0);
      Complex complex5 = Complex.NaN;
      complex2.ONE.asin();
      Complex complex6 = complex3.pow(complex5);
      complex0.multiply(complex6);
      complex4.asin();
      Complex complex7 = complex4.subtract(complex0);
      complex7.INF.divide(complex5);
      complex0.exp();
      complex1.acos();
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add(1.994411660450821E-151);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add((-4.768920119497491E-8));
      Complex complex3 = complex0.sin();
      complex3.NaN.acos();
      Complex complex4 = Complex.valueOf(2.268329019570017E70, 2.268329019570017E70);
      complex3.I.cos();
      complex2.INF.negate();
      Complex complex5 = complex2.add(0.0);
      complex0.NaN.subtract(0.0);
      complex2.createComplex(0.10467669367790222, 0.0);
      Complex complex6 = complex5.INF.divide(complex4);
      complex6.ZERO.abs();
      Complex complex7 = complex3.tan();
      complex7.subtract(2448.268790500842);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.ONE.multiply(0.0);
      complex0.ONE.getArgument();
      Complex complex3 = complex0.ONE.sinh();
      complex0.hashCode();
      Complex complex4 = complex3.INF.subtract(complex1);
      complex4.NaN.tanh();
      Complex complex5 = complex3.ZERO.sinh();
      complex5.I.multiply(1.0);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex3.ZERO.subtract(complex2);
      complex0.equals(complex6);
      Complex complex8 = complex6.ZERO.sqrt1z();
      Complex complex9 = complex6.conjugate();
      complex6.hashCode();
      Complex complex10 = complex3.asin();
      complex0.INF.getField();
      Complex complex11 = complex6.ZERO.negate();
      complex8.ZERO.subtract(0.0);
      complex10.ZERO.multiply(3324);
      complex6.ONE.pow(0.0);
      complex7.NaN.sinh();
      complex8.isInfinite();
      complex9.hashCode();
      complex11.hashCode();
      complex2.readResolve();
      Complex complex12 = complex6.exp();
      complex12.NaN.subtract(complex2);
      complex7.sin();
      complex0.getField();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(0);
      complex0.getImaginary();
      complex0.pow(0.0);
      Complex complex1 = Complex.INF;
      complex1.ZERO.toString();
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.NaN.tanh();
      Complex complex3 = complex1.ZERO.exp();
      complex3.sin();
      complex3.ZERO.log();
      complex0.pow(complex1);
      complex1.cos();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(1486.0, 1486.0);
      Complex complex1 = complex0.NaN.createComplex(1486.0, 25.13904265);
      complex1.ZERO.toString();
      complex0.ONE.abs();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.INF.add(complex0);
      complex3.cos();
      complex0.getArgument();
      Complex.valueOf(0.7853981633974483, 0.0);
      Complex complex4 = complex2.pow(complex1);
      complex3.multiply((-3655));
      complex1.equals(complex4);
      complex3.divide(complex1);
      complex3.divide(complex0);
//      try { 
        complex0.nthRoot((-1824));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,824
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      complex0.ZERO.readResolve();
      complex0.ONE.readResolve();
      complex1.NaN.negate();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex3.I.exp();
      int int0 = 973;
      complex4.nthRoot(973);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.tan();
      complex2.negate();
      Complex complex7 = complex6.I.cosh();
//      try { 
        complex7.INF.nthRoot((-2069));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,069
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-469.9));
      Complex complex1 = complex0.I.subtract(3.9036541111764032E-140);
      Complex complex2 = complex0.ZERO.cos();
      complex2.I.getArgument();
      complex0.I.pow((-469.9));
      Complex complex3 = complex1.ONE.sin();
      complex3.ZERO.toString();
      complex0.isInfinite();
      complex1.isNaN();
      complex0.I.cosh();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.atan();
      complex6.ONE.sin();
      complex2.I.readResolve();
      complex2.ZERO.log();
      complex4.add(complex3);
      complex4.abs();
      complex2.equals(complex5);
      complex6.I.add(complex5);
      Complex complex7 = complex1.multiply(complex4);
      Complex complex8 = complex4.multiply(complex7);
      complex6.sqrt();
      complex5.INF.pow((-1564.93));
      Complex complex9 = complex8.multiply(2.0769322678328357E-128);
      Complex complex10 = complex9.add((-3399.674735570992));
      complex5.negate();
      complex5.cosh();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-1844));
      complex1.I.add((-849.6547146346));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.divide(complex2);
      complex3.ONE.abs();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.pow(complex0);
      complex1.INF.nthRoot(293);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex3.INF.subtract(complex2);
      complex1.multiply(complex0);
      complex2.INF.nthRoot(354);
      complex5.createComplex(0.0, 0.0);
      complex3.ONE.sinh();
      Complex.valueOf(0.0, 976.7);
      Complex complex6 = complex5.INF.conjugate();
      complex2.add(976.7);
      complex5.isInfinite();
      complex0.sinh();
      complex0.add((-661.180440823469));
      complex3.toString();
      complex3.isInfinite();
      complex2.sqrt1z();
      Complex complex7 = complex6.sqrt();
      complex7.I.tanh();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1251.91964833, 1251.91964833);
      Complex complex1 = complex0.INF.multiply(1095);
      Complex.valueOf(0.0, (double) 1095);
      Complex complex2 = complex1.NaN.log();
      complex2.hashCode();
      Complex complex3 = complex0.multiply(449);
      complex3.ONE.conjugate();
      complex0.conjugate();
      Complex complex4 = Complex.ONE;
      complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.createComplex((-3742.0), (-3742.0));
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.reciprocal();
      complex1.ZERO.tanh();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.I.add((-3742.0));
      complex5.abs();
      Complex complex7 = Complex.valueOf(1.0);
      complex6.subtract(complex7);
      complex5.tan();
      complex6.isInfinite();
      complex4.sin();
      complex5.divide((-677.5183821733826));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      complex0.ONE.atan();
      complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.multiply(1987.77);
      complex1.isInfinite();
      complex0.divide(1987.77);
      Complex complex2 = complex0.conjugate();
      complex2.INF.negate();
      complex0.equals((Object) null);
      complex1.sqrt1z();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.INF.subtract(complex1);
      complex0.ONE.sqrt1z();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.I.negate();
      complex0.ONE.tanh();
      complex4.toString();
      complex5.sqrt();
      Complex complex6 = complex3.reciprocal();
      complex2.getReal();
      complex4.tan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-1106.98), (-1106.98));
      complex0.getReal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      complex3.I.nthRoot(627);
      Complex complex4 = complex3.ZERO.acos();
      complex3.equals(complex1);
      complex3.sqrt1z();
      complex0.negate();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(3.205923535388443E-235);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.createComplex(3.205923535388443E-235, 3.205923535388443E-235);
      Complex complex2 = complex1.multiply((-256));
      Complex complex3 = complex0.pow(complex1);
      complex0.INF.cos();
      Complex complex4 = complex3.ONE.subtract(3.205923535388443E-235);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex0.NaN.pow(complex2);
      Complex complex6 = Complex.valueOf((-4608.11));
      Complex complex7 = complex4.createComplex((-256), 1.0);
      Complex complex8 = complex3.NaN.tanh();
      Object object1 = complex8.ONE.readResolve();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex8.ZERO.asin();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex9.ZERO.subtract(complex2);
      complex11.INF.hashCode();
      complex8.getArgument();
      Complex complex12 = complex0.sqrt1z();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex7.log();
      assertEquals(5.545185073815887, complex13.getReal(), 0.01);
      assertTrue(complex4.equals((Object)object0));
      
      Complex complex14 = complex3.add(1.0);
      complex14.equals(complex8);
      assertFalse(complex3.equals((Object)object1));
      assertEquals(2.0, complex14.getReal(), 0.01);
      
      Complex complex15 = complex11.reciprocal();
      Complex complex16 = complex15.ONE.createComplex(2.0, Double.NaN);
      assertTrue(complex16.equals((Object)complex8));
      
      complex15.NaN.subtract(Double.NaN);
      Complex complex17 = complex15.asin();
      assertSame(complex17, complex5);
      assertEquals((-8.207164250594414E-233), complex2.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex1));
      
      double double0 = complex6.getReal();
      assertEquals((-4608.11), double0, 0.01);
  }
}
