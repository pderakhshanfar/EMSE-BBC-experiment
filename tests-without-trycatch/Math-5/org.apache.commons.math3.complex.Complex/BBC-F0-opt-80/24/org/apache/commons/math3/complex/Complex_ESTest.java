/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:02:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2165.8739082492657), (-2165.8739082492657));
      Complex complex1 = complex0.acos();
      complex0.ONE.negate();
      complex0.getField();
      Complex.valueOf((-2165.8739082492657));
      Complex complex2 = complex0.reciprocal();
      complex2.ONE.divide(392.15710814411);
      Complex complex3 = complex0.tan();
      complex1.readResolve();
      Complex complex4 = complex0.reciprocal();
      complex4.subtract((-865.869185585));
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(127.95471086182334);
      complex0.NaN.abs();
      complex0.I.createComplex(127.95471086182334, (-348.7666106674693));
      Complex complex1 = complex0.NaN.pow((-348.7666106674693));
      complex0.NaN.readResolve();
      Complex complex2 = complex0.pow(127.95471086182334);
      complex2.ONE.subtract(complex1);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(20.0);
      complex3.sinh();
      Complex.valueOf(20.0, 1.2579610347747803);
      complex3.sinh();
      complex3.nthRoot(959);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(2719.337812791, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(1.5950063243508339E-6, 1.5950063243508339E-6);
      complex1.NaN.sin();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.INF.conjugate();
      complex0.NaN.sinh();
      double double0 = 3.2125114846196574E8;
      complex0.add(3.2125114846196574E8);
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.NaN.sqrt1z();
      complex1.pow((-595.8));
      Complex complex3 = complex0.sqrt();
      complex1.INF.nthRoot(632);
      complex0.toString();
      complex3.pow(complex1);
      Complex complex4 = complex3.reciprocal();
//      try { 
        complex4.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-532.6484224));
      complex0.I.nthRoot(1875);
      complex0.ONE.getArgument();
      Complex complex1 = Complex.valueOf((-532.6484224));
      Complex complex2 = Complex.valueOf(869.455245, Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
      Complex complex3 = complex0.acos();
      complex1.cosh();
      complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-0.08368284975180963), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex2.INF.conjugate();
      complex2.ONE.sqrt1z();
      Complex complex3 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.asin();
      complex5.getField();
      Complex complex6 = complex3.asin();
      complex6.multiply((-1169.245781));
      complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.5842022297942604), Double.POSITIVE_INFINITY);
      complex1.tan();
      complex1.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.5842022297942604), Double.POSITIVE_INFINITY);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.INF.divide(Double.POSITIVE_INFINITY);
      complex0.ONE.add(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-0.08368284975180963), Double.POSITIVE_INFINITY);
      complex1.multiply((-0.08368284975180963));
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-0.08368284975180963), Double.POSITIVE_INFINITY);
      complex1.tan();
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex.valueOf(1887.6820149);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sinh();
      complex2.sinh();
      complex0.sqrt();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex((-2523.81814026513));
      complex4.createComplex((-1.0), 0.9826600818367566);
      Complex.valueOf((-48.95389503), Double.NaN);
      complex4.divide(complex3);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.ZERO.subtract((-20.0));
      complex1.nthRoot(41);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.nthRoot(1143);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = Complex.valueOf(2037.999781120454, 371.0864);
      complex2.ZERO.nthRoot(1143);
      Complex complex4 = complex2.ONE.asin();
      complex4.asin();
      Complex complex5 = complex0.subtract((-220.3355834113681));
      complex5.NaN.hashCode();
      complex3.ONE.pow(complex1);
      complex3.ONE.tan();
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.log();
      complex0.tanh();
      Complex complex1 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.INF.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-460.43), (-460.43));
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
      Complex complex1 = complex0.tan();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(903.988564332, (-20.0));
      complex1.tan();
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(951992.513535734);
      Complex complex1 = complex0.NaN.multiply((-1649.0));
      Complex complex2 = Complex.valueOf((-1649.0));
      complex2.I.pow((-1649.0));
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.createComplex(2.0240049362182617, 951992.513535734);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex4.I.divide(complex1);
      complex5.ZERO.readResolve();
      Complex complex7 = complex4.sinh();
      complex7.I.nthRoot(815);
      complex7.I.getField();
      Complex complex8 = complex3.divide(complex7);
      complex4.sin();
      complex1.getField();
      complex2.sin();
      Complex complex9 = complex8.multiply(complex0);
      complex6.conjugate();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.divide(complex1);
      Complex complex2 = new Complex((-1794.122028), (-1794.122028));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.acos();
      complex4.sqrt();
      complex3.tan();
      complex3.createComplex((-1.596421199665382), (-1.596421199665382));
      complex1.pow((-1794.122028));
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1323.15453008), (-1323.15453008));
      Complex complex1 = complex0.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.tan();
      complex1.multiply(1327);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.pow(complex2);
      complex3.getField();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.cos();
      complex6.INF.cosh();
      complex1.abs();
      complex1.nthRoot(1);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex6.multiply(complex0);
      Complex complex10 = complex9.INF.cos();
      complex9.asin();
      Complex complex11 = complex5.divide(complex7);
      complex11.multiply(Double.NaN);
      complex9.ZERO.cosh();
      complex4.toString();
      complex6.pow(6.283185307179586);
      Complex.valueOf(Double.NaN);
      Complex complex12 = complex10.sqrt1z();
      complex8.cosh();
      complex7.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      complex0.getArgument();
      complex0.nthRoot(1431);
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.tanh();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.854771398921902E-70, 8.854771398921902E-70);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      complex0.pow((-1.0));
      Complex complex1 = new Complex(563.083361, 1.0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.sqrt();
      complex5.pow(3324.0974847773823);
      complex5.reciprocal();
      Complex complex6 = complex4.negate();
      complex3.conjugate();
//      try { 
        complex6.nthRoot((-832));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -832
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1372.04193482056), 15.059775684070138);
      Complex complex1 = complex0.tan();
      complex1.sqrt1z();
      Complex complex2 = Complex.I;
      complex1.getArgument();
      Complex complex3 = new Complex(20.0, 1.5707963267947314);
      complex3.tanh();
      Complex complex4 = Complex.I;
      complex4.cosh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1939.8088362420858, 5074.346105192524);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.cos();
      Complex.valueOf(1939.8088362420858);
      Complex complex3 = complex2.ZERO.tanh();
      Complex.valueOf(5074.346105192524);
      complex3.INF.abs();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex4.sin();
      complex1.ZERO.multiply(2492);
      Complex complex6 = complex0.add(1939.8088362420858);
      complex1.ONE.toString();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.ZERO.tan();
      complex7.ONE.divide(5074.346105192524);
      complex8.I.readResolve();
      complex8.I.abs();
      Complex complex9 = complex8.ONE.cosh();
      complex9.NaN.add(complex4);
      complex9.acos();
      complex9.INF.asin();
      complex1.ONE.sinh();
      complex6.NaN.atan();
      complex7.add(1372.04193482056);
      complex1.negate();
      Complex complex10 = complex5.multiply(1939.8088362420858);
      complex5.abs();
      complex4.sin();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2236.1605582218, 2236.1605582218);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.hashCode();
      complex2.ONE.readResolve();
      complex2.I.log();
      Complex complex3 = complex0.negate();
      complex3.ZERO.divide(complex0);
      Complex complex4 = Complex.valueOf(1290.7);
      Complex complex5 = complex4.conjugate();
      complex5.NaN.asin();
      Complex complex6 = complex4.subtract(2236.1605582218);
      complex6.atan();
      Complex complex7 = Complex.valueOf(2236.1605582218, 1372.04193482056);
      Complex complex8 = Complex.NaN;
      complex4.NaN.multiply(complex8);
      complex2.abs();
      Complex complex9 = complex1.add((-2513.769245));
      complex2.readResolve();
      complex7.ONE.tan();
      complex1.abs();
      complex9.NaN.subtract(complex4);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex9.sqrt1z();
      complex11.divide((-289.1));
      Complex complex12 = complex6.atan();
      complex10.subtract(2236.1605582218);
      complex7.acos();
      complex12.negate();
      complex6.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3550.05849), (-3550.05849));
      Complex complex1 = complex0.I.multiply(20);
      Complex complex2 = complex0.divide((-3550.05849));
      Complex complex3 = complex2.INF.multiply(20);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.I.exp();
      complex5.I.sqrt1z();
      Complex complex6 = complex1.subtract((-104237.33780901723));
      complex6.ONE.tanh();
      Complex.valueOf((-3550.05849));
      Complex.valueOf((double) 20, (-3550.05849));
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.ZERO.readResolve();
      complex2.nthRoot(20);
      complex3.readResolve();
      complex4.acos();
      complex2.I.asin();
      complex4.acos();
      complex3.cosh();
      Complex.valueOf((-104237.33780901723));
      complex3.divide(complex1);
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex8.nthRoot(20);
      complex6.cos();
      complex1.multiply((-2057.49338053));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1372.04193482056), (-702.02325504));
      Complex complex1 = complex0.ZERO.atan();
      complex0.getReal();
      Complex complex2 = complex0.tan();
      complex0.sqrt1z();
      complex2.abs();
      Complex complex3 = new Complex(2.3012989023072947, (-1372.04193482056));
      complex1.sinh();
      complex0.ONE.subtract(complex2);
      complex0.sqrt();
      Complex complex4 = new Complex((-102.8311));
      complex4.reciprocal();
      complex0.createComplex((-102.8311), 2.3012989023072947);
      complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1372.04193482), 1.8446779251098633);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      complex2.NaN.reciprocal();
      complex1.isNaN();
      Complex complex3 = Complex.valueOf(1455.86378, 1166.0);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.854771398921902E-70);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex((-322.8596255480348), (-1.5047247608405243));
      complex3.multiply((-1.5047247608405243));
      complex0.acos();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.tan();
      complex4.createComplex(685.277383275, (-1.0));
      complex2.pow(complex1);
      Complex complex6 = Complex.valueOf(1.6419797090870802E-8);
      Complex complex7 = complex6.pow(6.283185307179586);
      complex5.reciprocal();
      Complex complex8 = Complex.ONE;
      complex8.negate();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(6171.9615994, 6171.9615994);
      Complex complex1 = Complex.ONE;
      complex1.INF.multiply(2784.847694782);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = Complex.valueOf(6171.9615994, 6171.9615994);
      complex4.INF.pow(0.9982613406144121);
      Complex complex5 = Complex.valueOf(6171.9615994);
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex6.cosh();
      complex6.ONE.negate();
      complex4.I.add(complex5);
      complex2.ONE.negate();
      Complex complex8 = complex0.atan();
      complex0.NaN.asin();
      complex0.createComplex(1.033464507572145E142, 2.334169864654541);
      Complex complex9 = complex3.tanh();
      complex0.NaN.tanh();
      complex3.nthRoot(283);
      Complex complex10 = complex8.sin();
      Complex complex11 = complex10.INF.conjugate();
      complex4.sqrt();
      Complex complex12 = complex7.subtract(complex11);
      complex12.INF.cos();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.854771398921902E-70);
      Complex complex1 = new Complex(8.854771398921902E-70, (-2.3574653182047758E-7));
      Complex complex2 = complex1.add((-1372.04193482056));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(3.140248178055332, 8.854771398921902E-70);
      complex5.add(complex6);
      complex5.getArgument();
      complex0.nthRoot(1414);
      complex3.pow((double) 1431);
      complex4.tanh();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.hashCode();
      complex0.readResolve();
      complex0.I.multiply(1829);
      complex0.equals(complex0);
      complex0.subtract((-1497.75199072));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-208.2814585711003));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(7.140343013236265E-60);
      complex2.I.multiply(complex1);
      Complex complex3 = Complex.valueOf((-208.2814585711003));
      complex3.tanh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.pow((-20.0));
      complex1.readResolve();
      Complex complex2 = new Complex((-20.0));
      complex1.getArgument();
      Object object0 = new Object();
      complex0.equals(object0);
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.ZERO.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(3227.811962, 3227.811962);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex1.ONE.sin();
      Complex complex3 = Complex.valueOf(Double.NaN, (-1.0));
      complex2.tanh();
      complex3.divide((-2878.505));
      Complex complex4 = new Complex(726.38);
      complex4.multiply(Double.NaN);
      complex4.pow(Double.NaN);
      Complex complex5 = Complex.valueOf((-2878.505));
      complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.add(complex0);
      complex1.getField();
      Complex complex4 = Complex.valueOf(59.0);
      complex0.log();
      complex4.getField();
      Complex complex5 = complex3.sin();
      complex5.pow((-3608.398050508183));
      complex2.tanh();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.log();
      Complex complex2 = complex1.add(complex0);
      complex1.getField();
      Complex complex3 = Complex.valueOf(59.0);
      complex0.log();
      complex3.getField();
      complex2.sin();
      Complex complex4 = Complex.I;
      complex4.sqrt();
      Complex complex5 = Complex.valueOf((-1453.065914), (-1453.065914));
      Complex complex6 = complex5.reciprocal();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.add(complex1);
      complex1.getField();
      Complex complex4 = Complex.valueOf(59.0);
      Complex complex5 = complex4.log();
      complex1.getField();
      Complex complex6 = complex5.sin();
      Complex complex7 = Complex.I;
      complex0.sqrt();
      Complex.valueOf(0.9999999624915065, Double.POSITIVE_INFINITY);
      complex6.reciprocal();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = new Complex((-1478.20356572));
      Complex complex4 = complex3.divide((-1478.20356572));
      Complex complex5 = complex4.createComplex((-2270.947), (-1478.20356572));
      Complex.valueOf((-1453.065914));
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex6.atan();
      complex5.sqrt();
      Complex complex8 = complex2.sqrt();
      complex8.pow(complex5);
      complex6.toString();
      complex7.readResolve();
      Complex complex9 = complex6.tanh();
      complex5.toString();
      Complex complex10 = Complex.valueOf((-1453.065914), 1.5234465914578058E-153);
      complex10.getField();
      complex9.sqrt1z();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex1);
      complex2.nthRoot(142);
      Complex.valueOf((double) 142, 283.0);
      Complex complex5 = Complex.valueOf(1.4255188208147591, 1.4255188208147591);
      complex2.getField();
      complex4.isNaN();
      Complex complex6 = Complex.valueOf(2806.03749450987, 2.02598237991333);
      complex4.conjugate();
      complex5.divide(complex6);
      Complex complex7 = Complex.ONE;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.ONE.pow(complex0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ZERO.sin();
      complex4.I.nthRoot(142);
      Complex complex5 = Complex.valueOf((double) 142, 283.0);
      complex5.subtract(complex4);
      Complex complex6 = Complex.valueOf(1840.8557327, 1840.8557327);
      complex3.getField();
      complex2.isNaN();
      Complex complex7 = Complex.valueOf(0.0, 1840.8557327);
      complex6.subtract(complex7);
      complex6.divide(complex7);
      Complex complex8 = Complex.ONE;
      complex8.getReal();
      complex6.tanh();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.5977175678367722));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.multiply((-0.5977175678367722));
      complex0.ZERO.acos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex1.createComplex((-0.5977175678367722), 0.0);
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = complex2.pow(0.0);
      Complex.valueOf((-0.5977175678367722));
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex8.sinh();
      complex7.nthRoot(4);
      complex4.readResolve();
      complex6.reciprocal();
      complex5.nthRoot(4);
      complex9.isInfinite();
      Complex complex10 = Complex.INF;
      complex10.toString();
      complex8.pow(1666.587913);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.log();
      Complex complex2 = complex1.add(complex0);
      complex1.getField();
      Complex complex3 = Complex.valueOf(59.0);
      complex0.log();
      complex3.getField();
      complex2.sin();
      Complex complex4 = Complex.I;
      complex4.sqrt();
      Complex complex5 = Complex.valueOf((-1453.065914), (-1453.065914));
      complex5.reciprocal();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2721.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex2.ONE.multiply(complex1);
      Complex complex5 = complex4.INF.multiply(complex3);
      Complex complex6 = complex0.ZERO.add(complex1);
      Complex complex7 = complex6.ZERO.multiply(complex1);
      complex1.I.divide((-851.2574762404865));
      Complex complex8 = complex2.ONE.sinh();
      Complex complex9 = complex0.pow((-1974.11492321384));
      Complex complex10 = complex3.pow(complex2);
      Complex complex11 = complex10.ZERO.exp();
      Complex complex12 = complex0.divide((-1974.11492321384));
      complex12.getArgument();
      Complex complex13 = complex6.conjugate();
      complex8.INF.divide((-1974.11492321384));
      Complex complex14 = complex13.INF.negate();
      Complex complex15 = complex11.NaN.atan();
      Complex complex16 = complex9.asin();
      complex16.NaN.divide(2721.0);
      complex14.negate();
      Complex complex17 = complex8.subtract(507.753025204);
      complex17.INF.asin();
      complex1.pow((-2935.206278019));
      complex6.sqrt1z();
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex18.NaN.negate();
      complex0.divide(complex14);
      complex5.sqrt();
      complex16.log();
      complex19.conjugate();
      Complex complex20 = complex15.sqrt1z();
      complex7.pow(complex20);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      complex3.abs();
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      complex2.hashCode();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.valueOf((double) 707, 0.9999942342322663);
      complex6.divide(complex4);
      complex2.nthRoot(1396);
      complex2.isInfinite();
      complex5.asin();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex1.sinh();
      complex7.createComplex(0.0, 707);
      Complex complex12 = Complex.NaN;
      complex12.pow(complex4);
      complex8.tanh();
      complex11.asin();
      complex12.cos();
      Complex complex13 = complex9.cos();
      complex13.sqrt();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(1493.1907588449017);
      complex2.toString();
      complex1.NaN.divide(3651.07030201351);
      complex0.INF.createComplex(1493.1907588449017, 1493.1907588449017);
      Complex.valueOf(3651.07030201351);
      Complex.valueOf(1.0, 0.9999942342322663);
//      try { 
        complex2.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2734.49240445, 2734.49240445);
      complex0.getField();
      Complex complex1 = new Complex(2734.49240445, 6.283185307179586);
      Complex complex2 = complex1.I.sinh();
      complex1.ONE.sinh();
      Complex.valueOf(6.283185307179586, (-1820.1882740972512));
      complex1.ONE.hashCode();
      complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2.399186832888246E-8), 6.283185307179586);
      Complex complex4 = complex3.conjugate();
      complex2.nthRoot(430);
      complex3.readResolve();
      complex0.reciprocal();
      complex4.nthRoot(124);
      complex2.isInfinite();
      Complex complex5 = Complex.INF;
      complex5.toString();
      Complex complex6 = complex3.pow((double) 430);
      Complex complex7 = Complex.valueOf((-2.399186832888246E-8));
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.ONE.pow(complex0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ZERO.sin();
      complex4.I.nthRoot(142);
      Complex complex5 = Complex.valueOf((double) 142, 283.0);
      complex5.subtract(complex4);
      Complex complex6 = Complex.valueOf(2.02598237991333, 1840.8557327);
      complex3.getField();
      complex2.isNaN();
      Complex complex7 = Complex.valueOf(0.0, 1840.8557327);
      complex6.subtract(complex7);
      complex1.conjugate();
      complex6.divide(complex7);
      Complex complex8 = Complex.ONE;
      complex8.getReal();
      complex6.tanh();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-2366.2807055858), (-1505.917329443936));
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.createComplex((-1505.917329443936), 3324.4452662243);
      Complex complex5 = Complex.valueOf(3718.243759, 3718.243759);
      Complex complex6 = complex2.pow(complex5);
      complex1.divide(complex0);
      Complex complex7 = Complex.ONE;
      complex4.nthRoot(682);
      Complex complex8 = Complex.valueOf((-1001.70287328));
      Complex complex9 = complex8.pow((double) 142);
      complex9.I.sinh();
      complex9.INF.multiply(complex3);
      complex4.reciprocal();
      complex6.sinh();
      complex4.nthRoot(682);
      complex7.readResolve();
      complex9.reciprocal();
//      try { 
        complex2.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2734.49240445, 2734.49240445);
      complex0.getField();
      Complex complex1 = new Complex(2734.49240445, 6.283185307179586);
      Complex complex2 = complex1.I.sinh();
      complex1.ONE.sinh();
      Complex complex3 = Complex.valueOf(6.283185307179586, (-1820.1882740972512));
      complex1.ONE.hashCode();
      complex0.pow(complex1);
      Complex complex4 = Complex.valueOf((-2.399186832888246E-8), 6.283185307179586);
      complex4.conjugate();
      complex1.cos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.ONE.sqrt1z();
      complex3.acos();
      complex0.getImaginary();
      Complex complex7 = new Complex(2734.49240445, 0.0);
      complex1.exp();
      complex6.readResolve();
      complex6.createComplex(6.283185307179586, 2.1950004176574112E-4);
      complex6.reciprocal();
      complex6.equals(complex2);
      Complex complex8 = Complex.NaN;
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(1039.148651);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.divide((-8.10254145615142E-8));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.reciprocal();
      complex4.NaN.add(7.568772963781632E-10);
      complex0.getField();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex2.divide(complex0);
      complex5.ZERO.sin();
      Complex complex7 = complex6.NaN.multiply(1039.148651);
      complex0.sinh();
      Complex complex8 = complex2.sinh();
      complex8.cosh();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex1.cosh();
      complex10.ONE.cosh();
      complex8.sin();
      complex8.subtract((-1.0));
      complex7.readResolve();
      complex1.hashCode();
      complex6.isInfinite();
      complex6.cosh();
      complex3.isNaN();
      complex8.multiply(0);
      complex1.asin();
      complex5.multiply(0);
      complex10.cos();
      Complex complex11 = Complex.ONE;
      complex9.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(707);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.exp();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = complex2.tan();
      complex1.nthRoot(7);
      complex4.readResolve();
      Complex.valueOf(2.72972449891179E-45, 0.02276253956748775);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2734.49240445, 2734.49240445);
      complex0.getField();
      Complex complex1 = new Complex(2734.49240445, 6.283185307179586);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.ONE.sinh();
      complex2.hashCode();
      complex2.hashCode();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf(20.0, 6.283185307179586);
      complex1.divide(complex4);
      complex1.nthRoot(707);
      Complex complex6 = Complex.INF;
      complex6.isInfinite();
      complex2.asin();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.INF;
      complex8.cos();
      Complex complex9 = complex0.sinh();
      complex7.sinh();
      complex8.createComplex(2984.903362, 6.283185307179586);
      complex1.pow(complex9);
      complex6.tanh();
      complex5.asin();
      Complex complex10 = Complex.INF;
      complex10.cos();
      complex3.cos();
      Complex complex11 = new Complex(20.0);
      complex11.sqrt();
      complex10.sqrt1z();
      complex6.multiply((-123.15));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2734.49240445, 2734.49240445);
      complex0.getField();
      Complex complex1 = new Complex(2734.49240445, 6.283185307179586);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.ONE.sinh();
      Complex.valueOf(6.283185307179586, (-1820.1882740972512));
      complex1.ONE.hashCode();
      complex0.pow(complex1);
      Complex complex4 = Complex.valueOf((-2.399186832888246E-8), 6.283185307179586);
      complex4.conjugate();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex3.log();
      complex4.exp();
      complex6.isNaN();
      complex5.acos();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      complex0.isNaN();
      complex0.equals(complexField0);
      complex0.sin();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cos();
      complex2.createComplex(2.613626422028823E-195, 0.0);
      Complex complex3 = complex0.sqrt1z();
      complex0.acos();
      complex3.getImaginary();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.multiply(1);
      Complex complex5 = Complex.ZERO;
      complex5.asin();
      complex3.multiply(1);
      Complex complex6 = Complex.NaN;
      complex6.cos();
      Complex complex7 = new Complex((-164.67));
      complex5.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(1039.148651);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.divide((-8.10254145615142E-8));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.NaN.add(7.568772963781632E-10);
      complex0.getField();
      complex0.pow(complex1);
      complex5.hashCode();
      complex3.hashCode();
      complex4.reciprocal();
      Complex.valueOf(2630.762958868923, (-1341.3786659));
      complex0.divide(complex2);
      // Undeclared exception!
      complex2.nthRoot(934719338);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(1493.1907588449017);
      complex0.I.toString();
      Complex complex3 = complex1.NaN.divide(3651.07030201351);
      complex0.INF.createComplex(1493.1907588449017, 1493.1907588449017);
      Complex complex4 = Complex.valueOf(3651.07030201351);
      complex4.INF.divide(complex2);
      Complex complex5 = complex4.NaN.atan();
      complex1.NaN.sqrt();
      Complex complex6 = complex1.NaN.sqrt();
      Complex complex7 = complex0.pow(complex1);
      complex7.toString();
      complex3.asin();
      complex3.readResolve();
      complex6.tanh();
      complex7.toString();
      Complex complex8 = complex3.createComplex(5.1453167686439515E140, 3651.07030201351);
      complex5.reciprocal();
      Object object0 = complex7.readResolve();
      complex8.equals(object0);
      Complex complex9 = Complex.ZERO;
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.add(347844.0);
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex3.subtract((-282.8969614793223));
      Complex complex7 = complex3.sin();
      complex7.cos();
      complex6.asin();
      complex5.sinh();
      complex4.multiply((-2925));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.conjugate();
      complex1.ONE.tan();
      Complex complex2 = complex1.pow(0.0);
      complex0.I.abs();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(1.0, 0.0);
      complex3.INF.hashCode();
      complex0.I.hashCode();
      complex2.reciprocal();
      Complex complex5 = Complex.valueOf(1.5707963267948966, 2.3415308633480767);
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.divide(complex6);
      complex4.nthRoot(1340);
      complex3.isInfinite();
      complex4.asin();
      complex7.sqrt();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex4.sinh();
      complex2.createComplex(1340, (-355.78412205198));
      Complex complex11 = complex9.pow(complex2);
      Complex complex12 = complex5.tanh();
      complex10.asin();
      Complex complex13 = complex11.cos();
      complex12.cos();
      complex5.sqrt();
      complex8.sqrt1z();
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 137.2944);
      Complex complex2 = complex0.I.add(complex1);
      complex2.multiply((-401));
      complex0.ONE.atan();
      Complex complex3 = complex0.NaN.exp();
      complex0.ZERO.pow(0.0);
      complex3.getArgument();
      Complex complex4 = complex0.add(1190.0);
      complex4.NaN.toString();
      Complex complex5 = complex4.I.multiply(0.0);
      complex4.INF.abs();
      Complex complex6 = complex5.ONE.pow(complex0);
      complex6.ZERO.cos();
      complex0.toString();
      complex0.multiply(2.0);
      complex0.abs();
      Complex.valueOf(113.532861, 0.0);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1.384300947189331);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.ONE.toString();
      complex2.NaN.exp();
      Complex complex3 = complex0.INF.subtract(1.384300947189331);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.NaN.multiply(1278);
      Complex complex6 = complex4.NaN.cosh();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex3.createComplex(1.384300947189331, 0.0);
      Complex complex9 = complex8.divide(complex6);
      complex6.atan();
      complex9.ZERO.acos();
      Complex complex10 = complex3.cosh();
      complex10.INF.exp();
      complex2.isInfinite();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex11.conjugate();
      complex9.sqrt1z();
      Complex complex13 = complex7.asin();
      complex13.cos();
      complex2.sqrt1z();
      complex7.getArgument();
      complex4.log();
      complex5.hashCode();
      Complex complex14 = complex12.sinh();
      complex14.I.sin();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-169.9138114096));
      Complex complex1 = complex0.atan();
      Complex.valueOf(0.0, 0.6543170213699341);
      complex1.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.cos();
      complex0.tanh();
      Complex complex3 = complex1.ZERO.sinh();
      complex3.subtract(0.0);
      complex0.isNaN();
      complex1.sin();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.log();
      complex5.INF.sinh();
      Complex complex6 = complex5.I.tanh();
      complex6.asin();
      complex2.sinh();
      complex4.multiply(679);
      Complex complex7 = complex1.sinh();
      complex7.ONE.getArgument();
      complex7.ZERO.sqrt1z();
      Complex complex8 = complex3.divide(2.0);
      Complex complex9 = complex2.exp();
      complex8.toString();
      complex2.sin();
      Complex complex10 = complex9.divide((-1154.3040612012812));
      complex8.getField();
      complex10.abs();
      Complex complex11 = Complex.INF;
      complex10.pow(complex11);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = new Complex(6.283185307179586, Double.NaN);
      complex3.I.sin();
      Complex complex4 = complex3.I.divide((-3478.4948979));
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.NaN.subtract(complex4);
      complex4.I.pow(0.0);
      Complex complex7 = complex1.pow(0.0);
      complex7.ZERO.log();
      Complex complex8 = complex4.divide(complex5);
      complex8.NaN.sqrt();
      complex5.sin();
      complex0.sqrt();
      complex2.isNaN();
      Complex complex9 = complex1.conjugate();
      complex6.hashCode();
      complex2.acos();
      complex9.abs();
      Complex complex10 = complex5.reciprocal();
      complex10.INF.exp();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      complex1.ZERO.pow(complex0);
      Complex complex2 = Complex.valueOf(3582.82505602, (-957.46183988448));
      Complex complex3 = complex2.INF.multiply(3582.82505602);
      complex3.ONE.subtract((-5.18291840772));
      Complex complex4 = complex0.NaN.subtract(complex2);
      complex4.ONE.tanh();
      complex0.equals((Object) null);
      Complex complex5 = complex2.conjugate();
      complex5.I.exp();
      complex1.exp();
      complex0.getImaginary();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.ZERO.sinh();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1039.148651);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.divide((-8.10254145615142E-8));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.reciprocal();
      complex4.NaN.add(7.568772963781632E-10);
      complex0.getField();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex2.divide(complex0);
      complex5.ZERO.sin();
      Complex complex7 = complex6.NaN.multiply(1039.148651);
      complex0.sinh();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.cosh();
      complex5.asin();
      Complex complex10 = complex1.cosh();
      complex10.ONE.cosh();
      Complex complex11 = complex8.sin();
      complex8.subtract((-1.0));
      complex7.readResolve();
      complex1.hashCode();
      complex3.getReal();
      complex6.isInfinite();
      complex6.cosh();
      complex3.isNaN();
      Complex complex12 = complex2.reciprocal();
      complex1.exp();
      complex11.readResolve();
      complex8.createComplex(5.1453167686439515E140, 7.568772963781632E-10);
      complex12.reciprocal();
      complex9.equals(complex4);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      complex1.ONE.readResolve();
      complex0.ZERO.subtract(complex1);
      complex1.cosh();
      Complex complex2 = complex1.NaN.conjugate();
//      try { 
        complex2.ZERO.nthRoot((-481));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -481
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(3227.811962, 3227.811962);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex1.ONE.sin();
      complex2.ONE.tan();
      complex2.sqrt1z();
      complex0.I.abs();
      Complex complex3 = complex0.log();
      complex3.INF.reciprocal();
      complex1.getArgument();
      complex3.negate();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-1.0), 3.426282345243592E-8);
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.sin();
      complex1.INF.acos();
      complex2.abs();
      complex3.atan();
      complex2.NaN.hashCode();
      complex3.acos();
      Complex complex4 = Complex.valueOf(1370.11861587172, 1370.11861587172);
      complex4.ONE.divide(3.426282345243592E-8);
      Complex complex5 = complex2.conjugate();
      complex5.INF.atan();
      Complex complex6 = complex1.createComplex(3.426282345243592E-8, 1370.11861587172);
      complex6.I.toString();
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      complex2.ONE.pow(complex0);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex4.ZERO.sin();
      complex5.I.nthRoot(142);
      complex1.I.pow(0.0);
      complex1.ZERO.reciprocal();
      Complex complex6 = complex2.sinh();
      int int0 = 293;
      complex6.nthRoot(293);
      complex0.readResolve();
      Complex complex7 = complex1.reciprocal();
//      try { 
        complex7.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.multiply((-3008));
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.sin();
      complex1.subtract((-1239.8803617417648));
      complex0.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.cos();
      complex3.tanh();
      complex2.multiply((double) (-3008));
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(1493.1907588449017);
      complex0.I.toString();
      Complex complex3 = complex1.NaN.divide(3651.07030201351);
      complex0.INF.createComplex(1493.1907588449017, 1493.1907588449017);
      Complex complex4 = Complex.valueOf(3651.07030201351);
      complex4.INF.divide(complex2);
      complex4.NaN.atan();
      complex1.NaN.sqrt();
      Complex complex5 = complex1.NaN.sqrt();
      Complex complex6 = complex0.pow(complex1);
      complex6.toString();
      complex3.asin();
      complex3.readResolve();
      complex5.tanh();
      complex6.toString();
      complex4.getField();
      complex2.sqrt1z();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.pow(0.0);
      complex1.readResolve();
      complex1.I.multiply(1829);
      complex1.getArgument();
      complex1.equals(complex0);
      complex1.subtract((-1497.75199072));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.log();
      complex0.I.tan();
      complex0.add((-282.8969614793223));
      Complex complex3 = complex2.pow(complex0);
      complex0.subtract((-282.8969614793223));
      complex2.sin();
      Complex complex4 = complex3.cos();
      complex4.asin();
      complex0.sinh();
      complex0.multiply((-2925));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      complex0.isNaN();
      complex0.equals(complexField0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      complex2.I.tanh();
      Complex complex3 = complex1.divide(1254.4);
      complex3.ZERO.log();
      complex3.I.exp();
      complex2.isNaN();
      complex0.acos();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex1.pow((-1117.11));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-2396.743039186));
      Complex complex2 = complex0.sinh();
      complex1.NaN.readResolve();
      complex2.INF.abs();
      complex0.INF.cos();
      Complex complex3 = complex2.multiply((-3057));
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.multiply((-3057));
      Complex complex7 = complex6.pow(complex2);
      complex6.I.conjugate();
      complex6.cos();
      Complex complex8 = complex7.ONE.subtract(complex3);
      complex8.tan();
      Complex complex9 = complex5.ONE.sinh();
      complex9.I.atan();
      complex5.sqrt1z();
      complex4.getArgument();
      Complex complex10 = complex3.sqrt();
      complex1.getField();
      complex2.isInfinite();
      complex5.divide(complex7);
      complex10.isNaN();
      complex6.acos();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
      complex0.add(complex1);
      complex1.toString();
      Complex.valueOf(0.0, 902.4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1587.8849645908974));
      complex0.getReal();
      Complex complex1 = complex0.log();
      complex1.exp();
      Complex complex2 = complex0.multiply(complex1);
      int int0 = Integer.MAX_VALUE;
//      try { 
        complex2.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.854771398921902E-70);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.multiply(8.854771398921902E-70);
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.sqrt();
      complex1.I.tan();
      complex1.createComplex(8.854771398921902E-70, 0.0);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = Complex.valueOf(8.854771398921902E-70, 8.854771398921902E-70);
      complex5.I.subtract(complex6);
      Complex.valueOf(1840.8557327, 2.0);
      complex4.NaN.getField();
      complex4.isNaN();
      Complex complex7 = Complex.valueOf(8.854771398921902E-70, 8.854771398921902E-70);
      complex2.ONE.subtract(complex7);
      complex0.conjugate();
      Complex complex8 = complex1.divide(complex4);
      complex2.getReal();
      complex8.tanh();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-20.0), (-20.0));
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-464.60368));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.I.pow(563.083361);
      complex3.ZERO.sinh();
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex4.sqrt();
      complex5.NaN.reciprocal();
      Complex complex6 = complex0.createComplex(563.083361, 0.0);
      complex6.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-532.6484224));
      complex0.I.nthRoot(1875);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-1922.68128122));
      Complex complex3 = complex1.createComplex((-532.6484224), (-532.6484224));
      Complex complex4 = complex0.INF.sin();
      complex4.I.sin();
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex2.cosh();
      complex6.getArgument();
      complex6.toString();
      Complex complex7 = complex3.multiply(complex1);
      complex7.acos();
      Complex complex8 = complex0.asin();
      complex5.getField();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.negate();
      complex2.NaN.log();
      complex2.ONE.add(complex1);
      complex0.isNaN();
      int int0 = (-353);
//      try { 
        complex0.I.nthRoot((-353));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -353
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(3.911086668967361E112, 3.911086668967361E112);
      Complex complex1 = complex0.I.sinh();
      complex0.I.createComplex(3.911086668967361E112, 3.1170298734336303E-169);
      Complex complex2 = complex0.reciprocal();
      complex2.I.sqrt1z();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(3292);
      complex4.ONE.sqrt1z();
      Complex.valueOf(3.911086668967361E112, (-2022.01332));
      complex2.getImaginary();
      complex0.abs();
      complex1.multiply(3481);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(3.8656278695544835E114, 3.8656278695544835E114);
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.exp();
      Complex complex2 = complex1.I.subtract(3.8656278695544835E114);
      complex2.ZERO.add(complex1);
      complex0.nthRoot(3790);
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.ZERO.subtract(complex4);
      Complex complex6 = complex4.INF.multiply(181);
      Complex.valueOf(178.1);
      Complex complex7 = complex1.ZERO.add(complex2);
      Complex complex8 = complex7.subtract(complex2);
      complex8.INF.readResolve();
      Complex complex9 = complex3.I.tan();
      complex9.INF.atan();
      complex5.INF.nthRoot(3790);
      Complex complex10 = complex9.I.divide(complex5);
      complex10.ZERO.subtract((-3265.4313138));
      complex2.getImaginary();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.log();
      complex6.exp();
      complex8.readResolve();
      Complex.valueOf(1.0);
      complex9.subtract((-607.04005677487));
      complex9.equals(complex10);
      complex10.negate();
      complex12.nthRoot(181);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2.3114497793159813E-8), 0.0);
      Complex complex2 = complex0.I.add(complex1);
      complex1.INF.createComplex(0.0, (-1.0705722541811197E-7));
      Complex.valueOf(0.0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex1.INF.pow(complex2);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.I.cos();
      complex6.ONE.hashCode();
      complex1.INF.sinh();
      complex1.ONE.subtract(complex3);
      complex0.ZERO.readResolve();
      complex0.isInfinite();
      Complex complex7 = complex3.ZERO.pow(complex0);
      complex0.getImaginary();
      Complex complex8 = complex3.add((-2.3114497793159813E-8));
      complex8.isNaN();
      complex3.ONE.getField();
      complex0.equals(complex2);
      complex0.asin();
      Complex complex9 = complex8.createComplex((-1.0705722541811197E-7), 0.48910707235336304);
      complex1.atan();
      complex5.sqrt();
      complex7.pow(complex9);
      complex6.subtract(407.84867);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.pow(0.0);
      complex0.I.abs();
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.valueOf(1.0, 0.0);
      complex4.INF.hashCode();
      complex0.I.hashCode();
      Complex complex6 = complex0.INF.reciprocal();
      Complex complex7 = Complex.valueOf((double) 707, 1.0);
      Complex complex8 = complex6.divide(complex7);
      complex3.nthRoot(707);
      complex1.isInfinite();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.I.sqrt();
      complex10.ONE.cos();
      Complex complex11 = complex10.ZERO.sinh();
      complex11.INF.sinh();
      complex9.NaN.createComplex(0.0, 0.0);
      complex5.pow(complex0);
      Complex complex12 = complex3.tanh();
      complex12.ONE.asin();
      complex2.cos();
      complex5.cos();
      complex8.sqrt();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-1372.04193482056), 1.8446779251098633);
      complex0.ZERO.atan();
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, (-1372.04193482056));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.divide(Double.NaN);
      complex3.ZERO.multiply((-1.1508772192025259E-158));
      complex0.pow(0.0);
      complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      complex2.INF.getField();
      Complex complex3 = Complex.valueOf(59.0);
      complex3.INF.log();
      complex0.getField();
      Complex complex4 = complex0.sin();
      complex4.NaN.sqrt();
      Complex.valueOf(59.0, 0.0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2734.49240445, 2734.49240445);
      complex0.getField();
      Complex complex1 = new Complex(2734.49240445, 6.283185307179586);
      complex1.I.sinh();
      complex1.ONE.sinh();
      Complex complex2 = Complex.valueOf(6.283185307179586, (-1820.1882740972512));
      complex1.ONE.hashCode();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf((-2.399186832888246E-8), 6.283185307179586);
      Complex complex5 = complex4.conjugate();
      complex1.cos();
      Complex complex6 = complex3.createComplex(0.0, (-2.6437112632041807E-8));
      complex6.ONE.sqrt1z();
      Complex complex7 = complex2.acos();
      complex0.getImaginary();
      complex1.multiply(0);
      complex3.asin();
      complex2.multiply(0);
      complex7.cos();
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract((-2819.07458));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.asin();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex3.INF.subtract(complex6);
      Complex complex9 = complex1.sin();
      complex2.cosh();
      Complex complex10 = complex3.ONE.subtract(2514.18922070455);
      complex10.I.sin();
      complex2.cos();
      Complex complex11 = complex8.cos();
      complex11.NaN.getArgument();
      complex3.NaN.toString();
      complex6.acos();
      Complex complex12 = complex5.sinh();
      complex12.I.sqrt();
      complex9.abs();
      complex7.add(complex2);
      complex11.isInfinite();
      Complex complex13 = complex11.tan();
      complex13.sqrt1z();
      complex11.conjugate();
      Complex.valueOf(1.7329144477844238);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-588.96));
      Complex complex1 = complex0.ZERO.acos();
      complex1.ONE.getArgument();
      Complex complex2 = complex1.divide((-1.8409546441412518E-8));
      Complex complex3 = complex2.ZERO.add(complex0);
      complex3.hashCode();
      Complex.valueOf((-588.96));
      Complex complex4 = complex0.atan();
      complex4.isNaN();
      Complex.valueOf((-2831.992105526463), 1154.0);
      complex4.equals(complex1);
      complex4.ONE.cos();
      complex1.hashCode();
      Complex complex5 = complex4.asin();
      complex5.NaN.negate();
      complex4.cos();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.NaN.add(2.1714401245117188);
      Complex complex3 = complex2.INF.cosh();
      complex0.createComplex(476.0762705, Double.NaN);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.ZERO.negate();
      complex5.ONE.exp();
      complex0.readResolve();
      complex2.INF.toString();
      Complex complex6 = complex4.multiply(206);
      Complex complex7 = complex6.ONE.atan();
      complex7.I.log();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex8.sqrt1z();
      complex9.pow(complex8);
      Complex complex10 = complex1.NaN.reciprocal();
      complex10.ZERO.add((-521.5));
      complex9.NaN.tan();
      complex0.toString();
      Complex complex11 = complex0.sqrt1z();
      complex2.atan();
      complex6.sin();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.0));
      complex0.subtract(complex1);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1054.601187037212), (-113.4981));
      Complex complex1 = complex0.add((-113.4981));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.INF.pow(complex1);
      complex4.ZERO.cosh();
      Complex complex5 = complex1.NaN.add(complex0);
      complex0.subtract(2221.4309395628447);
      Complex complex6 = Complex.valueOf(0.0);
      complex2.NaN.createComplex(0.0, 0.0);
      complex6.ONE.multiply((-103));
      Complex complex7 = complex2.sqrt1z();
      complex5.multiply(1);
      complex7.abs();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.INF.sqrt();
      complex0.equals("");
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex2.reciprocal();
      Complex.valueOf(0.0);
      complex2.getArgument();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex8.ZERO.divide(complex6);
      Complex complex10 = complex9.NaN.asin();
      assertSame(complex9, complex7);
      
      Complex complex11 = complex6.add(complex2);
      complex11.ZERO.exp();
      Complex complex12 = complex1.ONE.sinh();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex12.getReal(), 0.01);
      
      Complex complex13 = complex11.ZERO.divide(19.0);
      Complex complex14 = complex8.INF.tanh();
      Complex complex15 = complex11.INF.asin();
      Complex complex16 = complex15.ONE.pow(complex11);
      Complex complex17 = complex8.tanh();
      Complex.valueOf(0.0);
      Complex complex18 = complex17.ZERO.sqrt1z();
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.9171523356672743, complex17.getReal(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex13.subtract(complex6);
      assertSame(complex19, complex14);
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex20 = complex2.add(0.0);
      assertTrue(complex20.equals((Object)complex13));
      
      Complex complex21 = Complex.valueOf(0.0, 0.0);
      complex1.subtract(complex5);
      complex21.multiply(1187);
      complex16.getField();
      assertTrue(complex16.equals((Object)complex4));
      assertSame(complex6, complex10);
      assertSame(complex16, complex15);
  }
}
