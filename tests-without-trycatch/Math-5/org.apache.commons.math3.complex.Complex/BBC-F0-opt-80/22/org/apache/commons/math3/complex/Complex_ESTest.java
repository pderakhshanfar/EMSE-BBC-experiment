/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:57:34 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      complex2.multiply(1.086550235748291);
      Complex complex3 = complex2.sqrt();
      Complex.valueOf(1.086550235748291);
      complex3.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      complex5.NaN.exp();
      Complex complex6 = Complex.ZERO;
      complex6.divide(1.086550235748291);
      Complex complex7 = Complex.valueOf(1.086550235748291, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.ZERO;
      complex7.multiply(complex8);
      complex0.multiply(4209.6);
      Complex complex9 = Complex.ONE;
      complex5.multiply(1.523329496383667);
      Complex complex10 = Complex.I;
      complex10.sqrt();
      Complex complex11 = new Complex(1.523329496383667, Double.POSITIVE_INFINITY);
      complex1.exp();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = Complex.ONE;
      complex8.acos();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex12.multiply(complex14);
      complex6.multiply(complex11);
      complex15.nthRoot(2283);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      complex2.multiply(1.086550235748291);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf(1.086550235748291);
      complex3.tanh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.acos();
      complex6.NaN.exp();
      Complex complex7 = Complex.ZERO;
      complex7.divide(1.086550235748291);
      Complex complex8 = Complex.valueOf(1.086550235748291, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.ZERO;
      complex8.multiply(complex9);
      complex0.multiply(4209.6);
      Complex complex10 = Complex.ONE;
      complex10.sqrt();
      Complex complex11 = complex0.exp();
      complex3.conjugate();
      Complex complex12 = Complex.ONE;
      complex1.acos();
      complex10.multiply(complex0);
      complex5.multiply(complex11);
      complex9.nthRoot(4178);
      complex8.cos();
      complex4.sin();
      // Undeclared exception!
      complex12.nthRoot(4178);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1506.49));
      complex0.INF.nthRoot(894);
      complex0.INF.abs();
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(135423.0, Double.POSITIVE_INFINITY);
      complex2.ZERO.multiply(135423.0);
      Complex complex3 = complex0.add(complex1);
      complex2.multiply(894);
      complex1.cosh();
      complex3.getField();
      complex3.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex4.atan();
      complex6.ZERO.multiply(0.47158926725387573);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      Complex.valueOf(2.0, 2.0);
      complex0.equals(complex1);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.asin();
      complex0.getArgument();
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex0.getArgument();
      complex1.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.subtract(20.0);
      complex3.getArgument();
      complex4.divide(complex2);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-154.5125458741));
      complex1.subtract(1.5707963267948966);
      complex4.tanh();
      Complex complex5 = complex0.multiply((-1.884351054286526E-4));
      complex5.ZERO.sin();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 2.8940849006175995E-7;
      Complex complex1 = new Complex(2.8940849006175995E-7);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex1.log();
      complex3.ONE.subtract(1710.407341673294);
      Complex complex4 = Complex.valueOf(4.8620893790030095E-4, 4.8620893790030095E-4);
      Complex complex5 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.NaN.add(complex2);
      complex7.I.readResolve();
      complex7.NaN.nthRoot(905);
      complex1.subtract(complex6);
      Complex complex8 = complex2.subtract((-1694.1104779));
      complex8.NaN.abs();
      Complex.valueOf((-1694.1104779), (-1694.1104779));
      complex1.ONE.add(1.0);
      complex3.sin();
      Complex complex9 = complex2.pow(complex4);
//      try { 
        complex9.ONE.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(858.919, 44.722);
      Complex complex1 = new Complex(1.561820405918195E-5, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.cosh();
      complex2.ZERO.multiply(7);
      int int0 = (-1);
//      try { 
        complex0.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1.3655037879943848);
      complex0.isInfinite();
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.tan();
      complex2.atan();
      Complex complex3 = Complex.INF;
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1.3655037879943848);
      Complex complex1 = complex0.negate();
      complex1.acos();
      complex0.atan();
      complex0.isInfinite();
      Complex complex2 = new Complex((-1.5707963267948966), (-20.0));
      complex2.tan();
      complex1.isInfinite();
      complex2.tan();
      Complex.valueOf(1893.6, (-20.0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      complex0.acos();
      Complex complex2 = complex1.tan();
      complex2.getArgument();
      complex2.cos();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.hashCode();
      complex2.asin();
      complex1.reciprocal();
      // Undeclared exception!
      complex0.nthRoot(1445295863);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      complex0.acos();
      Complex complex3 = new Complex(0.0, (-1.0));
      complex3.tan();
      complex3.getArgument();
      complex2.cos();
      complex0.hashCode();
      complex1.asin();
      complex3.reciprocal();
//      try { 
        complex3.nthRoot((-140));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -140
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1478.5901);
      Complex complex1 = complex0.I.multiply(494);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.add(1.0);
      Complex complex5 = complex4.NaN.cos();
      complex5.ZERO.conjugate();
      Complex complex6 = complex0.subtract(1.0);
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex6.ONE.multiply(494);
      Complex complex9 = complex6.conjugate();
      complex9.add(1.0);
      complex3.negate();
      complex2.acos();
      complex5.multiply(complex7);
      complex8.isInfinite();
      complex2.tan();
      complex6.atan();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.multiply(494);
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(6.769588126961271);
      Complex complex4 = complex3.sin();
      complex0.acos();
      Complex complex5 = complex2.add(Double.NaN);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.conjugate();
      complex7.subtract(4039.2589);
      Complex complex9 = Complex.valueOf((-8.462309712606694E-8));
      complex9.negate();
      Complex complex10 = complex8.multiply((-1116));
      complex6.conjugate();
      complex4.negate();
      complex1.acos();
      complex10.multiply(complex5);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      complex1.getArgument();
      complex0.abs();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-2428.8860682621344));
      Complex complex3 = complex2.sinh();
      complex2.sin();
      Complex complex4 = complex2.subtract(-0.0);
      complex0.getArgument();
      Complex complex5 = complex0.divide(complex4);
      complex2.multiply((-1073741824));
      Complex.valueOf(160.204348169, 0.7853981633974483);
      Complex.valueOf((-2887.653758018), (-4820.219319912105));
      Complex complex6 = complex3.subtract(-0.0);
      Complex.valueOf(80.00656, (-342.1679561));
      Complex complex7 = complex6.tanh();
      complex7.acos();
      complex0.divide((double) (-1704));
      complex5.getArgument();
      complex4.subtract(80.00656);
      Complex complex8 = new Complex(785.72179458008);
      complex7.reciprocal();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1478.5901);
      complex0.I.multiply(494);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.acos();
      complex1.add(1.0);
      Complex complex3 = new Complex(1.0, 494);
      complex3.ZERO.conjugate();
      Complex complex4 = complex0.subtract(1.0);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.ONE.multiply(494);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex2.negate();
      Complex complex9 = Complex.valueOf((double) 494);
      complex9.ONE.atan();
      complex3.multiply(complex5);
      complex6.isInfinite();
      complex8.tan();
      complex3.atan();
      complex3.reciprocal();
      Complex complex10 = complex7.cos();
      complex10.conjugate();
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.ONE;
      complex2.getArgument();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = new Complex((-556.0), 2.0);
      complex3.tanh();
      complex3.acos();
      Object object0 = new Object();
      complex5.equals(complex3);
      Complex complex7 = new Complex(20.0);
      Complex complex8 = complex2.reciprocal();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = Complex.ONE;
      complex4.getArgument();
      complex0.INF.sin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.subtract(0.0);
      Complex.valueOf(0.0, 1.0287251472473145);
      Complex complex7 = new Complex(20.0, (-47.347));
      Complex complex8 = complex7.tanh();
      complex8.acos();
      complex3.multiply(1.086550235748291);
      complex4.sinh();
      Complex complex9 = new Complex((-1618.7460617541665), Double.NaN);
      complex6.createComplex(Double.NaN, (-3235.56949916));
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(20.0, 4.958369974640573E193);
      complex2.tanh();
      complex2.acos();
      Complex complex3 = complex2.multiply(1118.4);
      complex3.sinh();
      Complex complex4 = new Complex(Double.NaN, 1118.4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow(0.6598852872848511);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.INF;
      complex1.tanh();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.multiply(0.6598852872848511);
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(0.6598852872848511, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.NaN.cos();
      complex1.NaN.getArgument();
      complex0.abs();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      complex6.ZERO.getArgument();
      Complex complex7 = complex5.ZERO.divide(complex0);
      complex0.multiply(37);
      complex1.multiply((-1704));
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex9 = complex4.subtract(Double.NaN);
      complex3.multiply((-6.995964550587914E136));
      complex7.divide((-1307493.4447024898));
      Complex complex10 = complex5.exp();
      Object object0 = new Object();
      complex4.equals(complex10);
      complex8.subtract(0.0);
      Complex complex11 = new Complex((-1704));
      Complex complex12 = Complex.valueOf((-1785.3737622566387), (-6.995964550587914E136));
      Complex complex13 = complex12.reciprocal();
      complex13.sqrt();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.add(complex0);
      Complex complex2 = complex1.subtract(1478.5901);
      complex0.getArgument();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.multiply(423);
      complex3.multiply(0);
      Complex complex5 = Complex.valueOf(1478.5901, 1478.5901);
      complex3.subtract((double) 423);
      Complex complex6 = Complex.valueOf((double) 0, (double) 0);
      Complex complex7 = new Complex(0, 1478.5901);
      Complex complex8 = Complex.valueOf(1478.5901, (-841.72278011607));
      complex8.tanh();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.multiply(20.0);
      complex6.divide(5019.429802778369);
      complex8.exp();
      Object object0 = new Object();
      Complex complex11 = Complex.valueOf(1.0287251472473145, (-47.347));
      complex2.equals(complex11);
      complex5.subtract((-3095.1574495531922));
      Complex complex12 = new Complex((-20.0));
      complex4.reciprocal();
      complex11.sqrt();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.ZERO.negate();
      Complex complex4 = complex2.sqrt();
      complex4.NaN.asin();
      complex4.ZERO.tan();
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex0.sin();
      complex6.INF.abs();
      complex6.INF.log();
      complex5.I.hashCode();
      complex0.I.multiply((-231.1236));
      Complex complex7 = complex6.multiply(2235.4);
      complex3.sqrt1z();
      complex7.negate();
      Complex complex8 = complex5.conjugate();
      complex8.ONE.sqrt();
//      try { 
        complex1.ONE.nthRoot((-1301));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,301
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.NaN.cos();
      complex0.NaN.getArgument();
      complex0.abs();
      complex0.I.sinh();
      complex1.ZERO.sin();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex3.ZERO.getArgument();
      complex2.ZERO.divide(complex0);
      Complex complex4 = Complex.ZERO;
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = Complex.valueOf((-3.8037189710848907E-4), (-806.7379077));
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(769);
      Complex.valueOf((-1785.3737622566387), (-1785.3737622566387));
      complex0.subtract((-3.8037189710848907E-4));
      Complex complex7 = Complex.valueOf((-3.8037189710848907E-4), (-1651.2932));
      complex4.tanh();
      complex6.acos();
      Complex complex8 = complex7.multiply((-1785.3737622566387));
      complex3.divide(Double.NaN);
      complex8.getArgument();
      Complex complex9 = Complex.NaN;
      complex9.log();
      Complex complex10 = Complex.valueOf(1855.091209);
      complex10.pow(complex8);
      Complex complex11 = Complex.ONE;
      complex11.equals(complex10);
      complex2.subtract((-1617.3));
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.subtract(0.0);
      complex4.getArgument();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex3.multiply(423);
      Complex complex7 = complex5.multiply(423);
      Complex.valueOf(0.0, (double) 423);
      complex2.subtract(0.0);
      Complex.valueOf(0.0, 1.0287251472473145);
      Complex complex8 = new Complex(20.0, (-47.347));
      Complex complex9 = complex8.tanh();
      complex9.acos();
      complex6.multiply(1.086550235748291);
      complex7.divide((-1727917.636520176));
      complex1.ZERO.exp();
      Object object0 = new Object();
      complex3.equals(object0);
      complex1.subtract(809.1201183);
      Complex complex10 = new Complex(252.19);
      complex3.reciprocal();
      complex2.sqrt();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1478.5901);
      Complex complex1 = complex0.I.multiply(494);
      complex0.acos();
      complex0.readResolve();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sinh();
      complex3.nthRoot(7);
      complex0.divide(complex3);
      Complex.valueOf(1353.7938482736);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.NaN.cos();
      complex1.NaN.getArgument();
      complex0.abs();
      complex1.I.sinh();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      complex5.ZERO.getArgument();
      complex4.ZERO.divide(complex0);
      Complex complex6 = complex0.multiply(37);
      Complex complex7 = Complex.valueOf(Double.NaN, (double) (-1704));
      complex1.multiply((-1704));
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.subtract((-1785.3737622566387));
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 1855.091209);
      complex5.tanh();
      Complex complex10 = complex6.acos();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex9.divide((double) 37);
      complex9.getArgument();
      complex8.log();
      Complex complex11 = complex8.pow(complex7);
      complex10.isNaN();
      complex11.subtract(1855.091209);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1314.50319), (-1314.50319));
      Complex complex1 = Complex.valueOf((-1314.50319));
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.ONE.hashCode();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.add(2309.8510339);
      complex3.cos();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex4.subtract(63.032117544500565);
      Complex complex8 = complex6.negate();
      complex1.multiply((-3657));
      complex7.conjugate();
      complex5.negate();
      complex8.acos();
      complex3.multiply(complex1);
      complex1.isInfinite();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(494);
      Complex complex2 = complex1.acos();
      complex1.sin();
      complex2.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add((-20.0));
      Complex complex5 = complex2.cos();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = Complex.valueOf((-510.752388));
      complex7.negate();
      complex5.conjugate();
      complex0.negate();
      complex4.acos();
      Complex complex8 = complex5.multiply(complex1);
      complex2.isInfinite();
      complex8.tan();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1314.50319), (-1314.50319));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ZERO.add(0.0);
      Complex complex3 = complex0.I.divide(complex0);
      complex1.ONE.asin();
      Complex complex4 = complex2.ONE.sqrt();
      complex0.NaN.reciprocal();
      Complex complex5 = complex3.ZERO.conjugate();
      complex5.cosh();
      Complex complex6 = complex3.ZERO.exp();
      complex6.I.subtract(complex4);
      complex6.ZERO.hashCode();
      complex3.ZERO.exp();
      complex0.ONE.log();
      Complex complex7 = (Complex)complex0.readResolve();
      complex2.readResolve();
      complex2.I.tanh();
      Complex complex8 = new Complex(Double.NaN, Double.NaN);
      complex8.nthRoot(438);
      Complex complex9 = Complex.NaN;
      complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1478.5901);
      Complex complex1 = complex0.I.multiply(494);
      Complex complex2 = complex1.INF.sin();
      complex0.acos();
      Complex complex3 = complex1.add(1.0);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex2.subtract(1.0);
      Complex complex7 = complex3.exp();
      complex3.log();
      complex1.ZERO.add(complex6);
      complex5.readResolve();
      complex7.equals(complex5);
      double double0 = (-946.1);
      complex5.readResolve();
      complex3.tanh();
//      try { 
        complex5.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(468.56578809109);
      Complex complex1 = complex0.ONE.log();
      Complex.valueOf((-2385.68722858));
      complex1.I.abs();
      complex0.NaN.abs();
      complex0.INF.asin();
      Complex complex2 = complex0.sqrt1z();
      complex2.ONE.tanh();
      complex2.ZERO.getArgument();
      Complex complex3 = Complex.valueOf(2252.989539701684, (-20.0));
      Complex complex4 = complex0.add(complex2);
      complex4.createComplex(1.0, (-20.0));
      Complex complex5 = complex3.asin();
      Complex complex6 = complex3.multiply(2052339302);
      Complex complex7 = complex5.subtract(0.39696556329727173);
      complex7.ONE.divide(2.414213562373095);
      complex6.sin();
      complex0.multiply(2052339302);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.I.tan();
      complex2.INF.getArgument();
      Complex complex4 = complex0.cos();
      complex0.conjugate();
      complex3.subtract(0.7853981633974483);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.multiply((-2104));
      complex5.conjugate();
      complex5.negate();
      Complex complex7 = complex3.acos();
      Complex complex8 = new Complex(0.7853981633974483, 2957.1805381597874);
      complex7.pow(complex8);
      complex8.getArgument();
      complex3.sqrt();
      complex3.equals(":b i7*K+$t\"S8pve+\f");
      complex6.subtract((-1140.04398));
      complex7.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1314.50319), (-1314.50319));
      Complex complex1 = Complex.valueOf((-1314.50319));
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.ONE.hashCode();
      Complex complex3 = complex2.tan();
      complex1.getArgument();
      Complex complex4 = complex0.cos();
      complex3.hashCode();
      Complex complex5 = complex4.asin();
      complex4.reciprocal();
      complex4.nthRoot(1201);
      complex0.add(complex5);
      complex1.asin();
      complex0.sinh();
      complex0.exp();
      complex0.nthRoot(1201);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(0.6598852872848511);
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.ZERO.multiply(860.0);
      complex4.I.add((-1.0));
      complex3.acos();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = new Complex((-668.4085384672), (-20.0));
      complex6.getArgument();
      Complex complex7 = complex0.sqrt();
      complex7.equals(complex5);
      complex6.subtract(0.6598852872848511);
      complex5.reciprocal();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.4035923083915864E217, 1.4035923083915864E217);
      complex0.ONE.subtract(complex1);
      complex1.I.sinh();
      complex1.reciprocal();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.divide(complex7);
      complex7.nthRoot(2333);
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow(0.6598852872848511);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.ZERO.multiply(860.0);
      Complex complex4 = Complex.INF;
      complex2.subtract(5.280062387569078E130);
      Complex complex5 = Complex.valueOf(632.9800895348, Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex0.multiply(1176.1261095127);
      complex5.divide(1855.091209);
      complex7.getArgument();
      complex6.log();
      Complex complex8 = Complex.valueOf(860.0);
      Complex complex9 = complex3.pow(complex8);
      Complex complex10 = new Complex(0.11256109178066254);
      complex4.equals(complex10);
      complex9.subtract(1.5707963267948966);
      Complex complex11 = Complex.INF;
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.add(Double.POSITIVE_INFINITY);
      complex2.INF.tanh();
      complex2.I.abs();
      complex1.conjugate();
      complex0.negate();
      Complex complex3 = complex1.acos();
      Complex complex4 = new Complex(1.0, 1.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = Complex.valueOf(1957.6456, (double) 0);
      complex8.equals(complex0);
      Complex complex9 = complex7.subtract(1.0);
      complex9.reciprocal();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.4035923083915864E217, 1.4035923083915864E217);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex1.I.sinh();
      complex1.reciprocal();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.cosh();
      complex2.divide(complex0);
      complex5.cos();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1478.5901);
      complex0.I.multiply(494);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(1.0, (double) 494);
      complex4.ONE.add(complex0);
      Complex complex5 = complex4.NaN.cos();
      complex5.ZERO.conjugate();
      Complex complex6 = complex2.subtract(1.0);
      complex6.INF.negate();
      Complex complex7 = Complex.valueOf((double) 494, (double) 494);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.ZERO.pow(complex0);
      complex8.getArgument();
      complex9.INF.sqrt();
      complex2.isNaN();
      complex8.subtract(0.0);
      complex10.reciprocal();
      complex7.sqrt();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.I.tan();
      complex2.INF.getArgument();
      complex1.getArgument();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex3.multiply((-884));
      Complex.valueOf(0.7853981633974483, Double.NaN);
      complex5.multiply((-884));
      Complex complex6 = Complex.valueOf((double) (-884), 1.6419797090870802E-8);
      complex6.subtract(37.0);
      Complex complex7 = Complex.valueOf((-1785.3737622566387), (double) (-884));
      complex7.tanh();
      Complex complex8 = complex2.acos();
      complex3.multiply(3.6900369003690036E-4);
      complex6.divide((-2320.474));
      complex1.getArgument();
      Complex complex9 = complex8.log();
      complex7.pow(complex9);
      complex4.equals("");
      complex6.subtract((-1146.9619));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.NaN.cos();
      complex1.NaN.getArgument();
      complex0.abs();
      complex1.I.sinh();
      complex2.ZERO.sin();
      Complex complex3 = complex0.add(complex1);
      complex1.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(824.95);
      Complex complex5 = complex4.cos();
      Complex complex6 = Complex.valueOf(457.736852672593);
      complex6.hashCode();
      complex4.asin();
      complex4.reciprocal();
      complex6.nthRoot(1201);
      Complex complex7 = complex6.add(complex5);
      complex7.cosh();
      complex3.asin();
      Complex complex8 = complex1.sinh();
      complex8.exp();
      complex4.nthRoot(1201);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.NaN.cos();
      complex0.getArgument();
      complex0.abs();
      complex1.I.sinh();
      complex2.ZERO.sin();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      complex4.ZERO.getArgument();
      Complex complex5 = complex3.ZERO.divide(complex0);
      Complex complex6 = complex0.multiply(37);
      Complex.valueOf(Double.NaN, (-2320.474));
      Complex complex7 = Complex.valueOf((-2320.474), (-1785.3737622566387));
      Complex complex8 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex.valueOf((double) 37, 0.0);
      complex8.tanh();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.divide(0.7853981633974483);
      complex11.I.multiply(508);
      complex11.getArgument();
      complex10.ZERO.createComplex((-1704), 1300.782291);
      complex6.log();
      complex0.I.pow(complex10);
      complex10.equals(complex0);
      complex2.subtract(0.0);
      complex8.log();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.add(complex2);
      complex4.INF.abs();
      complex3.hashCode();
      complex2.readResolve();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.divide((-6.017681359527226E272));
      complex4.sinh();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.pow(complex3);
      Complex complex8 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = new Complex((-2704.0));
      complex9.cosh();
      complex8.divide(complex3);
      complex6.cos();
      Complex complex10 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.NaN.cos();
      complex1.NaN.getArgument();
      complex0.abs();
      complex1.I.sinh();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      complex5.ZERO.getArgument();
      complex4.ZERO.divide(complex0);
      Complex complex6 = complex0.multiply(37);
      Complex complex7 = Complex.valueOf(Double.NaN, (double) (-1704));
      complex1.multiply((-1704));
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.subtract((-1785.3737622566387));
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 1855.091209);
      complex5.tanh();
      complex6.acos();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex9.divide((double) 37);
      complex9.getArgument();
      complex8.log();
      Complex complex10 = complex8.pow(complex7);
      complex9.equals(complex6);
      complex10.subtract(1855.091209);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1314.50319), (-1314.50319));
      Complex complex1 = Complex.valueOf((-1314.50319));
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.ONE.hashCode();
      Complex complex3 = complex0.ZERO.add(0.0);
      Complex complex4 = complex0.I.divide(complex1);
      complex2.ONE.asin();
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex1.NaN.reciprocal();
      Complex complex7 = complex4.ZERO.conjugate();
      complex7.cosh();
      Complex complex8 = complex4.ZERO.exp();
      complex8.I.subtract(complex5);
      complex8.ZERO.hashCode();
      complex4.ZERO.exp();
      complex0.ONE.log();
      Complex complex9 = (Complex)complex0.readResolve();
      complex0.equals(complex9);
      complex3.readResolve();
      complex3.I.tanh();
      complex8.divide(complex5);
      complex0.subtract(6.283185307179586);
      complex6.pow((-946.1));
      complex2.add(complex9);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.4035923083915864E217, 1.4035923083915864E217);
      complex0.ONE.subtract(complex1);
      complex1.I.sinh();
      complex1.reciprocal();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.divide(complex7);
      complex6.cos();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tan();
      complex1.getReal();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.asin();
      complex3.isInfinite();
      Complex complex5 = complex2.cos();
      complex0.isInfinite();
      complex3.sqrt1z();
      complex4.hashCode();
      complex2.acos();
      Complex complex6 = Complex.ONE;
      complex5.add(complex6);
      complex4.pow(2291.2951733);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(4400);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex2.sqrt();
      Complex complex3 = new Complex((-797.596997));
      Complex complex4 = Complex.valueOf((-797.596997));
      Complex complex5 = complex4.negate();
      complex0.hashCode();
      complex5.readResolve();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex6.divide(6.283185307179586);
      complex1.pow(complex0);
      complex0.divide(6.283185307179586);
      Complex complex9 = Complex.valueOf((-4296.0), (-1266.443));
      complex9.cosh();
      complex4.divide(complex7);
      complex8.cos();
      Complex complex10 = new Complex((-4.736121492758925), (-4296.0));
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-896.471233861));
      Complex complex1 = complex0.pow((-3028.882));
      complex0.subtract(complex1);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex2.NaN.divide(complex1);
      Complex complex8 = complex6.add(complex0);
      complex1.readResolve();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.I.tan();
      complex10.ZERO.subtract(complex4);
      Complex complex11 = Complex.NaN;
      complex8.NaN.add(complex11);
      Complex complex12 = complex2.negate();
      complex12.I.toString();
      complex0.getImaginary();
      complex2.hashCode();
      complex12.sqrt1z();
      Complex complex13 = complex8.subtract(complex0);
      complex7.abs();
      complex1.hashCode();
      complex8.exp();
//      try { 
        complex13.nthRoot((-2138));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,138
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.createComplex((-3690.262909016), (-3690.262909016));
      Complex complex3 = complex2.NaN.multiply(1572.1536865);
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex2.ONE.divide((-1146.9619));
      Complex complex6 = complex0.reciprocal();
      complex1.NaN.hashCode();
      Complex complex7 = complex6.pow(complex4);
      Complex complex8 = new Complex(704.6626977, (-3690.262909016));
      complex0.equals(complex8);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.pow(complex3);
      Complex complex12 = complex9.multiply(complex10);
      complex12.ONE.readResolve();
      complex11.add(complex7);
      complex2.abs();
      complex11.isInfinite();
      complex1.NaN.negate();
      complex0.tan();
      complex0.sinh();
      Complex complex13 = complex2.INF.pow(5218.819854652818);
      complex13.INF.multiply(5218.819854652818);
      Object object0 = complex1.readResolve();
      complex2.ZERO.multiply(1);
      complex7.equals(object0);
      complex6.INF.negate();
      Complex complex14 = complex5.add(3630.09955987171);
      complex14.I.nthRoot(1);
      complex6.subtract(complex1);
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(57.0);
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      Complex complex2 = complex1.divide(450.790152414);
      Complex complex3 = complex0.asin();
      complex3.abs();
      Complex complex4 = Complex.valueOf(968.0);
      Complex complex5 = complex4.negate();
      complex0.equals("CANNOT_COMPUTE_0TH_ROOT_OF_UNITY");
      Complex complex6 = complex2.sinh();
      complex6.INF.sinh();
      Complex complex7 = complex5.exp();
      complex2.multiply((-3834));
      complex4.toString();
      Complex complex8 = complex2.sqrt1z();
      complex8.INF.multiply(complex5);
      Complex complex9 = complex0.sqrt1z();
      complex9.ONE.sin();
      Complex.valueOf(968.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.multiply(1384);
      complex1.pow((double) 1384);
      Complex.valueOf((double) 1384, (double) (-3834));
      complex10.subtract(complex4);
      complex5.sqrt1z();
      complex9.log();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.5306502960727705E247);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.createComplex(3.5306502960727705E247, 3.5306502960727705E247);
      Complex complex2 = complex0.asin();
      complex2.INF.getArgument();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.subtract(complex1);
      complex4.add(complex0);
      complex2.sinh();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      complex0.toString();
      Complex complex2 = complex1.ZERO.multiply((-1012));
      complex1.ZERO.getArgument();
      Complex complex3 = complex2.ONE.pow(6.283185307179586);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = Complex.NaN;
      complex4.NaN.add(complex5);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.subtract(1.0);
      Complex.valueOf(1576.8923794039, 2098.2587422);
      Complex complex8 = complex7.createComplex(1.0, 1576.8923794039);
      complex7.NaN.readResolve();
      complex0.INF.readResolve();
      Complex complex9 = complex0.negate();
      complex9.I.abs();
      complex8.toString();
      Complex complex10 = complex7.reciprocal();
      complex10.I.cosh();
      complex8.INF.hashCode();
      complex8.hashCode();
      Complex complex11 = complex2.tan();
      complex8.atan();
      complex6.NaN.getArgument();
      complex2.tan();
      complex7.tan();
      complex3.createComplex((-1012), (-2147.665849));
      Complex complex12 = Complex.I;
      complex7.equals(complex12);
      complex8.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex1.ONE.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf((-20.0), (-20.0));
      Complex complex4 = complex2.I.multiply(complex3);
      complex4.I.toString();
      Complex complex5 = complex2.pow(3139.060273293);
      complex3.getArgument();
      complex4.getReal();
      complex5.atan();
      complex3.createComplex(1.7516300678253174, 3139.060273293);
      Complex complex6 = complex2.pow(0.0);
      complex6.isInfinite();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex.valueOf((-2.356194490192345));
      complex5.sinh();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow(0.6598852872848511);
      Complex complex1 = complex0.NaN.atan();
      complex1.ONE.tanh();
      Complex complex2 = complex1.ZERO.multiply(860.0);
      complex2.I.add((-1.0));
      Complex complex3 = complex0.add(0.0);
      complex3.I.log();
      complex3.readResolve();
      complex1.asin();
//      try { 
        complex1.nthRoot((-111));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -111
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.asin();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.tan();
      complex2.divide(complex3);
      complex1.readResolve();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = 1936.3707098;
      Complex complex0 = new Complex((-250.946748935277), 1936.3707098);
//      try { 
        complex0.ZERO.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ZERO.atan();
      complex2.I.log();
      Complex complex3 = complex0.atan();
      complex3.ONE.getArgument();
      complex3.multiply(0.0);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex4.sinh();
      complex0.reciprocal();
      complex5.getField();
      complex1.createComplex(0.0, (-467.46538979542));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.INF.cos();
      complex1.ONE.pow(2840.5767887);
      complex2.createComplex(0.0, 0.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.multiply(652);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex4.log();
      complex5.INF.divide(complex3);
      Complex complex7 = Complex.valueOf(2.3414841777613345E-218, (double) 652);
      Complex.valueOf(0.0);
      Complex.valueOf((double) 652);
      complex6.INF.multiply(complex7);
      complex0.getField();
      complex3.subtract(0.0);
      Complex complex8 = complex5.reciprocal();
      complex8.ZERO.hashCode();
      Complex complex9 = complex6.reciprocal();
      complex9.pow(complex6);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(2.0);
      Complex complex2 = complex1.I.multiply(complex0);
      complex1.NaN.readResolve();
      complex1.getImaginary();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.I.divide(complex2);
      complex4.INF.divide(160.8308461);
      complex4.ONE.tan();
      Complex complex5 = new Complex(160.8308461, 0.0);
      Complex complex6 = complex1.multiply(complex5);
      complex6.ZERO.nthRoot(37);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex3.add(complex5);
      complex1.sqrt1z();
      complex7.sin();
      Complex complex9 = complex3.sinh();
      complex9.ZERO.sqrt1z();
      Complex complex10 = complex9.sqrt();
      complex3.getReal();
      Complex complex11 = complex10.add(complex0);
      complex11.INF.acos();
      Complex complex12 = complex2.multiply(complex8);
      complex12.I.asin();
      complex3.negate();
      complex5.acos();
      complex1.add(1327.013773467413);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
      complex1.INF.asin();
      double double0 = (-2.437796532151255E213);
      complex0.I.nthRoot(2004);
      Complex complex2 = Complex.I;
      complex2.INF.sinh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.pow(complex2);
      complex4.NaN.reciprocal();
      complex1.ZERO.sin();
      Complex complex5 = Complex.valueOf((-2.437796532151255E213));
      complex0.hashCode();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex6.INF.asin();
      complex7.INF.createComplex((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex8 = complex6.I.multiply(2004);
      complex8.NaN.sqrt();
      int int0 = (-2147);
//      try { 
        complex5.nthRoot((-2147));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,147
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1478.5901);
      complex0.I.multiply(494);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.add(1.0);
      Complex complex5 = complex4.NaN.cos();
      complex5.ZERO.conjugate();
      Complex complex6 = complex2.subtract(1.0);
      complex6.INF.negate();
      Complex complex7 = complex6.ONE.multiply(0);
      complex6.conjugate();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.ZERO.pow(complex0);
      complex8.getArgument();
      complex9.INF.sqrt();
      complex1.equals("");
      complex8.subtract(0.0);
      complex10.reciprocal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(385.0, 385.0);
      complex0.hashCode();
      complex0.readResolve();
      complex0.INF.toString();
      Complex complex1 = complex0.createComplex(385.0, 385.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.subtract(complex0);
      complex0.ONE.abs();
      Complex complex4 = complex3.I.log();
      complex2.I.tanh();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex5.INF.conjugate();
      complex6.INF.readResolve();
      complex6.NaN.toString();
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = complex1.pow(complex5);
      complex7.NaN.pow(3013.614349);
      Complex.valueOf(0.0, (-20.0));
      complex0.sin();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex7.add(complex0);
      complex10.NaN.subtract(0.0);
      complex2.I.getArgument();
      complex5.tanh();
      Complex complex11 = complex7.pow(complex8);
      complex9.log();
      complex1.atan();
      complex4.multiply(2611);
      complex4.divide(complex11);
      Complex.valueOf(1.0);
      complex4.divide(385.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.NaN.cos();
      complex1.NaN.getArgument();
      complex0.abs();
      complex1.I.sinh();
      complex2.ZERO.sin();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      complex4.ZERO.getArgument();
      Complex complex5 = complex3.ZERO.divide(complex0);
      Complex complex6 = complex0.multiply(37);
      Complex.valueOf(Double.NaN, (-2320.474));
      complex3.multiply((-1704));
      Complex.valueOf((-2320.474), (-1785.3737622566387));
      Complex complex7 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex.valueOf((double) 37, 0.0);
      complex7.tanh();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.divide(Double.NaN);
      complex10.getArgument();
      complex6.log();
      complex0.I.pow(complex9);
      complex9.equals(complex0);
      complex2.subtract(0.0);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex2.sqrt();
      Complex complex3 = complex0.add(complex2);
      complex3.INF.abs();
      Complex complex4 = complex0.multiply(17);
      complex4.I.multiply(complex1);
      complex1.readResolve();
      Complex complex5 = complex0.createComplex(17, 17);
      complex5.INF.getArgument();
      complex5.abs();
      Complex complex6 = complex5.INF.divide(complex4);
      Complex complex7 = complex5.subtract(24.041630560342618);
      complex1.pow(24.041630560342618);
      complex6.add(complex7);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(0.0);
      Complex complex1 = new Complex((-2366.3));
      Complex complex2 = complex1.ONE.negate();
      complex2.hashCode();
      complex2.readResolve();
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex1.I.divide((-2366.3));
      Complex complex5 = complex1.ONE.sinh();
      Complex complex6 = complex0.pow(complex1);
      complex4.divide((-2366.3));
      complex6.cosh();
      complex3.divide(complex0);
      complex0.cos();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-7.327771300038971E-8));
      Complex complex1 = complex0.ONE.pow((-7.327771300038971E-8));
      complex0.getReal();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.I.cos();
      complex4.NaN.multiply(complex1);
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex7.reciprocal();
      complex8.INF.getArgument();
      complex5.readResolve();
      complex3.ZERO.toString();
      complex6.conjugate();
      Complex complex9 = complex3.pow(complex5);
      complex6.nthRoot(1);
      complex4.getImaginary();
      complex3.NaN.log();
      complex7.I.tanh();
      complex7.add(complex2);
      complex9.sinh();
      complex1.tan();
      complex1.asin();
      complex0.ZERO.getArgument();
      complex8.getArgument();
      Complex complex10 = complex4.cosh();
      complex10.toString();
      Complex complex11 = Complex.I;
      complex3.subtract(complex11);
      complex3.pow(0.0);
      complex10.pow(complex7);
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow((-630.82579095107));
      Complex.valueOf((-2416.84786917));
      Complex complex1 = complex0.divide(5186.5);
      complex1.ZERO.getArgument();
      complex1.ONE.multiply(complex0);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.sin();
      complex0.ZERO.getArgument();
      complex0.add(0.0);
      complex4.atan();
      Complex complex5 = complex4.add(complex0);
      complex1.I.pow(complex3);
      complex5.createComplex(5186.5, 1.0);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(912.666830581008);
      Complex complex3 = complex1.add(912.666830581008);
      Complex complex4 = complex3.I.subtract(912.666830581008);
      Complex complex5 = complex1.exp();
      complex2.I.subtract(complex5);
      Complex complex6 = complex5.ONE.acos();
      complex6.ZERO.multiply(9.452180117175641E-8);
      Complex complex7 = complex2.NaN.cosh();
      Complex complex8 = complex2.negate();
      complex5.getImaginary();
      complex0.ONE.getField();
      complex8.sin();
      Complex complex9 = complex5.exp();
      complex4.INF.reciprocal();
      Complex complex10 = complex5.ONE.divide((-1053.73985547318));
      complex10.ONE.subtract(complex6);
      complex6.sin();
      complex9.getArgument();
      Complex complex11 = complex4.pow(0.0);
      Complex complex12 = complex11.ZERO.subtract(complex1);
      complex8.getImaginary();
      complex0.sqrt();
      complex7.log();
      complex1.getField();
      complex12.ONE.sqrt1z();
      complex10.multiply((-559));
      Complex complex13 = complex1.multiply((-1053.73985547318));
      complex13.getArgument();
      complex12.reciprocal();
      complex7.subtract(286.97);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex1.NaN.multiply(1);
      Complex complex5 = complex4.I.atan();
      complex1.INF.toString();
      Complex complex6 = complex1.INF.divide(2.0882534980773926);
      Complex.valueOf((-1.0), (-664.0));
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.subtract(complex9);
      complex10.multiply(complex2);
      Complex complex11 = complex2.log();
      complex1.getImaginary();
      complex11.pow(complex0);
      complex11.ONE.pow(complex2);
      complex3.abs();
      complex2.sinh();
      complex11.log();
      complex5.sqrt();
      complex6.add(complex5);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.ONE.add(Double.POSITIVE_INFINITY);
      complex3.NaN.divide(complex2);
      complex3.INF.tanh();
      complex3.I.abs();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.I.hashCode();
      complex0.readResolve();
      Complex complex5 = complex0.negate();
      complex5.subtract(1.8537070751190186);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.createComplex(2541.3629919, 2541.3629919);
      complex0.createComplex((-20.0), (-20.0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.createComplex(200.18586527, 0.0);
      complex1.I.multiply(0);
      complex1.ZERO.sinh();
      complex0.isNaN();
      complex0.nthRoot(1);
      Complex complex2 = complex0.acos();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex1.NaN.createComplex(993.995518550325, 0.0);
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex3.I.divide(0.0);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex0.ONE.subtract(993.995518550325);
      complex6.multiply(complex5);
      Complex.valueOf(632.7414297507516);
      Complex complex7 = Complex.valueOf((-566.1824494615), (-566.1824494615));
      Complex complex8 = complex7.INF.divide(0.0);
      Complex complex9 = complex8.NaN.cos();
      complex0.getField();
      Complex complex10 = complex7.tanh();
      complex10.readResolve();
      Complex complex11 = complex9.subtract(complex10);
      Complex complex12 = complex11.add(complex2);
      Complex complex13 = complex8.sin();
      complex13.divide(0.0);
      Complex complex14 = complex9.cos();
      Complex complex15 = Complex.ZERO;
      complex0.NaN.divide(complex15);
      complex14.I.add(complex12);
      complex2.exp();
      complex14.sqrt();
      complex11.sqrt();
      complex13.multiply((-2433));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.createComplex(282.25, 1.3223776943337897E-245);
      complex0.getImaginary();
      complex0.getField();
      complex0.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.negate();
      complex2.ONE.hashCode();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.pow(complex2);
      Complex complex5 = complex2.INF.createComplex(Double.POSITIVE_INFINITY, 1226.19560545);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex3.log();
      complex6.ONE.tanh();
      complex2.divide(complex0);
      complex6.NaN.sin();
      complex7.ONE.getField();
      Complex complex8 = complex7.add(1429.507657);
      complex6.isInfinite();
      Complex complex9 = complex6.tanh();
      complex5.NaN.cos();
      complex9.ZERO.add(0.0);
      Complex complex10 = complex5.subtract(complex4);
      complex10.ZERO.abs();
      Complex complex11 = complex8.negate();
      complex6.cosh();
      Complex complex12 = Complex.I;
      complex11.multiply(complex12);
      complex11.divide((-3402.3319322));
      complex11.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.sqrt();
      complex3.INF.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.INF.add(complex1);
      Complex complex6 = Complex.ZERO;
      complex2.ONE.reciprocal();
      complex4.ONE.pow(complex6);
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex6.I.pow(complex4);
      complex6.INF.getArgument();
      complex4.getReal();
      complex1.INF.divide(complex2);
      complex0.getImaginary();
      Complex complex9 = complex5.atan();
      complex2.ZERO.atan();
      Complex complex10 = complex0.divide(0.0);
      Complex complex11 = complex10.log();
      Complex complex12 = complex6.atan();
      complex12.sin();
      complex2.acos();
      complex9.toString();
      Complex complex13 = complex1.multiply(781.591);
      complex7.pow(complex11);
      complex13.asin();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.18713790898745E-148, 2.18713790898745E-148);
      Complex complex2 = Complex.valueOf(2.18713790898745E-148);
      Complex complex3 = complex1.subtract(0.6394867897033691);
      Complex complex4 = complex0.pow(complex1);
      complex1.multiply(2.18713790898745E-148);
      complex2.sqrt1z();
      complex4.INF.cos();
      complex4.INF.tanh();
      Complex complex5 = complex0.tan();
      complex3.ZERO.subtract(2.18713790898745E-148);
      Complex complex6 = complex4.pow(complex3);
      complex5.isInfinite();
      complex6.NaN.negate();
      complex5.toString();
      complex6.createComplex(0.6394867897033691, 0.6394867897033691);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.acos();
      complex2.I.tan();
      complex2.INF.getArgument();
      Complex complex3 = complex0.cos();
      complex3.ONE.hashCode();
      Complex complex4 = complex1.asin();
      complex2.reciprocal();
      complex1.ONE.nthRoot(1201);
      Complex complex5 = complex1.add(complex4);
      complex2.asin();
      complex2.sinh();
      complex5.exp();
      complex2.nthRoot(1201);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.26296502351760864, 0.26296502351760864);
      Complex complex1 = Complex.valueOf(0.26296502351760864);
      complex1.ZERO.add(complex0);
      Complex complex2 = Complex.valueOf(0.26296502351760864);
      complex0.hashCode();
      Complex complex3 = complex0.NaN.tan();
      complex3.ONE.atan();
      Complex complex4 = Complex.valueOf(0.26296502351760864, 0.26296502351760864);
      Complex complex5 = complex4.I.tan();
      complex0.abs();
      Complex complex6 = complex0.cos();
      complex6.NaN.sin();
      complex2.sin();
//      try { 
        complex5.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(422.79932662169);
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.add(complex1);
      complex0.ZERO.cosh();
      complex1.ZERO.sinh();
      complex3.ZERO.abs();
      complex3.getArgument();
      complex3.abs();
      complex2.getReal();
      complex0.isInfinite();
      complex0.log();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1314.50319), (-1314.50319));
      Complex complex1 = Complex.valueOf((-1314.50319));
      complex1.NaN.sqrt1z();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.ZERO.add(0.0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex0.createComplex(1.0, 1.0);
      complex5.NaN.reciprocal();
      Complex complex6 = complex3.ZERO.conjugate();
      complex6.cosh();
      Complex complex7 = complex3.ZERO.exp();
      complex7.I.subtract(complex4);
      complex7.ZERO.hashCode();
      complex3.ZERO.exp();
      Complex complex8 = complex0.ONE.log();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex9 = Complex.valueOf(0.0, (-946.1));
      complex2.readResolve();
      complex2.I.tanh();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex8.sqrt();
      Complex complex12 = complex0.INF.subtract(complex10);
      complex8.hashCode();
      complex10.I.reciprocal();
      complex4.multiply((-946.1));
      complex12.cos();
      complex0.getImaginary();
      complex11.cos();
      Complex.valueOf((-1314.50319), 0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1506.2039731, 519.673325);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.asin();
      Complex.valueOf(1506.2039731, 0.0);
      complex0.isNaN();
      complex0.isNaN();
      complex5.I.abs();
      Complex complex6 = complex1.ONE.atan();
      Complex complex7 = complex3.NaN.reciprocal();
      complex6.NaN.cos();
      Complex complex8 = complex4.createComplex(0.0, 0.0);
      complex8.ZERO.toString();
      Complex complex9 = complex5.acos();
      complex8.sqrt1z();
      boolean boolean0 = complex6.isInfinite();
      assertFalse(boolean0);
      
      Complex complex10 = complex9.createComplex(0.0, 0.0);
      Complex complex11 = complex3.exp();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex9.cosh();
      assertEquals(2.2312089041694234, complex13.getImaginary(), 0.01);
      assertEquals((-0.43784094037679167), complex13.getReal(), 0.01);
      
      Complex complex14 = complex1.divide((-2156.5));
      Complex complex15 = complex14.ONE.sqrt();
      assertEquals(1.0, complex15.getReal(), 0.01);
      
      Complex.valueOf(20.0, 0.22704219818115234);
      complex2.sin();
      complex4.isInfinite();
      assertEquals(2.046996273856635E-4, complex4.getImaginary(), 0.01);
      
      complex7.equals(complex1);
      assertSame(complex7, complex12);
      assertSame(complex7, complex11);
      
      complex10.hashCode();
      Complex complex16 = complex9.sin();
      assertEquals(0.03844844157050179, complex16.getImaginary(), 0.01);
      
      Complex complex17 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex17.equals((Object)complex14));
      assertTrue(complex17.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.negate();
      double double0 = (-20.0);
      Complex complex3 = complex2.I.subtract((-20.0));
      complex3.add(complex0);
      Complex complex4 = complex0.ZERO.subtract(complex1);
      complex4.acos();
      complex0.INF.divide(0.0);
      complex0.INF.add(5.5257514455273825E-8);
      complex0.getArgument();
      complex0.abs();
      Complex complex5 = complex0.acos();
      complex5.ONE.multiply(Double.NaN);
      complex0.acos();
//      try { 
        complex0.nthRoot((-28));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -28
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2111.85835802, 2714.60278);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.tan();
      complex2.getReal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.asin();
      complex3.isInfinite();
      Complex complex5 = complex0.cos();
      complex0.isInfinite();
      Complex complex6 = complex1.sqrt1z();
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      
      complex3.hashCode();
      Complex complex7 = complex0.acos();
      assertEquals((-8.836180127337062), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex5.add(complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      
      Complex complex9 = complex4.pow(463.78088);
      assertEquals((-2.3758093011989252E126), complex9.getImaginary(), 0.01);
  }
}
