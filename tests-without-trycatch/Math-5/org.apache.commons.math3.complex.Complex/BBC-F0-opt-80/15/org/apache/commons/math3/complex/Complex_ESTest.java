/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:43:52 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(0.5568217039108276, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-878.3263154380343));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(3307.5030135, 5.28125);
      Complex complex1 = complex0.cos();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sin();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1039.945843, 1039.945843);
      Complex complex1 = complex0.NaN.asin();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2397.525969044554), (-776.3));
      Complex complex1 = complex0.acos();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7514953095665195E85), (-1.7514953095665195E85));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide((-2139.32));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-878.3263154380343));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7514953095665195E85), (-1.7514953095665195E85));
      complex0.INF.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.pow(535.3);
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2397.525969044554), (-776.3));
      complex0.subtract((-1164.8574));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-2976.199), 1.6879660933816274E223);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2397.525969044554), (-776.3));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((double) 1552);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(3307.5030135);
      Complex complex1 = complex0.cos();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-479.5398898158712));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2379.54405411247, 2379.54405411247);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2397.525969044554), (-776.3));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.5330380201339722, 810143.0064000001);
      complex0.I.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3307.5030135);
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1713.181772838));
      complex0.pow((-1206.79));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2288.760806451456));
      Complex complex1 = complex0.tanh();
      complex1.pow((-2288.760806451456));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1212.2584545218);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(315.13);
      Complex complex1 = complex0.asin();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(0.0);
      complex1.multiply((-1694));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-1694));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-900.08), (-900.08));
      complex0.multiply(2406);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(3307.5030135, 5.28125);
      Complex complex1 = complex0.negate();
      complex1.multiply(2.6888010385137123E39);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2397.525969044554), (-776.3));
      Complex complex1 = complex0.tanh();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1713.181772838));
      Complex complex1 = complex0.INF.conjugate();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2288.760806451456));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1713.181772838));
      Complex complex1 = complex0.log();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-900.08));
      Complex complex1 = complex0.exp();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2288.760806451456), (-2288.760806451456));
      Complex complex1 = complex0.multiply((-641.403272314));
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(697.31025695988, 697.31025695988);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(909.0841718059753, 1.557407724654902);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7514953095665195E85), (-1.7514953095665195E85));
      Complex complex1 = complex0.ZERO.exp();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-900.08));
      complex0.INF.createComplex((-900.08), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.createComplex(1.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2288.760806451456));
      complex0.createComplex((-2288.760806451456), 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1039.945843, 1039.945843);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1.5652761725518397E69), Double.POSITIVE_INFINITY);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2288.760806451456), (-2288.760806451456));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3310.3993, (-20.0));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-35.32160601768261), 2.169306470354036E242);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.asin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7514953095665195E85), (-1.7514953095665195E85));
      complex0.ONE.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-900.08), (-900.08));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.add(complex0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2397.525969044554), (-776.3));
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-27.6388899191775), (-27.6388899191775));
      complex0.add((-27.6388899191775));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7514953095665195E85), (-1.7514953095665195E85));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1713.181772838));
      Complex complex1 = complex0.negate();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1713.181772838));
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.NaN.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.NaN.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sqrt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply((-294.74323));
      complex1.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-900.08));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-900.08));
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      complex1.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.add(complex0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(3307.5030135);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-1270.05006), 1304.8248198348692);
      Complex complex2 = complex1.pow(4808.597277100153);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(441.8156, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1225.125237942046);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-27.6388899191775), (-27.6388899191775));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex.valueOf((-1.450709904687712E-8), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex.valueOf(Double.NaN, 1.0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1315);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(837);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.nthRoot((-190));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -190
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-900.08));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, (-620.000394004));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3310.3993, (-20.0));
      Complex complex1 = complex0.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf(697.31025695988, 697.31025695988);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.I.sqrt();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.sin();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(Double.NaN);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.subtract((-1646.1920235146702));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex((-894.6312158));
      Complex complex1 = complex0.cosh();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex(3307.5030135);
      Complex complex1 = complex0.NaN.add(3307.5030135);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex((-900.08));
      Complex complex1 = complex0.multiply(1.8612397134087598E-8);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.523329496383667, Double.POSITIVE_INFINITY);
      complex0.multiply(1274.733);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.pow(1993.40329154);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(549.73);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = new Complex((-1.5652761725518397E69), Double.POSITIVE_INFINITY);
      complex0.multiply(53);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex(1.625, 1.625);
      complex0.INF.multiply(2070);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply(0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cos();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex((-1.5652761725518397E69), Double.POSITIVE_INFINITY);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.tan();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = new Complex(3307.5030135);
      Complex complex1 = complex0.NaN.add(3307.5030135);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex(3307.5030135);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sin();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(0.0);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.reciprocal();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.I.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      complex1.INF.add(complex1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = new Complex((-894.6312158));
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(549.73);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.ZERO.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = new Complex(0.5909284353256226, (-1.998183061531611E-9));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = new Complex((-894.6312158));
      Complex complex1 = complex0.cosh();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = new Complex((-894.6312158));
      complex0.ZERO.conjugate();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(2.8930193727937684E208);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(648);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-1646.1920235146702));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = new Complex((-3116.4707));
      // Undeclared exception!
      complex0.nthRoot(2145009988);
  }
}
