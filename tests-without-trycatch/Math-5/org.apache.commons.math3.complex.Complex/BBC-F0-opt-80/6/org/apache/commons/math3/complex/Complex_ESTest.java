/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:13:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-1542.154), 0.41421356237309515);
      Complex complex1 = Complex.valueOf(1978.871269773, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.atan();
      complex2.ZERO.getField();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.multiply((-5961));
      Complex complex5 = complex0.tan();
      complex5.getField();
      complex1.exp();
      Complex complex6 = Complex.valueOf(1660.4336991724033);
      complex5.ONE.log();
      complex0.readResolve();
      complex3.sqrt();
      complex5.tan();
      Complex complex7 = complex4.multiply((-5961));
      complex7.toString();
      complex6.createComplex(0.41421356237309515, 0.41421356237309515);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(1.7516078165936552E170);
      complex0.sqrt1z();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex.valueOf((-20.0), 3653.90299138);
      complex0.add(20.0);
      Complex complex2 = complex1.createComplex((-20.0), (-20.0));
      Complex complex3 = Complex.INF;
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.0, Double.NaN);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.ONE;
      complex2.tan();
      Complex complex4 = Complex.I;
      complex0.subtract(0.05139094591140747);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.25201692062432024);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.cosh();
      Complex complex3 = new Complex((-1.36), 20.0);
      complex0.multiply(4972);
      complex3.INF.readResolve();
      complex3.NaN.sin();
      complex3.I.conjugate();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.multiply(7);
      complex5.ONE.getField();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-687.325), Double.POSITIVE_INFINITY);
      complex0.multiply(3688);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(319.36472896, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.I.add(2.0);
      complex4.I.divide(complex3);
      Complex complex5 = complex1.sin();
      complex5.ZERO.add(2.0);
      complex4.divide(2.0);
      complex0.sinh();
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(53, Double.POSITIVE_INFINITY);
      complex0.toString();
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cos();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ONE.multiply(3.3174000012927697E39);
      Complex complex4 = complex2.I.multiply(1483);
      complex4.acos();
      Complex complex5 = complex4.I.exp();
      complex1.NaN.getField();
      complex1.add(complex2);
      Complex complex6 = complex2.pow((-2.268994961992292E125));
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex6.INF.negate();
      complex2.NaN.subtract(complex7);
      complex8.NaN.multiply((double) 1483);
      complex1.log();
      Complex complex9 = complex8.subtract((-2.268994961992292E125));
      complex9.tan();
      complex1.pow(complex7);
      complex3.readResolve();
      complex6.abs();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex3.acos();
      complex5.subtract(complex10);
      complex3.tanh();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.I;
      complex2.I.getArgument();
      complex2.multiply(Double.NaN);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-780.04859661), 1.0954820678996915E7);
      Complex complex2 = complex0.subtract(complex1);
      complex0.nthRoot(18);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.8169291774231604E126));
      Complex complex1 = complex0.ONE.negate();
      complex1.INF.conjugate();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      Complex complex1 = Complex.valueOf(20.0, (-2271.940193399944));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(1636.6138944, 20.0);
      complex4.subtract(complex1);
      Complex complex5 = new Complex(20.0, 20.0);
      complex5.add(complex0);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5493292969363072, (-1.0954820678996915E7));
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.ONE.cosh();
      double double0 = Double.NaN;
      Complex.valueOf(Double.NaN);
      int int0 = (-932);
      complex0.NaN.asin();
//      try { 
        complex0.NaN.nthRoot((-932));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -932
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.add(584.98207);
      double double0 = (-155278.7049984044);
      Complex complex3 = Complex.valueOf(Double.NaN, (-155278.7049984044));
      double double1 = (-3739.3127);
      Complex complex4 = Complex.valueOf((-3739.3127));
      complex4.I.add(complex2);
      complex3.ZERO.multiply((-155278.7049984044));
      complex3.ONE.abs();
      int int0 = (-2147072505);
//      try { 
        complex0.nthRoot((-2147072505));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,147,072,505
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.5493292969363072);
      complex1.NaN.getArgument();
      complex0.subtract(0.5493292969363072);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(2098695652, 2098695652);
      Complex complex1 = Complex.valueOf((double) 2098695652);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      complex2.pow((-933.7225));
      Complex complex3 = complex2.sqrt();
      complex0.toString();
      Complex complex4 = complex3.multiply(1818.7986);
      complex1.nthRoot(857);
      complex4.abs();
      Complex.valueOf(6.6696372295772814, 20.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(95.7026905307202, (-781.7332723));
      Complex complex1 = complex0.add(134.5942450758);
      complex0.log();
      complex0.NaN.nthRoot(780);
      complex1.I.nthRoot(2320);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.reciprocal();
      List<Complex> list0 = complex3.ONE.nthRoot(528);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.pow(134.5942450758);
      Complex complex7 = complex4.log();
      complex7.NaN.negate();
      complex5.divide(complex4);
      complex3.subtract(complex7);
      Complex complex8 = complex2.tan();
      complex6.createComplex(528, (-547.5255358754969));
      Complex complex9 = complex1.multiply(4282);
      complex9.sqrt1z();
      complex8.equals(list0);
      Complex.valueOf(0.10026945173740387, (-547.5255358754969));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.createComplex(Double.NaN, Double.NaN);
      complex0.I.atan();
      Complex complex3 = complex2.NaN.add(complex0);
      complex0.exp();
      Complex complex4 = complex3.log();
      complex2.pow(complex3);
      complex3.pow(complex4);
      Complex complex5 = new Complex(Double.NaN, (-1.0954820678996915E7));
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.NaN.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-410.6894));
      Complex complex1 = new Complex(1470.6494955567);
      Complex complex2 = complex0.ZERO.acos();
      complex1.ONE.abs();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.negate();
      complex2.sin();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2600.14945394), 0.040196798741817474);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.I.add(complex3);
      complex5.ZERO.tan();
      Complex complex6 = complex5.ZERO.cosh();
      complex6.NaN.getArgument();
      complex0.INF.getField();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.I.sinh();
      complex8.ONE.getArgument();
      Complex complex9 = complex0.acos();
      complex9.acos();
      complex9.INF.createComplex((-2600.14945394), 251.156);
      Complex.valueOf(696.5771, Double.NaN);
      Complex complex10 = complex3.subtract(complex2);
      complex10.INF.multiply(complex2);
      complex9.sqrt1z();
      Complex.valueOf(0.040196798741817474);
      complex4.createComplex(15.08194617410603, 4442.0325884);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(47.558629679846185, (-964.99195));
      Complex complex1 = Complex.valueOf(47.558629679846185);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.INF.subtract(complex1);
      complex2.ONE.add((-714.5));
      complex0.getArgument();
      complex0.pow(47.558629679846185);
      Complex complex4 = complex1.atan();
      complex4.I.multiply(106);
      complex4.sqrt1z();
      Complex complex5 = complex4.pow(20.0);
      Complex complex6 = Complex.valueOf((-1.5215522056393544), (-2018.081));
      complex6.NaN.tan();
      complex5.tanh();
      complex3.getArgument();
      complex2.add((-1.5215522056393544));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-2419.594836967757), (-2419.594836967757));
//      try { 
        complex0.I.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1496.744324316414, 1.5106621822269517E-4);
      Complex complex1 = complex0.cosh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex1.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.INF;
      complex4.sqrt();
      Complex complex6 = complex5.tan();
      complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.pow(Double.NaN);
      complex2.nthRoot(2605);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-2420.4708));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-2420.4708));
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex3.exp();
      complex3.reciprocal();
      Complex complex6 = complex1.log();
      Complex complex7 = complex2.log();
      complex5.isInfinite();
      complex4.add(complex6);
      Complex complex8 = complex7.tanh();
      complex1.add(complex5);
      complex7.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-190.9384055969892));
      Complex.valueOf((-190.9384055969892), (-190.9384055969892));
      complex0.ONE.pow((-190.9384055969892));
      Complex complex1 = complex0.tanh();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ONE;
      complex3.log();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.sqrt();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(481.632240961, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      Complex.valueOf(1743.56664);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.conjugate();
      complex2.exp();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.NaN;
      complex7.isInfinite();
      complex4.sqrt();
      complex5.tan();
      Complex complex8 = Complex.INF;
      complex8.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.ONE.nthRoot(1108);
      complex0.nthRoot(7);
      complex0.hashCode();
      Complex complex2 = Complex.ZERO;
      complex0.ZERO.pow(complex0);
      complex0.isNaN();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.NaN;
      complex0.divide(complex0);
      complex0.cosh();
      complex3.reciprocal();
      Complex complex5 = complex4.multiply(1108);
      complex5.multiply(0.0);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2932.3080376058);
      Complex complex1 = complex0.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.exp();
      complex2.reciprocal();
      complex0.log();
      Complex complex4 = complex0.log();
      complex4.isInfinite();
      complex3.add(complex1);
      Complex complex5 = complex4.multiply(1269);
      complex1.toString();
      complex3.tanh();
      complex3.sin();
      ComplexField complexField0 = complex3.getField();
      complex5.equals(complexField0);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.nthRoot(235);
      complex1.nthRoot(7);
      complex0.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.pow(complex2);
      complex3.isNaN();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = Complex.NaN;
      complex2.divide(complex1);
      Complex complex6 = complex1.cosh();
      complex6.reciprocal();
      complex4.conjugate();
      Complex complex7 = complex3.multiply(7);
      complex7.multiply((double) 235);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.acos();
      complex1.ONE.nthRoot(1108);
      complex0.nthRoot(7);
      Complex complex3 = Complex.valueOf(1743.56664);
      Complex complex4 = complex3.subtract(complex2);
      complex3.reciprocal();
      complex0.asin();
      complex3.tanh();
      complex0.add(complex4);
      Complex complex5 = Complex.NaN;
      complex5.multiply((double) 1108);
      complex3.divide((double) 1108);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      complex1.acos();
      complex1.ONE.nthRoot(1108);
      complex0.nthRoot(7);
      complex0.hashCode();
      Complex complex2 = Complex.ZERO;
      complex0.ZERO.pow(complex1);
      complex0.isNaN();
      Complex complex3 = Complex.NaN;
      complex1.divide(complex0);
      Complex complex4 = complex0.cosh();
      complex1.reciprocal();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.multiply(1108);
      complex6.multiply(0.0);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-2420.4708));
      complex0.hashCode();
      Complex complex1 = complex0.pow((-2420.4708));
      complex0.pow(0.0);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-2420.4708));
      complex0.nthRoot(1108);
      complex0.nthRoot(1108);
      complex0.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((double) 3861, (-2420.4708));
      Complex complex3 = complex1.pow(complex2);
      complex2.isNaN();
      complex3.divide(complex0);
      Complex complex4 = Complex.NaN;
      complex3.divide(complex1);
      complex4.cosh();
      complex3.reciprocal();
      Complex complex5 = complex2.conjugate();
      complex5.multiply(1108);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2932.3080376058);
      Complex complex1 = complex0.sqrt1z();
      Complex.valueOf(0.0);
      complex1.ZERO.conjugate();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.log();
      complex5.isInfinite();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex5.multiply(1269);
      complex7.NaN.getField();
      Complex complex8 = complex6.sqrt();
      complex8.I.sqrt();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sqrt1z();
      complex2.sinh();
      Complex complex4 = complex0.multiply(complex1);
      complex4.asin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.atan();
//      try { 
        complex6.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-2420.4708));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex((-2420.4708), (-2420.4708));
      Complex complex4 = complex2.cosh();
      complex1.abs();
      complex2.getImaginary();
      complex2.I.tan();
      complex4.pow((-6.56250013356227E-149));
      complex4.abs();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.539328154875224E-8));
      Complex complex1 = complex0.ONE.multiply(17);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf((-8.539328154875224E-8), 0.0);
      Complex complex4 = complex0.INF.log();
      complex1.tan();
      complex4.I.readResolve();
      Complex complex5 = Complex.valueOf((-15.7483), 349.109);
      complex5.readResolve();
      complex5.ONE.multiply((-1004.54));
      complex0.equals(complex3);
      complex3.reciprocal();
      complex2.NaN.sqrt();
      complex3.atan();
      Complex complex6 = complex2.asin();
      complex6.sin();
      Complex complex7 = complex2.negate();
      complex4.negate();
      complex7.add((-15.7483));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.atan();
      Complex complex1 = complex0.NaN.divide((-20.0));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex2.atan();
      complex4.NaN.exp();
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex2.I.sqrt();
      Complex complex8 = complex0.pow(complex6);
      complex1.conjugate();
      Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.ZERO.reciprocal();
      complex9.ONE.divide(complex5);
      Complex complex10 = Complex.valueOf(0.0);
      complex10.ONE.nthRoot(2196);
      complex0.getField();
      complex2.nthRoot(2795);
      complex2.asin();
      complex1.add((double) 2795);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-2420.4708));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.INF.sqrt1z();
      complex0.INF.sinh();
      Complex complex4 = new Complex((-2420.4708));
      Complex complex5 = complex4.ZERO.pow(complex1);
      complex0.multiply(complex1);
      complex0.asin();
      Complex complex6 = Complex.valueOf((-2420.4708), 0.0);
      complex6.I.atan();
      Complex complex7 = Complex.ONE;
      complex7.add(complex0);
      Complex complex8 = Complex.INF;
      complex5.conjugate();
      Complex complex9 = complex3.acos();
      complex9.getField();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-2420.4708));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.asin();
      complex2.INF.sqrt1z();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = new Complex((-2420.4708));
      Complex complex5 = complex4.ZERO.pow(complex1);
      Complex complex6 = complex0.multiply(complex1);
      complex0.asin();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex7 = Complex.valueOf((-2420.4708), Double.POSITIVE_INFINITY);
      complex5.atan();
      complex7.add(complex3);
      Complex complex8 = Complex.INF;
//      try { 
        complex6.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2932.3080376058);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.reciprocal();
      complex0.log();
      Complex complex5 = complex0.log();
      complex5.isInfinite();
      complex3.add(complex1);
      complex5.multiply(1269);
      complex1.toString();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex3.sin();
      complex7.ZERO.readResolve();
      complex6.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2932.3080376058);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.ZERO.conjugate();
      Complex complex3 = Complex.NaN;
      complex3.getField();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = new Complex((-20.0));
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex5.multiply(1148);
      complex5.atan();
      Complex complex8 = Complex.INF;
      complex6.multiply(complex8);
      complex7.conjugate();
      complex8.multiply(595);
      complex0.exp();
      complex2.readResolve();
      complex4.getField();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.I.sqrt();
      complex0.ZERO.nthRoot(835);
      complex0.toString();
      Complex complex3 = complex0.sinh();
      complex3.ONE.toString();
      Complex complex4 = complex3.INF.tanh();
      complex4.ONE.getField();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.INF.negate();
      complex2.conjugate();
      complex0.INF.readResolve();
      Complex complex8 = complex7.atan();
      complex8.NaN.add((double) 835);
      complex8.NaN.atan();
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = Complex.ONE;
      complex9.conjugate();
      complex2.pow(complex10);
      complex9.pow((double) 835);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex11.INF.multiply((-2974.0173));
      complex3.abs();
      Complex complex13 = complex12.acos();
      complex13.equals(complex3);
      Complex complex14 = complex1.createComplex(0.8813735870195429, (-0.06376628684746244));
      complex0.tanh();
      complex5.getField();
      complex14.getImaginary();
      complex12.divide(1637.9300599177);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex1.divide((double) 1993);
      Complex.valueOf((-6.648490725635754E-8));
      complex0.acos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = Complex.NaN;
      complex6.getArgument();
      Complex complex7 = complex1.exp();
      complex7.ZERO.add(Double.NaN);
      complex4.pow(2.0);
      complex5.nthRoot(1657);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.I;
      complex1.createComplex(0.0, 0.0);
      double double0 = 5858678.89365264;
      Complex complex3 = new Complex(5858678.89365264);
      Complex complex4 = Complex.valueOf(0.0, 5858678.89365264);
      complex4.reciprocal();
//      try { 
        complex3.nthRoot((-872));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -872
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2932.3080376058);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.nthRoot(37);
      complex1.hashCode();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.pow(complex0);
      complex3.isNaN();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = Complex.valueOf(2932.3080376058, (-1.0));
      Complex complex7 = complex6.acos();
      Complex complex8 = new Complex(2932.3080376058, (-423.9752213953));
      Complex complex9 = complex8.divide(complex0);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex10.reciprocal();
      complex4.conjugate();
      complex5.multiply((-362));
      complex9.multiply(496.95777);
      complex5.createComplex(2932.3080376058, 0.0);
      complex7.negate();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-313.3832837));
      Complex complex1 = complex0.INF.multiply((-525.0));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.subtract((-525.0));
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = Complex.I;
      complex8.divide(complex7);
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf(0.0, (-3927.712827));
      complex10.divide(complex3);
      complex6.sin();
      complex5.isInfinite();
      Complex complex11 = complex10.sin();
      complex6.isNaN();
      complex8.nthRoot(232);
      complex5.subtract(complex11);
      complex5.add((-982.7141750398905));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2420.4708), (-2420.4708));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.asin();
      complex1.getField();
      Complex complex3 = complex2.tan();
      complex2.getField();
      Complex complex4 = Complex.valueOf((-2420.4708));
      complex3.pow(complex4);
      Complex complex5 = complex1.multiply(391);
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.multiply(595);
      complex8.ZERO.multiply((-3619));
      Complex complex9 = new Complex(391);
      complex9.readResolve();
      Complex complex10 = Complex.valueOf((double) 391);
      complex0.equals(complex10);
      complex6.subtract(4079.049960054);
      Complex complex11 = new Complex(595, (-2420.4708));
      complex2.getField();
      complex0.sqrt1z();
      Complex complex12 = Complex.ONE;
      complex12.createComplex(391, 391);
      complex6.tan();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.cosh();
      complex3.I.abs();
      complex0.INF.abs();
      complex0.getImaginary();
      Complex complex4 = complex2.pow(0.0);
      complex4.ZERO.sqrt();
      complex1.createComplex(Double.POSITIVE_INFINITY, (-2556.98));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(2817.31027132);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.pow(complex2);
      complex5.multiply(complex1);
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.valueOf(2.1524391174316406, (-313.3832837));
      complex4.add(complex7);
      complex2.subtract(complex3);
      complex6.conjugate();
      Complex complex8 = Complex.ONE;
      complex8.acos();
      Complex complex9 = new Complex(2.1524391174316406);
      Complex complex10 = complex9.sqrt();
      complex10.toString();
      complex8.nthRoot(282);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1757.074397862), (-1757.074397862));
      Complex complex1 = Complex.valueOf((-1757.074397862), (-1757.074397862));
      Complex complex2 = complex0.sin();
      complex2.NaN.toString();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex1.ONE.multiply((-287));
      Complex complex5 = complex0.INF.multiply(complex1);
      complex0.ONE.createComplex((-31.0425339279), (-31.0425339279));
      Complex complex6 = Complex.valueOf((double) (-287));
      Complex complex7 = complex4.ZERO.createComplex((-1757.074397862), (-31.0425339279));
      complex5.I.cos();
      Complex complex8 = Complex.valueOf((-1757.074397862), (-31.0425339279));
      complex8.I.multiply(complex6);
      Complex complex9 = Complex.valueOf((-1757.074397862), (-1757.074397862));
      Complex complex10 = complex0.add(complex9);
      complex10.I.negate();
      Complex complex11 = Complex.valueOf((-1560.09));
      complex11.ZERO.abs();
      complex10.readResolve();
      Complex complex12 = complex5.tanh();
      Complex complex13 = Complex.INF;
      complex13.INF.sinh();
      Complex complex14 = complex0.subtract(complex13);
      complex14.NaN.toString();
      complex14.I.toString();
      complex3.divide(complex4);
      Complex complex15 = complex13.cosh();
      complex15.ZERO.add(complex11);
      complex6.subtract(complex7);
//      try { 
        complex12.nthRoot((-287));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -287
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.040196798741817474);
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      complex0.reciprocal();
      complex0.ZERO.add(complex1);
      complex0.getReal();
      Complex complex2 = complex0.sinh();
      complex2.pow(0.040196798741817474);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.divide(complex1);
      complex0.getReal();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex2.ZERO.cos();
      complex5.NaN.subtract((-1522.0));
      complex4.acos();
      Complex complex6 = complex4.subtract(complex0);
      complex6.NaN.divide((-3385.482));
      complex6.ZERO.nthRoot(1189);
      Complex complex7 = complex2.add(0.0);
      Complex complex8 = complex0.atan();
      complex8.ONE.add((double) 1189);
      complex4.asin();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.NaN.multiply((-3615));
      complex10.getField();
      complex4.getArgument();
      complex6.equals(complex4);
      complex0.hashCode();
      complex7.asin();
      complex0.getReal();
      Complex complex11 = complex1.multiply(0.0);
      Complex complex12 = complex3.conjugate();
      complex2.pow((double) 1189);
      complex12.cos();
      complex11.equals("t");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-2420.4708));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.asin();
      complex2.INF.sqrt1z();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex3.I.asin();
      complex4.ZERO.pow(complex1);
      Complex complex5 = complex0.multiply(complex1);
      complex0.asin();
      Complex complex6 = Complex.valueOf((-2420.4708), 0.0);
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = Complex.ONE;
      complex5.subtract(complex8);
      Complex complex9 = complex3.conjugate();
      complex9.ZERO.acos();
      complex5.sqrt();
      complex1.toString();
//      try { 
        complex7.nthRoot((-2581));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,581
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-2305.35984573525));
      complex0.getArgument();
      complex0.getArgument();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.multiply((-1102));
      complex1.isInfinite();
      Complex complex3 = Complex.valueOf(3.141592653589793, 3.141592653589793);
      Complex complex4 = complex3.conjugate();
      complex4.ZERO.getField();
      complex0.NaN.getArgument();
      complex0.add(0.0);
      complex2.hashCode();
      complex0.toString();
      complex3.ONE.multiply((-3391));
      complex0.atan();
      complex3.nthRoot(107);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.NaN.conjugate();
      complex4.ONE.createComplex(0.0, 0.0);
      complex3.subtract(complex0);
      complex2.reciprocal();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.atan();
      complex3.getField();
      complex3.sqrt();
      complex3.divide(2028.464);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.I.pow(complex2);
      complex5.getField();
      complex5.equals("(&^w\">KyCaY2mE");
      complex4.hashCode();
      complex5.ZERO.readResolve();
      complex3.tanh();
      Complex complex7 = complex1.exp();
      complex7.ZERO.negate();
      complex0.subtract(2028.464);
      complex6.sqrt();
      Complex complex8 = Complex.I;
      complex8.ZERO.getField();
      complex2.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(20.0);
      Complex complex2 = complex0.createComplex(20.0, 2542.808);
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.ZERO.sinh();
      complex0.getImaginary();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.I.subtract(complex1);
      complex2.I.cosh();
      complex2.getImaginary();
      Complex complex6 = complex4.log();
      complex6.I.hashCode();
      Complex complex7 = complex2.multiply(complex5);
      complex5.log();
      Complex complex8 = complex1.cos();
      complex1.equals("");
      Complex.valueOf(2731.0, 2731.0);
      complex5.toString();
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = complex2.add(20.0);
      complex10.ONE.log();
      complex2.getArgument();
      complex2.acos();
      complex1.readResolve();
      Complex complex11 = complex2.divide(complex7);
      complex9.isInfinite();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(708.0, 2001.0628644);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.subtract(2001.0628644);
      complex1.abs();
      complex3.ONE.hashCode();
      Complex complex4 = Complex.valueOf(3.023383144276055E307, 44.4035984924418);
      complex4.NaN.conjugate();
      Complex complex5 = complex3.add(complex4);
      complex5.toString();
      complex5.sqrt1z();
      Complex complex6 = complex0.add(1328.6999920508304);
      complex6.I.sqrt1z();
      complex6.INF.tanh();
      complex3.toString();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.NaN.multiply(0);
      Complex complex9 = complex2.sin();
      complex9.ONE.subtract(0.0);
      complex7.abs();
      Complex complex10 = complex1.divide(2001.0628644);
      complex10.ZERO.conjugate();
      complex3.abs();
      complex3.getArgument();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.INF.conjugate();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.subtract(complex1);
      complex2.subtract(complex1);
      int int0 = 0;
//      try { 
        complex3.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.add(2019.580190377);
      Complex complex1 = complex0.ONE.asin();
      complex0.isInfinite();
      complex0.getImaginary();
      Complex complex2 = complex0.sin();
      complex2.INF.pow(0.0);
      complex1.readResolve();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-1440.991));
      complex1.ZERO.getField();
      complex0.getImaginary();
      Complex complex2 = complex0.negate();
      complex2.ZERO.log();
      Complex.valueOf((-1703.0));
      Complex.valueOf(208.0930832296065, 208.0930832296065);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-1229.31);
      Complex complex0 = new Complex((-1229.31));
      complex0.getReal();
      Complex complex1 = complex0.cos();
      double double1 = 0.0;
      complex0.NaN.tan();
      Complex complex2 = complex1.divide(0.0);
      complex1.sqrt1z();
      double double2 = 0.0;
      complex2.ZERO.acos();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.multiply(complex4);
//      try { 
        complex5.I.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.atan();
      complex2.INF.getArgument();
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex1.divide(complex0);
      complex4.ONE.getField();
      Complex complex5 = complex2.I.tan();
      complex5.ZERO.getField();
      Complex complex6 = Complex.valueOf(0.7853981633974483);
      Complex complex7 = complex2.ONE.pow(complex6);
      complex7.I.multiply(1);
      complex2.multiply(complex1);
      Complex complex8 = complex4.I.conjugate();
      complex8.I.multiply(595);
      Complex complex9 = complex4.exp();
      complex9.readResolve();
      complex2.equals("e'{Z,,K<");
      complex9.subtract(0.7853981633974483);
      complex9.I.acos();
      complex2.getField();
      Complex complex10 = complex9.sqrt1z();
      complex10.ZERO.createComplex(0.0, 0.0);
      complex3.tan();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex2.ONE.acos();
      complex3.ZERO.subtract(complex1);
      Complex complex4 = complex1.I.subtract(20.0);
      complex4.readResolve();
      complex0.multiply(0);
      complex0.pow(complex2);
      Complex complex5 = complex2.tanh();
      complex5.ZERO.cosh();
      complex2.toString();
      Complex complex6 = Complex.valueOf((double) 0, (-648.0));
      Complex complex7 = complex6.ZERO.sinh();
      complex7.ZERO.negate();
      complex1.atan();
      complex5.createComplex(0.0, (-648.0));
      Complex.valueOf((-2677.6352916797937), (double) 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ONE.add(complex0);
      complex2.ZERO.getField();
      Complex complex3 = complex0.add(complex1);
      complex1.INF.tan();
      complex2.getField();
      Complex complex4 = complex3.add(complex2);
      complex4.INF.sin();
      complex4.abs();
      int int0 = 0;
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.hashCode();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.cosh();
      Complex.valueOf((-2019.880244), (-2019.880244));
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.subtract((-2019.880244));
      complex4.I.pow((-2019.880244));
      complex1.pow(complex3);
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.I;
      complex5.NaN.multiply(complex6);
      complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isInfinite();
      complex0.getField();
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex0.divide(1095.606134);
      complex2.ONE.hashCode();
      complex1.equals(complex5);
      complex1.toString();
      complex0.ZERO.divide(complex3);
      complex2.getReal();
      Complex complex6 = complex2.sin();
      complex6.I.createComplex(1095.606134, 0.0);
      Complex complex7 = complex5.pow(complex6);
      Complex complex8 = complex7.conjugate();
      complex0.divide(complex4);
      complex0.getImaginary();
      Complex complex9 = complex3.tan();
      complex9.I.hashCode();
      Complex complex10 = complex4.cosh();
      complex10.hashCode();
      complex3.toString();
      complex8.nthRoot(Integer.MAX_VALUE);
      complex4.acos();
      complex7.isInfinite();
      complex7.pow(0.0);
      complex5.getArgument();
      complex10.multiply((-79));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.880582039589629E-283);
      complex0.pow(complex1);
      complex0.createComplex((-3618.611099358934), 3123.819775505);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-710.441107386));
      Complex complex2 = complex1.ONE.conjugate();
      complex2.ZERO.cos();
      complex1.I.cosh();
      Complex complex3 = complex1.pow(1382.0);
      complex0.INF.multiply((-4599.81725));
      complex0.divide((-710.441107386));
      complex0.INF.negate();
      complex0.ZERO.tanh();
      Complex complex4 = complex0.add(0.0);
      complex4.getArgument();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-313.3832837));
      Complex complex1 = complex0.INF.multiply((-525.0));
      complex1.ZERO.asin();
      complex0.add((-4191.225328040434));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.I.subtract((-565.9358368787));
      complex2.ZERO.cosh();
      complex3.INF.abs();
      complex0.getImaginary();
      complex2.pow(0.0);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf((-1.0), 0.0);
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.ONE.subtract(complex0);
      Complex complex5 = complex4.ONE.add((-1.0));
      complex5.ONE.multiply(complex1);
      complex2.ZERO.hashCode();
      Complex complex6 = complex3.I.sinh();
      Complex complex7 = complex2.ONE.tan();
      Complex complex8 = complex1.INF.exp();
      Complex complex9 = complex0.sqrt();
      complex9.NaN.getArgument();
      complex1.isNaN();
      Complex complex10 = complex8.add(complex6);
      complex1.INF.reciprocal();
      Complex complex11 = complex8.createComplex((-1340.1), 0.0);
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex1.pow(complex12);
      complex13.INF.hashCode();
      Complex complex14 = complex2.atan();
      complex14.NaN.reciprocal();
      complex1.isInfinite();
      complex10.toString();
      Complex.valueOf(20.0, 1891.71995634);
      complex12.abs();
      Object object0 = complex9.readResolve();
      complex2.equals(object0);
      complex7.multiply(complex11);
      complex6.multiply(500);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex.valueOf((-216.0), (-216.0));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex3.I.cosh();
      complex2.hashCode();
      complex5.cos();
      complex2.ONE.acos();
      Complex complex6 = Complex.valueOf((-90.33136), (-90.33136));
      Complex complex7 = Complex.ONE;
      complex4.pow(complex7);
      complex1.toString();
      complex0.cosh();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.acos();
      complex1.ONE.nthRoot(1108);
      complex0.nthRoot(3861);
      complex0.hashCode();
      complex2.I.reciprocal();
      complex0.ZERO.pow(complex1);
      complex0.isNaN();
      Complex complex3 = complex2.divide(complex0);
      complex1.I.acos();
      complex1.divide(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.multiply(1108);
      complex7.multiply(0.0);
      complex5.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.subtract(6.6768);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.multiply((-2.3450920230816267E-8));
      complex4.ZERO.createComplex((-2150.542544972), (-2150.542544972));
      Complex complex5 = complex0.asin();
      complex4.ZERO.tan();
      complex4.ONE.readResolve();
      complex3.ZERO.toString();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.ZERO.pow((-2150.542544972));
      complex7.I.readResolve();
      complex7.I.add(complex1);
      complex4.divide(complex5);
      complex3.getField();
      Complex complex8 = complex5.tan();
      complex8.I.negate();
      complex8.getArgument();
      complex2.sinh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      complex2.NaN.divide(complex0);
      complex2.ZERO.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.I.acos();
      complex4.INF.cosh();
      Complex complex5 = complex0.divide(complex3);
      complex5.ONE.cos();
      complex0.getArgument();
      complex5.exp();
      complex3.pow(1.5707963267948966);
//      try { 
        complex3.nthRoot((-1010));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,010
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      complex1.ZERO.hashCode();
      Complex complex3 = complex1.ZERO.add(921.198218098);
      complex3.I.toString();
      complex1.divide(complex0);
      complex2.INF.sin();
      Complex.valueOf(921.198218098, 0.0);
      Complex complex4 = complex2.add(921.198218098);
      complex4.ZERO.sqrt1z();
      complex0.subtract(0.0);
      Complex complex5 = complex4.sinh();
      complex1.multiply(331);
      Complex complex6 = complex0.ONE.conjugate();
      complex6.ONE.acos();
      Complex complex7 = Complex.ZERO;
      complex1.pow(complex7);
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.NaN.tan();
      complex5.toString();
      complex4.negate();
      complex8.add(1.0);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3816.94033));
      Complex complex1 = complex0.ZERO.cosh();
      complex1.NaN.nthRoot(1);
      Complex complex2 = Complex.INF;
      complex2.NaN.subtract((-3031.6794553712084));
      complex0.pow(complex2);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 955.210431029);
      Complex complex1 = Complex.INF;
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.ONE.pow((-802.74944));
      complex2.tanh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.cosh();
      complex3.add(complex2);
      complex4.getReal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex((-71.587970091217), (-71.587970091217));
      Complex complex2 = complex1.sqrt1z();
      complex2.I.reciprocal();
      complex0.ZERO.nthRoot(1993);
      complex1.ZERO.add(2.313664294893465E-7);
      complex0.divide((-3512.2046426322636));
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.I.reciprocal();
      complex2.readResolve();
      complex0.toString();
      Complex.valueOf((-3125.0));
      Complex complex3 = complex0.exp();
      complex3.INF.readResolve();
      Complex complex4 = complex3.NaN.pow(20.0);
      complex4.ZERO.toString();
      complex4.conjugate();
      complex0.getField();
      complex0.getImaginary();
      Complex complex5 = complex3.sin();
      complex5.I.getField();
      complex3.ONE.pow(complex5);
      complex5.readResolve();
      complex1.hashCode();
      Complex complex6 = complex5.subtract((-2.260047972865202E-8));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex1.ZERO.abs();
      complex2.INF.reciprocal();
      complex2.getArgument();
      complex2.exp();
      Complex complex3 = complex0.pow(0.0);
      Complex.valueOf(0.0, 0.0);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.NaN.divide((-20.0));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex3.I.sqrt();
      assertEquals(0.7071067811865475, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex0.pow(complex6);
      complex2.conjugate();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex8.ZERO.reciprocal();
      Complex complex11 = complex10.ONE.divide(complex5);
      assertEquals((-0.9092974268256817), complex11.getImaginary(), 0.01);
      assertEquals((-0.4161468365471424), complex11.getReal(), 0.01);
      
      Complex.valueOf(0.0);
      complex0.getField();
      complex3.nthRoot(2795);
      complex8.ZERO.multiply(complex10);
      complex3.negate();
      complex1.NaN.multiply(complex2);
      complex9.subtract(0.53589928150177);
      Complex complex12 = complex5.sqrt1z();
      assertEquals(0.28718568278010614, complex12.getImaginary(), 0.01);
      
      complex4.divide(complex2);
      Complex complex13 = Complex.NaN;
      complex8.divide(complex13);
      complex1.sin();
      complex6.isInfinite();
      complex3.sin();
      complex6.isNaN();
      // Undeclared exception!
      complex8.nthRoot(2795);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(1350.688627109, 7.710512446969693E192);
      Complex complex1 = Complex.valueOf(1350.688627109, 1350.688627109);
      complex1.ONE.abs();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.INF.pow(0.0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.NaN.sqrt1z();
      Complex complex6 = complex5.INF.sqrt();
      complex5.toString();
      assertTrue(complex5.equals((Object)complex6));
      assertNotSame(complex5, complex3);
      
      double double0 = complex4.I.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex7 = complex4.add(complex1);
      complex0.equals(complex7);
      Complex complex8 = complex4.ZERO.sqrt();
      Complex complex9 = complex7.divide(complex0);
      Complex complex10 = complex9.INF.pow(complex0);
      Complex complex11 = complex10.ONE.pow(complex4);
      complex11.abs();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-3.701815429291019E-4), complex9.getImaginary(), 0.01);
      assertEquals(3.701815429291019E-4, complex9.getReal(), 0.01);
      assertFalse(complex10.equals((Object)complex8));
      
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(boolean0);
      
      complex0.sinh();
      Complex complex12 = Complex.valueOf(1.0);
      assertTrue(complex12.equals((Object)complex11));
      
      Complex complex13 = complex4.add(190.1);
      Complex complex14 = complex13.INF.reciprocal();
      assertFalse(complex14.equals((Object)complex12));
      assertTrue(complex13.equals((Object)complex7));
      
      complex2.subtract(0.0);
      Complex complex15 = complex1.reciprocal();
      assertEquals((-3.7018154292910193E-4), complex15.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = (Complex)complex0.readResolve();
      boolean boolean0 = complex2.equals(complex3);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(boolean0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.ZERO.cos();
      double double0 = complex1.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex.valueOf((double) 1);
      complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.ONE.negate();
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      assertTrue(list0.contains(complex2));
      assertEquals(1, list0.size());
      
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.pow((double) 1);
      assertEquals((-1.0), complex5.getReal(), 0.01);
      assertEquals((-1.2246467991473532E-16), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.sin();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.380305844689076E-8));
//      try { 
        complex0.nthRoot((-454));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -454
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
