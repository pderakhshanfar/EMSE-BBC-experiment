/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:50:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(993.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.I.conjugate();
      complex1.nthRoot(58);
      Complex complex2 = complex0.multiply(244);
      Complex complex3 = complex2.negate();
      complex2.INF.hashCode();
      Complex complex4 = complex0.log();
      Complex.valueOf(2042.2585282285);
      complex3.INF.pow((double) 58);
      complex4.sqrt();
      Complex complex5 = complex2.tan();
      complex5.NaN.log();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.atan();
      complex7.INF.cos();
      complex6.multiply((double) 244);
      Complex complex8 = complex7.acos();
      complex4.asin();
      complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.61214295225E-15, (-20.0));
      Complex.valueOf((-20.0), 1.61214295225E-15);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex4.exp();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.I.multiply(748);
      complex7.I.conjugate();
      Complex complex8 = complex3.divide(complex2);
      Complex complex9 = complex3.multiply(0);
      complex9.I.asin();
      complex5.sqrt();
      complex1.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf(6.283185307179586);
      complex1.multiply(0);
      complex5.add(Double.POSITIVE_INFINITY);
      complex3.log();
      complex4.pow(complex7);
      complex8.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5290.0, Double.POSITIVE_INFINITY);
      complex0.NaN.reciprocal();
      complex0.acos();
      Complex complex1 = complex0.tan();
      complex1.INF.reciprocal();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(3.2242859045E-15, 3.2242859045E-15);
      Complex complex1 = complex0.acos();
      complex1.ONE.exp();
      complex1.tan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1808.22, 1808.22);
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(1808.22, 1808.22);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tan();
      complex2.INF.tan();
      complex2.sqrt1z();
      complex4.abs();
      complex3.nthRoot(1437);
      complex4.subtract(complex0);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.log();
      complex1.divide(complex0);
      complex1.reciprocal();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.pow(complex2);
      complex4.multiply(2348.490211614217);
      complex1.tanh();
      complex3.toString();
      Complex.valueOf((-1222.542), 3.5306502960727705E247);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(1635.19);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.divide(complex0);
      complex4.reciprocal();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex3.add(complex1);
      complex1.pow(complex5);
      complex6.pow(complex0);
      complex3.getField();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.ONE;
      complex7.negate();
      Complex complex8 = new Complex(1635.19, 1635.19);
      complex8.tanh();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1.9287515190177685E-7), (-1.9287515190177685E-7));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.multiply((-1.9287515190177685E-7));
      Complex complex4 = complex1.negate();
      complex4.tanh();
      complex3.toString();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(63.6, Double.NaN);
      complex0.I.readResolve();
      Complex complex1 = complex0.divide(0.5403023058681398);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ONE.log();
      complex3.ONE.abs();
      Complex complex4 = complex1.NaN.exp();
      complex4.ZERO.log();
      complex0.NaN.getArgument();
      complex0.ONE.add(Double.NaN);
      Complex complex5 = Complex.valueOf(4.983162653734032E-222, 0.4818955063819885);
      complex5.I.sqrt1z();
      complex0.nthRoot(2141150844);
      Complex complex6 = complex2.divide((double) 2141150844);
      complex6.INF.nthRoot(2141150844);
      complex1.log();
      complex0.subtract(1.3810978455418157);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(complex0);
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1808.22, 5.34230278107224E-184);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.I;
      complex3.nthRoot(830);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = Complex.NaN;
      complex4.pow(complex5);
      Complex complex6 = complex1.pow(complex0);
      complex2.getField();
      complex2.createComplex(214.624, 1808.22);
      complex2.conjugate();
      complex5.multiply(Double.NaN);
      complex6.negate();
      Complex complex7 = complex4.tanh();
      complex7.toString();
      Complex complex8 = Complex.ONE;
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-4.0151502150238136E-8), (-4.0151502150238136E-8));
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.INF.atan();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1459.577, 1459.577);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(6.283185307179586);
      Complex complex3 = complex2.tanh();
      complex3.toString();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.sqrt1z();
      complex5.asin();
      complex1.tan();
      complex3.negate();
      Complex complex6 = Complex.ZERO;
      complex6.toString();
      complex0.pow(1459.577);
      Complex.valueOf(1459.577);
      complex3.tan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(1259.339677122114);
      Complex complex1 = complex0.divide(1259.339677122114);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(1259.339677122114);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex1.NaN.divide(complex0);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex5.NaN.sqrt1z();
      complex0.nthRoot(830);
      Complex complex8 = complex0.add(complex1);
      complex3.ONE.pow(complex2);
      Complex complex9 = complex8.NaN.pow(complex3);
      complex5.getField();
      Complex complex10 = complex7.createComplex(214.624, 830);
      complex10.ZERO.conjugate();
      complex8.ONE.multiply(Double.NaN);
      complex8.ONE.negate();
      Complex complex11 = complex4.tanh();
      complex4.toString();
      Complex complex12 = complex9.sqrt1z();
      complex12.asin();
      complex7.tan();
      complex11.ZERO.negate();
      complex6.toString();
      Complex complex13 = new Complex(214.624, Double.NaN);
      Complex.valueOf((-9.457084582570225E263));
      complex11.tan();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(228432.9935341923, 228432.9935341923);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(complex1);
      complex1.negate();
      Complex complex3 = complex2.divide(228432.9935341923);
      Complex complex4 = complex3.I.reciprocal();
      complex4.sqrt();
      complex2.cosh();
      complex0.divide(228432.9935341923);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = new Complex(20.0);
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.acos();
      complex4.acos();
      Complex complex6 = complex2.divide(20.0);
      complex6.exp();
      complex5.asin();
      Complex complex7 = Complex.NaN;
      complex7.tan();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095, 4.607187019879158E28);
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = new Complex((-1709238.098872765), 0.0);
      complex1.INF.pow(complex2);
      complex1.toString();
      complex1.ONE.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.tan();
      complex3.toString();
      Complex complex5 = Complex.valueOf(2.414213562373095);
      Complex complex6 = complex5.INF.divide(complex4);
      complex6.cosh();
      Complex complex7 = complex5.ZERO.conjugate();
      complex0.sinh();
      Complex complex8 = complex5.tan();
      complex8.ZERO.readResolve();
      complex5.INF.getField();
      Complex complex9 = complex0.divide(0.0);
      complex9.ONE.readResolve();
      complex7.asin();
      complex3.log();
//      try { 
        complex8.nthRoot((-876));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -876
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.INF.divide((-234.3256248085223));
      complex2.ZERO.abs();
      complex1.NaN.sinh();
      complex1.NaN.subtract(complex0);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(477.947689119);
      complex0.acos();
      Complex complex1 = complex0.multiply((-1783));
      complex1.getImaginary();
      complex1.getReal();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = Complex.INF;
      complex1.divide(complex4);
      complex0.tanh();
      Complex complex5 = complex4.subtract(complex0);
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1032.0069493, 1032.0069493);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.acos();
      complex3.abs();
      complex0.divide(1032.0069493);
      complex2.exp();
      complex1.negate();
      Complex complex5 = Complex.INF;
      complex5.negate();
      Complex complex6 = Complex.ONE;
      Complex.valueOf((-15.41105060777));
      Complex complex7 = complex6.tan();
      complex4.tanh();
      complex2.acos();
      Complex complex8 = Complex.INF;
      complex4.nthRoot(2258);
      Complex complex9 = new Complex((-15.41105060777), (-890.64208539));
      complex2.multiply(complex9);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply((-162.153959471));
      Complex.valueOf(5.34230278107224E-184);
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1564.1640150001, 1753.74);
      Complex complex1 = complex0.sin();
      complex1.cos();
      Complex complex2 = complex0.acos();
      complex0.acos();
      complex1.divide(1.5574076175689697);
      complex2.exp();
      complex2.asin();
      complex0.tan();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(1021, (-17.76458127));
      Complex complex3 = complex0.multiply(complex2);
      complex0.sinh();
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-720.65), (-720.65));
      complex0.abs();
      Complex complex1 = Complex.valueOf(2165.455267103381);
      Complex complex2 = complex1.subtract((-3312.7462248163));
      Complex complex3 = complex2.ONE.multiply(complex1);
      complex3.I.toString();
      Complex complex4 = complex0.createComplex(2165.455267103381, 1.3017010688781738);
      Complex complex5 = complex4.I.add(2165.455267103381);
      complex0.ONE.toString();
      Complex complex6 = Complex.valueOf(4.2046187038837375E-8);
      complex4.negate();
      Complex complex7 = complex0.acos();
      complex7.readResolve();
      complex7.NaN.pow(complex1);
      Complex complex8 = complex7.negate();
      complex8.INF.multiply((-720.65));
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex9.pow(complex0);
      complex10.sin();
      Complex.valueOf(2165.455267103381, 2279.63311);
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex6.atan();
      Complex complex13 = complex7.multiply(complex5);
      complex11.add(complex1);
      complex13.tanh();
      complex4.divide(0.0);
      complex12.multiply((-3312.7462248163));
      complex11.tanh();
      complex13.toString();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-4.0151502150238136E-8), (-4.0151502150238136E-8));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.ZERO.reciprocal();
      complex0.multiply(501.3993023131227);
      Complex complex2 = Complex.INF;
      complex1.divide(complex2);
      Complex complex3 = Complex.INF;
      Complex.valueOf(1914.9469746960046);
      complex2.getImaginary();
      complex0.add(1120.336);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.ONE.sin();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.acos();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex1.tan();
      complex1.tanh();
      complex6.exp();
      complex7.divide(690.0);
      complex3.multiply(3910);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf((-4531024.862376553));
      complex2.asin();
      Complex complex3 = complex2.asin();
      complex0.tan();
      complex1.tanh();
      Complex complex4 = Complex.INF;
      complex0.nthRoot(912);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.ONE.sin();
      complex0.ZERO.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.acos();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.negate();
      complex3.asin();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex5.createComplex(736.5892899572215, 20.0);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex11 = complex6.multiply(complex7);
      Complex complex12 = complex11.sqrt();
      complex8.atan();
      complex6.readResolve();
      complex0.equals(complex10);
      complex9.abs();
      complex7.nthRoot(1448);
      complex3.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.ZERO;
      complex4.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ZERO.negate();
      complex6.I.negate();
      complex6.INF.asin();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.ZERO.createComplex(736.5892899572215, 20.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf((-4468.8842225));
      complex9.ZERO.multiply(complex6);
      complex3.NaN.sqrt();
      complex1.atan();
      Complex complex10 = Complex.INF;
      complex8.exp();
      complex6.divide(1.0143022354947225E63);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex.valueOf(20.0);
      complex0.asin();
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(476.6);
      complex1.tanh();
      Complex complex3 = Complex.INF;
      complex3.ZERO.sinh();
      complex0.exp();
      complex0.divide(1.0);
      complex2.createComplex((-2777.60126), 1.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.tanh();
      Complex complex1 = complex0.cos();
      complex0.acos();
      Complex complex2 = new Complex((-4531024.862376553), (-4531024.862376553));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.divide((-4531024.862376553));
      Complex complex5 = complex1.exp();
      Complex complex6 = complex3.negate();
      complex5.negate();
      complex1.asin();
      Complex complex7 = complex3.tan();
      complex0.createComplex(276.7, 276.7);
      Complex.valueOf(276.7);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.ZERO;
      complex8.multiply(complex6);
      Complex complex9 = complex4.sqrt();
      complex9.atan();
      complex6.readResolve();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex3.equals(complex10);
      complex7.abs();
      Complex complex11 = new Complex(736.5892899572215);
      complex11.nthRoot(2083);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ZERO;
      complex1.readResolve();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = new Complex(Double.NaN);
      complex4.tanh();
      Complex complex5 = Complex.INF;
      complex3.exp();
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.ONE.tan();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.INF;
      complex0.nthRoot(237);
      complex0.multiply(complex2);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.ONE.sin();
      complex0.ZERO.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.acos();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.negate();
      complex5.I.negate();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex2.tan();
      complex7.ZERO.createComplex(736.5892899572215, 20.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf((-4468.8842225));
      complex8.ZERO.multiply(complex5);
      complex2.NaN.sqrt();
      complex1.atan();
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      complex7.abs();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex1.subtract(Double.NaN);
      Object object1 = complex2.readResolve();
      complex10.equals(object1);
      complex9.sinh();
      complex5.acos();
      complex10.abs();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply((-1340));
      Complex complex3 = complex2.multiply(4610);
      complex1.divide(complex0);
      complex3.pow((double) 4610);
      Complex.valueOf((-454.194037), 1.7976931348623157E308);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.multiply(7);
      Complex complex2 = complex1.multiply((-979));
      complex2.divide(complex1);
      Complex.valueOf(1719.553818, 1719.553818);
      complex1.INF.asin();
      complex0.pow((double) 7);
      complex1.toString();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf((-4531024.862376553));
      Complex complex3 = complex2.asin();
      complex1.divide((double) 7);
      Complex complex4 = complex3.divide((double) 7);
      complex4.isInfinite();
      complex2.add((-2934.9212731879));
      Complex complex5 = Complex.INF;
      complex3.divide(complex5);
      Complex complex6 = Complex.INF;
      complex6.nthRoot(1448);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.tanh();
      complex2.exp();
      complex2.readResolve();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = Complex.valueOf((-1.5704641365984162));
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.I;
      complex5.divide((-3323.52501192));
      complex4.divide((-1.5704641365984162));
      Complex complex6 = Complex.NaN;
      complex6.isInfinite();
      Complex complex7 = complex1.add((-3323.52501192));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.divide(complex3);
      complex6.nthRoot(1425);
      complex7.multiply(complex8);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1505.1619285606039), (-1505.1619285606039));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.divide((-20.0));
      Complex complex4 = complex3.multiply((-20.0));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex4.acos();
      complex2.abs();
      Complex.valueOf(1.883511811213715E-8, (-1291.68));
      Complex complex8 = complex7.sin();
      complex2.pow((-1291.68));
      complex8.toString();
      complex5.sqrt1z();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3123.9836164, (-1468.393917));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.divide((-20.0));
      Complex complex5 = Complex.I;
      complex4.ZERO.getArgument();
      Complex complex6 = complex5.multiply(20.0);
      Complex complex7 = complex6.atan();
      complex6.subtract(complex1);
      complex0.acos();
      complex4.abs();
      Complex complex8 = Complex.valueOf(3123.9836164, 0.0);
      complex7.sin();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.pow(0.0);
      complex8.toString();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.sqrt1z();
      Complex complex1 = Complex.ONE;
      complex1.tanh();
      Complex complex2 = Complex.valueOf((-1149.3681));
      complex2.sinh();
      Complex complex3 = Complex.valueOf((-1149.3681));
      complex3.subtract(825.6122998574971);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = new Complex(20.0);
      complex1.tanh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.exp();
      complex4.add(20.0);
      complex2.getArgument();
      Complex complex5 = complex3.divide(20.0);
      Complex complex6 = complex5.negate();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.subtract(complex1);
      complex1.subtract(complex2);
      complex2.abs();
      complex3.readResolve();
      complex3.toString();
      int int0 = 348;
      int int1 = 5578;
      // Undeclared exception!
      complex1.nthRoot(5578);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(760.651501);
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.ZERO;
      complex1.isNaN();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.divide(complex3);
      complex4.cosh();
      complex4.getField();
      complex0.subtract((-339.111464));
      complex3.subtract(complex1);
      complex2.isInfinite();
      complex3.getArgument();
      complex5.createComplex(0.42863214015960693, 0.0);
      Complex complex6 = complex0.divide((-339.111464));
      complex6.INF.nthRoot(1392);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1792.79432));
      Complex complex1 = complex0.I.asin();
      complex0.isNaN();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.I.conjugate();
      complex6.ONE.tan();
      Complex complex7 = complex2.INF.subtract(complex1);
      complex7.ZERO.subtract(complex2);
      complex7.INF.abs();
      Complex complex8 = (Complex)complex2.INF.readResolve();
      complex2.toString();
      complex0.nthRoot(348);
      complex1.getArgument();
      complex3.isInfinite();
      Complex complex9 = complex4.multiply((-2045222521));
      complex6.divide(complex9);
      complex1.pow((-1792.79432));
      complex2.toString();
      complex8.subtract((-2190.569594855));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-2812.9863028014584));
      complex0.ONE.tanh();
      Complex complex1 = Complex.NaN;
      complex0.tan();
      Complex complex2 = new Complex((-678.296864228));
      Complex complex3 = new Complex((-1882.51500941), (-2812.9863028014584));
      complex3.tanh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.ONE;
      complex6.divide(6.283185307179586);
      complex5.negate();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-2812.9863028014584));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.ONE;
      complex2.atan();
      Complex complex4 = complex1.subtract(complex3);
      complex3.acos();
      Complex complex5 = Complex.ZERO;
      complex5.abs();
      Complex.valueOf((-3436.9286242284), (-1154.9));
      complex4.sin();
      Complex complex6 = Complex.valueOf(2812.9863028014584);
      complex6.pow(0.0);
      Complex complex7 = Complex.ZERO;
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(338.1047453000623);
      Complex complex1 = complex0.NaN.atan();
      complex0.nthRoot(766);
      complex0.sinh();
      Complex complex2 = complex0.sqrt();
      complex2.INF.readResolve();
      Complex complex3 = complex2.ZERO.multiply((double) 766);
      complex3.NaN.subtract((-1.5723449006087263E-7));
      Complex complex4 = (Complex)complex1.readResolve();
      Complex complex5 = Complex.valueOf(1759.0, (-1.5723449006087263E-7));
      complex5.multiply(766);
      Complex complex6 = Complex.ZERO;
      complex6.divide(complex1);
      Complex complex7 = complex2.pow((-711.45614514));
      complex7.toString();
      complex4.subtract(9.786159073245408E16);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-2812.9863028014584));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.multiply(2291);
      complex1.multiply(844);
      Complex complex4 = complex2.divide(complex3);
      complex3.pow(1732.13);
      complex2.toString();
      complex4.subtract(143.91723113900235);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1505.1619285606039), 0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = complex2.multiply((-20.0));
      complex3.subtract(complex0);
      Complex complex4 = complex3.acos();
      complex3.getField();
      complex2.ONE.abs();
      Complex complex5 = new Complex((-4.310345627800416E-4), (-4.310345627800416E-4));
      Complex complex6 = complex1.add(complex5);
      complex4.createComplex((-4.310345627800416E-4), 1830.619246);
      complex6.hashCode();
      Complex complex7 = new Complex((-1505.1619285606039), 5857.527021346964);
      complex7.cosh();
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(338.1047453000623);
      Complex complex1 = complex0.NaN.atan();
      complex0.nthRoot(766);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = (Complex)complex3.INF.readResolve();
      complex4.multiply(complex3);
      Complex complex5 = complex3.ZERO.multiply((double) 766);
      complex5.NaN.subtract((-1.5723449006087263E-7));
      complex1.readResolve();
      complex0.cosh();
      complex2.toString();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.pow(complex0);
      complex8.I.subtract((-547.832990942));
      complex2.equals("(3.4355414560255764E146, 0.0)");
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(338.1047453000623);
      Complex complex1 = complex0.NaN.atan();
      complex0.nthRoot(766);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = (Complex)complex3.INF.readResolve();
      Complex complex5 = complex3.ZERO.multiply((double) 766);
      Complex complex6 = complex5.NaN.subtract((-1.5723449006087263E-7));
      complex1.readResolve();
      complex0.cosh();
      complex2.toString();
      Complex complex7 = complex2.pow(0.0);
      Complex complex8 = complex1.cosh();
      complex8.ONE.subtract(complex6);
      Complex complex9 = complex0.multiply((-925241));
      Complex complex10 = complex9.asin();
      complex10.pow(complex7);
      complex4.add(1019.6924);
      complex6.cos();
      Complex complex11 = Complex.I;
      complex11.subtract(2265511.4311882765);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex6.add((-2812.9863028014584));
      Complex complex9 = complex1.sinh();
      complex5.sqrt1z();
      complex0.abs();
      complex8.negate();
      complex1.createComplex(0.0, 2086.0);
      Complex complex10 = complex0.multiply(0);
      complex7.asin();
      complex0.pow(complex7);
      complex10.add((double) 0);
      Complex complex11 = Complex.ONE;
      complex9.subtract((-2812.9863028014584));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(1286.6, (-1976.139561));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply(1);
      complex1.I.cosh();
      Complex complex2 = complex0.sqrt1z();
      complex2.abs();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.createComplex((-1.0), 0.0);
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex1.asin();
      complex4.pow(complex1);
      complex5.add((-2293.58));
      complex3.cos();
      complex1.subtract((-2293.58));
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.NaN.multiply((-4072));
      complex4.sqrt1z();
      complex3.abs();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      Complex complex7 = complex2.multiply(1823);
      complex5.asin();
      complex7.pow(complex4);
      complex6.add(0.0);
      complex1.cos();
      complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.NaN.atan();
      complex1.multiply((-555));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.atan();
      complex0.multiply((-555));
      Complex complex6 = Complex.valueOf((-682.1679));
      complex2.divide(complex6);
      complex0.pow((double) (-555));
      complex4.toString();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.I.atan();
      complex1.INF.tan();
      complex1.INF.sqrt();
      complex1.ONE.toString();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.conjugate();
      complex0.NaN.getArgument();
      Complex complex6 = complex5.INF.divide(1.0);
      Complex complex7 = complex5.add(1731.2859346194);
      complex5.conjugate();
      complex7.NaN.getField();
      Complex complex8 = complex6.add(complex4);
      Object object0 = complex7.readResolve();
      complex5.equals(object0);
      complex8.getReal();
      Complex complex9 = complex3.multiply(complex0);
      complex0.divide(1.0);
      complex9.negate();
      Complex complex10 = complex5.divide(433.32688678855);
      Complex complex11 = complex0.asin();
      complex11.INF.negate();
      complex11.ZERO.readResolve();
      complex2.getArgument();
      complex2.exp();
      complex4.divide(Double.NaN);
      complex5.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-2812.9863028014584));
      complex0.ONE.tanh();
      complex0.exp();
      Complex complex1 = new Complex(0.02501564456182237);
      Complex complex2 = complex0.subtract(complex1);
      complex2.asin();
      Complex complex3 = Complex.NaN;
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(477.947689119);
      Complex complex1 = complex0.sqrt();
      complex0.tan();
      Complex complex2 = complex0.add(477.947689119);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.sqrt1z();
      complex4.abs();
      complex3.negate();
      complex2.createComplex(1.454991340637207, Double.NaN);
      complex3.asin();
      Complex complex5 = Complex.I;
      complex5.pow(complex2);
      complex3.cos();
      complex5.subtract(477.947689119);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(760.651501);
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex(225.0);
      complex3.exp();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-2812.9863028014584));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.exp();
      complex1.readResolve();
      complex0.equals(complex1);
      Complex complex3 = Complex.valueOf((-3323.52501192));
      Complex complex4 = complex2.asin();
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.INF.sqrt();
      complex1.ONE.toString();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex0.conjugate();
      complex0.NaN.getArgument();
      Complex complex8 = complex7.INF.divide(1.0);
      Complex complex9 = complex7.add(1731.2859346194);
      complex9.NaN.getField();
      Complex complex10 = complex8.add(complex6);
      Object object0 = complex9.readResolve();
      complex7.equals(object0);
      complex10.getReal();
      Complex complex11 = complex9.negate();
      complex2.getArgument();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex5.readResolve();
      Complex complex12 = complex8.tanh();
      complex8.pow(0.0);
      complex3.sqrt();
      Complex complex13 = Complex.ONE;
      complex13.divide(complex12);
      complex12.equals(complex5);
      complex0.isNaN();
      Complex complex14 = complex2.exp();
      complex7.pow(1.0);
      complex14.divide(3491.487315983447);
      complex7.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.INF.atan();
      Complex complex2 = complex0.multiply(1.6023339607737848E-7);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.ONE.add(complex1);
      Complex complex6 = complex2.conjugate();
      complex3.hashCode();
      complex6.pow((-3168.744689211));
      Complex complex7 = Complex.NaN;
      complex7.isNaN();
      Complex complex8 = new Complex((-3168.744689211), 1.6023339607737848E-7);
      complex8.conjugate();
      Complex complex9 = complex6.reciprocal();
      complex8.multiply(3.79899412);
      complex2.sinh();
      Complex complex10 = Complex.NaN;
      complex5.subtract(complex4);
      Complex.valueOf((-3168.744689211), 1.6023339607737848E-7);
      complex9.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-1505.1619285606039), (-1505.1619285606039));
      Complex complex1 = complex0.I.reciprocal();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = complex2.multiply((-20.0));
      complex3.atan();
      Complex complex4 = complex3.subtract(complex0);
      complex3.acos();
      complex2.ONE.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.NaN.sin();
      complex4.pow(979.47300363);
      complex6.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-43.8776406023771), 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.I.divide((-43.8776406023771));
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.I.add(complex2);
      complex4.isInfinite();
      complex1.abs();
      Complex complex6 = complex4.divide((-43.8776406023771));
      complex6.getArgument();
      complex3.toString();
      complex0.isInfinite();
      complex3.getImaginary();
      Complex complex7 = Complex.valueOf(325.8005);
      complex5.exp();
//      try { 
        complex7.nthRoot((-836));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -836
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ONE.pow(0.0);
      Complex complex2 = new Complex(404.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex4.add(complex0);
      complex6.ONE.multiply(complex1);
      Complex complex8 = complex0.sqrt1z();
      complex8.ONE.toString();
      Complex complex9 = complex3.ZERO.sinh();
      complex6.INF.add(complex4);
      Complex complex10 = complex6.createComplex(2.0, 2.0);
      complex10.readResolve();
      complex10.getField();
      complex3.getReal();
      complex7.log();
      complex9.createComplex(404.0, (-801.89716267));
      complex10.conjugate();
      complex2.toString();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.multiply((-3993));
      Complex complex4 = complex3.NaN.multiply(1.203278237867575E-265);
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex5.NaN.pow(complex3);
      complex5.abs();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex1.multiply((-555));
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex2.subtract(complex8);
      complex11.tanh();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex12.ZERO.sqrt();
      complex9.NaN.multiply(complex6);
      complex2.ZERO.abs();
      complex9.ZERO.reciprocal();
      complex9.ZERO.hashCode();
      Complex complex14 = complex9.log();
      complex14.sqrt();
      complex4.readResolve();
      complex2.pow((double) (-555));
      complex5.conjugate();
      complex13.hashCode();
      complex4.pow((-3168.744689211));
      complex9.isNaN();
      complex12.conjugate();
      Complex complex15 = complex7.reciprocal();
      complex11.multiply(1.203278237867575E-265);
      complex1.sinh();
      Complex complex16 = Complex.NaN;
      complex15.subtract(complex16);
      Complex complex17 = Complex.valueOf(0.0, 0.0);
      complex7.subtract(complex17);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-2812.9863028014584));
      complex0.ONE.tanh();
      Complex complex1 = complex0.exp();
      complex1.I.divide(0.0);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1065.0);
      Complex complex1 = Complex.valueOf(1065.0, 1065.0);
      Complex complex2 = complex1.NaN.sqrt();
      complex1.I.pow(complex2);
      complex2.ZERO.toString();
      Complex complex3 = complex0.add(54.858);
      Complex complex4 = complex3.exp();
      complex4.createComplex(54.858, 0.0);
      complex4.INF.negate();
      Complex complex5 = complex0.pow(complex3);
      complex5.ZERO.asin();
      Complex complex6 = complex3.asin();
      complex6.I.acos();
      Complex.valueOf(54.858);
      Complex complex7 = complex1.tanh();
      complex2.getReal();
      Complex complex8 = complex5.asin();
      complex7.add(1065.0);
      complex3.divide(complex7);
      complex8.abs();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.asin();
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.divide(0.0);
      complex1.add(complex0);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex8.divide(complex5);
      complex8.NaN.tan();
      complex9.subtract(complex2);
      Complex.valueOf((-1.4494150014095534E-8));
      complex7.INF.sinh();
      complex6.I.sinh();
      Complex complex10 = complex1.sin();
      complex6.getArgument();
      complex1.ZERO.log();
      complex10.INF.conjugate();
      complex10.nthRoot(476);
      complex1.nthRoot(476);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply(1);
      complex1.I.cosh();
      complex1.ONE.subtract((double) 1);
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.add(complex0);
      complex0.negate();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.conjugate();
      complex1.I.getArgument();
      Complex complex3 = complex0.I.cosh();
      complex3.NaN.cosh();
      complex0.isInfinite();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.negate();
      complex5.NaN.toString();
      complex5.INF.cosh();
      complex4.abs();
      Complex.valueOf(1.5707963267948966, Double.NaN);
      complex1.isNaN();
      complex0.divide(complex1);
      complex2.atan();
      Complex complex6 = complex4.sqrt();
      complex6.isNaN();
      complex6.sinh();
      complex2.createComplex(6.283185307179586, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.log();
      complex1.I.atan();
      Complex complex2 = complex1.pow((-20.0));
      Complex complex3 = complex2.INF.pow(complex0);
      complex1.getReal();
      complex0.toString();
      complex1.ONE.add(complex3);
      complex0.createComplex(0.4500300884246826, 456.9534092671038);
      Complex.valueOf(2.677136737066629E238, (-4965.45494));
      complex2.getArgument();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.NaN.sqrt1z();
      complex4.INF.cos();
      Complex complex5 = complex3.NaN.divide(complex1);
      complex5.NaN.readResolve();
      complex3.cosh();
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex6.I.sin();
      complex3.hashCode();
      complex1.negate();
      complex7.hashCode();
      complex2.abs();
      complex6.readResolve();
      complex2.pow((-717.869819));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(2102.181, 2102.181);
      complex0.ONE.sqrt();
      complex0.getReal();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.I.atan();
      complex1.INF.tan();
      complex1.INF.sqrt();
      complex1.ONE.toString();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.conjugate();
      complex0.NaN.getArgument();
      Complex complex6 = complex5.INF.divide(1.0);
      Complex complex7 = complex5.add(1731.2859346194);
      complex7.NaN.getField();
      Complex complex8 = complex6.add(complex4);
      Object object0 = complex7.readResolve();
      complex5.equals(object0);
      complex8.getReal();
      Complex complex9 = complex3.multiply(complex0);
      complex0.divide(1.0);
      complex9.negate();
      complex5.divide(433.32688678855);
      Complex complex10 = complex0.asin();
      complex10.INF.negate();
      complex10.ZERO.readResolve();
      complex2.getArgument();
      complex2.exp();
      complex8.add((-2899.48));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.INF.atan();
      Complex complex2 = complex0.multiply(1.6023339607737848E-7);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.ONE.add(complex1);
      complex5.ONE.createComplex(1.6023339607737848E-7, 1.6023339607737848E-7);
      complex3.hashCode();
      complex2.cosh();
      complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-747.14964629));
      complex0.ONE.cos();
      Complex complex1 = complex0.sin();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-1792.79432));
      Complex complex1 = complex0.I.asin();
      complex0.isNaN();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.I.negate();
      complex2.ONE.cos();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.I.conjugate();
      complex5.ONE.tan();
      Complex complex6 = complex2.INF.subtract(complex1);
      Complex complex7 = complex6.ZERO.subtract(complex2);
      complex6.INF.abs();
      Object object0 = complex2.INF.readResolve();
      complex2.toString();
      complex0.nthRoot(348);
      complex1.getArgument();
      complex3.isInfinite();
      Complex complex8 = complex1.negate();
      complex8.I.cos();
      complex8.cos();
      complex7.ONE.sqrt1z();
      Complex complex9 = complex0.negate();
      complex9.ONE.getArgument();
      Complex complex10 = complex2.tanh();
      complex7.readResolve();
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = complex1.pow(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex13 = complex12.divide(complex10);
      complex4.equals(object0);
      complex6.isNaN();
      complex13.exp();
      complex12.pow(0.0);
      complex11.divide(0.0);
      complex13.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-997.5386848582), (-997.5386848582));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.INF.abs();
      complex0.getArgument();
      complex0.I.nthRoot(1);
      complex1.ZERO.hashCode();
      complex0.getArgument();
      Complex complex3 = complex0.divide((-2.356194490192345));
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex2.createComplex(752.39, 1);
      Complex complex6 = complex3.NaN.sinh();
      complex3.nthRoot(1);
      complex3.NaN.exp();
      complex5.INF.exp();
      Complex complex7 = complex2.multiply(354);
      Complex complex8 = complex5.INF.cos();
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex10.ZERO.add(complex8);
      complex5.getReal();
      complex10.getArgument();
      complex4.isNaN();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex12.ONE.pow(complex2);
      Complex.valueOf(752.39);
      complex12.equals(complex11);
      complex9.getReal();
      complex7.NaN.sqrt1z();
      complex6.acos();
      complex6.cosh();
      complex13.sqrt();
      complex6.multiply(2.0);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.negate();
      complex0.ONE.acos();
      Complex complex3 = complex2.INF.add(complex0);
      complex0.I.tanh();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex1.NaN.negate();
      complex1.sqrt1z();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.INF.reciprocal();
      complex6.createComplex(0.0, 0.0);
      Complex complex9 = complex4.pow(1.186914813275767E-8);
      complex9.NaN.acos();
      complex7.readResolve();
      Complex complex10 = complex5.exp();
      complex9.tan();
      Complex complex11 = complex10.divide(0.0);
      complex11.divide(0.0);
      complex3.isInfinite();
      complex10.add(0.0);
      complex1.divide(complex9);
      complex8.nthRoot(1464);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(522.19660210255);
      Complex complex2 = complex0.atan();
      complex2.INF.readResolve();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.sqrt();
      complex4.ONE.subtract(522.19660210255);
      complex2.divide(659.91177658071);
      Complex complex5 = complex3.I.multiply((-1.0));
      complex5.ONE.asin();
      Complex complex6 = complex1.pow(522.19660210255);
      complex2.readResolve();
      Complex complex7 = complex0.reciprocal();
      complex4.negate();
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-2938.0439444134477);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      complex0.add((-2938.0439444134477));
      double double1 = 506.22;
      Complex complex3 = complex2.INF.divide(506.22);
      int int0 = 0;
//      try { 
        complex3.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.tan();
      complex2.NaN.getField();
      complex2.INF.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex5.ZERO.sqrt();
      complex6.I.tan();
      Complex complex7 = complex0.add(20.0);
      complex3.sinh();
      complex1.sqrt1z();
      complex2.ONE.abs();
      complex0.NaN.negate();
      Complex complex8 = complex2.createComplex(0.0, 0.0);
      Complex complex9 = complex0.multiply(0);
      complex9.NaN.asin();
      complex3.pow(complex8);
      complex7.add(1.0);
      complex0.cos();
      complex4.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.NaN.cos();
      Complex.valueOf(609.99188508374, (-1157.1302074622472));
      complex3.ZERO.asin();
      complex2.readResolve();
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 179.27532);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-1505.1619285606039), 0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = complex2.multiply((-20.0));
      Complex complex4 = complex3.subtract(complex0);
      complex3.acos();
      complex2.ONE.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.NaN.sin();
      Complex complex6 = new Complex((-3265.2003957532));
      complex4.subtract(complex6);
      complex4.asin();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.divide(819.949002);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex0.I.exp();
      Complex complex3 = complex2.I.sinh();
      complex0.getReal();
      complex1.getReal();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.add(complex0);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(477.947689119);
      Complex complex1 = complex0.acos();
      complex1.NaN.negate();
      complex0.multiply((-1783));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex2.sin();
      complex0.getField();
      complex1.ZERO.atan();
      Complex complex3 = complex0.exp();
      complex2.isNaN();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex5.INF.cosh();
      complex4.I.getField();
      Complex complex7 = complex4.subtract(0.42863214015960693);
      complex5.subtract(complex0);
      complex2.isInfinite();
      complex3.getArgument();
      complex0.createComplex(Double.NaN, Double.NaN);
      complex7.readResolve();
      complex6.equals(complex4);
      Complex complex8 = Complex.valueOf((-3805.75039));
      complex8.ONE.asin();
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(338.1047453000623);
      Complex complex1 = complex0.NaN.atan();
      complex0.nthRoot(766);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sqrt();
      complex3.INF.readResolve();
      Complex complex4 = complex3.ZERO.multiply((double) 766);
      complex4.NaN.subtract((-1.5723449006087263E-7));
      complex1.readResolve();
      complex0.cosh();
      complex2.toString();
      complex2.pow(0.0);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.pow(complex0);
      complex6.I.subtract((-547.832990942));
      complex2.equals("(3.4355414560255764E146, 0.0)");
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.NaN.atan();
      complex0.NaN.multiply((-4072));
      complex1.ONE.multiply((-4072));
      Complex complex3 = complex0.I.divide(complex1);
      complex0.pow((-1.692337384653611E-8));
      complex3.toString();
      complex3.subtract((double) (-4072));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.NaN.sqrt();
      complex2.ZERO.atan();
      complex0.isInfinite();
      Complex complex3 = complex0.add(804.728);
      complex3.ONE.negate();
      Complex complex4 = complex3.subtract(complex0);
      complex4.pow(complex0);
      complex3.getArgument();
      complex4.createComplex(804.728, 1.7177785285061278E-7);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.NaN.cos();
      complex1.ONE.cosh();
      complex0.cos();
//      try { 
        complex0.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(3360.194052679988);
      complex0.ZERO.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.tan();
      complex2.multiply(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex4.ONE.pow(3360.194052679988);
      complex5.ZERO.tanh();
      complex4.I.sin();
      Complex complex6 = complex3.divide((-2031.9113));
      complex6.INF.add(complex3);
      complex0.isInfinite();
      Complex complex7 = complex1.pow(3360.194052679988);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.INF.pow(complex2);
      Complex complex10 = complex8.ZERO.sqrt1z();
      Complex complex11 = Complex.valueOf((-2868.8290366519), 3360.194052679988);
      complex11.INF.toString();
      complex6.subtract((-2031.9113));
      Complex complex12 = complex7.tan();
      Complex complex13 = complex10.sqrt();
      complex13.sqrt1z();
      complex9.cos();
      Complex complex14 = Complex.valueOf((-8.663710700190489E-10), 2127.883701888011);
      complex12.sqrt();
//      try { 
        complex14.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4666.58828745);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.exp();
      complex2.ONE.readResolve();
      double double0 = (-665.3151);
      Complex complex3 = complex0.divide((-665.3151));
      Complex complex4 = complex3.NaN.subtract(complex1);
      complex4.ONE.hashCode();
      complex0.ONE.abs();
      Complex complex5 = complex1.add((-665.3151));
      complex3.getReal();
      int int0 = (-3803);
//      try { 
        complex5.nthRoot((-3803));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,803
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ONE.sin();
      complex2.I.abs();
      complex2.INF.getField();
      Complex complex3 = complex0.NaN.sinh();
      Complex.valueOf((-2026.3527751567), 1.0);
      complex3.INF.cos();
      complex3.toString();
      complex1.ONE.exp();
      Complex complex4 = complex0.multiply(0.0);
      complex0.INF.getArgument();
      complex4.toString();
      complex3.NaN.toString();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.multiply(complex0);
      complex2.divide(complex1);
      complex5.log();
      complex6.conjugate();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1731.510011889702), (-1731.510011889702));
      Complex complex1 = complex0.add((-20.0));
      complex0.ZERO.sin();
      complex1.I.toString();
      Complex complex2 = complex0.divide((-2557.880700038693));
      complex0.getField();
      Complex complex3 = complex2.multiply(0);
      complex3.ZERO.subtract((double) 0);
      complex0.log();
      complex1.isInfinite();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(1472);
      Complex complex2 = complex0.exp();
      complex2.NaN.add(complex0);
      complex1.ONE.add((double) 1472);
      complex2.NaN.getArgument();
      Complex complex3 = complex1.exp();
      complex3.I.multiply(1472);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.I.reciprocal();
      complex1.reciprocal();
      Complex complex6 = complex5.ZERO.multiply(Double.NaN);
      Complex complex7 = complex6.NaN.sqrt();
      complex4.ONE.createComplex(0.0, Double.NaN);
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.I.add((double) 1472);
      Complex complex9 = complex5.divide(complex8);
      complex4.ZERO.getField();
      complex8.toString();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex9.multiply(complex10);
      complex11.pow(complex9);
      complex5.toString();
      complex4.getField();
      complex0.tanh();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-855.9));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex2.INF.subtract(complex1);
      assertSame(complex4, complex3);
      assertTrue(complex2.isInfinite());
      
      Complex complex5 = complex0.divide((-20.0));
      Complex complex6 = complex5.INF.exp();
      List<Complex> list0 = complex0.ONE.nthRoot(483);
      assertEquals(483, list0.size());
      assertFalse(list0.contains(complex1));
      
      Complex complex7 = complex0.ONE.multiply((-20.0));
      complex5.I.createComplex(483, (-2078.8093));
      Complex complex8 = complex0.I.multiply(complex1);
      Complex complex9 = complex6.ZERO.sin();
      complex6.I.cos();
      Complex complex10 = complex5.subtract(complex0);
      assertEquals(898.6949999999999, complex10.getImaginary(), 0.01);
      assertEquals(21.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex9.divide((-855.9));
      complex1.getImaginary();
      Complex complex12 = complex5.subtract(0.0);
      complex11.getImaginary();
      assertTrue(complex11.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex12));
      
      Complex complex13 = complex8.asin();
      complex13.equals((Object) null);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex3);
      assertTrue(complex8.equals((Object)complex6));
      
      complex7.readResolve();
      assertFalse(complex7.isInfinite());
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals((-20.0), complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.tan();
      complex3.ZERO.sqrt();
      complex3.I.hashCode();
      Complex complex4 = complex3.sinh();
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.sqrt1z();
      List<Complex> list0 = complex3.nthRoot(1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
      
      Complex complex6 = complex5.NaN.divide((-2316.3));
      complex5.INF.sin();
      complex5.ONE.multiply((-2722));
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.cos();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      
      complex2.cos();
      complex5.sqrt();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex2.createComplex(Double.NaN, (-4234.0));
      assertTrue(complex10.equals((Object)complex6));
      
      Complex complex11 = complex9.multiply((-2722));
      assertEquals((-4239.263826510643), complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
  }
}
