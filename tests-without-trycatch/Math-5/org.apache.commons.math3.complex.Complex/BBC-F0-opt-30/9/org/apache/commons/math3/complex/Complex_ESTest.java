/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:17:51 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(316);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(895.6832);
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply((double) (-5695));
      Complex complex2 = complex1.multiply((-2.1092372471088425E-8));
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.15736119642, 809.15736119642);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(146.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9852866695372031, 3.0224262659085297E-4);
      Complex complex1 = complex0.negate();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.15736119642, 809.15736119642);
      Complex complex1 = complex0.cosh();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-914.518951428347), 0.371698260307312);
      Complex complex1 = new Complex(0.371698260307312, 0.371698260307312);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-914.518951428347), 0.371698260307312);
      Complex complex1 = new Complex((-914.518951428347), 1994.048957167);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6658138.979817301));
      complex0.ZERO.sinh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2720.0, 3708.344014017233);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-914.518951428347), 0.371698260307312);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      Complex complex1 = new Complex((-1258.9247989), 1.4678359031677246);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.15736119642, 809.15736119642);
      Complex complex1 = complex0.I.multiply((-5016));
      Complex complex2 = complex0.asin();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.15736119642, 809.15736119642);
      Complex complex1 = complex0.I.multiply((-5016));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.atan();
      complex1.pow((double) 3466);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5189.24061), (-6658138.979817301));
      complex0.pow(2640.42);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-844.986938), 0.0);
      complex0.I.negate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(3232.35, (-1.0));
      complex0.ONE.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1215.0));
      complex0.multiply(2058);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-2.1092372471088425E-8));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.371698260307312, (-20.0));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.777752790396222E-8));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6658138.979817301), (-2620.78));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      Complex complex1 = complex0.ONE.asin();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6658138.979817301), (-2620.78));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 4338, (double) (-5016));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1377.864933819422), (-1377.864933819422));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.9852866695372031, 3.0224262659085297E-4);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.tanh();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.15736119642, 809.15736119642);
      Complex complex1 = complex0.cosh();
      complex1.divide((double) (-5016));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.15736119642, 809.15736119642);
      complex0.divide((double) (-5016));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-313.678), 1117.81);
      complex0.divide((-841.3833062223927));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(799.7446, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      complex0.createComplex(0.041666666666666664, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5314373779304356E296));
      Complex complex1 = complex0.I.divide(complex0);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-3309.16819), (-3309.16819));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1215.0));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.8414709848078965);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-3309.16819), (-3309.16819));
      Complex complex1 = complex0.atan();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(1.0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2147483036);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-1215.0));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(809.15736119642);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-778.95883633802));
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      Complex complex1 = new Complex(1.4903074102418675E-7, (-3379.4));
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      Complex complex1 = complex0.sinh();
      complex1.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-2.5075557717258246E13));
      Complex complex1 = complex0.createComplex((-365.6), (-2.4641949876562484E13));
      complex1.add(4409.254431);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 8.321226457219046E276);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5314373779304356E296));
      complex0.ONE.acos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1070.8743979359, 136.583845);
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6789862192139226E-8);
      Complex complex1 = complex0.negate();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.8414709848078965);
      complex0.INF.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(0.0);
      complex1.ZERO.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.15736119642, 809.15736119642);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      complex0.INF.abs();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-1215.0));
      complex0.I.abs();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(1885.30214509, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-897.006863586));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      complex0.INF.getArgument();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex.valueOf((-894.233592839064), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 103.5);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.INF.nthRoot(14);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex1.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.nthRoot((-20));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -20
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(809.15736119642);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.433081467456157E13), (-4.433081467456157E13));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.pow((-2164.3848064529284));
      Complex complex2 = complex1.atan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.85437090269903E-263, 4.85437090269903E-263);
      complex0.INF.tan();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex((-2.5075557717258246E13));
      Complex complex1 = complex0.createComplex((-365.6), (-2.4641949876562484E13));
      Complex complex2 = complex1.tan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sqrt();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sinh();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5314373779304356E296));
      complex0.NaN.exp();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.cos();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      Complex complex1 = complex0.NaN.log();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.acos();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.433081467456157E13), (-4.433081467456157E13));
      complex0.subtract((-4211.3466033));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      Complex complex1 = complex0.NaN.log();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(complex0);
      complex1.subtract(799.7446);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6658138.979817301));
      complex0.multiply(2640.42);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095, Double.POSITIVE_INFINITY);
      complex0.multiply((double) 4338);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.multiply((-1708.08918906335));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2188.4489181996, Double.POSITIVE_INFINITY);
      complex0.multiply(1199);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(43);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.041666666666666664, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      complex1.multiply(4338);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(3232.1012347, 2871.335691325);
      Complex complex2 = complex1.cosh();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.valueOf(146.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cosh();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-914.518951428347), 0.371698260307312);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1508.155857324884, 1508.155857324884);
      Complex complex1 = Complex.valueOf(1508.155857324884);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(3016.311714649768, 3016.311714649768);
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1508.155857324884, 1508.155857324884);
      Complex complex1 = complex0.add(complex0);
      Complex complex2 = Complex.valueOf(3016.311714649768, 3016.311714649768);
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6658138.979817301));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = new Complex((-4211.3466033));
      Complex complex1 = complex0.exp();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.valueOf(146.0, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = new Complex((-2.5075557717258246E13));
      Complex complex1 = complex0.INF.atan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf(146.0, Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5314373779304356E296));
      Complex complex1 = Complex.INF;
      complex0.I.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664);
      Complex complex1 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-778.95883633802));
      complex0.ZERO.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3103.6907087244);
      complex0.ZERO.add(3103.6907087244);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3103.6907087244);
      Complex complex1 = complex0.NaN.cosh();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3309.6, 3309.6);
      complex0.NaN.abs();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5314373779304356E296));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3103.6907087244);
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.toString();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = new Complex(809.15736119642);
      // Undeclared exception!
      complex0.nthRoot(2144832948);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.reciprocal();
      assertEquals((-0.6325321700584283), complex3.getImaginary(), 0.01);
  }
}
