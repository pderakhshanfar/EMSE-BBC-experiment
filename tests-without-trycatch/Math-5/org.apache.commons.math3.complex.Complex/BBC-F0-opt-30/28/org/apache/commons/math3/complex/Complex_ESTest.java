/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:13:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2.037139607241041E305);
      complex1.nthRoot(4977);
      complex1.I.tan();
      complex0.readResolve();
      Complex complex2 = new Complex(2.037139607241041E305);
      Complex complex3 = Complex.valueOf((double) 4977);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.220208491349658E43);
      complex0.acos();
      complex0.pow(494205.5326464085);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1.803052068234866E254);
      Complex complex1 = new Complex(6.111556186207666E-4, Double.NaN);
      complex0.add(complex1);
      Complex.valueOf(6.111556186207666E-4, (-5.533523366931846E-8));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.sqrt();
      complex1.tan();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.INF.toString();
      Complex complex2 = complex0.ONE.reciprocal();
      complex2.I.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.INF.divide(0.0);
      Complex complex5 = complex0.INF.sin();
      complex0.ZERO.nthRoot(208);
      complex4.readResolve();
      complex0.toString();
      Complex complex6 = complex4.ZERO.sinh();
      complex6.I.pow((-1837.0));
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.ZERO.pow(0.0);
      complex7.NaN.getField();
      Complex complex9 = complex1.add(complex3);
      complex9.pow(complex5);
      Complex complex10 = complex1.NaN.atan();
      complex1.getReal();
      Complex complex11 = complex7.conjugate();
      complex11.INF.tan();
      Complex complex12 = complex11.atan();
      complex7.NaN.divide((double) 208);
      complex12.conjugate();
      Complex complex13 = complex11.cos();
      complex8.nthRoot(208);
      Complex complex14 = complex2.exp();
      complex14.multiply(complex5);
      Complex complex15 = complex4.multiply(1551.48054543);
      complex5.isInfinite();
      complex15.negate();
      complex10.nthRoot(208);
      complex13.readResolve();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2.0), (-2.0));
      Complex complex1 = Complex.valueOf((-2.0), Double.POSITIVE_INFINITY);
      complex1.sqrt();
      complex1.tan();
      complex1.multiply((-186));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-2.0), (-2.0));
      Complex complex1 = Complex.valueOf((-2.0), Double.POSITIVE_INFINITY);
      Complex.valueOf((-876.907270707));
      Complex.valueOf(422.87);
      complex1.multiply(complex0);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2.0), (-2.0));
      Complex complex1 = Complex.valueOf(251.587, Double.POSITIVE_INFINITY);
      complex1.sqrt();
      Complex complex2 = new Complex((-725.94));
      complex2.tan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2.0), (-2.0));
      Complex complex1 = Complex.valueOf(251.587, Double.POSITIVE_INFINITY);
      complex1.multiply((-2.0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(7);
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-247.61039680133615));
      Complex complex1 = Complex.valueOf((-247.61039680133615), (-4121.45451684507));
      complex0.divide(complex1);
      complex1.pow((-247.61039680133615));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.tanh();
      Complex complex1 = complex0.multiply((-2532));
      Complex complex2 = complex1.asin();
      complex1.ZERO.abs();
      Complex complex3 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.ONE.multiply(complex3);
      complex4.ONE.getArgument();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex.valueOf((-20.0));
      complex5.pow((double) (-2532));
      Complex complex6 = complex0.log();
      complex2.sinh();
      complex5.divide(complex1);
      complex6.asin();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.INF.multiply(complex1);
      Complex complex3 = complex1.INF.subtract(Double.NaN);
      Complex complex4 = complex0.INF.reciprocal();
      complex0.toString();
      Complex complex5 = complex1.sqrt1z();
      complex5.I.getArgument();
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex6.ZERO.cos();
      complex7.I.reciprocal();
      Complex complex8 = complex7.INF.reciprocal();
      complex8.NaN.createComplex(20.0, (-879694.0717477293));
      Complex complex9 = complex6.NaN.sqrt1z();
      Complex complex10 = complex4.reciprocal();
      complex9.INF.conjugate();
      complex10.log();
      Complex complex11 = complex9.multiply(0);
      Complex complex12 = new Complex(1.5707963267948966);
      complex11.INF.divide(complex12);
      Complex complex13 = complex6.multiply(0);
      complex13.ONE.cosh();
      complex9.createComplex(1179.61500712, (-1331.9660769));
      complex3.cosh();
      Complex.valueOf((-2877.0), 1179.61500712);
      Complex.valueOf(1825.81920750906);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(306.9726, 4153.306321749238);
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      complex2.acos();
      complex0.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.I;
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(195.30248493);
      complex1.toString();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = Complex.valueOf(195.30248493, 195.30248493);
      Complex complex5 = complex3.asin();
      complex1.cosh();
      complex5.tan();
      complex5.sqrt();
      Complex complex6 = Complex.valueOf(104.3785894936246);
      complex6.sqrt();
      Complex complex7 = Complex.NaN;
      complex7.tanh();
      Complex complex8 = Complex.NaN;
      complex5.createComplex(0.5110208988189697, (-741.1160595648113));
      // Undeclared exception!
      complex4.nthRoot(2147062159);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(3.3038494682728794E234, 3.3038494682728794E234);
      complex1.asin();
      Complex complex3 = complex2.cos();
      complex3.divide(complex0);
      Complex complex4 = new Complex((-1048.054642445781), 3.3038494682728794E234);
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-663.209647), (-663.209647));
      Complex complex1 = new Complex((-663.209647));
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.ONE;
      complex3.conjugate();
      Complex complex4 = complex0.tan();
      complex2.acos();
      complex2.asin();
      complex4.cosh();
      Complex complex5 = new Complex((-20.0), (-20.0));
      complex5.tan();
      Complex complex6 = Complex.INF;
      complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.pow((-1504.3125172282018));
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ZERO.cosh();
      complex3.sqrt();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.nthRoot(1134);
      complex0.sin();
      complex1.abs();
      complex0.getField();
      complex4.sqrt();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-4920.728));
      Complex complex1 = complex0.NaN.sin();
      complex0.I.sinh();
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.tan();
      complex2.ONE.negate();
      Complex complex3 = complex0.negate();
      complex3.ZERO.subtract(0.0);
      Complex complex4 = complex3.I.add((-3387.8116473442));
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex0.log();
      Complex complex7 = Complex.valueOf((-4920.728), (double) (-977));
      complex3.readResolve();
      complex5.getReal();
      Complex complex8 = Complex.valueOf((-1563.4386));
      Complex complex9 = complex8.multiply(17);
      complex6.createComplex(17, (-514.6416302706));
      Complex complex10 = Complex.valueOf(3641.5815165);
      complex10.readResolve();
      complex0.equals(complex7);
      complex1.divide(0.0);
      complex5.sqrt();
      complex9.add(0.41421356237309515);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(2507.744273802915);
      Complex complex2 = Complex.valueOf(2507.744273802915, 1326.4194702577206);
      Complex complex3 = complex0.add(1.0);
      Complex complex4 = new Complex(968.0245633, 968.0245633);
      complex4.toString();
      Complex complex5 = Complex.valueOf(20.0, 1326.4194702577206);
      complex5.add(complex4);
      Complex.valueOf((-20.0), 883.6529016319);
      Complex complex6 = complex3.asin();
      complex6.cosh();
      Complex complex7 = Complex.NaN;
      complex7.tan();
      complex2.sqrt();
      Complex complex8 = complex4.sqrt();
      complex5.tanh();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.ONE;
      complex11.log();
      complex1.createComplex(3.4454766202661184E267, (-3387.8116473442));
      Complex complex12 = Complex.valueOf(1.8565686991678376E-4);
      complex12.nthRoot(255);
      complex1.reciprocal();
      complex8.multiply(3.4454766202661184E267);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 3.3922703599272275E-47);
      complex0.divide((-5723.621363623311));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.8072183820435085E293);
      complex0.I.abs();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.multiply(complex0);
      complex0.asin();
      complex1.acos();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.multiply(826.5839369958845);
      Complex complex3 = complex0.ZERO.multiply((-4428.876922695346));
      complex3.INF.multiply(complex2);
      complex0.asin();
      Complex complex4 = complex2.acos();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-170.12647515461));
      Complex complex1 = complex0.add((-170.12647515461));
      Complex complex2 = complex1.NaN.add((-170.12647515461));
      complex2.toString();
      Complex complex3 = complex0.add(complex1);
      Complex.valueOf((-170.12647515461), (-170.12647515461));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex4.add((-6.151751570213211E-240));
      complex5.getArgument();
      complex7.reciprocal();
      complex6.abs();
      Complex complex8 = Complex.ONE;
      complex8.readResolve();
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.valueOf((-170.12647515461));
      complex10.sqrt();
      complex1.toString();
      Complex complex11 = new Complex(803.38003761, 85.97708112039017);
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-663.209647), (-663.209647));
      Complex complex1 = complex0.ONE.createComplex((-663.209647), (-663.209647));
      Complex complex2 = complex1.NaN.tan();
      complex2.INF.toString();
      Complex complex3 = complex0.asin();
      complex3.ZERO.cosh();
      complex0.add((-663.209647));
      complex0.getArgument();
      complex0.reciprocal();
      complex2.abs();
      complex3.NaN.readResolve();
      Complex complex4 = complex2.reciprocal();
      complex4.ZERO.divide(Double.NaN);
      complex3.tan();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-170.12647515461));
      Complex complex1 = complex0.add((-170.12647515461));
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ONE;
      complex3.toString();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.tan();
      complex5.add((-3068.15075835));
      complex5.getArgument();
      complex1.reciprocal();
      complex4.abs();
      complex0.readResolve();
      Complex complex7 = complex1.reciprocal();
      complex5.tan();
      complex1.pow(complex7);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.atan();
      complex0.subtract((-373.764722254));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.atan();
      complex1.reciprocal();
      complex4.reciprocal();
      complex0.nthRoot(1319);
      complex3.atan();
      complex0.readResolve();
      complex2.divide(1420.86);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-344.5971), (-7.536811920695258));
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7804909509998055E-74, 0.595784068107605);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      complex1.NaN.log();
      Complex complex3 = complex1.ONE.multiply(0);
      complex2.I.hashCode();
      complex0.NaN.sqrt1z();
      Complex complex4 = complex2.multiply(1047.99035);
      complex1.atan();
      Complex complex5 = complex4.cosh();
      complex5.sinh();
      complex0.multiply(complex5);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.createComplex((-0.0029390153322879087), 663.209647);
      complex0.cosh();
      Complex complex3 = Complex.valueOf(6.283185307179586, 1.3419554378572232);
      Complex complex4 = complex1.multiply(1);
      complex1.multiply(1466);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex3.sqrt();
      complex2.tanh();
      Complex complex7 = complex5.multiply(1.0);
      Complex complex8 = complex4.multiply(663.209647);
      complex4.getImaginary();
      complex8.negate();
      Complex complex9 = Complex.INF;
      complex9.tanh();
      complex6.acos();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.createComplex((-0.0029390153322879087), 663.209647);
      complex0.cosh();
      Complex complex3 = Complex.valueOf(6.283185307179586, 2.0);
      Complex complex4 = complex1.multiply(1);
      complex1.multiply(1466);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex5.multiply(1.0);
      Complex complex9 = complex4.multiply(663.209647);
      complex4.getImaginary();
      complex9.negate();
      complex8.divide(0.46255285418748326);
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(337.15292);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.sqrt();
      complex2.sqrt();
      Complex complex4 = complex3.tanh();
      complex4.createComplex((-20.0), (-20.0));
      Complex complex5 = Complex.valueOf((double) 37);
      complex5.reciprocal();
      complex0.reciprocal();
      complex1.atan();
      complex5.readResolve();
      complex5.divide(323.51305058);
      Complex complex6 = Complex.valueOf((double) (-2091), (-2166.6668));
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-663.209647), (-663.209647));
      Complex complex1 = complex0.ONE.createComplex((-663.209647), (-663.209647));
      Complex complex2 = complex1.NaN.tan();
      complex2.INF.toString();
      Complex.valueOf((-663.209647), 6.000235114895513E123);
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.asin();
      complex4.ZERO.cosh();
      complex3.I.tan();
      complex0.add((-663.209647));
      complex0.getArgument();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.divide((-2.356194490192345));
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.atan();
      complex0.subtract((-373.764722254));
      Complex complex3 = complex0.reciprocal();
      complex3.createComplex((-373.764722254), 935.313031);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex4.reciprocal();
      complex2.abs();
      complex0.readResolve();
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.reciprocal();
      Complex complex7 = Complex.NaN;
      complex7.NaN.sinh();
      complex7.tan();
      complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(34.6048335994274, 2473.6415);
      Complex complex1 = complex0.createComplex(2473.6415, 34.6048335994274);
      complex1.tan();
      Complex complex2 = Complex.NaN;
      complex2.toString();
      Complex complex3 = complex2.acos();
      complex1.ZERO.multiply(complex2);
      complex1.multiply(complex2);
      complex0.createComplex(1.1913723189736356E-7, 0.08692999184131622);
      Complex complex4 = Complex.NaN;
      complex4.acos();
      complex0.sinh();
      complex2.subtract(34.6048335994274);
      complex3.readResolve();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex3.asin();
      complex6.multiply(1073741824);
      complex5.log();
      complex1.acos();
      Complex complex7 = Complex.valueOf((-1824.714606979), 0.0);
      complex0.readResolve();
      complex7.getReal();
      complex1.multiply(1127);
      complex2.createComplex(2652.4145175508, 2018.895006634268);
      complex5.readResolve();
      Object object0 = complex1.readResolve();
      complex7.equals(object0);
      complex3.asin();
      complex4.getArgument();
      Complex complex8 = Complex.NaN;
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(34.6048335994274);
      Complex complex1 = complex0.sinh();
      complex0.abs();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = Complex.NaN;
      complex2.multiply(complex0);
      complex2.negate();
      Complex complex3 = complex2.createComplex(1326.4189170453974, 1.4849631831943512E-269);
      complex0.acos();
      complex1.sinh();
      complex0.subtract(1.4849631831943512E-269);
      complex3.readResolve();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(34.6048335994274, 34.6048335994274);
      Complex complex1 = complex0.exp();
      complex1.atan();
      complex0.reciprocal();
      complex0.divide(1932.0);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.subtract((-373.764722254));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = new Complex((-373.764722254), (-373.764722254));
      complex5.toString();
      Complex complex6 = Complex.ZERO;
      complex6.add((-373.764722254));
      Complex complex7 = complex4.reciprocal();
      complex7.abs();
      Complex complex8 = new Complex((-2250.53278));
      complex8.readResolve();
      complex2.reciprocal();
      Complex complex9 = Complex.valueOf(1.0);
      complex9.pow(complex8);
      complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.abs();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      complex2.I.conjugate();
      Complex complex4 = complex1.NaN.divide(complex0);
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex3.I.pow((-5345.9318281));
      complex6.ONE.nthRoot(895);
      complex2.nthRoot(895);
      Complex complex7 = complex1.subtract(complex3);
      complex7.NaN.hashCode();
      Complex complex8 = Complex.valueOf((-1.5449538712332313E-8));
      complex8.NaN.toString();
      complex7.INF.acos();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.reciprocal();
      complex5.abs();
      complex1.createComplex(1.0, (-774.07));
      Complex complex10 = complex3.cosh();
      complex10.subtract(complex7);
      complex7.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-4920.728));
      Complex complex1 = complex0.NaN.sin();
      complex0.I.sinh();
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.tan();
      complex2.ONE.negate();
      Complex complex3 = complex0.negate();
      complex3.ZERO.subtract(0.0);
      double double0 = (-3387.5665049918707);
      Complex complex4 = complex3.I.add((-3387.5665049918707));
      Complex complex5 = complex4.I.asin();
      Complex.valueOf(0.0, (-4920.728));
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.acos();
      Complex.valueOf(1121.86495576406, (-1824.714606979));
      complex7.NaN.readResolve();
      complex0.getReal();
      complex6.ZERO.multiply((-977));
      complex1.getReal();
      complex5.createComplex((-3102.66193808), (-1824.714606979));
//      try { 
        complex5.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-663.209647));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.createComplex(Double.NaN, 663.209647);
      complex2.cosh();
      Complex complex3 = Complex.valueOf((-3028.161386260611), (-3028.161386260611));
      complex2.multiply((-325));
      complex3.negate();
      Complex complex4 = complex0.sqrt();
      complex3.tanh();
      Complex complex5 = complex0.createComplex((-663.209647), (-4221.16257702816));
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex5.multiply((-1194.5183311));
      complex6.conjugate();
      Complex complex8 = complex7.divide(619.879);
      complex0.subtract((-663.209647));
      complex8.sin();
      complex7.getField();
      complex1.multiply((-325));
      Complex complex9 = Complex.ONE;
      complex9.pow((-4221.16257702816));
      complex5.getField();
      complex4.divide((-3028.161386260611));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(34.6048335994274, 2473.6415);
      Complex complex1 = complex0.createComplex(2473.6415, 34.6048335994274);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.NaN;
      complex3.toString();
      complex3.acos();
      complex1.ZERO.multiply(complex3);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf(34.6048335994274);
      complex6.NaN.add(2473.6415);
      Complex complex7 = complex6.tan();
      complex7.ONE.toString();
      complex1.add((-2250.53278));
      Complex complex8 = complex1.reciprocal();
      complex5.abs();
      Complex complex9 = new Complex(1.0);
      complex9.readResolve();
      Complex complex10 = complex8.reciprocal();
      complex8.pow(complex10);
      complex8.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-663.209647), 1281.5596662097);
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.multiply(complex2);
      complex2.multiply((-3659.036132216));
      complex0.getImaginary();
      complex3.negate();
      Complex complex4 = Complex.valueOf(762.143064697, (-0.0029390153322879087));
      complex4.divide(4278.449229);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-4920.728));
      complex0.NaN.sin();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.valueOf((-4920.728));
      complex2.ZERO.tan();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.subtract(0.0);
      Complex complex6 = complex4.I.add((-3387.8116473442));
      Complex complex7 = complex6.I.asin();
      complex6.I.multiply((-977));
      Complex complex8 = complex0.log();
      complex8.ONE.acos();
      Complex complex9 = Complex.valueOf(0.0, 27.1887579651);
      complex7.equals(complex0);
      complex2.hashCode();
      Complex.valueOf(240.695);
      Complex complex10 = complex9.reciprocal();
      complex3.negate();
      complex10.multiply(complex1);
      complex0.getReal();
      Complex complex11 = complex1.createComplex((-3387.8116473442), (-4920.728));
      complex6.divide(complex11);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-170.12647515461));
      Complex complex1 = complex0.add((-170.12647515461));
      Complex complex2 = complex1.NaN.add((-170.12647515461));
      complex2.ONE.toString();
      Complex complex3 = complex0.add(complex1);
      complex3.NaN.abs();
      Complex complex4 = Complex.valueOf((-170.12647515461), (-170.12647515461));
      complex0.ONE.sin();
      Complex complex5 = Complex.valueOf(0.0, 2220.8067428856);
      complex5.negate();
      Complex complex6 = complex0.asin();
      complex4.ONE.add((-1519.26226736275));
      complex3.abs();
      complex4.readResolve();
      complex6.getArgument();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-4957.38721372225), (-4957.38721372225));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      complex2.abs();
      Complex complex3 = Complex.valueOf(7.296670293275653E-10, Double.POSITIVE_INFINITY);
      complex1.sin();
      Complex complex4 = Complex.valueOf(2594.15, Double.POSITIVE_INFINITY);
      complex3.negate();
      complex2.asin();
      Complex complex5 = complex2.add(7.840210076743552E-8);
      complex5.abs();
      complex4.readResolve();
      Complex.valueOf((-1108.83136350779));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(34.6048335994274, 34.6048335994274);
      Complex complex1 = new Complex(0.0);
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.multiply(583.693);
      complex0.multiply((-2103));
      complex2.negate();
      complex1.sqrt();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.createComplex((-741.1160595648113), (-741.1160595648113));
      Complex complex5 = Complex.valueOf(34.6048335994274);
      Complex complex6 = complex5.reciprocal();
      complex3.multiply(0.4617912769317627);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.divide(1602.23);
      complex7.subtract(0.0);
      Complex complex9 = new Complex((-2103), 583.693);
      complex9.sin();
      complex1.getField();
      complex6.multiply((-2103));
      complex8.pow(0.019270998137882245);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3326.0753, (-4040.069497));
      complex0.INF.toString();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.pow(3326.0753);
      complex1.I.sqrt();
      Complex complex3 = complex0.sqrt();
      complex0.NaN.abs();
      Complex complex4 = complex1.tan();
      complex4.I.add(complex2);
      complex3.multiply((-4040.069497));
      Complex complex5 = complex0.pow(complex2);
      complex3.nthRoot(1478);
      Complex complex6 = complex5.createComplex(1478, (-3.0635272288480756E25));
      complex6.cosh();
      Complex complex7 = Complex.valueOf(2370.56491044, 6.283185307179586);
      complex7.I.multiply(1478);
      complex4.multiply(3326.0753);
      complex1.getImaginary();
      complex2.negate();
      complex2.divide((double) 1478);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2057.36757577);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(2057.36757577);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex4.I.tan();
      complex4.toString();
      complex1.isInfinite();
      Complex complex6 = complex0.multiply(1207);
      complex6.atan();
      complex1.abs();
      Complex complex7 = Complex.valueOf(1985.1885196, 440.3742);
      complex2.equals(complex1);
      complex7.hashCode();
      Complex.valueOf(20.0);
      complex3.ONE.reciprocal();
      Complex complex8 = complex1.negate();
      complex2.multiply(complex0);
      complex7.getReal();
      complex6.createComplex(0.0, 0.0);
      complex7.divide(complex8);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-170.12647515461));
      Complex complex1 = complex0.add((-170.12647515461));
      Complex complex2 = complex1.NaN.add((-170.12647515461));
      complex2.ONE.toString();
      Complex complex3 = complex0.add(complex1);
      complex3.NaN.abs();
      Complex.valueOf((-170.12647515461), (-170.12647515461));
      complex0.ONE.sin();
      Complex complex4 = Complex.valueOf(0.0, 2220.8067428856);
      Complex complex5 = complex4.negate();
      complex0.asin();
      complex4.equals(complex0);
      Complex complex6 = complex2.asin();
      complex6.getArgument();
      Complex complex7 = Complex.valueOf(1.0, (-1452.253845502783));
      complex7.multiply(1016);
      Complex complex8 = complex1.pow(complex4);
      Complex complex9 = Complex.valueOf(Double.NaN, 0.0);
      complex9.asin();
      complex5.abs();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-4920.728));
      complex0.NaN.sin();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.tan();
      complex2.ONE.negate();
      Complex complex4 = complex0.negate();
      complex4.ZERO.subtract(0.0);
      Complex complex5 = complex4.I.add((-3387.8116473442));
      complex5.I.asin();
      complex5.I.multiply((-977));
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.acos();
      Complex.valueOf(1121.86495576406, (-1824.714606979));
      complex7.NaN.readResolve();
      complex0.getReal();
      complex6.ZERO.multiply((-977));
      complex6.NaN.createComplex((-1563.4386), 3641.5815165);
      complex6.readResolve();
      complex1.add(Double.NaN);
      complex3.abs();
      complex4.readResolve();
      Complex.valueOf(1326.4189170453974);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-170.12647515461));
      Complex complex1 = complex0.add((-170.12647515461));
      Complex complex2 = complex1.NaN.add((-170.12647515461));
      complex2.toString();
      Complex complex3 = complex0.add(complex1);
      complex3.NaN.abs();
      Complex complex4 = Complex.valueOf((-170.12647515461), (-170.12647515461));
      complex0.ONE.sin();
      Complex complex5 = Complex.valueOf(0.0, 2220.8067428856);
      Complex complex6 = complex0.asin();
      complex6.cos();
      complex5.divide(complex4);
      Complex complex7 = new Complex(34.4622519, (-1048.054642445781));
      complex7.cos();
      complex7.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.divide((-1264.45));
      Complex complex1 = Complex.I;
      complex1.INF.atan();
      Complex complex2 = complex0.subtract((-373.764722254));
      complex1.getArgument();
      Complex complex3 = complex0.reciprocal();
      complex2.ZERO.abs();
      complex1.add(0.0);
      complex3.abs();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-663.209647), (-663.209647));
      Complex complex1 = complex0.ONE.createComplex((-663.209647), (-663.209647));
      Complex complex2 = complex1.NaN.tan();
      complex2.INF.toString();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.asin();
      complex4.ZERO.cosh();
      complex3.I.tan();
      complex0.add((-663.209647));
      complex0.getArgument();
      complex0.reciprocal();
      complex2.abs();
      complex4.NaN.readResolve();
      complex2.reciprocal();
      complex4.tan();
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sqrt();
      complex2.I.conjugate();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.I.pow(2274.8331221792);
      complex1.readResolve();
      complex1.abs();
      complex3.cos();
      complex1.divide(complex4);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-4920.728));
      complex0.NaN.sin();
      complex0.I.sinh();
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.tan();
      complex1.ONE.negate();
      Complex complex2 = complex0.negate();
      complex2.ZERO.subtract(0.0);
      Complex complex3 = complex2.I.add((-3387.8116473442));
      complex3.I.asin();
      complex3.I.multiply((-977));
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.acos();
      Complex.valueOf(1121.86495576406, (-1824.714606979));
      Complex complex6 = (Complex)complex5.NaN.readResolve();
      complex0.getReal();
      complex4.ZERO.multiply((-977));
      complex4.NaN.createComplex((-1563.4386), 3641.5815165);
      Complex complex7 = (Complex)complex4.readResolve();
      complex4.equals(complex7);
      complex4.asin();
      complex4.getArgument();
      Complex.valueOf(1714.945690178, (-4920.728));
      complex6.sqrt();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3326.0753, (-4040.069497));
      complex0.toString();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.pow(3326.0753);
      complex1.I.sqrt();
      Complex complex3 = complex0.sqrt();
      complex0.NaN.abs();
      Complex complex4 = complex1.tan();
      complex4.I.add(complex2);
      Complex complex5 = complex3.multiply((-4040.069497));
      Complex complex6 = complex0.pow(complex2);
      complex3.nthRoot(1478);
      Complex complex7 = complex6.createComplex(1478, (-3.0635272288480756E25));
      Complex complex8 = complex7.cosh();
      complex8.nthRoot(1478);
      Complex complex9 = Complex.valueOf(2370.56491044, 6.283185307179586);
      complex9.I.multiply(1478);
      Complex complex10 = complex5.multiply(1478);
      Complex complex11 = complex10.INF.negate();
      complex11.ZERO.sqrt();
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex12.NaN.createComplex((-4040.069497), 2370.56491044);
      complex13.reciprocal();
      Complex complex14 = complex0.multiply((-3.0635272288480756E25));
      Complex complex15 = complex14.conjugate();
      complex15.ZERO.divide(3326.0753);
      Complex complex16 = complex3.subtract(2370.56491044);
      Complex complex17 = complex3.sin();
      complex6.getField();
      complex17.multiply(1478);
      complex16.pow(2370.56491044);
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.exp();
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.I.createComplex((-3027.0), 2995.4904526615);
      complex2.sin();
      Complex complex3 = complex0.ZERO.sqrt1z();
      complex3.NaN.atan();
      Complex complex4 = Complex.NaN;
      complex2.ZERO.cos();
      complex4.ZERO.nthRoot(1);
      Complex complex5 = complex0.pow(complex4);
      complex5.multiply(0.0);
      complex5.exp();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-4920.728));
      Complex complex1 = complex0.NaN.sin();
      complex0.I.sinh();
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.tan();
      complex2.ONE.negate();
      Complex complex3 = complex0.negate();
      complex3.ZERO.subtract(0.0);
      Complex complex4 = complex3.I.add((-3387.8116473442));
      complex4.I.asin();
      complex4.I.multiply((-977));
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.acos();
      Complex.valueOf(1121.86495576406, (-1824.714606979));
      complex6.NaN.readResolve();
      complex0.getReal();
      Complex complex7 = complex5.ZERO.multiply((-977));
      complex5.NaN.createComplex((-1563.4386), 3641.5815165);
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
      complex5.asin();
      complex5.getArgument();
      Complex complex8 = Complex.valueOf(1714.945690178, (-4920.728));
      complex8.multiply(1016);
      complex7.pow(complex1);
      Complex complex9 = complex7.asin();
      complex7.abs();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.exp();
      complex1.INF.hashCode();
      complex1.ZERO.subtract(complex0);
      complex0.isInfinite();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex.valueOf(0.0, (-1263.0));
      complex1.getReal();
      Complex complex4 = complex0.subtract(complex1);
      complex4.abs();
      complex4.NaN.multiply(1054);
      complex0.I.asin();
      complex2.ZERO.atan();
      Complex complex5 = complex3.ONE.asin();
      complex5.tan();
//      try { 
        complex4.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2057.36757577);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(2057.36757577);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex4.I.tan();
      complex4.toString();
      complex1.isInfinite();
      Complex complex6 = complex0.multiply(1207);
      complex6.atan();
      complex1.abs();
      Complex complex7 = Complex.valueOf(1985.1885196, 440.3742);
      complex2.equals(complex1);
      complex7.hashCode();
      Complex.valueOf(20.0);
      complex3.ONE.reciprocal();
      Complex complex8 = complex1.negate();
      complex2.multiply(complex0);
      complex7.getReal();
      complex6.createComplex(0.0, 0.0);
      complex8.subtract((double) 1207);
      complex5.toString();
      complex6.negate();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(1.2457361221313477);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.ONE.negate();
      complex3.NaN.createComplex(1.2457361221313477, 1.2457361221313477);
      Complex complex4 = complex3.I.sinh();
      complex4.sqrt1z();
      complex1.getImaginary();
      complex2.ZERO.getField();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex2.add(complex5);
      complex6.INF.add(complex0);
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = Complex.valueOf((-620.4749934143761));
      complex8.NaN.negate();
      Complex complex9 = complex7.NaN.conjugate();
      complex9.ONE.sin();
      complex1.NaN.getField();
      Complex complex10 = complex0.pow(complex5);
      complex2.multiply((-245));
      complex2.isInfinite();
      complex10.pow((double) (-245));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      complex0.readResolve();
      Complex complex2 = complex1.exp();
      complex2.ONE.cos();
      Complex complex3 = complex0.NaN.conjugate();
      complex3.add(complex1);
      complex3.ONE.acos();
      complex1.toString();
      Complex complex4 = complex1.divide(2047.7258071);
      Complex complex5 = complex4.subtract(2047.7258071);
      complex5.multiply(0.0);
      complex5.ONE.asin();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.divide((-1264.45));
      Complex complex1 = complex0.exp();
      complex1.INF.atan();
      Complex complex2 = complex0.subtract((-373.764722254));
      complex1.getArgument();
      Complex complex3 = complex0.reciprocal();
      complex3.I.readResolve();
      complex2.ZERO.abs();
      complex0.cos();
      complex0.divide(complex1);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(337.15292);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.I.multiply((-3287.62389));
      Complex complex2 = complex1.ZERO.multiply(8);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.divide(complex0);
      complex4.add((-2306.6));
      Complex complex5 = complex0.acos();
      complex5.ONE.pow(0.0);
      complex2.isNaN();
      complex4.asin();
      complex4.reciprocal();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3326.0753, (-4040.069497));
      complex0.INF.toString();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.pow(3326.0753);
      complex1.I.sqrt();
      Complex complex3 = complex0.sqrt();
      complex0.NaN.abs();
      Complex complex4 = complex1.tan();
      complex4.I.add(complex2);
      Complex complex5 = complex3.multiply((-4040.069497));
      Complex complex6 = complex0.pow(complex2);
      complex3.nthRoot(1478);
      Complex complex7 = complex6.createComplex(1478, (-3.0635272288480756E25));
      complex7.cosh();
      Complex complex8 = Complex.valueOf(2370.56491044, 6.283185307179586);
      complex8.I.multiply(1478);
      Complex complex9 = complex5.multiply(1478);
      Complex complex10 = complex9.INF.negate();
      complex10.ZERO.sqrt();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex11.NaN.createComplex((-4040.069497), 2370.56491044);
      complex12.reciprocal();
      Complex complex13 = complex0.multiply((-3.0635272288480756E25));
      Complex complex14 = complex13.conjugate();
      complex14.ZERO.divide(3326.0753);
      Complex complex15 = complex3.subtract(2370.56491044);
      Complex complex16 = complex3.sin();
      complex6.getField();
      complex16.multiply(1478);
      complex15.pow(2370.56491044);
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3300.82);
      Complex complex1 = Complex.valueOf(3300.82);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.INF.pow(3300.82);
      complex2.ZERO.cos();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex1.NaN.conjugate();
      Complex complex7 = complex3.divide((-139.6561));
      Complex complex8 = complex7.sin();
      complex5.equals((Object) null);
      complex2.NaN.divide(complex8);
      complex5.divide((-139.6561));
      Complex complex9 = complex4.log();
      complex1.ONE.abs();
      complex5.createComplex(3300.82, 0.0);
      complex6.add(complex7);
      Complex complex10 = complex8.multiply((-3167.5868101251035));
      complex10.createComplex(3300.82, 0.0);
      complex9.log();
      complex10.exp();
      Complex.valueOf((-3167.5868101251035), 0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-4957.38721372225), (-4957.38721372225));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
//      try { 
        complex2.INF.nthRoot((-373));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -373
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.acos();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.sin();
      complex2.ONE.hashCode();
      Complex complex5 = complex4.ONE.acos();
      complex3.INF.cosh();
      complex4.getField();
      complex3.abs();
      complex3.reciprocal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-978.338));
      double double0 = (-6.221897889344726E-8);
      Complex complex1 = Complex.valueOf((-6.221897889344726E-8), (-991.445150800791));
      complex1.INF.tan();
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.atan();
      complex2.ZERO.atan();
//      try { 
        complex2.INF.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ZERO.atan();
      complex2.asin();
      int int0 = 0;
      Complex complex3 = complex2.multiply(0);
      complex3.I.multiply((double) 0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.atan();
      complex4.I.conjugate();
      complex6.asin();
      Complex complex7 = complex5.tanh();
      complex0.isNaN();
      complex0.ZERO.readResolve();
      complex6.INF.tan();
      Complex complex8 = complex7.pow(complex1);
      Complex.valueOf((double) 0);
      complex7.I.asin();
      Complex.valueOf((double) 0, 5.9006122320612716E-8);
      Complex complex9 = complex8.ZERO.acos();
      complex9.NaN.abs();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex10.ONE.subtract((double) 0);
      complex11.ONE.sinh();
//      try { 
        complex11.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.260720440258473E-168);
      complex0.atan();
      Complex.valueOf(6.260720440258473E-168, 6.260720440258473E-168);
      complex0.NaN.abs();
      complex0.NaN.hashCode();
      complex0.NaN.acos();
      Complex.valueOf(6.260720440258473E-168, Double.NaN);
      Complex complex1 = complex0.NaN.subtract(6.260720440258473E-168);
      Complex complex2 = complex0.NaN.cosh();
      complex0.ZERO.readResolve();
      complex0.equals("");
      complex0.sin();
      complex2.pow(1.0233519853128553E-7);
      complex1.subtract((-1512.5282271076767));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.conjugate();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide((-3088.054));
      complex0.tan();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      complex0.NaN.getArgument();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.sqrt1z();
      complex0.hashCode();
      complex1.cos();
      Complex complex4 = complex3.multiply(1);
      complex1.conjugate();
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex1.multiply(complex5);
      complex6.ONE.pow(0.0);
      Complex complex7 = complex3.add((-2126.5178));
      Complex complex8 = complex2.subtract(209.1);
      Complex complex9 = complex2.multiply((-3758.7635477));
      complex9.sqrt();
      complex6.conjugate();
      Complex complex10 = complex4.negate();
      complex2.add(2.0);
      complex7.multiply(complex8);
      complex10.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.9094800147));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.INF.createComplex(0.0, (-2623.319107644));
      Complex complex3 = new Complex((-1454.9094800147), 0.0);
      Complex complex4 = complex0.add(complex3);
      complex4.INF.hashCode();
      complex3.isNaN();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex5.ZERO.sqrt();
      Complex.valueOf((-1454.9094800147));
      complex3.sqrt1z();
      complex1.exp();
      complex4.getField();
      complex4.pow(complex2);
      complex2.sqrt1z();
      complex2.multiply(2824);
      complex6.tan();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.exp();
      complex1.ONE.log();
      complex2.hashCode();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ZERO.subtract(0.0);
      complex3.readResolve();
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.ONE.toString();
      Complex complex9 = complex1.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex10 = complex9.ONE.pow(complex4);
      Complex complex11 = complex10.ONE.sin();
      complex4.subtract(complex1);
      Complex complex12 = Complex.valueOf((-984.1664304), 5951.7310475934);
      complex7.getArgument();
      Complex complex13 = complex11.tanh();
      complex12.multiply(complex6);
      Object object0 = complex7.readResolve();
      complex9.equals(object0);
      complex12.atan();
      complex5.getImaginary();
      complex0.sqrt1z();
      complex8.multiply((-2833));
      Complex complex14 = Complex.ZERO;
      complex13.divide(complex14);
      complex4.abs();
      complex13.createComplex(0.0, (-984.1664304));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.803052068234866E254);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ZERO.negate();
      complex2.pow(1.803052068234866E254);
      Complex complex3 = complex0.reciprocal();
      complex3.ONE.tanh();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.INF.toString();
      Complex complex2 = complex1.I.cosh();
      complex2.cos();
      Complex complex3 = complex2.NaN.cosh();
      complex3.NaN.tanh();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ONE.subtract(complex0);
      complex1.I.multiply((-1387.9901125469673));
      complex5.ZERO.divide(complex0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.INF.multiply(1);
      Complex complex8 = complex7.ZERO.sqrt();
      complex8.getArgument();
      complex8.INF.abs();
      Complex complex9 = complex0.add(complex6);
      Complex complex10 = complex9.I.sinh();
      complex8.ZERO.createComplex((-1632.95939045693), 2.381600167287677E-297);
      complex0.NaN.multiply(0.0);
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex11.I.subtract(complex0);
      Complex complex13 = complex6.ONE.add(complex10);
      complex13.NaN.abs();
      Complex complex14 = complex10.ZERO.divide(553.7550876416587);
      complex14.toString();
      complex0.cosh();
      complex10.getImaginary();
      complex13.readResolve();
      complex3.multiply((-265.0));
      complex8.multiply(complex13);
      complex12.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(4206.1305773, 4206.1305773);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = (-1717.47384844);
      Complex complex0 = Complex.valueOf((-1717.47384844), (-1717.47384844));
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.multiply((-4.4200075770425176E-8));
      Complex complex2 = complex0.acos();
      complex2.NaN.exp();
      complex1.INF.toString();
      complex2.acos();
      Complex complex3 = complex0.atan();
      complex3.getField();
      complex1.subtract(complex3);
      complex3.createComplex((-4.4200075770425176E-8), (-4.4200075770425176E-8));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.NaN.acos();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.I.subtract(0.0);
      Complex complex5 = complex3.ZERO.atan();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex4.ONE.nthRoot(1);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex3.subtract(0.0);
      Complex complex8 = complex7.negate();
      complex7.getField();
      Complex complex9 = complex0.ZERO.cos();
      complex3.ONE.exp();
      Complex complex10 = complex6.tanh();
      List<Complex> list0 = complex10.I.nthRoot(1);
      assertEquals((-1.557407724654902), complex10.getImaginary(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(-0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex3.pow(complex6);
      Complex complex13 = complex12.ZERO.multiply(complex11);
      Complex complex14 = complex2.cos();
      complex9.isInfinite();
      complex8.getField();
      Complex complex15 = complex1.multiply(1);
      complex3.readResolve();
      Complex complex16 = complex12.conjugate();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.equals((Object)complex9));
      
      complex14.getImaginary();
      assertSame(complex2, complex13);
      assertSame(complex14, complex15);
      assertFalse(complex2.equals((Object)complex9));
      
      complex6.sin();
      assertTrue(complex0.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex1.I.multiply(826.5839369958845);
//      try { 
        complex0.INF.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.divide((-4.0573420909530794E223));
      complex1.NaN.hashCode();
      complex0.getField();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.I.add(complex1);
      String string0 = complex3.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.INF.add((-1434.5698980065));
      assertTrue(complex5.isInfinite());
      
      complex0.isNaN();
      Complex complex6 = complex3.negate();
      assertEquals((-1.0), complex6.getImaginary(), 0.01);
      assertEquals((-2.4646677001423304E-224), complex1.getReal(), 0.01);
      
      Complex complex7 = Complex.ONE;
      complex0.divide(complex7);
      Complex complex8 = complex2.atan();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex8.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.257216813084462E103);
      Complex complex1 = Complex.valueOf((-40.81646543), 0.19220098853111267);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.NaN.reciprocal();
      assertSame(complex3, complex2);
      
      Complex complex4 = complex0.subtract(complex1);
      assertEquals(40.81646543, complex4.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(6.257216813084462E103, complex4.getImaginary(), 0.01);
      assertEquals(0.19220098853111267, complex1.getImaginary(), 0.01);
      assertEquals((-40.81646543), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7804909509998055E-74, 0.595784068107605);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.log();
      assertTrue(complex3.isNaN());
      
      Complex complex4 = complex1.ONE.multiply(0);
      complex2.I.hashCode();
      Complex complex5 = complex2.multiply(1047.99035);
      Complex complex6 = complex1.atan();
      assertEquals(1.780490950999806E-74, complex6.getReal(), 0.01);
      
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex0.multiply(complex7);
      assertEquals((-2.057191551286017E188), complex8.getImaginary(), 0.01);
      assertEquals((-4.667061603246638E188), complex8.getReal(), 0.01);
      
      Complex complex9 = (Complex)complex4.readResolve();
      assertEquals(0.0, complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-663.209647), (-663.209647));
      Complex complex1 = complex0.ONE.createComplex((-663.209647), (-663.209647));
      Complex complex2 = complex1.NaN.tan();
      String string0 = complex2.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ZERO.cosh();
      assertEquals((-0.785397879207742), complex4.getReal(), 0.01);
      
      Complex complex6 = complex3.I.tan();
      Complex complex7 = complex0.add((-663.209647));
      assertEquals((-1326.419294), complex7.getReal(), 0.01);
      
      complex0.getArgument();
      Complex complex8 = complex0.reciprocal();
      assertEquals(7.539094195353283E-4, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.tan();
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex0.atan();
      assertEquals((-7.539091338640378E-4), complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex6.sin();
      assertEquals(0.8373830985134536, complex11.getImaginary(), 0.01);
      assertFalse(complex3.equals((Object)complex5));
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sqrt();
      Complex complex1 = complex0.acos();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.tanh();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0, (-596.177445032));
      complex0.readResolve();
      complex0.getReal();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.cos();
      complex3.ONE.sinh();
      Complex complex4 = complex1.atan();
      complex3.INF.asin();
      Complex complex5 = null;
      Complex complex6 = complex4.ZERO.subtract(complex2);
//      try { 
        complex6.I.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.ONE.getField();
      Complex complex2 = complex0.INF.log();
      complex2.abs();
      complex0.ONE.getArgument();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.NaN.asin();
      assertSame(complex3, complex1);
      
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex2.subtract(20.0);
      assertTrue(complex5.isInfinite());
      
      complex0.getArgument();
      complex2.getArgument();
      complex0.getArgument();
      complex0.getReal();
      complex0.negate();
      Complex complex6 = complex4.acos();
      assertEquals((-1.226191170883517), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.cos();
      complex7.ZERO.negate();
      complex7.isInfinite();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(2.4785912770698397, complex7.getReal(), 0.01);
      
      complex2.pow(Double.POSITIVE_INFINITY);
      assertTrue(complex2.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-850.6008323683209), 0.0);
      Complex complex2 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      assertTrue(complex2.isInfinite());
      
      complex0.ZERO.hashCode();
      complex1.INF.hashCode();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex1.divide(0.0);
      Complex.valueOf(0.0);
      Complex complex5 = complex4.I.reciprocal();
      assertEquals((-1.0), complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex0.getArgument();
      Complex complex6 = complex3.asin();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex7 = complex1.divide(complex4);
      assertSame(complex7, complex4);
  }
}
