/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:52:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1344.92495725717, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(1344.92495725717);
      complex1.sqrt1z();
      complex0.NaN.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.multiply(complex2);
      complex0.readResolve();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.valueOf(1344.92495725717, 1344.92495725717);
      Complex complex7 = complex4.subtract(complex6);
      complex7.acos();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.ONE.log();
      complex9.I.createComplex(1344.92495725717, Double.POSITIVE_INFINITY);
      Complex complex10 = complex3.NaN.negate();
      Complex complex11 = complex8.ONE.asin();
      complex11.NaN.multiply(complex3);
      complex0.ZERO.cosh();
      complex7.abs();
      Complex complex12 = complex7.pow(4.470272686633885E-4);
      complex12.ONE.cosh();
      complex12.cos();
      Complex.valueOf(1344.92495725717);
      Complex.valueOf(4.470272686633885E-4);
      complex6.abs();
      complex4.multiply(complex0);
      complex10.abs();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.log();
      complex0.negate();
      complex1.getArgument();
      Complex complex4 = new Complex((-1442236.2836432443));
      Complex complex5 = complex4.subtract(0.7853981633974483);
      Complex complex6 = complex1.reciprocal();
      complex6.exp();
      Complex complex7 = complex3.atan();
      complex5.abs();
      complex7.NaN.tanh();
      complex2.equals(complex1);
      complex4.pow(0.7853981633974483);
      complex5.abs();
      complex3.multiply(complex1);
      complex4.conjugate();
      complex3.sqrt();
      Complex complex8 = complex7.cos();
      complex1.pow(complex8);
      complex3.pow(2.782159649779516);
      complex5.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply((-2326.2697));
      complex1.ZERO.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex2.ZERO.sinh();
      complex5.INF.sqrt();
      complex1.ONE.readResolve();
      complex1.ONE.exp();
      complex3.ONE.subtract(25202.130213755932);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex6.pow(1.1466910691560932E-169);
      Complex complex9 = complex8.ZERO.pow(1.1466910691560932E-169);
      Complex complex10 = complex9.ONE.subtract(25202.130213755932);
      Complex complex11 = complex6.sqrt();
      complex11.I.log();
      Complex complex12 = complex6.atan();
      complex12.INF.getField();
      complex3.I.toString();
      complex9.multiply(complex10);
      complex4.sin();
      complex5.pow(complex10);
      Complex complex13 = complex11.multiply(270);
      Complex complex14 = complex7.divide((double) 270);
      complex14.INF.sin();
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.cos();
      complex1.exp();
      Complex complex2 = complex0.ONE.pow((-20.0));
      complex0.I.toString();
      Complex complex3 = complex2.NaN.createComplex((-3463.419174297), (-20.0));
      complex3.NaN.getField();
      Complex complex4 = complex0.tanh();
      complex4.NaN.atan();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex0.sqrt1z();
      complex0.getField();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.NaN.sqrt1z();
      complex8.ONE.reciprocal();
      complex5.abs();
      complex7.I.sin();
      Complex complex9 = complex5.NaN.multiply((-335));
      complex6.INF.cosh();
      complex9.NaN.conjugate();
      Complex.valueOf(0.7853981633974483);
      complex8.tan();
      Complex complex10 = complex6.cos();
      complex10.ONE.acos();
      Complex complex11 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex2.conjugate();
      complex0.multiply(complex11);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-13.414608186046355), (-20.0));
      Complex complex3 = complex2.tan();
      complex1.multiply(619);
      complex3.sinh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.490800658395667E290, (-27.0));
      Complex complex1 = new Complex(9.490800658395667E290);
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.createComplex((-27.0), (-27.0));
      Complex complex3 = complex0.tan();
      complex1.asin();
      complex3.nthRoot(2254);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.490800658395667E290, (-27.0));
      Complex complex1 = new Complex(Double.NaN, 4677.038245084201);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, (-2463.51));
      Complex.valueOf(0.0);
      complex0.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex2 = Complex.ZERO;
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2511.415), (-1.1835984382297313));
      Complex complex1 = new Complex((-1.1835984382297313));
      Complex complex2 = complex0.tan();
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply((-379.61152161564));
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.multiply(1319);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.sinh();
      complex1.I.abs();
      Complex complex7 = complex1.ZERO.acos();
      Complex complex8 = complex4.ZERO.tan();
      complex7.atan();
      complex0.ONE.subtract(complex5);
      complex6.I.acos();
      complex8.I.multiply(complex0);
      Complex complex9 = complex3.NaN.sinh();
      Complex complex10 = complex1.multiply(1.0);
      complex10.ZERO.acos();
      Complex complex11 = complex10.sqrt();
      complex11.ZERO.cosh();
      complex3.multiply(complex1);
      Complex complex12 = complex6.multiply((double) 1319);
      complex4.INF.sqrt();
      complex12.multiply((-2128253213));
      complex4.nthRoot(1319);
      complex0.getField();
      complex2.nthRoot(1319);
      complex9.pow(complex7);
      complex11.multiply(complex3);
      complex7.asin();
      complex2.pow(complex10);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.exp();
      complex0.acos();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = Complex.ONE;
      complex1.equals(complex0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex(2.761628769925529E-8, 1.525318692576078E-15);
      Complex complex1 = Complex.valueOf((-1.5314373779304356E296));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.exp();
      complex3.sqrt1z();
      complex3.tanh();
      complex4.divide((-1.5314373779304356E296));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-2511.415));
      complex1.getField();
      Complex complex2 = Complex.I;
      complex2.NaN.negate();
      complex2.nthRoot(564);
      Complex complex3 = complex1.subtract(complex0);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-20.0), 20.0);
      complex1.tan();
      Complex.valueOf(20.0, 1.0303966192973381E-205);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex(2589.7261609921);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.multiply(complex2);
      complex2.sqrt1z();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.NaN.log();
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.9999997724280462);
      complex0.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf(0.9999997724280462);
      complex0.hashCode();
      complex2.hashCode();
      Complex complex3 = complex0.multiply(complex2);
      complex2.acos();
      Complex complex4 = Complex.NaN;
      complex4.add((-3122.0));
      complex3.nthRoot(37);
      Complex complex5 = complex4.add(complex1);
      complex5.nthRoot(50669);
      Complex.valueOf(1.5707962991786089);
      complex2.multiply(0.0);
      Complex complex6 = Complex.valueOf(1.1210410594940186, Double.NaN);
      complex6.asin();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ONE.divide(407.9067282);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex4.INF.conjugate();
      complex2.getField();
      Complex complex6 = complex1.subtract(407.9067282);
      complex6.ZERO.tan();
      Complex complex7 = complex0.I.asin();
      complex7.INF.createComplex((-555.0), (-555.0));
      complex7.NaN.multiply(complex1);
      Complex complex8 = complex1.multiply((-2240.794731398));
      complex8.NaN.readResolve();
      Complex complex9 = complex8.subtract((-2240.794731398));
      complex9.ZERO.readResolve();
      Complex complex10 = complex1.divide((-2240.794731398));
      complex3.ZERO.tanh();
      complex10.INF.add(0.42478532296001625);
      complex10.pow(2988.77197488631);
      complex10.tanh();
      complex8.add(1273.75);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(2.761628769925529E-8, 2.761628769925529E-8);
      Complex complex2 = Complex.valueOf(2.761628769925529E-8);
      Complex complex3 = complex0.multiply(complex2);
      complex3.ZERO.readResolve();
      Complex complex4 = new Complex(2.761628769925529E-8, 2.761628769925529E-8);
      Complex complex5 = complex1.sinh();
      complex4.equals(complex2);
      Complex complex6 = complex4.exp();
      complex6.tanh();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      complex0.multiply(1261.2069098716);
      Complex complex1 = complex0.negate();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.valueOf(Double.NaN, 1261.2069098716);
      Complex complex2 = complex0.multiply(complex1);
      complex0.divide(complex2);
      Complex complex3 = Complex.valueOf(2511.415, (-547.4838743020011));
      Complex complex4 = Complex.ZERO;
      complex3.add(complex4);
      Complex complex5 = complex3.sqrt1z();
      complex5.sin();
      Complex complex6 = complex3.negate();
      Complex complex7 = new Complex((-547.4838743020011), (-3653.434));
      complex7.tanh();
      complex4.exp();
      complex6.getReal();
      complex6.cos();
      complex3.cosh();
      complex1.divide(2511.415);
      Complex complex8 = complex1.add(8.007687392819207E-5);
      complex8.negate();
      Complex complex9 = complex1.log();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-1.0));
      complex0.multiply(1939);
      complex1.hashCode();
      complex1.cosh();
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1272.66747152);
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.toString();
      complex2.pow(complex0);
      complex2.I.abs();
      Complex.valueOf((-1415.71993894124), 1272.66747152);
      Complex complex3 = complex0.tanh();
      complex3.ZERO.exp();
      Complex complex4 = complex1.log();
//      try { 
        complex4.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2045.294578037109), 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.sqrt();
      complex0.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.INF;
      complex4.sinh();
      complex2.equals(complex3);
      Complex complex5 = complex1.exp();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1339.0379323039622, (-651.2128585));
      Complex complex2 = Complex.valueOf(1339.0379323039622);
      complex0.multiply(complex1);
      complex2.add(0.4387722742439539);
      complex0.isInfinite();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2045.294578037109), 0.0);
      Complex complex1 = complex0.INF.cos();
      complex0.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.sinh();
      complex2.equals(complex3);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.exp();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.9999997724280462);
      complex0.toString();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf(0.9999997724280462);
      complex0.hashCode();
      complex1.hashCode();
      Complex.valueOf((-1751.2715));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.valueOf((-3122.0));
      Complex complex5 = complex4.add((-3122.0));
      complex2.nthRoot(37);
      Complex complex6 = complex2.add(complex3);
      complex6.ONE.nthRoot(37);
      Complex complex7 = Complex.valueOf(0.9999997724280462);
      complex6.multiply(0.0);
      Complex complex8 = Complex.ZERO;
      complex5.asin();
      Complex complex9 = Complex.valueOf((-926.322382966), (-1751.2715));
      complex9.INF.add(complex5);
      complex0.readResolve();
      Complex complex10 = Complex.I;
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1339.0379323039622, (-2511.415));
      Complex complex1 = complex0.createComplex(1339.0379323039622, (-2511.415));
      complex1.tan();
      Complex.valueOf((-2511.415), (-2511.415));
      complex0.multiply(413);
      Complex complex2 = complex0.pow(complex1);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2096.2382), (-2096.2382));
      complex0.abs();
      Complex complex1 = new Complex((-2096.2382));
      Complex complex2 = complex0.divide(complex1);
      complex2.I.pow(complex0);
      complex2.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.NaN;
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = new Complex(425.72196746779);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      complex2.acos();
      complex3.hashCode();
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex1.createComplex(1.7069074829463731E180, 0.0);
      Complex complex6 = complex3.acos();
      complex6.multiply(complex3);
      complex6.divide(complex4);
      Complex complex7 = Complex.valueOf(2013.615052, 0.0);
      complex7.add(complex1);
      Complex complex8 = new Complex((-860.5688675107));
      complex8.sqrt1z();
      complex3.sin();
      complex7.negate();
      complex0.tanh();
      complex3.exp();
      complex4.getReal();
      complex2.cos();
      complex3.cosh();
      complex3.divide((-20.0));
      complex7.add(2013.615052);
      complex5.log();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(0.0, (-1.0));
      complex0.NaN.cosh();
      Complex complex1 = complex0.I.sinh();
      complex0.readResolve();
      Complex complex2 = complex1.reciprocal();
      complex2.INF.readResolve();
      Complex complex3 = Complex.valueOf((-213.71701), (-3835898.5559954196));
      Complex complex4 = complex3.ZERO.tanh();
      complex1.abs();
      complex3.sin();
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1339.0379323039622, (-2511.415));
      Complex complex1 = complex0.createComplex(1339.0379323039622, (-2511.415));
      Complex complex2 = complex1.tan();
      complex1.readResolve();
      complex2.readResolve();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.divide(1365.0);
      Complex complex5 = complex2.cosh();
      complex4.exp();
      complex0.conjugate();
      complex2.hashCode();
      Complex complex6 = complex5.add((-2883.803305402473));
      complex6.NaN.log();
      complex3.hashCode();
      complex2.exp();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.multiply(1261.2069098716);
      complex0.negate();
      Complex complex2 = new Complex(1261.2069098716, Double.NaN);
      complex1.pow(1261.2069098716);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.acos();
      complex0.hashCode();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.createComplex((-2220.486), 0.0);
      complex2.acos();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex3.divide(complex1);
      complex5.add(complex2);
      complex5.sqrt1z();
      Complex complex6 = complex5.sin();
      complex2.negate();
      Complex complex7 = complex3.tanh();
      complex5.exp();
      complex6.getReal();
      complex7.cos();
      complex7.cosh();
      Complex complex8 = complex2.divide(2.2810251664891242E-7);
      complex8.add(4361.006);
      complex8.log();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-2609.0142654546476));
      Complex complex2 = complex0.createComplex((-20.0), 878.06);
      Complex complex3 = complex1.tan();
      complex3.toString();
      complex0.readResolve();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.multiply(complex1);
      complex5.divide(complex4);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex4.atan();
      complex2.divide(complex6);
      Complex complex8 = Complex.valueOf(0.1864703467381545);
      complex8.tanh();
      complex1.log();
      complex7.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(877.122860349, (-1583.26));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.ZERO.pow((-1555.098118207));
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = new Complex((-1555.098118207));
      Complex complex5 = complex3.NaN.subtract(complex4);
      Complex complex6 = complex0.acos();
      complex6.hashCode();
      complex0.add((-431.94559));
      complex2.createComplex(2710.500109953771, (-431.94559));
      Complex complex7 = complex5.acos();
      complex0.multiply(complex3);
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex8.add(complex7);
      complex0.sqrt1z();
      complex1.sin();
      Complex complex10 = Complex.valueOf((-925.137399));
      complex10.negate();
      Complex complex11 = complex8.tanh();
      complex8.exp();
      complex9.getReal();
      complex1.cos();
      complex11.cosh();
      complex3.divide((-4.135121057126514E24));
      complex8.add(0.0);
      complex4.log();
      Complex complex12 = new Complex(944.15947, (-585.51));
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.readResolve();
      complex0.nthRoot(4981);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.ZERO;
      complex4.multiply(complex5);
      complex0.hashCode();
      Complex complex6 = complex2.sqrt1z();
      complex6.I.add(Double.POSITIVE_INFINITY);
      complex1.atan();
      complex1.nthRoot(701);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2511.415), (-0.9999999999996525));
      Complex complex1 = complex0.createComplex((-2511.415), (-2511.415));
      Complex complex2 = complex0.tan();
      complex1.toString();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.multiply(complex0);
      complex3.add((-2511.415));
      Complex complex6 = complex2.createComplex((-0.9999999999996525), -0.0);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex5.multiply(complex3);
      Complex complex9 = complex4.divide(complex7);
      complex5.add(complex2);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex10.sin();
      complex1.negate();
      complex9.tanh();
      complex1.exp();
      Complex complex12 = new Complex((-0.9999999999996525), 2165.7665263428057);
      complex12.getReal();
      complex8.cos();
      complex11.cosh();
      complex0.divide((-0.9999999999996525));
      complex6.add((-221.05747));
      complex6.log();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      int int0 = 2147483639;
      Complex complex2 = complex0.ZERO.conjugate();
      complex2.ZERO.cos();
      Complex.valueOf((double) 2147483639, (double) 2147483639);
      Complex.valueOf(2.3024744987487793, 2.3024744987487793);
      Complex complex3 = complex1.I.multiply(2147483639);
      complex3.ZERO.negate();
      // Undeclared exception!
      complex1.I.nthRoot(2147483639);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.ONE.subtract((-2712.274492937685));
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.divide(0.0);
      complex0.hashCode();
      Complex complex4 = complex1.acos();
      complex3.multiply((-753));
      complex1.pow(complex4);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1339.0379323039622, 1339.0379323039622);
      complex0.sin();
      Complex complex1 = complex0.pow(1339.0379323039622);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cos();
      Complex complex4 = new Complex(1.2717525853195117);
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = complex4.pow((-3070.3));
      Complex complex7 = Complex.valueOf(769343.5121468114);
      complex6.log();
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      complex1.hashCode();
      complex7.hashCode();
      Complex.valueOf((-1736.4362640018312));
      complex3.multiply(complex6);
      complex0.acos();
      complex6.add((-1736.4362640018312));
      complex3.nthRoot(379);
      Complex complex8 = complex0.add(complex5);
      Complex complex9 = Complex.valueOf(237.0);
      Complex complex10 = complex9.multiply((-1555.098118207));
      complex8.asin();
      complex6.readResolve();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-2045.294578037109), 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.multiply(complex2);
      complex1.sqrt1z();
      complex2.sinh();
      Complex complex4 = Complex.valueOf(110.6710957013, Double.POSITIVE_INFINITY);
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      Complex complex5 = new Complex(110.6710957013, 970.5559871691);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(0.9972787754090483, 0.9972787754090483);
      Complex.valueOf(0.9972787754090483);
      Complex complex2 = new Complex(1.3006683896462346E-8, 0.9972787754090483);
      Complex complex3 = complex2.reciprocal();
      complex3.pow(849.1867532066325);
      complex0.sqrt();
      complex0.multiply(62);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(877.122860349, (-1583.26));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.ZERO.pow((-1555.098118207));
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = new Complex((-1555.098118207));
      Complex complex5 = complex3.NaN.subtract(complex4);
      complex5.add(complex2);
      complex0.I.pow(877.122860349);
      Complex complex6 = Complex.valueOf(877.122860349);
      complex6.I.log();
      complex0.equals(")");
      complex1.hashCode();
      complex0.hashCode();
      Complex.valueOf((-1583.26));
      Complex complex7 = complex0.multiply(complex1);
      complex7.multiply(complex3);
      complex0.hashCode();
      Complex complex8 = complex6.sqrt1z();
      complex0.divide(complex8);
      Complex.valueOf((-1127.37503916), (-1583.26));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf(1.0, (-1.0));
      Complex complex2 = complex0.createComplex((-1.0), (-1.0));
      Complex complex3 = complex0.tan();
      complex0.toString();
      complex1.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.atan();
      complex2.divide(complex1);
      complex6.tanh();
      Complex complex9 = Complex.valueOf(1.0, 2068.579);
      complex9.log();
      complex9.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.9999999999996525, 114.67565531253);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide((-1.0));
      complex2.hashCode();
      Complex complex5 = complex2.acos();
      complex4.toString();
      complex5.negate();
      Complex complex6 = complex5.log();
      complex5.toString();
      complex1.add((-1442236.2836432443));
      complex6.NaN.add(complex3);
      complex4.hashCode();
      complex2.cos();
      complex6.tan();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add(complex0);
      complex0.I.getArgument();
      complex0.ONE.atan();
      complex0.asin();
      Complex complex2 = complex0.pow(complex1);
      complex2.abs();
      complex0.add(323.5);
      complex0.nthRoot(37);
      Complex complex3 = Complex.valueOf(20.0);
//      try { 
        complex3.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = new Complex(2589.7261609921);
      Object object0 = complex1.INF.readResolve();
      ((Complex) object0).ONE.nthRoot(231);
      Complex complex2 = complex0.divide(complex1);
      complex2.multiply(complex1);
      complex1.hashCode();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.atan();
      complex4.pow(complex3);
      complex0.nthRoot(205);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1339.0379323039622, (-2511.415));
      Complex complex1 = complex0.createComplex(1339.0379323039622, (-2511.415));
      Complex complex2 = complex1.tan();
      complex2.ZERO.toString();
      complex0.readResolve();
      Complex complex3 = Complex.NaN;
      complex0.I.multiply(complex2);
      Complex complex4 = complex0.divide(complex3);
      complex3.tanh();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex1.divide(complex3);
      complex6.INF.sin();
      complex2.tanh();
      complex1.INF.nthRoot(2058);
      complex1.log();
      complex0.pow(complex6);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.conjugate();
      complex3.getReal();
      complex0.hashCode();
      Complex complex4 = Complex.valueOf((-365.0), 0.0);
      Complex complex5 = new Complex(285.070334941);
      complex3.readResolve();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex4.multiply(complex5);
      complex7.hashCode();
      complex6.sqrt1z();
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.log();
      complex0.negate();
      complex2.getArgument();
      Complex complex5 = new Complex((-1442236.2836432443));
      Complex complex6 = complex5.subtract(Double.NaN);
      Complex complex7 = complex1.reciprocal();
      complex7.exp();
      Complex complex8 = complex4.atan();
      complex6.abs();
      complex3.equals(complex1);
      complex5.pow(Double.NaN);
      complex6.abs();
      complex4.multiply(complex1);
      complex5.conjugate();
      complex4.sqrt();
      Complex complex9 = complex8.cos();
      complex2.pow(complex9);
      complex4.pow(2.782159649779516);
      complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(877.122860349, (-1583.26));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.ZERO.pow((-1555.098118207));
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = new Complex((-1555.098118207));
      complex3.NaN.subtract(complex4);
      complex0.I.pow(877.122860349);
      Complex complex5 = Complex.valueOf(877.122860349);
      Complex complex6 = complex5.I.log();
      complex0.equals(")");
      complex1.hashCode();
      complex0.hashCode();
      Complex complex7 = Complex.valueOf((-1583.26));
      Complex complex8 = complex0.multiply(complex1);
      complex8.ONE.acos();
      Complex complex9 = complex3.I.add(1611.737484);
      complex4.nthRoot(37);
      complex2.cos();
      complex7.cosh();
      complex0.divide(877.122860349);
      complex9.add(1611.737484);
      complex1.log();
      complex6.nthRoot(2070);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.ONE.subtract((-2712.274492937685));
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.divide(0.0);
      complex0.hashCode();
      complex1.asin();
      Complex complex4 = Complex.valueOf(3147.768099728, (-1.0));
      complex2.pow(complex4);
      complex2.abs();
      complex0.tan();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.divide(0.1913948655128479);
      Complex complex3 = complex2.INF.divide(0.1913948655128479);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.ONE.sinh();
      complex0.hashCode();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      complex6.multiply((-564));
      Complex complex8 = complex1.NaN.tan();
      complex8.I.abs();
      complex6.atan();
      Complex complex9 = complex5.ONE.cos();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex10.INF.subtract((double) (-564));
      Complex complex12 = Complex.valueOf((double) (-564));
      Complex complex13 = complex10.INF.pow(complex7);
      complex10.I.subtract(0.0);
      complex13.INF.sqrt();
      complex10.pow(0.0);
      complex10.isNaN();
      complex5.divide(0.0);
      complex2.createComplex(0.0, 0.0);
      complex10.asin();
      Complex complex14 = complex11.negate();
      Complex complex15 = complex4.divide(complex6);
      complex9.subtract(0.0);
      complex14.pow(complex3);
      complex1.exp();
      Complex.valueOf((-842.297160291));
      complex12.exp();
      complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(2.761628769925529E-8, 2.761628769925529E-8);
      Complex complex2 = Complex.valueOf(2.761628769925529E-8);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex1.sinh();
      complex4.equals(complex0);
      Complex complex5 = complex1.exp();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(859.9242634186448, 859.9242634186448);
      Complex complex1 = Complex.INF;
      complex0.I.nthRoot(3425);
      Complex complex2 = Complex.valueOf(859.9242634186448, 859.9242634186448);
      complex0.ONE.getField();
      Complex complex3 = complex0.subtract(complex1);
      complex0.equals((Object) null);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.INF.negate();
      complex1.ZERO.reciprocal();
      Complex complex6 = complex5.I.divide(complex1);
      Complex complex7 = complex3.multiply(complex0);
      complex4.NaN.acos();
      complex5.cos();
      complex4.hashCode();
      Complex complex8 = complex6.sqrt();
      complex0.getReal();
      complex1.log();
      Complex complex9 = complex6.NaN.tan();
      Complex complex10 = Complex.valueOf(859.9242634186448, (-3336.9547));
      complex8.ONE.tanh();
      complex10.NaN.subtract(complex8);
      complex8.getImaginary();
      complex7.sinh();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex0.conjugate();
      complex2.pow(1.0);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.sin();
//      try { 
        complex0.ONE.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = complex0.INF.tan();
      complex1.ZERO.add(complex0);
      complex0.getField();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.reciprocal();
      complex1.I.acos();
      complex1.INF.hashCode();
      Complex complex4 = complex0.NaN.add(0.0);
      Complex complex5 = complex0.createComplex(1.7069074829463731E180, 0.0);
      Complex complex6 = complex1.I.acos();
      complex6.multiply(complex4);
      complex5.INF.divide(complex4);
      complex5.INF.add(complex4);
      Complex complex7 = complex5.ZERO.sqrt1z();
      complex7.ONE.sin();
      complex1.negate();
      complex7.INF.tanh();
      Complex complex8 = complex0.exp();
      complex0.getReal();
      complex5.cos();
      Complex complex9 = complex5.cosh();
      complex9.I.divide(Double.POSITIVE_INFINITY);
      complex8.add(0.0);
      complex7.log();
      complex3.nthRoot(631);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-2045.294578037109), 0.0);
      complex0.INF.cos();
      Complex complex1 = complex0.sqrt();
      complex0.I.reciprocal();
      Complex complex2 = complex1.pow((-2045.294578037109));
      Complex complex3 = complex2.sqrt();
      complex3.I.multiply((-3217));
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.createComplex(891.64461152, (-276.90315688));
      Complex complex3 = complex2.sinh();
      complex3.ZERO.multiply((-1426));
      complex3.I.toString();
      Complex complex4 = complex0.add(complex2);
      complex2.ZERO.toString();
      complex1.cosh();
      Complex complex5 = Complex.valueOf((-5645.497241808806));
      Complex complex6 = complex2.INF.divide(735.163);
      Complex complex7 = complex2.multiply(891.64461152);
      Complex complex8 = complex7.createComplex(891.64461152, 891.64461152);
      complex8.getArgument();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex1.divide(complex6);
      Complex complex11 = complex10.I.reciprocal();
      complex11.createComplex(891.64461152, (-276.90315688));
      complex7.subtract(2550.0);
      Complex complex12 = complex0.atan();
      complex12.ONE.divide((double) (-1426));
      Complex complex13 = complex2.sinh();
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex14 = complex13.sqrt();
      Complex.valueOf(0.7853981633974483, 2.0);
      complex14.I.hashCode();
      complex9.cos();
      complex4.isNaN();
      complex5.reciprocal();
      complex6.multiply((-1426));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide(0.0);
      complex1.ZERO.acos();
      Complex complex2 = complex0.conjugate();
      complex2.getReal();
      complex0.hashCode();
      Complex.valueOf((-365.0), 0.0);
      Complex complex3 = complex1.multiply(285.070334941);
      complex3.NaN.subtract(complex2);
      Complex complex4 = complex3.ZERO.tan();
      complex4.I.log();
      complex4.I.negate();
      complex1.ONE.getArgument();
      Complex complex5 = complex1.subtract(0.0);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.atan();
      complex8.abs();
      complex6.equals(complex7);
      complex7.abs();
      complex8.multiply(complex1);
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex9.sqrt();
      complex7.cos();
      complex10.INF.pow(complex8);
      complex6.pow(0.0);
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-775.814336471978));
      Complex complex1 = Complex.valueOf((-775.814336471978));
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex0.INF.add(complex1);
      Complex complex3 = complex0.I.sinh();
      complex0.hashCode();
      Complex complex4 = complex0.divide((-1243.19));
      complex4.NaN.createComplex((-1243.19), (-775.814336471978));
      complex4.cos();
      Complex complex5 = complex3.pow((-1243.19));
      complex5.NaN.hashCode();
      complex5.cos();
      Complex complex6 = complex3.sqrt1z();
      complex6.NaN.sqrt();
      complex6.NaN.hashCode();
      complex6.ZERO.divide(0.0);
      complex2.subtract(complex0);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.21765980124473572);
      complex0.getField();
      Complex complex1 = complex0.createComplex(849.1867532066325, 849.1867532066325);
      Complex complex2 = complex0.negate();
      complex1.readResolve();
      Complex complex3 = complex0.NaN.createComplex(0.0, (-265.910345777));
      complex3.ONE.hashCode();
      complex3.INF.negate();
      Complex complex4 = complex0.sqrt();
      complex4.getArgument();
      Complex complex5 = complex4.INF.multiply(complex2);
      complex4.tan();
      Complex complex6 = complex1.sqrt();
      complex4.nthRoot(1);
      complex6.sqrt1z();
      complex1.exp();
      Complex complex7 = complex5.tanh();
      complex2.isInfinite();
      complex1.acos();
      complex5.pow((-20.0));
      complex7.multiply((-2205.74));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1037.5917084, 1037.5917084);
      Complex complex1 = complex0.ONE.acos();
      complex0.NaN.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex.valueOf(Double.NaN);
      complex2.ONE.toString();
      complex2.NaN.hashCode();
      Complex complex3 = complex0.ZERO.log();
      complex0.I.getArgument();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex4.I.multiply(complex0);
      Complex complex6 = complex4.I.multiply((-2059));
      Complex complex7 = complex6.ZERO.sinh();
      complex7.ONE.asin();
      complex6.getArgument();
      Complex complex8 = complex0.add(1.0);
      complex8.multiply(complex2);
      complex1.abs();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex6.ZERO.negate();
      complex10.acos();
      Complex complex11 = complex9.ONE.add(0.0);
      complex3.INF.getArgument();
      complex9.hashCode();
      Complex complex12 = complex3.add(0.0);
      complex9.I.conjugate();
      complex6.subtract(complex5);
      complex1.divide(complex6);
      complex12.getField();
      complex11.pow(1142.1);
      complex5.atan();
      Complex complex13 = complex0.subtract(complex9);
      complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = 683.0;
      Complex complex0 = new Complex(683.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sinh();
      complex3.ZERO.cosh();
      complex0.ONE.pow(1385.0);
      complex3.ZERO.toString();
      complex3.hashCode();
      int int0 = 0;
//      try { 
        complex2.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(877.122860349, (-1583.26));
      Complex complex1 = complex0.I.sin();
      complex0.ZERO.pow((-1555.098118207));
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = new Complex((-1555.098118207));
      complex2.NaN.subtract(complex3);
      complex0.I.pow(877.122860349);
      Complex complex4 = Complex.valueOf(877.122860349);
      complex4.I.log();
      complex0.equals(")");
      complex1.hashCode();
      complex0.hashCode();
      Complex.valueOf((-1583.26));
      Complex complex5 = complex0.multiply(complex1);
      complex5.ONE.acos();
      complex2.I.add(1611.737484);
      complex3.nthRoot(37);
      complex2.add(complex1);
      Complex.valueOf(0.0);
      complex0.multiply(0.0);
      complex5.asin();
      complex0.readResolve();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.getArgument();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.NaN.subtract(0.0);
      complex4.sqrt();
      complex2.isInfinite();
      Complex complex5 = complex0.ZERO.multiply(2045);
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex2.add(complex6);
      Complex.valueOf(365.846829, (double) 2045);
      Complex complex8 = complex6.ZERO.cos();
      complex8.NaN.readResolve();
      complex8.divide(complex3);
      complex4.toString();
      Complex complex9 = complex6.exp();
      complex6.divide(complex4);
      complex4.add(complex7);
      Complex complex10 = complex1.exp();
      Complex complex11 = complex4.multiply((-416));
      complex11.log();
      complex2.getField();
      complex9.abs();
      complex10.getField();
      complex5.getReal();
      complex11.sinh();
      Complex complex12 = complex9.tanh();
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-1552.521681584561));
      complex0.ONE.createComplex((-1552.521681584561), 249.78778981);
      Complex complex1 = complex0.atan();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.ONE.subtract((-2712.274492937685));
      Complex complex2 = complex1.cos();
      complex2.I.divide(0.0);
      complex0.hashCode();
      Complex complex3 = complex1.acos();
      complex3.INF.toString();
      Complex complex4 = complex3.negate();
      complex0.ONE.log();
      complex4.toString();
      Complex complex5 = complex4.add((-2712.274492937685));
      complex4.hashCode();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.tan();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(51.6166, 0.0);
      complex0.getImaginary();
      complex0.getImaginary();
      Complex complex1 = complex0.cos();
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.createComplex(363.186, 51.6166);
      Complex complex3 = complex2.multiply(51.6166);
      complex3.readResolve();
      Complex complex4 = complex2.divide(51.6166);
      complex4.I.sqrt();
      complex0.getReal();
      Complex complex5 = complex2.sqrt1z();
      complex5.ZERO.multiply(complex1);
      Complex complex6 = complex5.add(51.6166);
      complex6.getImaginary();
      complex6.NaN.toString();
      Complex complex7 = Complex.valueOf((-187.9157), (-459.7711));
      complex0.tanh();
      Complex.valueOf(0.0, (-1589.19582));
      complex6.subtract(0.0);
      complex3.getField();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.cosh();
      complex0.ONE.tan();
      Complex complex4 = complex3.multiply(1911.128137);
      Complex complex5 = complex4.ONE.sqrt();
      complex4.equals(complex3);
      Complex complex6 = complex3.add(complex0);
      complex2.I.cosh();
      Complex complex7 = complex3.I.exp();
      Complex complex8 = complex2.subtract(1911.128137);
      Complex complex9 = complex3.ONE.acos();
      Complex complex10 = complex8.I.add((-12.82735334));
      complex0.hashCode();
      Complex.valueOf(1911.128137, (-12.82735334));
      complex5.isNaN();
      Complex complex11 = complex4.tanh();
      complex11.I.readResolve();
      Complex complex12 = complex10.log();
      Complex complex13 = complex12.INF.sqrt1z();
      complex3.getReal();
      Complex complex14 = complex5.divide(0.0);
      complex14.cosh();
      complex9.subtract(1.0);
      Complex complex15 = complex0.negate();
      complex13.NaN.hashCode();
      complex15.NaN.sqrt();
      complex13.add(complex12);
      complex1.hashCode();
      complex6.asin();
      complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2096.2382), (-2096.2382));
      Complex complex1 = complex0.multiply((-2096.2382));
      Complex complex2 = complex1.I.sinh();
      complex2.ONE.add(complex1);
      Complex complex3 = complex0.add((-2096.2382));
      complex3.sqrt();
      complex0.isInfinite();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(5.622626080395226E67, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.cosh();
      complex1.pow(complex3);
      complex2.isNaN();
//      try { 
        complex0.nthRoot((-2022));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,022
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.INF.getField();
      complex0.I.add(complex1);
      Complex complex2 = complex0.I.exp();
      Complex.valueOf(0.0, 0.0);
      complex0.add(0.0);
      complex2.equals(complex0);
      complex0.sqrt1z();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1339.0379323039622, (-2511.415));
      Complex complex1 = complex0.createComplex(1339.0379323039622, (-2511.415));
      Complex complex2 = complex1.tan();
      complex2.ZERO.toString();
      complex0.readResolve();
      Complex complex3 = Complex.NaN;
      complex0.I.multiply(complex2);
      Complex complex4 = complex0.divide(complex3);
      complex3.tanh();
      complex4.ZERO.atan();
      Complex complex5 = complex1.divide(complex3);
      complex2.tanh();
      complex1.log();
      complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.32623589038848877);
      Complex complex1 = complex0.log();
      complex1.I.sin();
      Complex complex2 = complex0.ZERO.createComplex((-1827.01281928), 2.0);
      complex2.ONE.readResolve();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = complex0.pow(2281.985);
      complex0.conjugate();
      complex0.add(3930.0);
      complex2.createComplex(1384.17, 1918.88886);
      complex5.ONE.divide(complex4);
      Complex complex6 = complex1.NaN.atan();
      complex5.tan();
      complex3.getImaginary();
      complex1.atan();
      complex2.hashCode();
      complex6.subtract(complex1);
      Complex complex7 = complex4.divide(1918.88886);
      complex1.subtract(2.0);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.NaN.exp();
      complex2.ONE.tanh();
      Complex complex3 = complex2.INF.negate();
      complex3.cosh();
      complex3.ONE.createComplex(0.0, 0.0);
      complex0.pow(1456.0);
      Complex complex4 = complex0.negate();
      complex4.I.subtract(complex2);
      complex1.sin();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      complex0.readResolve();
      Complex complex2 = complex0.conjugate();
      complex1.divide(0.0);
      Complex.valueOf((-1558.5097456));
      complex0.ONE.toString();
      Complex complex3 = complex0.multiply(1.2641184329986572);
      complex3.log();
      complex3.toString();
      Complex complex4 = complex0.atan();
      complex4.sqrt();
      complex2.INF.abs();
      Complex complex5 = complex0.sqrt1z();
      complex5.sqrt();
      complex5.ZERO.tan();
      complex2.sqrt1z();
      complex1.getArgument();
      complex0.getField();
      Complex complex6 = complex2.acos();
      complex3.readResolve();
      Complex complex7 = Complex.NaN;
      complex6.add(complex7);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.toString();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(1060.0, (-1448.71562432));
      Complex complex3 = complex2.subtract(complex1);
      complex3.cos();
      complex2.readResolve();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex2.asin();
      complex5.INF.cosh();
      complex5.ONE.getArgument();
      Complex.valueOf(0.0);
      complex3.nthRoot(1264);
      complex4.multiply(0.0);
      complex4.reciprocal();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      complex0.multiply(1261.2069098716);
      Complex complex1 = complex0.negate();
      complex0.cos();
      Complex complex2 = complex0.negate();
      complex2.reciprocal();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      complex0.ONE.abs();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex0.ONE.hashCode();
      complex0.ONE.negate();
      Complex complex3 = complex1.subtract(0.0);
      complex3.I.hashCode();
      Complex complex4 = complex1.ONE.tan();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex0.ONE.subtract(complex1);
      complex6.I.reciprocal();
      complex6.atan();
      complex6.ONE.log();
      complex6.I.abs();
      Complex complex7 = complex0.multiply(0);
      complex7.sin();
      Complex complex8 = Complex.valueOf(0.0);
      complex1.cosh();
      Complex.valueOf(0.0);
      complex2.readResolve();
      Complex complex9 = complex5.subtract(complex0);
      complex8.ONE.tanh();
      complex9.sin();
      Complex complex10 = complex8.divide(complex7);
      complex10.INF.tan();
      Complex complex11 = complex3.createComplex(0.0, 1.0);
      Complex complex12 = complex11.createComplex(1.0, 0);
      complex3.sin();
      complex12.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      complex0.hashCode();
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.multiply(complex1);
      Complex complex2 = complex0.cos();
      Complex complex3 = null;
//      try { 
        complex2.I.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.608884086544153E-8));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.multiply(2204);
      complex0.readResolve();
      Complex complex2 = new Complex((-1.608884086544153E-8));
      Complex complex3 = complex2.INF.cos();
      complex0.INF.createComplex(2.2867884635925293, (-1.608884086544153E-8));
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.I.atan();
      complex5.exp();
      complex3.NaN.hashCode();
      complex4.ONE.createComplex(1250.4088089, 2204);
      complex2.log();
      complex1.asin();
      complex4.hashCode();
      complex3.createComplex(0.2546725273132324, 20.0);
      complex1.multiply(1463.9886671151064);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.NaN.multiply(2.0);
      complex3.ZERO.abs();
      complex0.I.negate();
      complex0.INF.reciprocal();
      Complex complex5 = complex1.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex6.I.reciprocal();
      complex7.ZERO.reciprocal();
      complex3.readResolve();
      complex0.pow(6.283185307179586);
      complex3.toString();
      complex4.sinh();
      complex6.createComplex(0.0, 6.283185307179586);
      complex2.divide(1.9237892627716064);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex0.I.getArgument();
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex3.ONE.atan();
      complex0.asin();
      Complex complex4 = complex1.pow(complex2);
      complex4.abs();
      Complex complex5 = complex4.pow(0.0);
      complex1.tan();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.add(1933.0);
      Complex complex4 = complex2.sin();
      complex4.readResolve();
      complex4.ONE.readResolve();
      complex0.I.tan();
      Complex complex5 = complex4.divide((-1249.805773461));
      complex5.NaN.cosh();
      complex4.exp();
      Complex complex6 = complex3.conjugate();
      complex1.hashCode();
      Complex complex7 = complex2.add(Double.NaN);
      complex5.hashCode();
      complex7.exp();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      Complex complex1 = complex0.multiply((-4270.772181369727));
      Complex complex2 = complex0.INF.tanh();
      complex2.NaN.subtract(7.321238022013781E-8);
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = Complex.valueOf(2401.041122, (-4270.772181369727));
      Complex complex5 = complex3.INF.multiply(complex4);
      Complex complex6 = new Complex(0.0, 2401.041122);
      complex5.subtract(complex6);
      complex0.getField();
      complex0.isInfinite();
      complex1.readResolve();
      Complex complex7 = complex0.pow(2946.060818);
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(896.78660582, 896.78660582);
      complex0.getImaginary();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ZERO.multiply(3003);
      complex0.getReal();
      Complex complex3 = new Complex((-171.1112024178));
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.ONE.tan();
      complex6.I.negate();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertEquals(1.557407724654902, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.divide(complex1);
      Complex complex9 = complex1.add((-2792.0511766442));
      assertEquals((-2792.0511766442), complex9.getReal(), 0.01);
      
      complex7.sqrt1z();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex1.asin();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex10.createComplex(Double.NaN, 0.0);
      Complex complex13 = Complex.valueOf((double) 3003);
      complex12.I.subtract(complex13);
      Complex complex14 = complex7.asin();
      Complex complex15 = complex4.conjugate();
      complex8.tan();
      Complex complex16 = complex14.sin();
      assertTrue(complex16.equals((Object)complex2));
      
      complex1.divide(Double.NaN);
      complex8.sqrt();
      assertSame(complex8, complex15);
      
      complex0.getArgument();
      Complex complex17 = Complex.valueOf(0.0, (double) 3003);
      assertFalse(complex17.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex2.I.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex0.ONE.nthRoot(1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.multiply(2098);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.I.tan();
      List<Complex> list0 = complex1.nthRoot(1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex6));
      
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex7.INF.add((-304.05705546306));
      Complex complex12 = complex10.ONE.asin();
      assertEquals(1.5707963267948966, complex12.getReal(), 0.01);
      
      Complex complex13 = complex10.divide(complex6);
      Complex complex14 = complex7.divide(0.0);
      assertSame(complex14, complex13);
      assertEquals(0.7615941559557649, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex14, complex11);
      
      Complex complex15 = complex5.multiply(2.0);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertTrue(complex15.equals((Object)complex9));
      
      complex1.hashCode();
      Complex complex16 = complex10.atan();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex16.getReal(), 0.01);
      
      Complex complex17 = Complex.valueOf((-945.024509), (-591.09944));
      assertFalse(complex17.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      double double0 = (-130.99932211);
      Complex complex0 = Complex.valueOf((-130.99932211), (-130.99932211));
      complex0.getReal();
      Complex complex1 = complex0.ONE.exp();
      complex0.INF.hashCode();
      Complex complex2 = complex0.createComplex((-130.99932211), Double.POSITIVE_INFINITY);
      complex2.ZERO.divide(0.0);
      complex2.NaN.sqrt();
      Complex complex3 = complex1.add((-130.99932211));
      Complex complex4 = complex3.NaN.multiply(215);
      complex4.ZERO.add(complex3);
//      try { 
        complex3.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ZERO.add(5.575759739697068E-8);
      complex0.isInfinite();
      complex0.isInfinite();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.sqrt1z();
      String string0 = complex3.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex1.add(899.5027204802866);
      Complex complex4 = complex3.sinh();
      complex3.I.createComplex(0.0, 0.0);
      Complex complex5 = complex0.pow((-427.8111051633387));
      assertEquals(0.9563020243687348, complex5.getReal(), 0.01);
      assertEquals((-0.29238063921583396), complex5.getImaginary(), 0.01);
      
      complex2.abs();
      Complex complex6 = complex4.sin();
      assertSame(complex6, complex4);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
  }
}
