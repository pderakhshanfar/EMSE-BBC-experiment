/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:20:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(7.89187408872514E284);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.cos();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ZERO;
      complex0.NaN.log();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.conjugate();
      complex4.atan();
      complex5.tan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.cos();
      complex0.add(20.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ZERO;
      complex1.tan();
      Complex complex4 = complex0.conjugate();
      complex4.multiply((-1206.0356466160688));
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.cos();
      complex0.add(20.0);
      complex0.readResolve();
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf((-335.2));
      complex1.cos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      complex1.pow(complex3);
      Complex complex4 = complex0.multiply(Double.NaN);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(20.10704066179385, 20.10704066179385);
      Complex complex1 = new Complex((-311.91545), 0.0031231379836689473);
      Complex complex2 = Complex.INF;
      complex2.cos();
      Complex complex3 = new Complex(2410.32646335, 20.10704066179385);
      Complex complex4 = complex3.add(Double.NaN);
      complex4.sqrt1z();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      complex6.sinh();
      complex0.sqrt1z();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(7, Double.POSITIVE_INFINITY);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(34);
      Complex complex1 = complex0.pow((double) 34);
      complex1.nthRoot(34);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.multiply(1641);
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.tanh();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex0.subtract(complex1);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.reciprocal();
      complex0.multiply(4421.602237230626);
      complex3.nthRoot(3709);
      complex1.getArgument();
      complex2.toString();
      Complex complex4 = new Complex((-20.0));
      complex0.subtract((-1046.8973));
      complex0.nthRoot(1067);
//      try { 
        complex2.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-922.343184426846));
      Complex complex2 = complex0.add(3.091617462831603E221);
      complex2.sqrt1z();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.I;
      complex4.sinh();
      complex4.subtract(3.091617462831603E221);
      complex0.toString();
      complex1.tan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2777.625);
      Complex complex1 = complex0.createComplex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(2777.625);
      complex2.asin();
      complex0.getField();
      Complex complex3 = Complex.valueOf(2.9394972678456236E-8);
      Complex complex4 = complex1.subtract(20.0);
      complex1.readResolve();
      complex4.toString();
      Complex complex5 = Complex.valueOf(3893.594897267178, Double.POSITIVE_INFINITY);
      complex5.multiply(25);
      complex3.negate();
      complex5.pow(complex0);
      complex3.asin();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1946.7975), (-1946.7975));
      complex0.asin();
      Complex complex1 = Complex.I;
      complex1.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.I;
      complex3.toString();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract(complex0);
      complex6.asin();
      complex4.getArgument();
      complex2.reciprocal();
      Complex complex7 = complex0.cos();
      complex1.nthRoot(1078);
      complex1.getArgument();
      complex5.subtract((-673.7814707033));
      Complex complex8 = Complex.NaN;
      complex8.add(complex0);
      Complex.valueOf((-2011.636538749), (-1946.7975));
      Complex complex9 = Complex.INF;
      complex0.isNaN();
      complex7.hashCode();
      complex0.multiply(558);
      complex5.sqrt();
      Complex complex10 = Complex.I;
      complex3.conjugate();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = new Complex((-2360.877674416));
      complex4.reciprocal();
      Complex complex5 = complex4.cos();
      complex1.nthRoot(544);
      complex4.getArgument();
      Complex complex6 = complex0.subtract((-2360.877674416));
      Complex complex7 = complex0.add(complex6);
      complex6.isNaN();
      Complex complex8 = new Complex((-2360.877674416));
      complex5.conjugate();
      complex3.negate();
      complex7.conjugate();
      Complex complex9 = new Complex(544);
      Complex complex10 = new Complex((-2360.877674416), 544);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1254.0), 0.04997916927067833);
      complex0.ONE.abs();
      complex0.INF.abs();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.pow(1.0);
      Complex complex4 = complex0.ONE.cos();
      complex4.sqrt();
      Complex complex5 = complex0.ZERO.tan();
      complex5.NaN.asin();
      Complex complex6 = Complex.valueOf((-4376.115787008), (-1254.0));
      complex3.ONE.divide(complex2);
      complex6.NaN.exp();
      Complex complex7 = complex2.ONE.multiply(1853.5407734144);
      Complex complex8 = complex1.subtract(1.0);
      complex8.readResolve();
      complex7.toString();
      complex7.ZERO.multiply(122.988946861);
      complex7.sqrt();
      complex7.sqrt();
      complex3.sqrt();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.valueOf(1.9140971884979424E97);
      complex3.cosh();
      complex3.isNaN();
      Complex complex4 = Complex.ZERO;
      complex2.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.add(complex3);
      complex2.equals(complex3);
      complex2.isNaN();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.divide(1.9140971884979424E97);
      Complex complex9 = complex3.negate();
      complex0.INF.acos();
      Complex complex10 = complex9.sqrt();
      complex10.INF.divide(Double.POSITIVE_INFINITY);
      complex8.tan();
      Complex complex11 = new Complex((-2956.30939596));
      Complex complex12 = complex4.conjugate();
      complex0.conjugate();
      Complex complex13 = new Complex((-1.1370060518018749E7));
      complex5.exp();
      complex9.getField();
      complex12.pow((-1.1370060518018749E7));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(2982.6221418359);
      Complex complex3 = complex0.sinh();
      complex3.toString();
      Complex complex4 = complex0.asin();
      complex1.getArgument();
      Complex complex5 = complex2.reciprocal();
      complex1.cos();
      complex5.getArgument();
      Complex complex6 = complex3.subtract(20.0);
      complex0.isNaN();
      complex4.hashCode();
      complex1.isNaN();
      complex1.divide((-1.1504440784612406));
      Complex complex7 = complex6.negate();
      complex1.sqrt();
      Complex complex8 = new Complex(20.0, 20.0);
      complex8.tan();
      complex7.conjugate();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.equals("");
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(893.53622235);
      Complex complex5 = complex1.cosh();
      complex5.cos();
      complex3.nthRoot(1);
      complex1.getArgument();
      Complex complex6 = Complex.NaN;
      complex6.subtract((double) 1078);
      complex4.subtract(2055.19491);
      Complex complex7 = new Complex(893.53622235);
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = Complex.valueOf((-8.204903560604627E-9), 2.1002377128928765E-171);
      complex6.isNaN();
      complex2.hashCode();
      complex2.multiply(391);
      complex9.sqrt();
      Complex complex10 = Complex.I;
      Complex.valueOf(2510.458686052);
      complex8.conjugate();
      Complex complex11 = new Complex((-654.0), Double.NaN);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1921.1131469097;
      Complex complex0 = Complex.valueOf(2533.2510665, 1921.1131469097);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.subtract(1921.1131469097);
      Complex complex3 = complex2.ZERO.add(complex0);
      complex3.getField();
      complex0.NaN.toString();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.sin();
      complex5.ZERO.multiply(complex3);
      complex5.ZERO.log();
      Complex complex6 = complex4.pow((-9.692697614257269E-8));
      complex6.multiply(4.881858015995467E-14);
//      try { 
        complex5.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.multiply(0);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.INF.createComplex(2206.9792367751, 2206.9792367751);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.INF.divide(complex1);
      complex5.I.getArgument();
      complex0.log();
      complex3.subtract((-2.209492705846306E-7));
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.add(complex2);
      complex2.acos();
      complex7.cosh();
      complex0.conjugate();
      complex0.abs();
      Complex complex9 = new Complex((-2.209492705846306E-7), 1263.4841251);
      Complex complex10 = Complex.valueOf((-2.209492705846306E-7));
      complex9.pow(complex10);
      Complex complex11 = complex8.atan();
      complex6.readResolve();
      complex8.equals(complex1);
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex(20.0);
      Complex complex3 = Complex.INF;
      complex1.toString();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.ONE;
      complex1.ONE.getArgument();
      Complex complex6 = complex1.subtract(0.1151374051198738);
      Complex complex7 = Complex.valueOf((-1.0), 0.1151374051198738);
      complex3.isNaN();
      complex0.hashCode();
      Complex complex8 = complex6.multiply((-1948));
      complex7.readResolve();
      complex0.equals(complex1);
      complex5.isNaN();
      complex4.divide(2982.6221418359);
      Complex complex9 = complex8.negate();
      complex7.sqrt();
      complex7.tan();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = new Complex(0.1151374051198738, 20.0);
      complex11.pow(complex10);
      complex4.exp();
      Complex complex12 = complex11.cosh();
      complex12.ONE.divide(0.1151374051198738);
      complex9.multiply((-3688));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.multiply(0);
      complex1.I.negate();
      Complex complex3 = complex0.INF.createComplex(2206.9792367751, 2206.9792367751);
      Complex complex4 = complex3.NaN.sin();
      complex2.INF.atan();
      Complex complex5 = complex4.INF.divide(complex1);
      complex4.I.getArgument();
      Complex complex6 = complex0.log();
      complex6.ONE.negate();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.negate();
      complex7.subtract((-153.06090839));
      Complex complex9 = complex2.add(complex5);
      complex9.equals(complex7);
      complex9.isNaN();
      Complex complex10 = complex1.divide(2206.9792367751);
      complex1.negate();
      complex8.sqrt();
      complex1.tan();
      Complex.valueOf(2206.9792367751);
      Complex complex11 = new Complex((-1.0));
      complex11.conjugate();
      complex10.conjugate();
      complex5.exp();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.equals("");
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.NaN.sin();
      complex4.I.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cosh();
      Complex complex5 = Complex.ZERO;
      complex2.multiply(1);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.add(complex2);
      Complex complex8 = Complex.ONE;
      Object object0 = complex8.readResolve();
      complex3.equals(object0);
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.isNaN();
      Complex complex10 = Complex.ZERO;
      complex7.divide(Double.NaN);
      Complex complex11 = complex2.negate();
      complex11.sqrt();
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.tan();
      Complex complex14 = new Complex(1396.07687);
      complex4.conjugate();
      complex13.conjugate();
      Complex complex15 = new Complex(Double.NaN);
      complex13.exp();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.createComplex((-1.0), 475.0);
      Complex complex3 = Complex.valueOf((-1.0));
      complex0.getField();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.INF.subtract(475.0);
      Complex complex7 = complex6.add(complex0);
      Complex complex8 = complex7.ZERO.acos();
      complex8.cosh();
      complex1.ONE.conjugate();
      complex8.INF.abs();
      complex1.pow(complex3);
      Complex complex9 = complex2.atan();
      complex9.readResolve();
      complex7.equals(complex5);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(2206.9792367751);
      Complex complex3 = complex2.sinh();
      complex1.toString();
      complex2.subtract(complex3);
      Complex complex4 = complex2.asin();
      complex4.getArgument();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.cos();
      Complex complex7 = Complex.valueOf(6.283185307179586);
      complex0.cosh();
      complex1.isNaN();
      Complex complex8 = Complex.ZERO;
      complex1.hashCode();
      Complex complex9 = complex1.multiply(1047);
      complex6.add(complex0);
      complex7.equals(complex1);
      complex7.isNaN();
      Complex complex10 = complex5.divide((-3084.0));
      Complex complex11 = complex0.negate();
      complex2.sqrt();
      complex9.tan();
      Complex complex12 = Complex.INF;
      complex12.conjugate();
      complex11.conjugate();
      complex1.exp();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.createComplex((-1.0), 475.0);
      complex0.getField();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.INF.subtract(475.0);
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex6.ZERO.acos();
      complex7.cosh();
      complex1.ONE.conjugate();
      complex7.INF.abs();
      Complex complex8 = complex1.pow(complex2);
      complex8.conjugate();
      Complex complex9 = complex6.sinh();
      complex9.I.add(complex0);
      Complex complex10 = Complex.I;
      complex3.multiply(complex10);
      Complex.valueOf(475.0, 1.0);
      complex1.tanh();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1946.7975), (-1946.7975));
      Complex complex1 = complex0.asin();
      complex0.getArgument();
      Complex complex2 = complex1.reciprocal();
      complex2.I.abs();
      Complex complex3 = complex0.cos();
      complex3.nthRoot(1078);
      complex1.getArgument();
      Complex complex4 = complex1.subtract(5597.25294);
      Complex complex5 = Complex.valueOf(2130.70041860603, (-2.356194490192345));
      complex5.isNaN();
      complex4.hashCode();
      Complex complex6 = complex3.multiply(1078);
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      complex4.isNaN();
      complex4.divide(0.0);
      complex3.negate();
      Complex complex7 = complex0.sqrt();
      complex1.tan();
      Complex complex8 = complex3.conjugate();
      complex8.ONE.pow(complex7);
      complex7.exp();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.equals("");
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.sin();
      complex0.cosh();
      Complex complex4 = Complex.valueOf(893.53622235);
      Complex complex5 = complex1.cosh();
      complex5.isNaN();
      Complex complex6 = Complex.ZERO;
      complex3.hashCode();
      complex5.multiply(376);
      Complex complex7 = Complex.ONE;
      complex7.add(complex1);
      complex2.equals(complex3);
      complex5.isNaN();
      Complex complex8 = Complex.ZERO;
      complex8.divide(Double.POSITIVE_INFINITY);
      complex8.negate();
      complex0.sqrt();
      complex6.tan();
      Complex complex9 = new Complex(1396.07687);
      complex9.conjugate();
      complex0.conjugate();
      Complex complex10 = new Complex((-2.0));
      complex10.exp();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.equals("");
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.I.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cosh();
      Complex complex6 = Complex.ZERO;
      complex6.hashCode();
      Complex complex7 = complex1.multiply(1047);
      complex7.INF.add(complex5);
      complex6.equals(complex2);
      complex2.isNaN();
      Complex complex8 = complex1.divide((double) 1);
      complex6.negate();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex1.conjugate();
      complex11.I.conjugate();
      complex2.conjugate();
      complex8.exp();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex.valueOf(2982.6221418359);
      complex1.INF.sinh();
      complex1.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.asin();
      complex1.ONE.getArgument();
      Complex complex4 = complex2.reciprocal();
      complex4.ZERO.cos();
      complex4.nthRoot(1078);
      complex2.getArgument();
      Complex complex5 = complex0.subtract(20.0);
      Complex.valueOf(20.0, 0.0);
      complex0.isNaN();
      complex3.hashCode();
      Complex complex6 = complex5.multiply(1078);
      complex6.equals(complex4);
      complex0.isNaN();
      Complex complex7 = complex0.NaN.divide(2.0);
      complex5.negate();
      Complex complex8 = complex0.sqrt();
      complex8.I.tan();
      complex1.exp();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex.valueOf(2982.6221418359);
      Complex complex2 = complex1.INF.sinh();
      complex1.toString();
      Complex complex3 = complex0.sin();
      complex2.cosh();
      Complex complex4 = Complex.valueOf(2992.3609758035);
      complex2.cosh();
      complex2.isNaN();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.INF;
      complex6.hashCode();
      complex4.multiply(1047);
      Complex complex7 = complex3.add(complex1);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex8 = complex5.divide((-2192.083817273));
      Complex complex9 = complex6.negate();
      complex6.sqrt();
      Complex complex10 = complex7.tan();
      complex8.conjugate();
      complex3.conjugate();
      complex10.exp();
      complex10.getField();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-1440.59), 0.0);
      complex0.isInfinite();
      complex0.atan();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1407.7472421626);
      Complex complex2 = complex0.add(complex1);
      complex2.I.conjugate();
      Complex complex3 = complex2.subtract(Double.NaN);
      Complex complex4 = complex2.sin();
      complex4.ZERO.conjugate();
      Complex complex5 = complex3.acos();
      complex4.tanh();
      complex1.INF.add(complex3);
      complex2.multiply(1338);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.INF.pow(0.0);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.ZERO.reciprocal();
      ComplexField complexField0 = complex0.getField();
      complex4.equals(complexField0);
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex0.asin();
      complex2.getArgument();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex4.cos();
      complex8.nthRoot(887);
      complex4.getArgument();
      Complex complex10 = complex2.subtract(0.0);
      complex7.add(complex9);
      Complex complex11 = Complex.valueOf((-89.76972898437), Double.NaN);
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.isNaN();
      complex6.hashCode();
      complex4.multiply(1078);
      Complex complex13 = Complex.valueOf(1355.7944665, Double.NaN);
      complex3.equals(complex13);
      complex10.isNaN();
      complex6.divide(2.546119213104248);
      complex6.negate();
      complex6.sqrt();
      complex12.tan();
      complex11.conjugate();
      Complex complex14 = new Complex(887, 2.2423840341717488E-9);
      complex14.exp();
      complex12.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.equals("");
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.I.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cosh();
      complex1.isNaN();
      Complex complex6 = Complex.ZERO;
      complex6.hashCode();
      Complex complex7 = complex1.multiply(1047);
      complex7.INF.add(complex5);
      complex6.equals(complex2);
      complex2.isNaN();
      complex1.divide((double) 1);
      complex6.negate();
      Complex complex8 = complex3.sqrt();
      complex8.tan();
      Complex complex9 = complex1.conjugate();
      complex9.I.conjugate();
      complex9.exp();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex.valueOf(2982.6221418359);
      complex1.INF.sinh();
      complex1.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.asin();
      complex1.ONE.getArgument();
      Complex complex4 = complex2.reciprocal();
      complex4.ZERO.cos();
      complex4.nthRoot(1078);
      complex2.getArgument();
      Complex complex5 = complex0.subtract(20.0);
      Complex complex6 = complex2.add(complex0);
      Complex.valueOf(20.0, 0.0);
      complex0.isNaN();
      complex6.hashCode();
      Complex complex7 = complex5.multiply(1078);
      complex7.equals(complex4);
      complex6.isNaN();
      complex6.NaN.divide(2.0);
      complex0.tanh();
      complex6.conjugate();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 276.12652298656434);
      complex0.getField();
      complex0.NaN.getArgument();
      Complex complex1 = complex0.divide(0.0);
      complex1.INF.readResolve();
      Complex complex2 = Complex.valueOf(Double.NaN, 0.0);
      complex0.isInfinite();
      complex1.INF.divide(complex2);
      Complex complex3 = complex1.multiply(1);
      Complex complex4 = Complex.ONE;
      complex1.add(0.0);
      Complex complex5 = Complex.ONE;
      complex2.equals(complex5);
      complex3.sin();
      Complex complex6 = complex5.sinh();
      complex6.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.I;
      complex0.tanh();
      Complex complex3 = complex0.conjugate();
      complex3.subtract((-1.5707963267948966));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = Complex.valueOf((-1.5707963267948966));
      Complex.valueOf((-1.5707963267948966));
      Complex complex7 = complex6.tan();
      complex7.I.cos();
      complex0.pow(3499.5566544975395);
      complex5.abs();
      complex6.subtract((-2.650684279637763E-14));
      complex6.pow(0.3005385398864746);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(1730);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.createComplex(0.7080734182735711, 0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex1.divide(complex3);
      complex1.getArgument();
      Complex complex7 = complex4.log();
      complex5.negate();
      Complex complex8 = Complex.I;
      complex7.negate();
      Complex complex9 = complex3.sin();
      complex2.cosh();
      Complex.valueOf(0.7080734182735711);
      complex1.cosh();
      complex6.multiply(0);
      Complex complex10 = complex3.sqrt1z();
      complex10.asin();
      complex3.toString();
      complex9.multiply(1730);
      Complex complex11 = new Complex(0);
      complex11.nthRoot(291);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(2206.9792367751);
      Complex complex3 = complex2.sinh();
      complex1.toString();
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.asin();
      complex5.getArgument();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex5.cos();
      complex6.nthRoot(1078);
      complex2.getArgument();
      Complex complex8 = new Complex(1.0783308235138946);
      Complex complex9 = complex8.subtract(345.70878878);
      complex4.add(complex6);
      Complex.valueOf(2206.9792367751, 766.19607346657);
      complex9.isNaN();
      complex8.hashCode();
      Complex complex10 = complex9.multiply((-454));
      complex10.ONE.getField();
      Complex complex11 = Complex.INF;
      complex3.equals(complex11);
      complex7.isNaN();
      complex4.divide((double) 1078);
      complex1.negate();
      Complex complex12 = Complex.INF;
      complex12.sqrt();
      complex8.tan();
      complex4.conjugate();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.equals("");
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.divide(complex4);
      complex5.getArgument();
      Complex complex6 = new Complex((-1.5707963267948966));
      complex6.log();
      Complex complex7 = complex3.negate();
      Complex complex8 = Complex.I;
      complex3.negate();
      complex1.sin();
      complex2.cosh();
      Complex complex9 = Complex.valueOf((-2360.877674416));
      complex9.I.pow(61.9);
      complex2.cosh();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.multiply((-1));
      Complex complex12 = complex7.sqrt1z();
      complex12.asin();
      complex9.toString();
      complex11.multiply(2452);
      complex7.nthRoot(1);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.167);
      Complex complex1 = complex0.ZERO.acos();
      complex0.getField();
      complex0.readResolve();
      complex0.readResolve();
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.ONE.tanh();
      complex0.NaN.toString();
      Complex complex3 = complex1.pow(complex0);
      complex1.ONE.createComplex(1.0, 166.04445394155);
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.NaN.sinh();
      complex4.I.reciprocal();
      Complex complex6 = complex4.ZERO.sqrt();
      complex6.ZERO.toString();
      complex4.tan();
      complex5.INF.reciprocal();
      Complex.valueOf(166.04445394155);
      complex3.abs();
      Complex complex7 = Complex.valueOf(0.167, 166.04445394155);
      complex7.ZERO.nthRoot(990);
      complex3.subtract((-1500.1));
      Complex.valueOf(1.0783308235138946, (-190.233));
      complex0.abs();
      complex2.pow(1781.089299813);
      complex3.pow((-1500.1));
      complex0.abs();
      complex2.abs();
      complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.I.multiply(complex0);
      complex1.INF.getField();
      complex0.I.nthRoot(1);
      Complex complex3 = complex0.INF.reciprocal();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.INF.multiply(1);
      complex5.ONE.createComplex(2333.5887904868814, 588.302773495185);
      complex5.add((double) 1);
      Complex complex6 = complex5.negate();
      complex6.sin();
      complex5.cosh();
      Complex.valueOf(Double.NaN);
      complex4.cosh();
      Complex complex7 = complex1.multiply(1095);
      Complex complex8 = complex7.sqrt1z();
      complex1.asin();
      complex8.toString();
      Complex complex9 = Complex.ZERO;
      complex9.multiply(533);
      complex9.nthRoot(1233);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.INF.pow(0.0);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.ZERO.reciprocal();
      ComplexField complexField0 = complex0.getField();
      complex4.equals(complexField0);
      Complex complex5 = complex0.INF.cosh();
      complex5.pow(complex2);
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex6.I.subtract(complex2);
      complex6.ZERO.subtract(0.0);
      Complex complex8 = complex7.INF.add((-2190.995));
      Complex complex9 = Complex.I;
      complex6.NaN.readResolve();
      complex2.INF.add(complex9);
      Complex complex10 = Complex.valueOf(1.2250764591564252E82, 0.0);
      complex10.ONE.getField();
      complex2.negate();
      Complex complex11 = Complex.valueOf(1.2250764591564252E82);
      Complex complex12 = complex7.sqrt();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex1.tan();
      Complex complex15 = complex14.asin();
      complex15.getField();
      complex11.add(1.2250764591564252E82);
      complex13.negate();
      complex11.conjugate();
      complex8.equals(complex5);
      complex11.conjugate();
      complex10.asin();
      complex10.cosh();
      complex11.divide(1.5800256583859738);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-412.0), 1500.1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.valueOf(1500.1);
      complex4.sinh();
      complex1.toString();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.asin();
      complex3.getArgument();
      Complex complex7 = complex6.reciprocal();
      complex3.cos();
      complex6.nthRoot(1078);
      complex6.getArgument();
      complex4.subtract((-1.682239160006248E-9));
      complex4.add(complex5);
      Complex.valueOf((-3855.77103547), (double) 1078);
      Complex complex8 = new Complex(20.0, 1500.1);
      complex8.isNaN();
      complex1.hashCode();
      Complex complex9 = complex3.multiply(1078);
      Object object0 = new Object();
      complex9.equals(object0);
      complex0.isNaN();
      complex7.divide(-0.0);
      Complex complex10 = complex8.negate();
      complex3.sqrt();
      complex10.tan();
      Complex complex11 = Complex.INF;
      complex11.conjugate();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = Complex.valueOf(1.9713349342346191);
      Complex complex4 = complex3.subtract(20.0);
      Complex complex5 = Complex.valueOf(1.9713349342346191);
      Complex complex6 = complex5.subtract(complex2);
      complex0.getReal();
      complex4.isNaN();
      complex6.getArgument();
      Complex complex7 = complex4.multiply(1.9713349342346191);
      complex7.toString();
      complex7.getArgument();
      Complex complex8 = complex5.subtract((-2784.975952506615));
      complex3.toString();
      complex8.sin();
      complex7.tan();
      complex3.pow(complex4);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals("");
      complex0.ONE.multiply(1);
      complex0.ONE.negate();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.NaN.multiply(1095);
      complex5.NaN.atan();
      complex4.subtract((-446.910494));
      complex0.subtract((-2425.323370081671));
      complex5.multiply((-2779.202786));
      complex2.getArgument();
      complex4.cosh();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.pow(complex7);
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.I.multiply(0);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = Complex.valueOf(2206.9792367751, (double) 0);
      Complex complex4 = complex3.NaN.sin();
      complex4.INF.divide(complex1);
      complex4.I.getArgument();
      Complex complex5 = complex0.log();
      complex5.ONE.negate();
      Complex complex6 = complex0.ZERO.acos();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex6.I.subtract(0.36832553148269653);
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex6.I.cosh();
      complex9.NaN.readResolve();
      Complex complex10 = complex6.INF.sinh();
      complex10.NaN.cos();
      complex5.I.createComplex(0, 0.36832553148269653);
      Complex complex11 = complex1.NaN.conjugate();
      Complex complex12 = complex1.add(5.3331719086630523E-8);
      complex12.tan();
      Complex complex13 = complex12.I.sqrt();
      complex5.conjugate();
      complex2.equals(complexField0);
      complex12.isNaN();
      Complex complex14 = new Complex((-2801.5925));
      Complex complex15 = Complex.ZERO;
      complex15.negate();
      complex8.sqrt();
      complex13.tan();
      complex11.conjugate();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(2982.6221418359);
      Complex complex3 = complex1.INF.sinh();
      complex1.toString();
      Complex complex4 = complex0.subtract(complex1);
      complex4.asin();
      complex1.ONE.getArgument();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.ZERO.cos();
      complex5.nthRoot(1078);
      complex4.getArgument();
      Complex complex7 = complex0.subtract(20.0);
      Complex complex8 = complex4.add(complex0);
      Complex.valueOf(20.0, 0.0);
      complex0.isNaN();
      complex8.hashCode();
      complex7.multiply(1078);
      Complex complex9 = Complex.valueOf(240.27389787552704, 240.27389787552704);
      complex1.atan();
      Complex complex10 = complex6.sinh();
      complex10.negate();
      complex3.nthRoot(1456);
      complex2.subtract((-3420.823519887727));
      complex10.log();
      complex2.getImaginary();
      complex7.readResolve();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      complex1.I.multiply(complex0);
      complex1.INF.getField();
      complex0.I.nthRoot(1);
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.INF.multiply(1);
      Complex complex5 = complex4.add((double) 1);
      Complex complex6 = complex1.multiply((double) 1);
      complex6.NaN.cos();
      Complex complex7 = complex0.createComplex(1, 1);
      complex7.abs();
      Complex.valueOf((double) 1, 229.3161);
      Complex complex8 = Complex.INF;
      complex8.divide((-1324.3096));
      complex1.add(4949.41783903314);
      complex5.toString();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide(637.792551371);
      Complex complex2 = complex0.sin();
      complex1.divide(637.792551371);
      complex2.nthRoot(3595);
      complex0.readResolve();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf((double) 3595);
      complex4.exp();
      Complex complex5 = complex3.multiply(37);
      double double0 = (-2685.0);
      double double1 = 2685.31906;
      complex5.pow(2685.31906);
      complex4.pow((double) 3595);
      complex5.cos();
      complex4.isNaN();
      // Undeclared exception!
      complex2.nthRoot(3595);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.I.multiply(0);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.createComplex(2206.9792367751, 2206.9792367751);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.INF.divide(complex1);
      complex4.I.getArgument();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.negate();
      complex5.sin();
      complex9.cosh();
      Complex complex10 = Complex.valueOf(8.137636596358927);
      complex3.cosh();
      complex8.multiply(291);
      complex4.sqrt1z();
      Complex complex11 = complex7.asin();
      complex11.toString();
      complex2.multiply(291);
      complex10.nthRoot(291);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.multiply(0);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.INF.createComplex(2206.9792367751, 2206.9792367751);
      Complex complex5 = complex4.NaN.sin();
      complex5.INF.divide(complex1);
      complex5.I.getArgument();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.ZERO.acos();
      complex8.ZERO.getField();
      Complex complex9 = complex8.I.subtract(0.36832553148269653);
      complex9.ONE.add(complex7);
      complex9.INF.cosh();
      Complex complex10 = complex8.I.cosh();
      Complex complex11 = (Complex)complex10.NaN.readResolve();
      Complex complex12 = complex8.INF.sinh();
      complex12.NaN.cos();
      complex6.I.createComplex(0, 0.36832553148269653);
      complex1.NaN.conjugate();
      Complex complex13 = complex1.add(5.3331719086630523E-8);
      complex13.tan();
      complex13.I.sqrt();
      complex6.conjugate();
      Complex.valueOf(2206.9792367751, (double) 0);
      complex2.atan();
      complex3.sinh();
      Complex complex14 = complex8.NaN.negate();
      complex11.readResolve();
      complex12.getReal();
//      try { 
        complex14.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.ZERO.sin();
      complex2.tan();
      complex4.INF.sin();
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex7.INF.asin();
      complex7.cos();
      complex4.NaN.pow(complex1);
      complex5.add(complex6);
      Complex complex9 = complex4.I.divide(1.0);
      complex9.ONE.subtract(complex3);
      complex0.divide(1.0);
      Complex complex10 = complex5.add(1.0);
      complex10.INF.multiply(complex8);
      int int0 = 0;
//      try { 
        complex5.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.multiply(complex1);
      complex2.INF.sqrt();
      Complex complex4 = complex3.multiply(368.42705679245);
      complex2.I.toString();
      Complex complex5 = complex4.NaN.cos();
      complex5.INF.tanh();
      Complex.valueOf(368.42705679245, (-2705.2));
      complex3.NaN.divide(822.0);
      complex3.INF.nthRoot(2828);
      Complex complex6 = complex0.NaN.sqrt1z();
      complex6.ZERO.toString();
      complex3.abs();
      complex0.getReal();
      int int0 = 0;
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      complex1.getArgument();
      complex0.ZERO.nthRoot(1);
      complex0.acos();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.hashCode();
      Complex complex3 = complex1.cos();
      complex3.I.pow(complex0);
      complex2.cosh();
      complex1.cosh();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(901);
      complex0.NaN.abs();
      Complex complex2 = complex1.ONE.subtract(20.0);
      Complex complex3 = Complex.valueOf(20.0);
      complex0.I.sqrt1z();
      Complex complex4 = complex3.subtract(4323.1636725013);
      Complex complex5 = complex4.tanh();
      complex0.hashCode();
      Complex.valueOf((-1519.956787));
      complex1.hashCode();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex1.log();
      complex6.I.atan();
      Complex complex8 = Complex.valueOf(4323.1636725013);
      Complex complex9 = complex8.I.add(4323.1636725013);
      complex7.nthRoot(901);
      complex6.tan();
      complex7.toString();
      complex5.multiply(complex2);
      complex7.readResolve();
      complex5.multiply((double) 901);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex2.negate();
      complex0.INF.getField();
      complex0.isInfinite();
      complex1.getReal();
      Complex complex3 = complex0.I.pow((-20.0));
      complex3.NaN.subtract((-20.0));
      int int0 = (-2322);
//      try { 
        complex3.ONE.nthRoot((-2322));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,322
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-279.5), (-279.5));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.ONE.pow((-279.5));
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.createComplex((-78.50158030582), (-78.50158030582));
      Complex complex5 = complex2.multiply((-279.5));
      complex5.NaN.abs();
      complex3.NaN.negate();
      Complex complex6 = complex4.INF.multiply(complex0);
      Complex complex7 = complex6.NaN.subtract((-279.5));
      Complex complex8 = complex4.NaN.log();
      Complex complex9 = complex0.negate();
      complex1.ONE.multiply(complex6);
      Complex complex10 = complex0.ONE.log();
      complex1.isInfinite();
      Complex complex11 = complex9.acos();
      complex7.log();
      Complex complex12 = Complex.valueOf(20.0, 20.0);
      complex12.I.createComplex(20.0, 6.283185307179586);
      complex10.sqrt1z();
      Complex.valueOf(0.0, (-2448.3));
      complex2.getField();
      Complex complex13 = complex0.conjugate();
      complex13.add(complex11);
      complex8.abs();
      complex10.acos();
      complex0.subtract(complex3);
      complex8.subtract(complex7);
      complex1.subtract(Double.NaN);
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.createComplex((-1.0), 475.0);
      Complex complex3 = complex2.NaN.add(complex1);
      complex0.getField();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.tanh();
      complex5.INF.subtract(475.0);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.add(complex0);
      Complex complex8 = complex7.ZERO.acos();
      complex8.cosh();
      complex6.ONE.conjugate();
      complex8.INF.abs();
      complex6.pow(complex3);
//      try { 
        complex1.INF.nthRoot((-2379));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,379
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1088.9728536193, 1088.9728536193);
      Complex complex1 = complex0.tanh();
      complex0.NaN.conjugate();
      complex1.I.subtract(1532.23586722);
      complex1.divide(complex0);
      complex1.tan();
      Complex complex2 = complex0.I.pow(0.0);
      complex2.INF.abs();
      complex0.subtract(0.0);
      complex1.pow(1088.9728536193);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(3608.0340816842436);
      Complex complex1 = Complex.valueOf((-2524.52029), (-1438.03));
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.INF.multiply((-5334));
      complex0.getReal();
      complex3.INF.toString();
      complex0.I.getArgument();
      complex3.NaN.nthRoot(1);
      Complex complex4 = complex3.multiply(259.96987);
      complex4.I.readResolve();
      Complex complex5 = complex1.ZERO.sin();
      complex4.getField();
      Complex complex6 = complex2.log();
      complex6.I.multiply((-2524.52029));
      Complex.valueOf(0.0);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.ZERO.getField();
      Complex complex1 = complex0.INF.tanh();
      double double1 = 6.283185307179586;
      Complex complex2 = complex0.multiply(6.283185307179586);
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.I.subtract(complex4);
      complex4.I.pow(6.283185307179586);
      complex0.ZERO.hashCode();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.ONE.tan();
      complex7.INF.add(0.40546512603759766);
      Complex complex8 = complex6.ZERO.pow((-20.0));
      complex6.ONE.nthRoot(37);
      complex8.INF.multiply(complex5);
      complex6.INF.tanh();
//      try { 
        complex3.nthRoot((-281));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -281
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex2.atan();
      complex2.I.reciprocal();
      Complex complex4 = complex1.NaN.add(complex0);
      complex4.ONE.nthRoot(2906);
      complex3.NaN.multiply(134.7691037024);
      Complex complex5 = complex4.I.multiply(0.0);
      complex5.NaN.negate();
      complex5.ZERO.sinh();
      Complex complex6 = complex1.subtract(complex0);
      complex6.INF.toString();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.log();
      complex1.I.log();
      Complex complex9 = complex8.exp();
      complex9.subtract(complex2);
      Complex complex10 = complex9.tanh();
      complex10.getArgument();
      complex9.readResolve();
      complex7.divide(0.0);
      Complex complex11 = complex4.divide(complex7);
      complex0.pow(complex11);
      Complex complex12 = Complex.I;
      complex3.subtract(complex12);
      complex11.add(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      complex0.NaN.add(complex1);
//      try { 
        complex1.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 276.12652298656434);
      complex0.getField();
      complex0.NaN.getArgument();
      Complex complex1 = complex0.divide(0.0);
      complex1.INF.readResolve();
      Complex complex2 = complex0.atan();
      complex0.isInfinite();
      complex1.INF.divide(complex2);
      Complex complex3 = complex1.multiply(1);
      complex3.ZERO.negate();
      complex1.add(0.0);
      Complex complex4 = Complex.ONE;
      complex2.equals(complex4);
      Complex complex5 = complex3.sin();
      complex5.ONE.conjugate();
      Complex complex6 = complex4.sinh();
      complex6.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.multiply(0);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.INF.createComplex(2206.9792367751, 2206.9792367751);
      Complex complex5 = complex4.NaN.sin();
      complex5.INF.divide(complex1);
      complex5.I.getArgument();
      Complex complex6 = complex0.log();
      complex6.ONE.negate();
      Complex complex7 = complex0.ZERO.acos();
      complex7.ZERO.getField();
      Complex complex8 = complex7.I.subtract(0.36832553148269653);
      complex8.INF.cosh();
      Complex complex9 = complex7.I.cosh();
      complex9.NaN.readResolve();
      Complex complex10 = complex7.INF.sinh();
      complex10.NaN.cos();
      complex6.I.createComplex(0, 0.36832553148269653);
      complex1.NaN.conjugate();
      Complex complex11 = complex1.add(5.3331719086630523E-8);
      complex11.tan();
      complex11.I.sqrt();
      complex6.conjugate();
      Complex.valueOf(2206.9792367751, (double) 0);
      complex2.atan();
      complex3.sinh();
      double double0 = 0.0;
      Complex complex12 = complex7.NaN.negate();
//      try { 
        complex12.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.NaN.cosh();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex0.subtract(0.0);
      complex2.ZERO.multiply(complex1);
      complex2.NaN.sin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.sin();
      complex4.sin();
      complex2.getImaginary();
      complex3.readResolve();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex5.ZERO.asin();
      complex6.INF.readResolve();
      complex4.isNaN();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2360.877674416));
      complex1.NaN.subtract((-2360.877674416));
      complex0.ZERO.toString();
      Complex complex2 = complex0.multiply((-668));
      Complex complex3 = complex2.log();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-705.68549491207), 2.0);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = new Complex(5.051784853384516E-8);
      Complex complex4 = complex3.I.sqrt1z();
      complex4.ONE.toString();
      complex3.INF.cosh();
      Complex complex5 = complex3.ZERO.sqrt();
      complex5.ONE.cos();
      complex0.subtract(complex3);
      complex2.I.abs();
      complex1.isInfinite();
      complex2.getArgument();
      complex3.isInfinite();
      Complex complex6 = complex2.sin();
      complex6.INF.add(complex5);
      complex1.getArgument();
      complex3.sin();
      complex4.subtract(2.0);
      complex5.exp();
      complex6.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      complex0.INF.sqrt1z();
      complex1.I.multiply((-1075));
      Complex complex2 = complex1.ONE.sqrt1z();
      complex0.getImaginary();
      complex2.I.abs();
//      try { 
        complex2.ONE.nthRoot((-950));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -950
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      complex0.ONE.pow(complex1);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(2437.08);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ONE.multiply(3338);
      complex1.NaN.abs();
      complex0.getReal();
      complex2.INF.asin();
      Complex complex3 = Complex.valueOf(2437.08, 2437.08);
      complex3.negate();
      Complex complex4 = Complex.valueOf(2437.08);
      Complex complex5 = complex4.I.pow(1473.738235);
      complex1.I.reciprocal();
      complex4.getField();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.ONE.subtract(complex5);
      Complex complex8 = complex2.INF.tan();
      complex6.NaN.hashCode();
      complex5.INF.readResolve();
      complex0.equals("a {0}x{1} matrix cannot be a rotation matrix");
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.INF.exp();
      Complex complex10 = complex2.createComplex(2267.93679265, 2437.08);
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex1.add(complex11);
      complex0.subtract(complex11);
      complex9.multiply(complex4);
      complex3.subtract(2504.972);
      complex7.readResolve();
      complex12.add(2437.08);
      complex10.abs();
      complex8.tan();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.ZERO;
      complex1.NaN.asin();
      Complex complex2 = complex0.add(complex1);
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.sin();
      int int0 = (-1360);
//      try { 
        complex3.NaN.nthRoot((-1360));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,360
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2864.62, (-1.0));
      Complex complex1 = Complex.valueOf(2864.62, 880.03173955);
      Complex complex2 = complex1.ONE.add(2864.62);
      complex2.INF.multiply(complex0);
      Complex complex3 = complex0.ONE.multiply((-1.0));
      complex3.I.tanh();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex4.ZERO.add(2864.62);
      complex5.ZERO.getArgument();
      complex0.toString();
      complex0.getImaginary();
      Complex complex6 = complex0.sinh();
      complex6.NaN.reciprocal();
      complex1.ZERO.divide((-1.0));
      Complex.valueOf(2864.62, (-1.0));
      complex0.getReal();
      complex0.NaN.divide((-199.359));
      Complex complex7 = complex1.multiply(180.231);
      complex7.createComplex(2864.62, 2864.62);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.equals("");
      complex1.ONE.multiply(1);
      complex0.ONE.negate();
      Complex complex2 = complex0.NaN.sin();
      complex2.I.cosh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.NaN.multiply(1095);
      Complex complex6 = complex4.ZERO.sqrt1z();
      complex6.ZERO.asin();
      complex5.INF.toString();
      complex3.multiply((-1881));
      complex5.nthRoot(2726);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1946.7975), (-1946.7975));
      complex0.ZERO.divide(0.0);
      Complex complex1 = complex0.add((-1946.7975));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sinh();
      complex3.NaN.toString();
      complex3.ZERO.subtract(0.0);
      complex2.nthRoot(4194);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-3420.823519887727));
      Complex complex1 = complex0.ZERO.subtract(914.0549013);
      complex0.ONE.tanh();
      Complex complex2 = complex0.INF.sqrt();
      complex2.readResolve();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex3.I.add(1572.15939191931);
      Complex complex5 = complex2.I.add(complex0);
      complex5.NaN.multiply(1104);
      complex0.ZERO.nthRoot(1104);
      Complex complex6 = complex0.log();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex5.toString();
      complex6.abs();
      Complex complex7 = complex3.subtract(complex4);
      complex6.subtract((-1.7346590916458485E-9));
      complex7.subtract(914.0549013);
      Complex complex8 = complex7.multiply((-61.9));
      complex8.getArgument();
      complex3.cosh();
      Complex complex9 = Complex.INF;
      complex1.pow(complex9);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.INF.pow(0.0);
      complex1.add(complex2);
      Complex complex3 = complex0.ZERO.reciprocal();
      ComplexField complexField0 = complex0.getField();
      complex3.equals(complexField0);
      Complex complex4 = complex0.INF.cosh();
      complex4.pow(complex2);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex5.I.subtract(complex2);
      complex5.ZERO.subtract(0.0);
      complex6.INF.add((-2190.995));
      Complex complex7 = Complex.I;
      complex5.NaN.readResolve();
      Complex complex8 = complex2.INF.add(complex7);
      Complex complex9 = Complex.valueOf(1.2250764591564252E82, 0.0);
      complex9.ONE.getField();
      complex2.negate();
      Complex complex10 = Complex.valueOf(1.2250764591564252E82);
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex1.tan();
      Complex complex14 = complex13.asin();
      complex14.getField();
      complex10.add(1.2250764591564252E82);
      complex12.negate();
      Complex complex15 = complex10.conjugate();
      complex8.multiply(complex15);
      complex4.sqrt1z();
      Complex complex16 = complex11.pow((-1440.59));
      complex12.multiply((-2190.995));
      complex16.abs();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-1237.9111359873327), (-1237.9111359873327));
      complex0.ZERO.tan();
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ONE.divide(0.0);
      complex1.ONE.sqrt();
      complex0.NaN.readResolve();
      complex0.INF.sin();
//      try { 
        complex0.ONE.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cos();
      Complex.valueOf(2982.6221418359);
      complex1.INF.sinh();
      complex1.toString();
      Complex complex2 = complex0.subtract(complex1);
      complex2.asin();
      complex1.ONE.getArgument();
      Complex complex3 = complex2.reciprocal();
      complex3.ZERO.cos();
      complex3.nthRoot(1078);
      complex2.getArgument();
      Complex complex4 = complex0.subtract(20.0);
      Complex complex5 = complex2.add(complex0);
      Complex.valueOf(20.0, 0.0);
      complex0.isNaN();
      complex5.hashCode();
      Complex complex6 = complex4.multiply(1078);
      complex6.equals(complex3);
      complex5.isNaN();
      complex5.NaN.divide(2.0);
      complex4.negate();
      Complex complex7 = complex0.sqrt();
      complex7.I.tan();
      complex5.conjugate();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(1.0);
      Complex complex2 = complex0.NaN.asin();
      complex0.cosh();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.nthRoot(2328);
      Complex complex1 = complex0.sinh();
      complex0.I.exp();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.ONE.subtract((double) 2328);
      Complex complex4 = complex2.ONE.divide(complex0);
      complex4.ZERO.getArgument();
      complex0.ONE.pow((double) 2328);
      Complex complex5 = complex1.subtract(complex0);
      complex5.INF.subtract(complex0);
      complex5.I.sqrt();
      Complex complex6 = complex2.tanh();
      complex6.NaN.log();
      Complex complex7 = complex2.atan();
      complex7.equals((Object) null);
      Complex complex8 = complex7.I.createComplex(2328, 2328);
      complex7.NaN.sinh();
      complex7.getImaginary();
      complex5.hashCode();
      Complex complex9 = complex5.sqrt1z();
      complex9.ONE.getArgument();
      complex7.toString();
      complex6.abs();
      complex4.sin();
      complex3.tanh();
      Complex complex10 = complex8.pow(Double.POSITIVE_INFINITY);
      complex10.I.createComplex(Double.NaN, 0.0);
      complex7.getImaginary();
      complex0.toString();
      complex4.cos();
      Complex.valueOf((-3089.1311), Double.POSITIVE_INFINITY);
      complex10.add((-1588.065302728));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1983.29227);
      complex0.NaN.createComplex((-6.480706118857055E-9), (-6.480706118857055E-9));
      complex0.ZERO.hashCode();
      complex0.getImaginary();
      Complex.valueOf((-1.0));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.readResolve();
      Complex complex1 = complex0.pow(3212.023437124);
      complex1.NaN.negate();
      complex1.I.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      complex2.ZERO.exp();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 2658.6075746288);
      Complex complex1 = complex0.pow(4.8926595743317624E162);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.divide((-1.0));
      Complex.valueOf(0.0, (-2557.03849057295));
      complex3.getArgument();
      complex2.createComplex((-1.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      complex1.I.multiply(complex0);
      complex1.INF.getField();
      complex0.I.nthRoot(1);
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.INF.multiply(1);
      Complex complex5 = complex4.add((double) 1);
      Complex complex6 = complex0.I.divide((-2236.80640987984));
      complex2.I.nthRoot(37);
      complex0.readResolve();
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.ONE.multiply(1);
      complex9.ZERO.pow((-2685.0));
      complex5.ZERO.pow((-2236.80640987984));
      Complex complex10 = complex7.ZERO.cos();
      complex7.isNaN();
      complex4.nthRoot(1);
      complex3.ZERO.multiply(complex2);
      complex2.ONE.toString();
      Complex complex11 = Complex.valueOf((double) 1, (-238.32685216076618));
      Complex complex12 = complex11.INF.tanh();
      complex12.ZERO.negate();
      Complex complex13 = complex3.atan();
      complex0.atan();
      complex13.ZERO.pow(complex4);
      complex5.equals(complex6);
      complex3.conjugate();
      complex10.asin();
      Complex complex14 = complex13.cosh();
      complex14.NaN.divide((double) 1);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(20.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.subtract(996.9191);
      Complex complex4 = complex1.NaN.divide(complex2);
      Complex.valueOf(20.0);
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = Complex.valueOf(20.0, 996.9191);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex1.sinh();
      assertEquals(0.050020835937655016, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex0.sqrt1z();
      Complex complex9 = complex1.add(complex3);
      assertEquals((-996.8691), complex9.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf(20.0, 996.9191);
      complex6.I.multiply(complex4);
      complex10.ZERO.add(complex6);
      Complex complex11 = complex10.ZERO.exp();
      complex11.ONE.log();
      Complex complex12 = complex10.ONE.multiply(complex5);
      complex0.ZERO.readResolve();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex10.ZERO.pow(0.28008490800857544);
      Complex complex15 = complex7.divide(0.0);
      assertNotSame(complex15, complex14);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      complex13.add(complex6);
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex16.tanh();
      Complex complex18 = complex17.INF.pow(996.9191);
      assertNotSame(complex18, complex15);
      assertTrue(complex18.equals((Object)complex12));
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertTrue(complex17.equals((Object)complex13));
      assertEquals(0.0, complex17.getReal(), 0.01);
      
      complex10.cos();
      Complex complex19 = complex0.asin();
      assertEquals(1.5707963267948966, complex19.getReal(), 0.01);
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      
      complex11.getField();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex20 = complex6.cos();
      assertEquals(996.9191, complex6.getImaginary(), 0.01);
      assertTrue(complex20.isInfinite());
      
      String string0 = complex16.toString();
      assertEquals("(0.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1009.395363912), (-1009.395363912));
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.readResolve();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.ZERO.asin();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex3.NaN.tanh();
      complex0.isInfinite();
      Complex complex7 = complex1.reciprocal();
      complex7.asin();
      Complex complex8 = complex7.reciprocal();
      assertSame(complex8, complex6);
      assertSame(complex7, complex4);
      
      List<Complex> list0 = complex2.nthRoot(548);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(list0.contains(complex7));
      assertTrue(complex1.equals((Object)complex5));
      
      Complex complex9 = complex0.divide((-1009.395363912));
      Complex complex10 = complex9.I.tanh();
      complex0.ONE.toString();
      Complex complex11 = complex9.pow(complex0);
      Complex complex12 = complex10.multiply(complex11);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals((-2.9301428879995416E192), complex12.getReal(), 0.01);
  }
}
