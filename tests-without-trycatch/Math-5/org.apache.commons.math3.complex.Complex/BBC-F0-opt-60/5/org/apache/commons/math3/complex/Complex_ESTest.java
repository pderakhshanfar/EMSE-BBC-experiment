/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:06:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9));
      Complex complex1 = new Complex((-3.845373872038116E-9), (-3.845373872038116E-9));
      complex1.NaN.acos();
      Complex.valueOf((-3.845373872038116E-9));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.multiply(complex2);
      complex3.log();
      Complex complex4 = Complex.ZERO;
      complex4.INF.multiply((-3.845373872038116E-9));
      Complex complex5 = complex1.multiply(2122);
      Complex complex6 = complex5.asin();
      Complex complex7 = new Complex(2122, Double.POSITIVE_INFINITY);
      complex5.ONE.multiply(complex7);
      complex6.nthRoot(224);
      complex6.divide((double) 224);
      Complex complex8 = new Complex((-1344));
      Complex complex9 = Complex.ZERO;
      complex9.nthRoot(2122);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-359.0), Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      complex0.toString();
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.nthRoot(1);
      Complex complex2 = complex0.pow((-359.0));
      complex2.getField();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.divide((double) 1);
      complex2.tanh();
      complex5.multiply((-2968.5469));
      Complex complex6 = complex1.pow(complex0);
      complex6.add(complex5);
      Complex complex7 = complex2.atan();
      complex5.log();
      Complex complex8 = complex7.I.exp();
      complex1.subtract(complex3);
      complex5.cosh();
      Complex complex9 = complex8.multiply(complex1);
      complex4.sqrt1z();
      complex1.conjugate();
      complex0.pow((-1.0));
      complex8.createComplex((-2968.5469), (-7.207022875977515E70));
      complex9.exp();
      complex8.divide((double) 1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.multiply(complex0);
      complex0.log();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      complex1.conjugate();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.tanh();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(60.872740193898295);
      complex0.ZERO.tan();
      Complex complex1 = Complex.valueOf(574.9611570810117);
      complex0.INF.pow(60.872740193898295);
      Complex complex2 = complex1.ONE.cosh();
      complex2.ONE.conjugate();
      Complex complex3 = complex2.I.asin();
      complex0.NaN.reciprocal();
      complex3.ZERO.negate();
      Complex complex4 = complex3.ONE.pow(complex0);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.exp();
      complex6.INF.add(complex0);
      complex1.INF.tan();
      Complex complex7 = complex6.sqrt1z();
      complex5.ZERO.multiply(complex7);
      Complex complex8 = complex6.multiply(119);
      complex8.NaN.pow(complex5);
      complex8.readResolve();
      complex3.NaN.divide((-967.7025994395049));
      complex8.abs();
      complex1.readResolve();
      complex7.sin();
      Complex complex9 = complex3.negate();
      complex1.reciprocal();
      Complex complex10 = complex2.tanh();
      complex4.sqrt();
      Complex.valueOf((-967.7025994395049), 0.0);
      complex9.sin();
      Complex complex11 = complex10.asin();
      complex7.subtract(0.2940096855163574);
      complex3.nthRoot(119);
      complex11.multiply(1073741824);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1287293.198921, 1287293.198921);
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.hashCode();
      complex0.ZERO.abs();
      Complex complex2 = complex0.ZERO.tan();
      complex2.I.add(complex0);
      complex0.ZERO.getArgument();
      Complex complex3 = complex0.exp();
      complex3.nthRoot(17);
      Complex complex4 = complex1.atan();
      complex2.add(complex1);
      Complex complex5 = complex0.sin();
      complex5.ONE.add(0.0);
      complex0.abs();
      complex4.conjugate();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3.845373872038116E-9));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.multiply((-4.042035820681104));
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.pow(complex4);
      complex6.isInfinite();
      Complex complex7 = complex3.atan();
      complex3.multiply(587.77742489);
      Complex complex8 = Complex.ZERO;
      complex2.pow(complex8);
      complex0.readResolve();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex6.asin();
      Complex complex11 = Complex.NaN;
      complex10.subtract(complex1);
      Complex complex12 = Complex.I;
      complex12.add(complex7);
      complex6.subtract(complex10);
      complex12.pow((-4.042035820681104));
      Complex complex13 = new Complex(2794.9415071454027, 2794.9415071454027);
      complex13.getField();
      complex5.tanh();
      complex1.tanh();
      complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.807242187736102E-281);
      Complex complex1 = complex0.createComplex(2.1439391182914522, (-640.86));
      Complex complex2 = complex1.ZERO.conjugate();
      complex0.nthRoot(1024);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.divide((-640.86));
      Complex complex5 = complex4.ONE.add(complex0);
      complex0.getField();
      Complex complex6 = Complex.valueOf(0.0, (-2757.03027407728));
      complex5.nthRoot(1024);
      Complex complex7 = complex1.log();
      Complex complex8 = complex2.pow((double) 1024);
      complex7.NaN.getArgument();
      complex5.nthRoot(2481);
      complex7.reciprocal();
      complex1.cos();
      Complex.valueOf(299.619257092912, Double.NaN);
      complex4.multiply(complex8);
      complex0.tan();
      complex8.pow(373.02728);
      complex4.sin();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-863.5288624), 6.466611224443739E245);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.I.subtract(complex0);
      Complex complex3 = complex2.I.asin();
      complex3.NaN.sqrt();
      complex0.acos();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1411.657892712666), 583.0);
      Complex complex1 = Complex.valueOf(583.0, (-1411.657892712666));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.negate();
      complex4.INF.subtract(complex0);
      Complex complex5 = complex4.I.sin();
      complex5.ZERO.reciprocal();
      complex5.ZERO.sinh();
      Complex complex6 = complex0.cosh();
      complex6.ONE.atan();
      complex1.nthRoot(1011);
      complex0.abs();
      Complex complex7 = complex0.exp();
      complex7.ZERO.divide(583.0);
      Complex.valueOf((-3905849.5141820596));
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-1.6014373376410622E-146));
      complex1.ZERO.pow(complex2);
      Complex complex3 = Complex.valueOf(467.9468388744536);
      complex1.tan();
      complex3.add(complex1);
      Complex complex4 = Complex.NaN;
      complex0.nthRoot(1241);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = Complex.ZERO;
      complex0.tan();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1.5777064460196157);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = new Complex(1742.3968720718399, 1742.3968720718399);
      Complex complex4 = complex1.I.divide(complex3);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.add(1.5707963267948966);
      complex6.I.pow(complex1);
      complex0.isInfinite();
      Complex complex7 = complex0.ONE.atan();
      Complex complex8 = complex7.ZERO.multiply((-4.042035820681104));
      Complex complex9 = complex8.log();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex10.NaN.pow(complex2);
      complex11.NaN.getArgument();
      complex10.readResolve();
      complex10.asin();
      complex3.INF.asin();
      Complex complex12 = Complex.NaN;
      complex1.subtract(complex12);
      complex4.add(complex10);
      Complex complex13 = complex0.pow(complex4);
      complex9.tan();
      complex9.isInfinite();
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.multiply((-3235.8262031));
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.sqrt();
      complex0.getArgument();
      complex0.readResolve();
      complex0.asin();
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.subtract(complex2);
      complex5.add(complex4);
      Complex complex8 = complex1.subtract(complex2);
      complex3.INF.reciprocal();
      complex1.pow(1.2066382528772518E268);
      complex4.getField();
      Complex complex9 = Complex.valueOf((-3235.8262031));
      complex9.sqrt();
      complex8.asin();
      complex6.divide(complex5);
      complex7.multiply((-4.042035820681104));
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1557.380200001927);
      Complex complex2 = complex0.pow(complex1);
      complex2.getArgument();
      complex2.readResolve();
      Complex complex3 = complex2.asin();
      complex0.asin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex6.add(complex1);
      complex7.subtract(complex1);
      complex4.pow((-20.0));
      complex5.getField();
      complex1.tanh();
      complex3.sqrt();
      Complex complex8 = complex7.asin();
      complex7.divide(complex6);
      complex8.multiply(2561.086353879714);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 6.283185307179586;
      Complex complex1 = Complex.valueOf(6.283185307179586, 0.19062360414733082);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.INF.sin();
      complex4.INF.hashCode();
      Complex complex5 = complex2.createComplex(4624.287048, 4624.287048);
      complex2.exp();
      complex5.NaN.abs();
      Complex complex6 = complex5.I.add(6.283185307179586);
      complex3.subtract(complex4);
      Complex complex7 = complex5.multiply(6.283185307179586);
      Complex complex8 = complex7.ONE.asin();
      complex8.divide(1.5707963306402706);
      complex7.add(complex4);
      complex3.ZERO.tanh();
      Complex complex9 = complex4.multiply(196);
      complex9.INF.asin();
      complex9.divide(complex1);
      complex2.pow(complex4);
      Complex complex10 = Complex.valueOf(4624.287048, 3415.302538);
      complex10.createComplex(3415.302538, 6.283185307179586);
//      try { 
        complex6.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.hashCode();
      Complex complex2 = complex1.add(2.0);
      Complex complex3 = Complex.I;
      complex0.equals(complex3);
      complex1.conjugate();
      Complex complex4 = complex0.sinh();
      complex3.pow(complex4);
      Complex complex5 = complex2.sin();
      complex5.hashCode();
      complex3.toString();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9), (-3.845373872038116E-9));
      Complex complex1 = complex0.createComplex((-1343.0), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.I;
      complex5.sqrt();
      complex4.divide(complex3);
      Complex.valueOf((-2752.371343626658));
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.I;
      complex7.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.exp();
      complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf(1.880582039589629E-283, 1.880582039589629E-283);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.I;
      complex4.sqrt();
      Complex complex6 = complex5.divide(complex1);
      complex5.add(complex6);
      complex0.multiply(7);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.add((-3.845373872038116E-9));
      complex0.equals(complex1);
      Complex complex3 = Complex.valueOf((-3.845373872038116E-9));
      Complex complex4 = complex3.INF.sinh();
      complex4.I.pow(complex2);
      complex0.I.sin();
      complex0.hashCode();
      complex0.asin();
      Complex complex5 = complex4.sqrt1z();
      complex5.pow(complex4);
      Complex.valueOf((-3.845373872038116E-9), 2307.296251777);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302);
      Complex complex1 = complex0.acos();
      complex0.INF.sqrt1z();
      Complex complex2 = Complex.ZERO;
      complex2.ONE.subtract(1397.47084302);
      Complex complex3 = new Complex(1397.47084302);
      complex0.pow(complex2);
      complex1.tan();
      Complex complex4 = complex1.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.ONE;
      complex1.NaN.getArgument();
      complex3.divide(complex0);
      Complex complex4 = complex0.add(complex3);
      complex0.ZERO.cosh();
      Complex complex5 = complex4.I.add(Double.POSITIVE_INFINITY);
      complex3.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex0.INF.createComplex(Double.POSITIVE_INFINITY, (-1166.4670169928484));
      complex2.abs();
      Complex complex8 = complex0.multiply(complex4);
      complex8.ONE.acos();
      complex8.NaN.tanh();
      complex5.abs();
      complex4.add(Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      complex1.tanh();
      complex6.tan();
      complex1.log();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9), (-3.845373872038116E-9));
      Complex complex1 = Complex.ZERO;
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.add((-3.845373872038116E-9));
      complex0.equals(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.I.pow(complex2);
      Complex complex7 = complex0.I.sin();
      complex0.hashCode();
      complex0.toString();
      complex6.sqrt1z();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.subtract((-0.9060367009005804));
      complex0.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1.5707963267948966);
      complex1.multiply((-586));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.exp();
      complex0.acos();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.I;
      complex1.divide(complex4);
      complex0.getImaginary();
      complex3.cosh();
      Complex complex5 = Complex.valueOf(0.0, (-3792.97815934221));
      Complex complex6 = complex5.pow(complex0);
      complex4.tan();
      Complex complex7 = Complex.I;
      complex7.INF.subtract(complex6);
      Complex complex8 = complex5.reciprocal();
      Complex.valueOf(0.0);
      complex8.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.asin();
      complex3.INF.reciprocal();
      complex0.sqrt1z();
      complex2.multiply(442);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.855478664503271E21), (-3.855478664503271E21));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.divide(2794.9415071454027);
      complex0.add((-3.855478664503271E21));
      Complex complex4 = complex0.atan();
      complex4.ONE.add(complex3);
      complex1.asin();
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1889, (double) 1889);
      Complex complex1 = Complex.ZERO;
      complex0.hashCode();
      Complex complex2 = complex0.add((-2662.442385));
      complex1.readResolve();
      complex1.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.pow(complex5);
      complex4.sin();
      complex0.hashCode();
      complex2.toString();
      complex0.sqrt1z();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      complex0.hashCode();
      Complex complex2 = complex0.add(1030.7191398622338);
      complex2.equals(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.asin();
      complex4.pow(complex2);
      Complex complex6 = complex3.sin();
      complex2.hashCode();
      complex5.toString();
      complex1.sqrt1z();
      complex0.acos();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.6983742405300988, 2.0);
      Complex complex2 = Complex.INF;
      complex0.divide(complex2);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt();
      complex4.ZERO.divide(complex0);
      Complex complex5 = complex3.add(complex2);
      complex5.multiply(332);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.19062360414733082);
      Complex complex1 = complex0.ZERO.divide(2.0);
      complex0.abs();
      Complex complex2 = Complex.valueOf(0.0, 1889.0);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex3.exp();
      complex0.nthRoot(2668);
      complex1.divide(2.0);
      complex5.tanh();
      complex5.getReal();
      complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.asin();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      complex1.negate();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(41626.53278672712);
      complex4.tanh();
      Complex.valueOf(41626.53278672712);
      complex1.atan();
      complex2.cosh();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2.3222346436879016E-8), 0.0);
      complex0.pow(complex1);
      complex1.sin();
      complex1.hashCode();
      Complex complex2 = Complex.ZERO;
      complex1.nthRoot(204);
      complex1.getReal();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9), (-3.845373872038116E-9));
      Complex complex1 = Complex.ZERO;
      complex1.ONE.hashCode();
      Complex complex2 = complex0.add((-3.845373872038116E-9));
      complex0.equals(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.sinh();
      complex2.I.asin();
      complex4.I.pow(complex2);
      Complex complex5 = complex0.I.sin();
      complex0.hashCode();
      complex3.add((-3.845373872038116E-9));
      complex5.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex complex6 = new Complex((-3.845373872038116E-9));
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302, 1397.47084302);
      complex0.acos();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = Complex.NaN;
      complex0.getImaginary();
      complex2.getImaginary();
      complex0.sqrt1z();
      Complex complex4 = Complex.INF;
      complex4.tan();
      Complex complex5 = Complex.I;
      complex2.reciprocal();
      Complex complex6 = Complex.I;
      complex6.asin();
      Complex complex7 = new Complex(0.19062360414733082, 1397.47084302);
      complex4.pow(complex1);
      Complex complex8 = complex2.log();
      complex3.tanh();
      Complex complex9 = Complex.valueOf((-3095.6833));
      complex9.tan();
      complex8.add(complex6);
      Complex complex10 = Complex.NaN;
//      try { 
        complex8.nthRoot((-3728));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,728
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(144.268036631, 144.268036631);
      complex0.ONE.atan();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.INF.multiply((-1945));
      Complex complex4 = complex2.INF.atan();
      complex4.ONE.cosh();
      Complex complex5 = complex0.sqrt1z();
      complex1.multiply(144.268036631);
      Complex complex6 = complex1.pow(complex5);
      complex1.log();
      complex0.tanh();
      Complex.valueOf(1839.87177208);
      complex6.tan();
      complex3.add(complex2);
      Complex complex7 = Complex.I;
      // Undeclared exception!
      complex7.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9), (-3.845373872038116E-9));
      Complex complex1 = Complex.ZERO;
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.add((-3.845373872038116E-9));
      complex0.equals(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex2.I.asin();
      Complex complex6 = complex4.I.pow(complex2);
      Complex complex7 = complex0.I.sin();
      complex7.pow(complex1);
      complex4.log();
      complex5.tanh();
      Complex.valueOf(Double.NaN);
      complex6.tan();
      complex6.add(complex4);
      Complex complex8 = Complex.NaN;
//      try { 
        complex3.nthRoot((-85));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -85
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(2.5836901664733887);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = new Complex(2.5836901664733887);
      Complex complex7 = complex4.divide(complex0);
      complex7.getImaginary();
      complex1.cosh();
      Complex complex8 = Complex.NaN;
      complex5.pow(complex2);
      complex3.tan();
      Complex complex9 = Complex.I;
      complex8.reciprocal();
      Complex complex10 = Complex.I;
      complex0.asin();
      Complex complex11 = new Complex(0.4953672892186734, Double.NaN);
      complex7.pow(complex1);
      complex9.log();
      Complex complex12 = Complex.valueOf(2.5836901664733887);
      complex12.tanh();
      Complex.valueOf((-4.7208848667217906E221));
      complex10.tan();
      complex8.add(complex2);
      Complex complex13 = Complex.NaN;
      complex4.nthRoot(3847);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(144.268036631, 144.268036631);
      complex0.exp();
      Complex complex1 = complex0.ONE.atan();
      complex0.ONE.getArgument();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.INF.multiply((-1945));
      Complex complex5 = complex3.INF.atan();
      complex5.ONE.cosh();
      Complex complex6 = complex0.sqrt1z();
      complex2.multiply(144.268036631);
      complex1.subtract(144.268036631);
      Complex complex7 = new Complex(0.6574544541530762);
      complex6.INF.conjugate();
      complex7.toString();
      complex0.atan();
      complex6.sqrt1z();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(144.268036631, 144.268036631);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.multiply(13);
      Complex complex4 = Complex.NaN;
      complex0.getImaginary();
      complex1.getImaginary();
      Complex complex5 = complex3.sqrt1z();
      complex0.multiply(13);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ZERO;
      complex1.atan();
      Complex complex8 = complex5.pow(complex0);
      complex2.tan();
      Complex complex9 = complex1.add(20.0);
      Complex complex10 = complex8.tanh();
      Complex.valueOf(3466.3188277889);
      complex9.atan();
      complex5.cosh();
      complex6.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302, 1397.47084302);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex1.sin();
      complex2.reciprocal();
      complex3.log();
      complex0.readResolve();
      Complex complex4 = Complex.I;
      complex0.cos();
      Object object0 = new Object();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.multiply((-526));
      Complex complex3 = Complex.valueOf(0.0);
      complex3.getImaginary();
      complex0.getImaginary();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.multiply(17);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.acos();
      complex3.atan();
      complex2.pow(complex0);
      Complex complex8 = complex4.tan();
      Complex complex9 = complex5.add(0.0);
      Complex complex10 = complex1.createComplex(0.9019397279101471, 4098.3959);
      complex7.divide(complex9);
      complex10.pow(1607.892872575502);
      Complex complex11 = complex6.negate();
      complex2.readResolve();
      complex11.abs();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2340.79));
      complex0.hashCode();
      complex0.cosh();
      complex0.pow(complex0);
      Complex complex1 = new Complex((-2340.79));
      Complex complex2 = complex1.tan();
      complex1.reciprocal();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.NaN;
      complex5.pow(complex0);
      complex5.log();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex0.tan();
      complex7.add(complex6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.8396930096213817E290, 1.8396930096213817E290);
      Complex complex2 = Complex.ZERO;
      complex1.hashCode();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.add(1.8396930096213817E290);
      Complex complex5 = Complex.ZERO;
      complex2.equals(complex5);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.asin();
      complex5.pow(complex8);
      complex1.sin();
      complex2.hashCode();
      complex5.divide(1.0282377076778304);
      Complex complex9 = Complex.NaN;
      complex9.toString();
      complex7.atan();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex0.tan();
      complex3.add(Double.NaN);
      complex4.tanh();
      complex3.I.log();
      Complex.valueOf((-265.735292174));
      complex3.tan();
      complex0.add(complex1);
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302, 1397.47084302);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.multiply(17);
      Complex complex4 = Complex.valueOf(0.0);
      complex0.getImaginary();
      complex3.getImaginary();
      Complex complex5 = complex0.sqrt1z();
      complex1.multiply(1913);
      Complex complex6 = Complex.ZERO;
      complex2.acos();
      Complex complex7 = complex1.atan();
      complex0.pow(complex7);
      complex3.tan();
      Complex complex8 = complex4.add(Double.POSITIVE_INFINITY);
      complex3.createComplex(2990.0, 17);
      Complex complex9 = complex4.divide(complex1);
      complex9.pow((-4283.682));
      Complex complex10 = Complex.ZERO;
      complex10.negate();
      complex8.readResolve();
      complex0.abs();
      complex4.sqrt1z();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sin();
      complex0.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.asin();
      complex6.pow(complex4);
      Complex complex7 = Complex.INF;
      complex7.log();
      complex0.tanh();
      Complex.valueOf(1695.8019290840832);
      complex3.tan();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      complex1.ONE.hashCode();
      Complex complex2 = new Complex(0.0);
      complex0.equals(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.sinh();
      complex2.I.asin();
      complex4.I.pow(complex2);
      complex0.I.sin();
      complex0.hashCode();
      Complex complex5 = Complex.ZERO;
      complex5.divide(2.3019011105282883E103);
      complex4.toString();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.atan();
      complex6.sqrt1z();
      complex4.sinh();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302, 1397.47084302);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.multiply(17);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.divide(complex4);
      complex0.getImaginary();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex5.pow(complex1);
      complex3.tan();
      Complex complex9 = Complex.I;
      complex2.reciprocal();
      Complex complex10 = Complex.I;
      complex3.asin();
      Complex complex11 = new Complex(363.218561, 1397.47084302);
      complex7.pow(complex11);
      Complex complex12 = complex6.log();
      complex11.tanh();
      complex12.I.exp();
      Complex.valueOf(1397.47084302);
      complex12.tan();
      complex8.add(complex12);
      complex5.nthRoot(937);
      Complex.valueOf(6.3890560989306495);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.divide(complex3);
      complex3.getImaginary();
      complex2.exp();
      Complex complex5 = complex2.tan();
      complex5.abs();
      complex1.negate();
      Complex complex6 = complex5.sqrt1z();
      complex6.add(2.3019011105282883E103);
      Complex complex7 = Complex.ONE;
      complex6.createComplex(2.3019011105282883E103, Double.NaN);
      complex3.pow(complex4);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302, 1397.47084302);
      complex0.acos();
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.multiply(17);
      Complex.valueOf(0.0);
      complex0.getImaginary();
      complex1.getImaginary();
      complex0.sqrt1z();
      Complex complex2 = complex0.multiply(1913);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.ZERO.acos();
      complex3.NaN.atan();
      Complex complex5 = complex0.pow(complex3);
      complex3.hashCode();
      complex5.divide(1397.47084302);
      complex2.toString();
      complex3.atan();
      Complex complex6 = Complex.NaN;
      complex6.sqrt1z();
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.cos();
      complex2.acos();
      Complex.valueOf(0.0);
      Complex complex3 = Complex.I;
      complex3.I.abs();
      Complex complex4 = new Complex(1.0, 0.0);
      Complex complex5 = complex4.sqrt1z();
      complex5.add(1.0);
      complex2.createComplex((-20.0), (-849.0));
      complex1.nthRoot(385);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9), (-3.845373872038116E-9));
      Complex complex1 = Complex.ZERO;
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.add((-3.845373872038116E-9));
      complex0.equals(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.sinh();
      complex2.I.asin();
      complex4.I.pow(complex2);
      Complex complex5 = complex0.asin();
      complex1.pow(complex5);
      complex5.log();
      complex0.tanh();
      Complex.valueOf((-20.0));
      complex5.tan();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = complex3.acos();
      complex4.multiply(complex1);
      complex1.atan();
      complex1.cos();
      Complex complex5 = Complex.ONE;
      Object object0 = new Object();
      complex2.equals(object0);
      complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.acos();
      Complex.valueOf(0.0);
      complex3.getArgument();
      Complex complex4 = complex1.divide(1848.0);
      Complex complex5 = complex0.sqrt();
      complex0.getField();
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = complex5.reciprocal();
      complex7.multiply(923.0);
      Complex complex8 = complex5.asin();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.acos();
      complex4.getReal();
      complex2.abs();
      Complex complex11 = Complex.valueOf((-647.760287346));
      Complex complex12 = complex11.pow((-1225.3406618));
      complex9.sinh();
      complex12.conjugate();
      complex9.pow((-2831.349));
      complex6.cos();
      Complex complex13 = complex8.add(923.0);
      Complex complex14 = Complex.valueOf((-211.59557673), (-2694.616476621033));
      complex10.subtract(complex14);
      complex3.hashCode();
      complex13.createComplex((-20.0), (-647.760287346));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9), (-1.1349246400274207E46));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.valueOf((-1950.37399));
      complex4.readResolve();
      complex2.hashCode();
      Complex.valueOf(729.527298);
      complex0.conjugate();
      complex1.getField();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.negate();
      complex1.INF.add(complex0);
      Complex complex3 = complex1.NaN.divide(complex0);
      complex0.add(0.0);
      Complex complex4 = complex0.sqrt1z();
      complex4.INF.getArgument();
      complex4.INF.multiply(complex0);
      Complex complex5 = Complex.ZERO;
      complex2.createComplex((-20.0), 0.0);
      complex0.pow(complex1);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302, 1397.47084302);
      Complex complex1 = complex0.acos();
      complex0.INF.sqrt1z();
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = Complex.NaN;
      complex0.getImaginary();
      complex2.getImaginary();
      complex0.sqrt1z();
      complex0.multiply(1913);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ONE;
      complex4.NaN.atan();
      Complex complex6 = complex0.pow(complex4);
      complex1.tan();
      complex1.add(Double.POSITIVE_INFINITY);
      complex3.tanh();
      Complex.valueOf(23757.004331340002);
      complex5.tan();
      complex0.add(complex6);
      complex6.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      complex0.abs();
      Complex complex2 = complex0.NaN.add(0.0);
      complex2.ZERO.nthRoot(408);
      complex1.reciprocal();
      Complex complex3 = complex1.log();
      complex0.readResolve();
      complex2.hashCode();
      Complex.valueOf(6.3890560989306495);
      Complex complex4 = Complex.INF;
      complex4.conjugate();
      complex3.getField();
      Complex complex5 = Complex.INF;
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.acos();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.createComplex(414.0, 414.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.pow(414.0);
      Complex complex5 = complex3.asin();
      complex5.sin();
      Complex complex6 = new Complex(0.9999997267437778, 793.6989);
      Complex complex7 = complex6.log();
      complex4.conjugate();
      complex7.equals(complex6);
      complex0.asin();
      Complex complex8 = complex0.sinh();
      complex8.tan();
      Complex.valueOf(793.6989);
      int int0 = (-884);
//      try { 
        complex2.nthRoot((-884));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -884
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ONE.tan();
      complex5.I.abs();
      complex3.equals(complex1);
      complex5.asin();
      complex1.sinh();
      complex5.tan();
      Complex.valueOf(1.0);
//      try { 
        complex5.nthRoot((-884));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -884
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.acos();
      Complex complex3 = (Complex)complex1.I.readResolve();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.tanh();
      complex1.I.conjugate();
      complex6.ONE.divide(complex4);
      complex0.getImaginary();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex6.pow(complex5);
      complex4.tan();
      Complex complex9 = Complex.I;
      complex9.reciprocal();
      Complex complex10 = Complex.I;
      Complex complex11 = complex5.asin();
      complex11.pow(complex8);
      complex11.log();
      complex10.tanh();
      Complex.valueOf(0.0);
      complex3.tan();
      complex3.add(complex11);
//      try { 
        complex7.nthRoot((-85));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -85
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2340.79));
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.INF.cosh();
      complex0.INF.pow(complex1);
      complex0.INF.tan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.I.asin();
      Complex complex7 = complex2.pow(complex3);
      complex7.log();
      complex2.tanh();
      Complex.valueOf(1695.8019290840832);
      complex1.tan();
      complex7.add(complex6);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.pow((-58.6163146));
      complex0.INF.sqrt1z();
      Complex complex2 = complex1.createComplex((-58.6163146), 20.0);
      Complex complex3 = complex2.ONE.add(9.221072639606492E-10);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex0.tan();
      complex5.NaN.getArgument();
      complex1.ONE.divide(complex0);
      complex0.equals("c~q0^=fJP");
      Complex complex6 = complex1.sqrt();
      complex5.INF.add(complex6);
      complex0.I.sin();
      complex6.sqrt();
      complex3.getArgument();
      Complex complex7 = complex4.ONE.divide(complex6);
      complex7.ONE.divide((-58.6163146));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex1.add((-976.21913583069));
      Complex complex10 = complex9.I.divide(complex2);
      complex10.NaN.atan();
      complex8.tan();
      complex9.toString();
      complex8.divide((-2013.490395214));
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      complex1.ZERO.divide(complex0);
      complex1.I.atan();
      Complex complex2 = complex0.cos();
      complex2.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = Complex.valueOf((-585.668888608113), (-585.668888608113));
      complex2.INF.nthRoot(1);
      complex1.INF.divide((-585.668888608113));
      complex0.sqrt();
      complex1.hashCode();
      Complex complex3 = complex1.negate();
      complex3.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      complex0.isNaN();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.log();
      complex2.ZERO.add(0.0);
      complex1.subtract(complex0);
      complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.divide(0.0);
      complex0.INF.subtract(complex3);
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.845373872038116E-9), (-1.1349246400274207E46));
      Complex complex1 = Complex.ZERO;
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.add((-1.1349246400274207E46));
      complex0.equals(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.sinh();
      complex2.I.asin();
      Complex complex5 = complex4.I.pow(complex2);
      complex0.I.sin();
      complex0.hashCode();
      complex3.divide(2.3019011105282883E103);
      complex0.toString();
      complex2.atan();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2925.382032213774), (-2925.382032213774));
      Complex complex1 = complex0.ZERO.multiply((-2734));
      Complex complex2 = complex1.NaN.divide((double) (-2734));
      complex1.getArgument();
      complex1.pow((double) (-2734));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.I.multiply((-3.141592653589793));
      Complex complex6 = complex3.multiply(0.0);
      complex6.ONE.toString();
      Complex complex7 = complex0.asin();
      complex6.I.multiply((-3.141592653589793));
      complex7.equals(complex0);
      complex6.isNaN();
      Complex complex8 = complex2.reciprocal();
      complex8.INF.add((-2925.382032213774));
      complex0.getImaginary();
      Complex complex9 = complex7.add(complex6);
      complex9.ZERO.readResolve();
      complex4.readResolve();
      complex4.readResolve();
      complex5.sin();
      Complex.valueOf(0.0, (-2255.8478868989));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2994.709, (-2272.927843966));
      Complex complex1 = complex0.INF.tan();
      complex0.abs();
      Complex complex2 = complex1.add(complex0);
      complex1.INF.sin();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ZERO.add(complex3);
      complex4.exp();
      complex2.NaN.sqrt();
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.reciprocal();
      complex2.sinh();
      complex1.isNaN();
      Complex complex7 = complex6.sin();
      complex3.isInfinite();
      complex7.getArgument();
//      try { 
        complex5.nthRoot((-794));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -794
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.readResolve();
      Complex complex1 = complex0.divide((-1.0));
      complex0.getArgument();
      Complex complex2 = complex0.NaN.sinh();
      complex2.ZERO.hashCode();
      complex1.hashCode();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.divide((-919.162133809362));
      Complex complex5 = complex4.ZERO.subtract(Double.NaN);
      complex0.add((-1514.5992187));
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sqrt();
      Complex complex1 = complex0.INF.atan();
      complex0.getImaginary();
      complex1.abs();
      Complex complex2 = complex1.tan();
      complex2.I.add(0.0);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.ZERO.multiply(complex5);
      complex0.INF.getField();
      complex3.INF.toString();
      Complex complex7 = Complex.valueOf((-1694.99187807345), 0.0);
      Complex complex8 = complex7.ONE.sqrt();
      complex1.getArgument();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.acos();
      complex9.toString();
      complex0.hashCode();
      complex4.getReal();
      complex0.getArgument();
      complex8.readResolve();
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
      complex4.sqrt();
      complex10.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.INF.multiply(191);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.NaN.exp();
      complex2.NaN.add(complex0);
      complex0.INF.hashCode();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.asin();
      complex6.abs();
      Complex complex7 = complex2.INF.log();
      Complex.valueOf((double) 191, 0.0);
      Complex complex8 = complex0.createComplex(0.0, 20.0);
      Complex complex9 = complex4.conjugate();
      complex3.I.subtract(0.0);
      complex2.getArgument();
      complex8.getField();
      Complex complex10 = complex0.pow(complex9);
      complex10.abs();
      complex8.createComplex((-2941.24432155), (-576.129171864));
      complex5.getArgument();
      complex7.multiply((-395));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex0.INF.tan();
      Complex complex2 = Complex.valueOf(2763.02941968979, 2763.02941968979);
      Complex complex3 = complex0.NaN.multiply(2995.146175183376);
      complex3.ZERO.sin();
      Complex complex4 = complex0.sqrt1z();
      complex4.INF.multiply(3286);
      Complex complex5 = complex0.ZERO.cosh();
      complex5.sqrt1z();
      complex5.ZERO.getArgument();
      Complex complex6 = complex5.I.tanh();
      complex6.ONE.nthRoot(652);
      Complex complex7 = complex4.ZERO.multiply(complex0);
      Complex complex8 = complex7.sinh();
      complex8.ONE.atan();
      complex7.NaN.divide((-1852.8272733356923));
      Complex complex9 = complex1.multiply((-1000.7565479));
      complex9.ONE.add(0.0);
      Complex complex10 = complex9.asin();
      complex4.divide(complex3);
      Complex complex11 = complex8.log();
      complex10.abs();
      complex11.cosh();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.acos();
      complex1.I.readResolve();
      Complex complex3 = complex2.atan();
      Complex.valueOf(0.0);
      Complex complex4 = complex3.tanh();
      complex1.I.conjugate();
      complex4.ONE.divide(complex3);
      complex0.getImaginary();
      Complex complex5 = complex1.exp();
      complex2.INF.getArgument();
      complex1.ONE.divide(0.0);
      Complex complex6 = complex1.sqrt();
      complex1.getField();
      Complex complex7 = complex5.subtract(complex3);
      complex0.ZERO.reciprocal();
      Complex complex8 = complex0.multiply(2.2431576057283144E113);
      Complex complex9 = complex8.ZERO.asin();
      complex6.acos();
      complex7.getReal();
      complex5.abs();
      complex8.INF.pow((-1605.23428415635));
      Complex complex10 = complex3.sinh();
      complex10.ONE.conjugate();
      complex9.pow((-20.0));
      complex9.cos();
      complex0.add(0.0);
      complex1.NaN.subtract(complex6);
      complex3.hashCode();
      complex8.createComplex(4.546040329134E-311, 0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.toString();
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.toString();
      double double0 = (-2218.47362937332);
      Complex complex2 = complex1.ONE.multiply((-2218.47362937332));
      Complex complex3 = complex1.add(20.0);
      complex2.ONE.abs();
      complex3.getImaginary();
      complex2.NaN.sin();
      complex2.NaN.add(complex0);
//      try { 
        complex1.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 2.092571258544922);
      Complex complex1 = new Complex(0.0, 2.092571258544922);
      complex0.pow(complex1);
      Complex complex2 = complex0.ZERO.pow(0.0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.negate();
      complex5.nthRoot(1177);
      complex0.ONE.nthRoot(1177);
      complex5.I.add(0.0);
      Complex complex6 = complex0.multiply(121);
      complex6.atan();
      complex2.multiply(121);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-3165.592542));
      complex1.ONE.reciprocal();
      complex2.ZERO.getField();
      Complex complex3 = complex0.I.add(complex1);
      complex3.I.pow(complex0);
      complex3.I.subtract(1120.1519200968);
      Complex complex4 = complex3.INF.createComplex((-2439.6), (-2067.931560694));
      Complex complex5 = complex4.ZERO.pow((-2067.931560694));
      complex5.ONE.multiply(complex0);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex0.divide(2193.8);
      complex7.exp();
      complex7.ZERO.pow(complex5);
      Complex complex8 = complex7.sqrt1z();
      complex8.toString();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex2.sinh();
      complex10.sqrt();
      complex9.createComplex(0.0, 8.43835682327257E26);
      complex9.getField();
      complex6.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(144.268036631, 144.268036631);
      Complex complex1 = complex0.ONE.atan();
      complex0.ONE.getArgument();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.INF.multiply((-1945));
      Complex complex5 = complex3.INF.atan();
      complex5.ONE.cosh();
      complex0.sqrt1z();
      complex2.multiply(144.268036631);
      complex1.subtract(144.268036631);
      complex1.multiply((-1293));
      complex4.atan();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-2440.305945));
      complex0.NaN.abs();
      complex0.getImaginary();
      Complex complex1 = complex0.multiply((-2440.305945));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.pow(0.0);
      complex3.multiply(Double.NaN);
      complex2.add(Double.NaN);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.add((-2440.305945));
      complex6.sin();
      Complex complex7 = Complex.valueOf((-2440.305945), (-2440.305945));
      complex1.isNaN();
      Complex complex8 = complex7.log();
      Complex complex9 = complex5.multiply(complex8);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.asin();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.tan();
      complex4.I.abs();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.sqrt1z();
      complex6.add((-1.0));
      complex1.createComplex((-20.0), (-849.0));
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-617.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex1.ZERO.log();
      complex0.toString();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex1.ONE.acos();
      complex4.ONE.acos();
      Complex complex5 = complex0.tanh();
      complex0.getField();
      complex2.hashCode();
      Complex complex6 = complex0.tanh();
      complex6.ZERO.getField();
      complex5.ZERO.reciprocal();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex1.tan();
      complex8.ZERO.add((-617.0));
      complex5.getArgument();
      Complex complex9 = complex3.sqrt1z();
      complex2.createComplex(1381.9, 1.0);
      complex1.log();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex9.multiply((-1954));
      complex11.tanh();
      Complex complex12 = complex2.sin();
      complex10.sqrt();
      complex7.sqrt();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.add(20.0);
      complex1.I.getField();
      Complex complex2 = Complex.valueOf((-336.7), (-336.7));
      complex2.multiply(complex0);
      Complex complex3 = complex1.ZERO.add((-3053.5041));
      Complex complex4 = complex3.ONE.sinh();
      complex0.cosh();
      complex3.sin();
      complex0.nthRoot(1);
      Complex complex5 = complex4.tan();
      complex5.getImaginary();
      complex5.multiply(0.0);
      complex5.asin();
      complex1.subtract((-298.27498556924));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      complex0.ONE.readResolve();
      Complex complex2 = Complex.valueOf((-7.44321345601866E-11), 0.0);
      Complex complex3 = Complex.valueOf((-7.44321345601866E-11));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex1.NaN.multiply((-7.44321345601866E-11));
      complex2.ONE.multiply(complex3);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.multiply(complex2);
      complex7.ONE.readResolve();
      complex2.subtract(complex3);
      Complex.valueOf(0.0);
      complex3.negate();
      complex4.cosh();
      complex1.add((-1.0));
      complex7.asin();
      complex1.hashCode();
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = null;
//      try { 
        complex0.I.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex0.subtract(complex1);
      complex4.ZERO.readResolve();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex6.cosh();
      complex7.NaN.divide(3.901467289560222E131);
      complex8.NaN.log();
      Complex complex9 = complex3.divide(2.4920010566711426);
      complex3.abs();
      Complex complex10 = complex8.cos();
      complex10.NaN.getField();
      complex7.isInfinite();
      complex8.getImaginary();
      Complex complex11 = complex9.subtract(complex10);
      Complex complex12 = complex11.I.add(1.800187110900879);
      complex6.ONE.reciprocal();
      Complex.valueOf(449.95046677554, 0.0);
      complex3.reciprocal();
      complex8.abs();
      complex12.multiply(0);
      complex1.sinh();
      complex1.subtract(0.0);
      complex5.nthRoot(3065);
      complex8.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.acos();
//      try { 
        complex0.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1074.408);
      Complex complex1 = null;
      complex0.I.cosh();
//      try { 
        complex0.NaN.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.ZERO.atan();
      complex5.INF.abs();
      complex1.ONE.cosh();
      Complex complex7 = complex5.pow(complex0);
      complex7.ZERO.add((-2229.5));
      Complex complex8 = complex5.INF.atan();
      complex8.I.nthRoot(163);
      complex1.isInfinite();
      complex2.sqrt1z();
      complex1.getField();
      Complex complex9 = complex6.sqrt();
      complex2.tanh();
      Complex complex10 = complex1.INF.tan();
      complex10.ZERO.sin();
      Complex.valueOf(2431.9546712402, (-635.1192165));
      Complex complex11 = complex6.multiply((-1794.683604528));
      complex5.getArgument();
      complex3.isInfinite();
      Complex complex12 = complex11.atan();
      complex12.log();
      complex3.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.readResolve();
      complex9.getArgument();
      Complex.valueOf(Double.NaN, 1.368539456379101E-44);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.hashCode();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex2.I.exp();
      complex0.ONE.add(complex4);
      complex3.I.readResolve();
      complex1.acos();
      Complex complex5 = complex2.divide(0.0);
      complex5.NaN.multiply(0.0);
      complex3.NaN.asin();
      complex3.sin();
      Complex complex6 = complex3.tan();
      complex6.sin();
      complex4.asin();
      complex1.pow(3093.37105675448);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      complex0.abs();
      Complex complex2 = complex0.NaN.add(0.0);
      complex2.ZERO.nthRoot(408);
      Complex complex3 = complex0.INF.createComplex(2341.941355991, 2341.941355991);
      complex3.INF.sqrt();
      complex2.ONE.pow(1.0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.sin();
      complex5.ONE.log();
      Complex complex6 = complex4.ZERO.conjugate();
      complex1.equals(complex4);
      complex4.asin();
      complex1.sinh();
      complex6.tan();
      Complex.valueOf(0.0);
//      try { 
        complex1.nthRoot((-884));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -884
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(1397.47084302, 1397.47084302);
      Complex complex1 = complex0.acos();
      complex0.INF.sqrt1z();
      Complex complex2 = complex0.multiply(17);
      Complex.valueOf(0.0);
      complex0.getImaginary();
      complex2.getImaginary();
      complex0.sqrt1z();
      Complex complex3 = complex0.multiply(1913);
      Complex complex4 = Complex.ZERO;
      complex4.ZERO.acos();
      complex4.NaN.atan();
      complex0.pow(complex4);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.add(Double.POSITIVE_INFINITY);
      complex6.NaN.createComplex(1397.47084302, (-414.3));
      Complex complex7 = complex0.divide(complex3);
      complex0.ZERO.pow((double) 1913);
      complex1.negate();
      complex5.readResolve();
      complex7.abs();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.NaN.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(2505.8310443645);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.add(3162.07);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex4.cos();
      complex4.ONE.multiply(complex3);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.NaN.divide(complex6);
      Complex complex8 = complex7.ZERO.log();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isInfinite());
      
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex6.atan();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      complex1.toString();
      Complex complex11 = complex9.log();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      complex12.INF.toString();
      Complex complex13 = Complex.valueOf(3162.07, 989.3308);
      complex11.INF.tan();
      List<Complex> list0 = complex13.nthRoot(17);
      assertEquals(17, list0.size());
      
      Complex complex14 = complex11.asin();
      assertSame(complex14, complex5);
      
      Complex complex15 = complex1.sinh();
      assertTrue(complex15.equals((Object)complex10));
      
      complex1.divide(complex12);
      Complex complex16 = complex11.pow(complex2);
      complex3.getReal();
      complex16.tan();
      assertSame(complex16, complex7);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.negate();
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.INF.add(complex0);
      assertTrue(complex3.isInfinite());
      
      Complex complex4 = complex1.NaN.divide(complex0);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex0.sqrt1z();
      complex6.INF.getArgument();
      Complex complex7 = complex6.INF.multiply(complex0);
      Complex complex8 = complex7.I.add(0.0);
      assertFalse(complex8.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex3));
      
      complex6.NaN.getField();
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex9 = complex0.multiply(17);
      assertTrue(complex9.equals((Object)complex5));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex0.subtract(0.0);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex1.getField();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.pow((-833.8915111));
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex4, complex2);
      
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.NaN.log();
      assertTrue(complex6.equals((Object)complex2));
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex6, complex4);
      
      String string0 = complex1.toString();
      assertTrue(complex1.equals((Object)complex5));
      assertEquals("(1.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2340.79));
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.ZERO.sqrt1z();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      complex0.INF.cosh();
      complex0.INF.pow(complex1);
      complex0.INF.tan();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.I.asin();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex3.pow(complex4);
      Complex complex7 = complex6.I.log();
      assertSame(complex6, complex3);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.tanh();
      Complex.valueOf((-3093.47625));
      Complex complex9 = complex8.tan();
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      complex4.add(complex8);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2480);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }
}
