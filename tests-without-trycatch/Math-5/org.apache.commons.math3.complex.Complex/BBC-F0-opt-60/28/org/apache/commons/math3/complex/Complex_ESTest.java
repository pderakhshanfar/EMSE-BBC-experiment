/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:14:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(9.313225746154785E-10);
      Complex complex2 = complex0.divide(complex1);
      complex0.negate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.atan();
      complex4.tan();
//      try { 
        complex4.nthRoot((-2090369721));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,090,369,721
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.pow(2.625423995658143E-82);
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.log();
      complex6.add(2.625423995658143E-82);
      complex1.multiply(complex3);
      Complex complex7 = new Complex(2.625423995658143E-82, (-440.0));
      Complex complex8 = complex7.reciprocal();
      complex0.tan();
      complex2.tanh();
      Complex complex9 = complex6.divide(complex8);
      complex6.negate();
      Complex complex10 = Complex.ONE;
      complex4.atan();
      complex5.tan();
      complex1.nthRoot(37);
      Complex complex11 = new Complex((-3207.0), (-3207.0));
      complex11.abs();
      complex9.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
      complex0.abs();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-19.690504253573234), Double.POSITIVE_INFINITY);
      complex0.multiply(108);
      Complex complex1 = new Complex((-1758.6554454958), (-19.690504253573234));
      Complex complex2 = complex0.multiply(complex1);
      complex2.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1429.800579), Double.POSITIVE_INFINITY);
      complex1.multiply((-5.617718879466363E-299));
      complex1.subtract(Double.POSITIVE_INFINITY);
      complex1.multiply((-3770));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1291.6));
      complex1.sqrt();
      complex0.nthRoot(1372);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.5332752658571312E182, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex1.NaN.pow(complex0);
      Complex complex3 = complex2.NaN.negate();
      complex2.getField();
      Complex complex4 = complex0.NaN.pow(7.415557606805398E-8);
      Complex complex5 = complex1.I.multiply(0.009280003356122005);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex1.subtract(7.415557606805398E-8);
      Complex complex9 = complex3.multiply(1132.0008833915367);
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex6.reciprocal();
      complex7.I.hashCode();
      complex11.NaN.cos();
      Complex complex12 = complex8.conjugate();
      complex12.ZERO.multiply(complex2);
      Complex complex13 = complex3.exp();
      complex13.readResolve();
      complex5.add(7.415557606805398E-8);
      complex0.conjugate();
      complex6.tan();
      complex7.NaN.getField();
      complex4.cosh();
      complex1.tan();
      Complex complex14 = complex9.log();
      complex14.tan();
      complex10.exp();
      complex3.multiply(0.009280003356122005);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(21.287539864478077, Double.NaN);
      complex0.divide(305.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2236.801389), Double.NaN);
      complex1.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tan();
      Complex complex1 = complex0.multiply((-5.617718879466363E-299));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = new Complex((-10.631869135736551), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex2.pow((-2613.36));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(2040);
      Complex complex1 = Complex.valueOf((double) 2040, (-1186.842421389602));
      Complex complex2 = complex0.pow(complex1);
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.toString();
      complex0.multiply((-2045222521));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
      Complex complex1 = Complex.ZERO;
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1080.4949936809073), (-1080.4949936809073));
      Complex complex1 = complex0.subtract((-1080.4949936809073));
      Complex complex2 = complex0.NaN.asin();
      complex2.INF.getField();
      complex0.ONE.readResolve();
      Complex complex3 = complex1.INF.multiply((-1.0));
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex0.pow(complex1);
      complex5.ZERO.conjugate();
      Complex complex6 = complex0.subtract(complex1);
      complex6.NaN.abs();
      Complex complex7 = complex0.negate();
      complex6.pow(complex0);
      Complex complex8 = complex3.reciprocal();
      complex7.log();
      Complex.valueOf((-709.779432), (-689.0));
      Complex complex9 = complex1.createComplex((-20.0), (-1080.4949936809073));
      complex9.tan();
      Complex complex10 = complex8.I.tanh();
      complex10.ZERO.readResolve();
      complex9.tanh();
      complex9.ONE.cosh();
      complex2.divide((-5.235397688850367E180));
      complex0.multiply(1640.5332010094662);
      complex9.add(complex8);
      complex9.createComplex((-5.235397688850367E180), Double.NaN);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-9.622654619333537E286), 246.43278);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(1175.2);
      complex2.INF.toString();
      Complex complex3 = complex2.NaN.multiply(1879.82331);
      Complex.valueOf((-9.622654619333537E286), 1418.4);
      complex3.NaN.abs();
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = Complex.valueOf(1175.2, 4.8320318300919314E-8);
      Complex complex6 = complex1.add(complex5);
      complex5.I.getArgument();
      Complex complex7 = complex0.exp();
      complex2.INF.getField();
      complex7.NaN.toString();
      int int0 = (-3092);
      complex7.ZERO.getArgument();
      Complex complex8 = complex7.INF.multiply((-3092));
      Complex complex9 = complex8.pow(complex1);
      Complex complex10 = complex5.conjugate();
      complex10.INF.reciprocal();
      complex1.add(complex2);
      Complex complex11 = Complex.valueOf(246.43278, 246.43278);
      complex9.divide(complex6);
      complex4.multiply(complex5);
//      try { 
        complex11.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4752.6077558772, (-3517.0));
      Complex complex1 = Complex.NaN;
      complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.NaN;
      complex4.reciprocal();
      complex1.atan();
      Complex complex5 = Complex.ZERO;
      complex0.multiply(complex2);
      complex3.sqrt();
      Complex complex6 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(1108.6065970358204);
      Complex complex1 = complex0.multiply(2838);
      complex1.ZERO.log();
      Complex complex2 = complex1.acos();
      complex2.sqrt();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      Complex complex1 = new Complex(1053.5153, 1053.5153);
      Complex complex2 = complex0.NaN.multiply(1231);
      complex2.ONE.getField();
      Complex complex3 = complex1.INF.pow(complex0);
      complex3.NaN.negate();
      complex0.NaN.sin();
      complex3.ONE.sqrt();
      complex0.I.pow(complex1);
      Complex complex4 = complex0.multiply(107.7585817186479);
      complex4.ZERO.add((-2003.7234626));
      Complex.valueOf(0.5618454217910767, 107.7585817186479);
      complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1883.84244), (-1883.84244));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.INF.subtract((-1883.84244));
      complex2.I.sinh();
      Complex complex3 = complex0.sqrt1z();
      complex1.ONE.atan();
      complex3.INF.conjugate();
      complex3.multiply((-1883.84244));
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(5.035675598947243E285);
      complex0.NaN.hashCode();
      complex0.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.pow(5.035675598947243E285);
      Complex complex3 = complex1.pow(3720.8459);
      Complex complex4 = complex0.ONE.divide((-888.0));
      complex4.NaN.toString();
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.INF.sin();
      complex7.negate();
      Complex complex8 = Complex.valueOf((-1349.58));
      Complex complex9 = complex5.asin();
      complex6.sin();
      complex6.tanh();
      Complex complex10 = complex8.sqrt();
      complex10.I.getField();
      complex6.isInfinite();
      complex2.nthRoot(194);
      complex1.multiply(194);
      complex9.getField();
      complex2.reciprocal();
      complex4.isInfinite();
      complex1.cos();
      Complex.valueOf((-2916.647044241908), 2.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.622654619333537E286, (-1188.2990948641));
      Complex complex1 = complex0.pow(9.622654619333537E286);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ZERO.createComplex((-1638.07237), 9.622654619333537E286);
      Complex complex4 = complex0.NaN.add(7.039154929995833E-239);
      Complex.valueOf(9.622654619333537E286);
      complex3.negate();
      complex2.subtract(complex0);
      complex4.subtract(complex3);
      complex3.readResolve();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.atan();
      complex3.ONE.getField();
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.ZERO;
      complex1.multiply(complex4);
      complex1.getArgument();
      complex2.sqrt();
      complex2.abs();
//      try { 
        complex4.nthRoot((-2045222521));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,045,222,521
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(942.5672, (-1966.487));
      complex0.NaN.toString();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.sinh();
      complex1.ONE.tanh();
      complex0.multiply(complex1);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1101.55948985, 20.0);
      complex0.tan();
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.exp();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.subtract(Double.POSITIVE_INFINITY);
      complex2.INF.multiply(Integer.MAX_VALUE);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex.valueOf(9.313030589647127E-48, (-7.952161907879152));
      Complex complex4 = complex1.tan();
      complex4.INF.getField();
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2447.911), 3044.66347074431);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.pow((-2447.911));
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex1.ONE.multiply(3044.66347074431);
      Complex complex5 = complex1.ZERO.sqrt1z();
      Complex complex6 = complex5.NaN.add(complex4);
      complex0.I.abs();
      complex0.ONE.getField();
      complex0.subtract((-2447.911));
      Complex complex7 = Complex.INF;
      complex0.pow(complex3);
      Complex complex8 = complex4.add(complex7);
      complex6.ONE.tanh();
      Complex complex9 = complex8.INF.multiply((-3505));
      Complex.valueOf(3044.66347074431);
      complex0.tan();
      complex6.pow(complex0);
      Complex complex10 = complex8.multiply(3044.66347074431);
      complex10.ZERO.acos();
      complex9.multiply(complex2);
      complex8.reciprocal();
      complex4.sinh();
      complex6.cosh();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(2763.39394, 2763.39394);
      complex0.sqrt1z();
      double double0 = (-2557.0980902);
      Complex.valueOf(2763.39394, (-2557.0980902));
      double double1 = 2551.2;
      Complex complex1 = complex0.pow(2551.2);
//      try { 
        complex1.ZERO.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      Complex complex1 = Complex.I;
      complex1.NaN.cosh();
      complex0.INF.pow(complex1);
      Complex complex2 = new Complex(Double.NaN);
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = Complex.valueOf(3165.448032741, 9.622654619333537E286);
      complex4.add(3165.448032741);
      complex0.sqrt1z();
      complex2.cosh();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.I.tanh();
      Complex complex2 = complex0.add(complex1);
      complex2.ZERO.add(complex1);
      Complex complex3 = complex1.add(2766.5357);
      complex3.sqrt1z();
      Complex complex4 = complex3.cosh();
      complex1.equals(complex0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      complex0.add(complex2);
      complex1.add(complex2);
      complex0.sqrt1z();
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.I;
      complex1.equals(complex4);
      complex0.abs();
      complex3.toString();
      Complex complex5 = Complex.ZERO;
      complex5.getArgument();
      complex4.tan();
      Complex complex6 = Complex.INF;
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      Complex complex1 = complex0.ONE.subtract(1108.6065970358204);
      complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex4.tan();
      Complex complex5 = new Complex((-107.7585817186479));
      complex5.asin();
      complex5.atan();
      Complex complex6 = complex3.pow((-107.7585817186479));
      complex5.multiply(0);
      complex6.createComplex(Double.POSITIVE_INFINITY, (-0.004640101579809652));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.NaN.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
      Complex complex1 = complex0.tanh();
      complex1.ONE.acos();
      Complex complex2 = Complex.valueOf((-0.9999995713768118));
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.NaN;
      complex2.getField();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.I.tanh();
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.readResolve();
      Complex complex3 = complex1.ONE.sqrt1z();
      complex3.cosh();
      complex0.equals(complex1);
      complex1.abs();
      complex3.toString();
      complex0.getArgument();
      complex1.tan();
      // Undeclared exception!
      complex1.nthRoot(2146760641);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2393.3814, 2393.3814);
      Complex complex2 = complex0.add(complex1);
      complex1.add(complex0);
      Complex complex3 = complex2.sqrt1z();
      complex1.cosh();
      complex0.equals(complex1);
      complex3.abs();
      complex3.toString();
      complex1.getArgument();
      Complex complex4 = complex0.tan();
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479), (-107.7585817186479));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.atan();
      complex1.asin();
      Complex complex5 = Complex.ZERO;
      complex4.getArgument();
      complex3.abs();
      complex0.getArgument();
      Complex complex6 = complex0.subtract(complex3);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-100.4753107641172));
      Complex.valueOf((-100.4753107641172), (-100.4753107641172));
      complex0.I.getArgument();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.add((-1928.34773));
      complex2.ZERO.getField();
      Complex complex3 = complex1.tanh();
      complex0.INF.hashCode();
      complex2.NaN.exp();
      complex3.add(complex0);
      complex1.INF.divide(2.320822576772103E-287);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.I.sqrt();
      complex4.I.multiply(1191);
      Complex complex6 = complex2.pow(3827.0534299);
      complex6.ONE.exp();
      complex1.ONE.add(complex5);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.ZERO.tanh();
      complex8.log();
//      try { 
        complex8.INF.nthRoot((-1135));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,135
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.INF.multiply(0.0);
      complex4.ONE.tan();
      complex4.sin();
      complex0.getField();
      Complex complex5 = complex3.cos();
      complex5.INF.tanh();
      Complex.valueOf(0.0);
      complex0.nthRoot(3672);
      complex2.getField();
      complex4.nthRoot(3672);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt();
      complex2.divide(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.multiply(complex1);
      complex8.getArgument();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.sqrt();
      complex10.getField();
      Complex complex11 = Complex.ONE;
      complex5.getReal();
      Complex.valueOf(Double.NaN, 4752.6077558772);
      complex6.isNaN();
      complex3.getField();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.sqrt1z();
      complex2.cosh();
      complex4.equals(complex1);
      complex2.abs();
      complex3.toString();
      complex4.nthRoot(3690);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.INF.multiply(0.0);
      complex3.sin();
      complex0.getField();
      complex0.cos();
      Complex.valueOf(0.0);
      complex1.ONE.multiply(complex3);
      Complex complex4 = Complex.NaN;
      complex4.getArgument();
      Complex complex5 = Complex.ONE;
      complex5.add((-3095.7));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.530845432304069E240), (-1887875.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.exp();
      complex1.sqrt();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex2.atan();
      complex1.asin();
      Complex complex7 = Complex.ZERO;
      complex4.multiply(complex5);
      complex5.getArgument();
      Complex complex8 = complex6.sqrt();
      complex8.getField();
      Complex complex9 = Complex.ONE;
      complex6.isNaN();
      complex0.getReal();
      Complex.valueOf(0.18647104883458057, (-1.530845432304069E240));
      complex0.isNaN();
      complex1.getField();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2240.3));
      complex0.I.pow(complex1);
      Complex complex2 = complex1.NaN.pow((-2240.3));
      Complex complex3 = complex2.pow((-2240.3));
      Complex complex4 = complex0.subtract(complex1);
      complex1.toString();
      complex0.INF.exp();
      complex0.add(complex3);
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex5.multiply(928);
      complex2.INF.conjugate();
      complex1.add((-2240.3));
      complex6.add((-2240.3));
      Complex complex7 = Complex.valueOf(1017.75045904, 1017.75045904);
      complex7.ZERO.getArgument();
      complex6.add((-3329.84317586451));
      Complex complex8 = complex3.createComplex(1136.195321341, 0.0);
      complex8.createComplex(1.0, Double.NaN);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1374);
      Complex complex1 = new Complex(1374);
      Complex complex2 = complex1.asin();
      complex2.add((-2233.6));
      complex1.getField();
      complex1.ONE.nthRoot(1374);
      complex1.NaN.conjugate();
      Complex complex3 = complex0.subtract(complex1);
      complex3.hashCode();
      complex3.getField();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex4.ONE.pow((double) 1374);
      Complex complex6 = complex0.pow((double) 1374);
      Complex complex7 = complex6.INF.divide(0.19999999999923582);
      complex1.NaN.multiply(1);
      complex7.NaN.divide(complex6);
      complex1.equals("9BrN!z\u0005g !");
      complex6.abs();
      Complex complex8 = complex0.log();
      Complex complex9 = Complex.valueOf((-369.191539748), 28.23410662621);
      complex8.atan();
      complex5.negate();
      complex9.exp();
      complex9.divide(complex8);
      complex0.nthRoot(780);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply((-1251));
      Complex complex3 = Complex.valueOf(6.283185307179586, 1.0);
      Complex complex4 = complex0.tan();
      Complex complex5 = new Complex(1.0);
      Complex complex6 = Complex.valueOf((-1651.1717355465366), 4921.493452);
      complex6.asin();
      complex1.atan();
      Complex complex7 = complex2.multiply(complex4);
      complex7.sqrt();
      complex3.abs();
      complex6.createComplex(1.0, (-6.889997193778161E-8));
      Complex complex8 = complex7.multiply((-1251));
      Complex complex9 = Complex.NaN;
      complex9.pow((double) (-1251));
      complex6.log();
      Complex complex10 = complex6.atan();
      Complex complex11 = complex10.asin();
      complex7.subtract(complex3);
      complex11.conjugate();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      Complex complex1 = complex0.ONE.subtract(1108.6065970358204);
      complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf(1107.6065970358204, 20.066063245522837);
      Complex complex4 = complex1.tan();
      Complex complex5 = new Complex(1107.6065970358204);
      Complex complex6 = complex4.asin();
      Complex complex7 = new Complex((-1026.3803857195894), (-398.27149324));
      Complex complex8 = complex7.atan();
      Complex complex9 = complex2.multiply(complex5);
      Complex complex10 = complex8.sqrt();
      complex9.abs();
      complex6.createComplex(6.781013213725389E-240, (-1026.3803857195894));
      complex3.multiply(635);
      complex10.pow(0.3436346074317116);
      complex2.log();
      complex9.atan();
      complex4.asin();
//      try { 
        complex4.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      Complex complex1 = complex0.ONE.subtract(1108.6065970358204);
      complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = Complex.valueOf((-107.7585817186479), 1108.6065970358204);
      Complex complex5 = complex4.tan();
      Complex complex6 = new Complex(1.5707963267948966);
      Complex complex7 = complex4.asin();
      complex6.atan();
      Complex complex8 = complex3.multiply(complex4);
      Complex complex9 = complex8.sqrt();
      complex4.abs();
      complex5.I.subtract(250.5);
      Complex complex10 = complex0.createComplex((-1.315295870404327E-8), 0.9998277779069225);
      Complex complex11 = complex9.multiply(1369);
      complex10.pow(2.133604049682617);
      complex5.log();
      Complex complex12 = complex10.atan();
      complex7.asin();
      complex4.subtract(complex6);
      complex2.conjugate();
      complex12.getImaginary();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 807.29131093);
      Complex complex1 = complex0.subtract(1108.6065970358204);
      Complex complex2 = complex0.sin();
      complex1.abs();
      Complex complex3 = complex2.cosh();
      int int0 = 64;
      complex1.multiply(64);
      Complex.valueOf(807.29131093, 2.0);
      complex0.tan();
      Complex complex4 = new Complex((-2312.73));
      complex3.asin();
      complex3.atan();
//      try { 
        complex4.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.sin();
      complex0.readResolve();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex1.pow(1.5707963267948966);
      complex2.multiply(1414);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      complex0.ONE.subtract(1108.6065970358204);
      complex0.sin();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.divide(784.88);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      complex0.ONE.subtract(1108.6065970358204);
      Complex complex1 = complex0.sin();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex2 = complex0.pow(0.4920966625213623);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(4752.6077558772);
      Complex complex1 = complex0.ONE.subtract(Double.NaN);
      complex0.divide(4752.6077558772);
      Complex.valueOf(Double.NaN);
      complex1.divide(2263.2822281575);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      Complex complex1 = complex0.ONE.subtract(1108.6065970358204);
      Complex complex2 = complex0.sin();
      complex1.abs();
      Complex complex3 = complex1.cosh();
      complex3.multiply(0);
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex5 = complex4.tan();
      Complex complex6 = new Complex((-107.7585817186479));
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex2.multiply(complex8);
      complex4.sqrt();
      complex7.abs();
      complex5.createComplex(5.597922337615172, (-853.7730460375072));
      Complex complex10 = complex9.multiply(1699);
      Complex complex11 = complex3.pow(1.0479910373687744);
      complex11.NaN.log();
      Complex complex12 = complex4.atan();
      complex2.asin();
      complex10.subtract(complex9);
      complex12.conjugate();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex0.I.divide(674.9);
      complex1.NaN.atan();
      Complex complex3 = complex2.NaN.negate();
      complex0.ONE.readResolve();
      Complex complex4 = complex0.subtract((-1002.1));
      Complex complex5 = complex4.I.multiply((-1.0));
      Complex complex6 = complex5.add(complex4);
      complex6.INF.getArgument();
      complex4.INF.subtract((-1002.1));
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      complex4.readResolve();
      complex0.equals(complex3);
      Complex complex7 = Complex.valueOf(0.7853981633974483, (-508.008018));
      complex0.divide(complex7);
      Complex complex8 = Complex.INF;
      complex8.pow((-1.4255188208147591));
      complex0.multiply((-698576784));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex0.I.divide(674.9);
      complex1.NaN.atan();
      complex2.NaN.negate();
      complex0.ONE.readResolve();
      Complex complex3 = complex0.subtract((-1002.1));
      Complex complex4 = complex3.I.multiply((-1.0));
      Complex complex5 = complex4.add(complex3);
      complex5.INF.getArgument();
      complex4.subtract(0.0);
      Complex complex6 = Complex.I;
      complex6.atan();
      complex1.tanh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.nthRoot(66);
      Complex complex1 = complex0.subtract((double) 66);
      complex0.readResolve();
      Complex complex2 = Complex.I;
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex1.abs();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.multiply(66);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.asin();
      complex6.atan();
      complex6.multiply(complex5);
      Complex complex7 = complex3.sqrt();
      complex1.abs();
      Complex complex8 = new Complex(0);
      complex8.createComplex(2.0, 3796.8131319118716);
      complex1.multiply(0);
      Complex complex9 = new Complex(0);
      complex9.pow(1045.3636400584);
      complex7.getArgument();
      Complex complex10 = Complex.I;
      complex10.atan();
      complex7.asin();
      complex7.subtract(complex4);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-853.7730460375072), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.I;
      complex4.sqrt1z();
      complex0.cos();
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.atan();
      complex5.reciprocal();
      complex0.add(complex3);
      Complex complex9 = Complex.ONE;
      complex9.atan();
      complex4.asin();
      complex0.multiply(complex5);
      complex7.getArgument();
      Complex complex10 = Complex.valueOf(0.0, (double) 1);
      complex10.sqrt();
      Complex complex11 = Complex.valueOf((-257.8146194675));
      complex11.getField();
      complex8.isNaN();
      complex3.getReal();
      Complex.valueOf(Double.NEGATIVE_INFINITY, (-1567.296796));
      complex6.isNaN();
      complex3.getField();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = complex0.multiply(20.0);
      Complex complex2 = complex1.subtract(2.0);
      Complex complex3 = Complex.valueOf(1897.406471792385, (-8.226332333639604));
      complex3.getArgument();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex5.getImaginary();
      complex3.isInfinite();
      Complex complex6 = complex2.divide((-8.226332333639604));
      complex6.getArgument();
      complex4.hashCode();
      complex0.abs();
      Complex complex7 = complex4.tanh();
      complex5.cosh();
      complex4.pow(2.0);
      complex1.divide(complex0);
      complex1.getField();
      complex1.abs();
      complex5.add(complex0);
      Complex complex8 = complex5.log();
      complex7.atan();
      complex8.subtract(400.0);
      Complex complex9 = complex5.atan();
      complex9.pow((-6089.1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 807.29131093);
      Complex complex1 = Complex.NaN;
      complex0.NaN.sqrt();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.I.sin();
      complex0.equals(complex2);
      complex0.abs();
      complex2.toString();
      complex0.getArgument();
      complex2.createComplex(1.0007534790423682, (-125.04575815171));
      Complex complex3 = complex1.atan();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex1.sqrt();
      Complex complex5 = complex2.divide(complex0);
      complex3.sin();
      complex2.readResolve();
      Complex complex6 = complex1.tanh();
      complex6.subtract(0.9999999999999994);
      Complex complex7 = Complex.INF;
      complex7.readResolve();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex8.I.multiply(complex1);
      complex5.readResolve();
      complex0.cos();
      complex3.reciprocal();
      complex9.tan();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 807.29131093);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.createComplex(1198.431, 1898.406471792385);
      complex3.getArgument();
      complex3.acos();
      complex2.multiply(17);
      complex3.atan();
      complex0.sqrt();
      Complex complex4 = Complex.ONE;
      complex4.sqrt();
      complex2.cosh();
      complex2.getArgument();
      Complex complex5 = complex2.add(complex0);
      complex5.nthRoot(17);
      complex1.atan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex0.I.divide(674.9);
      complex1.NaN.atan();
      Complex complex3 = complex2.NaN.negate();
      complex0.ONE.readResolve();
      Complex complex4 = complex0.subtract((-1002.1));
      Complex complex5 = complex4.I.multiply((-1.0));
      Complex complex6 = complex5.add(complex4);
      complex6.INF.getArgument();
      Complex complex7 = complex4.INF.subtract((-1002.1));
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      complex0.abs();
      complex4.I.cosh();
      complex0.multiply(0);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex7.multiply(complex0);
      complex4.sqrt();
      complex11.abs();
      Complex complex12 = complex3.createComplex(1.0479910373687744, 0);
      Complex complex13 = complex9.multiply(0);
      complex13.pow(1.0479910373687744);
      complex12.atan();
      complex1.asin();
      complex13.subtract(complex10);
      complex13.conjugate();
      complex5.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex((-2.2735061539223372E-8));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex2.multiply((-400));
      Complex complex8 = complex6.asin();
      Complex complex9 = complex4.atan();
      complex1.reciprocal();
      Complex complex10 = complex3.add(complex0);
      Complex complex11 = complex7.atan();
      complex9.asin();
      complex9.multiply(complex3);
      complex11.getArgument();
      complex3.sqrt();
      complex11.getField();
      complex7.isNaN();
      Complex.valueOf((-3533.827013752), 1.7976931348623157E308);
      complex3.isNaN();
      complex10.getField();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = Complex.valueOf(952.8743851409683, 20.0);
      complex4.conjugate();
      complex5.abs();
      Complex complex6 = new Complex(20.0);
      Complex complex7 = complex3.divide(complex6);
      Complex complex8 = complex3.exp();
      complex2.sqrt1z();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.sqrt();
      complex7.getReal();
      Complex complex11 = Complex.valueOf(306.45305, (-2811.0));
      complex11.nthRoot(7);
      complex9.hashCode();
      complex10.sin();
      complex8.subtract((-2058.7));
      complex6.add(952.8743851409683);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.ONE.sqrt1z();
      complex0.cos();
      Complex complex5 = complex0.NaN.multiply(1);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex2.sin();
      complex3.I.sqrt();
      complex8.readResolve();
      Complex complex9 = complex0.tanh();
      complex0.subtract(1598.432812);
      complex4.readResolve();
      Complex complex10 = Complex.valueOf((double) 1, (-975.5263079211888));
      complex10.sqrt();
      complex7.readResolve();
      complex10.cos();
      complex3.reciprocal();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 807.29131093);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.ONE.divide(complex1);
      complex4.reciprocal();
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.ZERO;
      complex8.multiply(complex5);
      complex3.getArgument();
      Complex complex9 = complex0.sqrt();
      complex7.getField();
      Complex complex10 = Complex.ONE;
      complex10.isNaN();
      complex5.getReal();
      Complex.valueOf(304.6406574, (-0.9989023705395627));
      complex9.isNaN();
      complex8.getField();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.sinh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex0.multiply(1371);
      complex5.asin();
      Complex complex6 = complex0.atan();
      complex1.reciprocal();
      Complex complex7 = complex5.add(complex6);
      Complex complex8 = complex0.atan();
      Complex complex9 = new Complex(1);
      complex9.asin();
      Complex complex10 = complex2.multiply(complex6);
      complex2.I.divide(complex3);
      complex10.getArgument();
      complex7.sqrt();
      complex1.getField();
      complex4.isNaN();
      complex8.getReal();
      Complex.valueOf((-605.28329131), 316.7530858);
      Complex complex11 = Complex.ZERO;
      complex11.isNaN();
      complex11.getField();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.tanh();
      complex0.add(complex1);
      Complex complex3 = complex0.add(complex1);
      complex1.sqrt1z();
      Complex complex4 = complex3.cosh();
      complex4.equals((Object) null);
      complex3.abs();
      complex2.toString();
      complex0.getArgument();
      complex1.createComplex(20.0, 0.5220900774002075);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.NaN.sinh();
      complex1.tanh();
      double double0 = 0.0;
      complex0.ZERO.pow(complex1);
      Complex.valueOf(0.0, (-2058.7));
      Complex complex2 = complex1.INF.conjugate();
      complex2.ONE.abs();
      complex0.divide(complex1);
      complex1.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.sqrt();
      complex3.getReal();
//      try { 
        complex4.nthRoot((-594));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -594
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-716.3744159564417));
      complex0.INF.pow(Double.NaN);
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex1.NaN.tan();
      complex2.ONE.sqrt();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.ZERO.cosh();
      complex5.asin();
      complex5.ZERO.sinh();
      complex5.NaN.pow(complex2);
      complex5.I.multiply((double) (-878));
//      try { 
        complex1.nthRoot((-878));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -878
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide(848.4796604884);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.ZERO.reciprocal();
      complex0.getReal();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.ZERO.atan();
      complex5.ONE.tan();
      Complex complex6 = complex1.INF.add(complex0);
      Complex complex7 = complex6.INF.exp();
      complex6.I.add(6.283185307179586);
      complex6.ZERO.multiply(0.0);
      Complex.valueOf(848.4796604884, 0.0);
      complex7.INF.asin();
      complex6.ZERO.getField();
      complex0.subtract(20.0);
      complex0.hashCode();
      Complex complex8 = complex1.subtract(complex0);
      Complex complex9 = complex8.subtract(0.0);
      Complex complex10 = complex9.NaN.pow(complex3);
      complex0.tanh();
      complex8.getArgument();
      Complex complex11 = complex1.ONE.sinh();
      complex11.I.subtract((-887.1));
      Complex complex12 = Complex.valueOf(20.0, 1.9068609515836638E-10);
      complex1.getField();
      complex10.conjugate();
      complex0.reciprocal();
      complex3.hashCode();
      complex11.subtract(complex12);
      complex10.subtract(848.4796604884);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.sin();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-851.240077029));
      Complex complex1 = complex0.NaN.tan();
      complex1.I.subtract(complex0);
      complex0.subtract((-851.240077029));
      complex0.I.asin();
      Complex.valueOf((-851.240077029), (-851.240077029));
      complex0.NaN.toString();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.I.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex4.cosh();
      complex0.equals(complex1);
      complex1.abs();
      complex4.toString();
      complex3.getArgument();
      complex5.createComplex(0.0, (-20.0));
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.divide(1.7778112039716255E-8);
      complex0.ZERO.nthRoot(1403);
      Complex complex2 = complex1.INF.divide(1.7778112039716255E-8);
      Complex complex3 = complex2.ONE.cosh();
      complex1.nthRoot(17);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.exp();
      complex0.readResolve();
      complex1.getArgument();
      complex1.isInfinite();
      Complex complex6 = complex1.cos();
      complex3.ONE.getField();
      Complex complex7 = complex0.add((-1248.0));
      complex7.ONE.sinh();
      complex3.ONE.hashCode();
      complex6.hashCode();
      Complex complex8 = complex1.ONE.sqrt1z();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex4.sinh();
      complex10.INF.atan();
      Complex complex11 = complex6.exp();
      complex5.abs();
      Complex complex12 = complex0.atan();
      complex12.getImaginary();
      Complex complex13 = complex9.tan();
      complex13.NaN.multiply(1);
      complex11.divide((-4602.732591290266));
      complex9.cosh();
      complex6.sinh();
      complex8.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.add((-4737.56997814));
      complex0.ONE.negate();
      complex1.ZERO.abs();
      Complex complex2 = complex0.cos();
      complex2.NaN.cos();
      complex1.sin();
      complex2.multiply(0.11343331634998322);
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.nthRoot(66);
      complex0.subtract((double) 66);
      Complex complex1 = complex0.atan();
      complex1.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1574222007764044E-7);
      Complex complex1 = complex0.ONE.negate();
      complex0.abs();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      complex3.NaN.getField();
      Complex complex4 = complex0.ONE.pow((double) (-1641));
      Complex complex5 = complex4.INF.tanh();
      complex5.INF.subtract(complex0);
//      try { 
        complex0.INF.nthRoot((-1641));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,641
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.exp();
      Complex complex1 = Complex.I;
      complex1.ZERO.reciprocal();
      complex0.pow(complex1);
      complex1.multiply(Double.NaN);
      complex0.toString();
      complex1.conjugate();
      Complex complex2 = complex0.exp();
      complex2.ZERO.cosh();
      complex0.getArgument();
      complex2.getArgument();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      complex0.ZERO.getArgument();
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.ZERO.pow(0.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.INF.add((-320.644819));
      complex2.INF.tan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.INF.multiply((-156));
      complex1.ONE.asin();
      complex5.multiply(1914.0);
      complex4.exp();
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex4.INF.pow(0.0);
      Complex complex7 = complex6.ONE.tanh();
      Complex.valueOf(0.0, (-1.0));
      complex7.ZERO.log();
      Complex complex8 = complex4.ZERO.divide(complex1);
      complex8.ONE.abs();
      complex3.getArgument();
      complex3.equals("matrix is singular");
      complex3.equals((Object) null);
      Complex complex9 = complex2.multiply(1021);
      complex9.ZERO.nthRoot(1021);
      complex0.log();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 807.29131093);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.exp();
      complex2.NaN.sqrt();
      Complex complex3 = complex0.ONE.divide(complex1);
      complex3.I.sin();
      complex0.I.readResolve();
      complex0.tanh();
      Complex complex4 = complex0.subtract(2629.68412605);
      complex4.INF.readResolve();
      Complex complex5 = complex0.sqrt();
      complex5.ZERO.readResolve();
      complex0.cos();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(765.59736);
      complex0.ONE.hashCode();
      complex0.ZERO.readResolve();
      Complex complex1 = null;
//      try { 
        complex0.I.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.091600108064668E-8, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.negate();
      complex0.INF.divide(0.0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = new Complex(0.0);
      complex4.NaN.getField();
      Complex complex5 = complex0.pow(complex4);
      complex5.INF.abs();
      complex3.INF.pow(complex2);
      Complex complex6 = complex5.INF.tanh();
      complex5.INF.cosh();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex4.subtract(complex5);
      Complex complex9 = Complex.valueOf((-1.0), 0.0);
      complex9.I.hashCode();
      Complex complex10 = complex8.NaN.divide(complex9);
      complex8.I.multiply(0);
      complex1.getImaginary();
      complex10.reciprocal();
      complex8.createComplex(0.0, (-1.0));
      complex2.multiply(0.0);
      complex3.readResolve();
      complex7.cosh();
      complex1.add((-1.0));
      Complex.valueOf(1135.9369743878603);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.pow(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ZERO.exp();
      int int0 = (-3094);
//      try { 
        complex4.nthRoot((-3094));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,094
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(450.230421805);
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(450.230421805);
      complex3.INF.divide((-2563.625381812));
      complex3.ZERO.hashCode();
      complex0.isInfinite();
      complex2.negate();
      complex3.getImaginary();
      complex3.multiply(450.230421805);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.7585817186479));
      Complex complex1 = complex0.ONE.subtract(1108.6065970358204);
      Complex complex2 = complex0.sin();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex0.pow(0.4920966625213623);
      complex1.multiply(1414);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.ONE.divide(0.0);
      complex3.NaN.multiply(0.0);
      Complex complex4 = complex0.sinh();
      complex4.NaN.readResolve();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex2.ONE.multiply(0.0);
      Complex complex7 = complex2.I.atan();
      Complex complex8 = complex5.add(complex1);
      Complex complex9 = complex3.multiply(complex8);
      complex9.I.atan();
      Complex complex10 = complex1.multiply(0.0);
      complex10.ZERO.pow(0.0);
      complex10.atan();
      Complex complex11 = Complex.valueOf((double) 0);
      complex7.abs();
      complex11.INF.getArgument();
      Complex complex12 = complex2.subtract(complex11);
      Complex complex13 = complex0.createComplex(0, 0);
      Complex complex14 = complex13.ZERO.add((-1.0));
      Complex complex15 = complex2.subtract(complex9);
      complex12.ZERO.atan();
      complex7.add(complex8);
      complex11.asin();
      complex12.multiply(complex6);
      complex2.sqrt();
      complex15.subtract(298.56);
      Complex.valueOf((double) 0, 0.0);
      complex1.equals(complex14);
      Complex.valueOf((double) 0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.INF.multiply(1);
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = Complex.valueOf((-5.376251584638963E-8));
      Complex complex8 = complex4.asin();
      Complex complex9 = complex0.subtract(complex1);
      complex0.INF.sqrt1z();
      complex0.NaN.subtract(complex8);
      complex8.sin();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex10.NaN.sqrt();
      complex8.INF.pow(complex6);
      Complex complex12 = complex6.add(complex1);
      Complex complex13 = complex12.INF.pow(complex6);
      Complex complex14 = complex3.log();
      complex14.INF.negate();
      complex8.atan();
      complex0.cosh();
      complex5.negate();
      complex7.getReal();
      complex9.abs();
      complex10.ZERO.divide(complex5);
      complex13.asin();
      complex11.reciprocal();
      complex14.getArgument();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.nthRoot(3414);
      complex0.hashCode();
      Complex complex1 = complex0.NaN.negate();
      complex0.INF.getArgument();
      complex0.ONE.createComplex(0.7853981633974483, 3209.8);
      complex1.I.toString();
      complex0.subtract(1090.59);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(632.6167771880563, 632.6167771880563);
      Complex complex1 = complex0.INF.tanh();
      complex1.INF.subtract((-546.7784491267));
      Complex complex2 = complex0.NaN.subtract(632.6167771880563);
      complex2.ZERO.asin();
      Complex complex3 = complex0.createComplex(3554.734343554, 0.0);
      Complex complex4 = complex3.I.log();
      complex3.NaN.exp();
      complex0.ZERO.conjugate();
      complex3.ONE.multiply(0);
      complex0.toString();
      Complex complex5 = complex2.add(0.0);
      complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1.6633478556884994E190);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.readResolve();
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ONE.readResolve();
      complex0.ONE.log();
      Complex complex2 = Complex.ONE;
      complex0.equals(complex2);
      complex2.add(complex1);
      complex0.ZERO.exp();
      Complex complex3 = complex2.pow(20.0);
      Complex complex4 = complex3.atan();
      complex4.INF.conjugate();
      complex4.ZERO.subtract(20.0);
      Complex complex5 = complex3.divide(20.0);
      complex0.readResolve();
      Complex complex6 = complex5.divide(20.0);
      Complex complex7 = complex6.ONE.add(20.0);
      Complex complex8 = Complex.valueOf(343.019986336978);
      Complex complex9 = complex8.sinh();
      Complex.valueOf(1289.9555);
      complex2.abs();
      Complex complex10 = complex8.divide(complex9);
      Complex complex11 = complex9.add(complex10);
      complex11.I.subtract(1.0);
      Complex complex12 = complex11.ONE.divide(1.0);
      complex12.atan();
      complex10.multiply(2682);
      complex5.acos();
      complex6.toString();
      Complex complex13 = complex7.conjugate();
      complex13.subtract((double) 2682);
      complex6.asin();
      complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(1.4513757076459615E88);
      Complex complex1 = new Complex((-1457.80199458));
      Complex complex2 = complex0.add(complex1);
      complex2.INF.createComplex((-1457.80199458), (-703.0997178452197));
      Complex complex3 = complex1.pow((-1457.80199458));
      complex3.INF.divide(1.4513757076459615E88);
      complex3.INF.sinh();
      Complex complex4 = complex1.divide(2180.954664);
      complex1.pow((-514.84784117206));
      complex3.reciprocal();
      complex1.reciprocal();
      complex3.divide(complex1);
      complex0.getImaginary();
      complex4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.tan();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(3580.09807238);
      complex0.pow(3580.09807238);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.sinh();
      complex3.ONE.sqrt1z();
      complex0.cos();
      Complex complex4 = complex0.NaN.multiply(1);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.atan();
      complex4.I.reciprocal();
      Complex complex7 = complex6.I.add(complex1);
      Complex complex8 = complex0.atan();
      complex2.INF.asin();
      complex6.INF.multiply(complex8);
      complex0.getArgument();
      complex5.sqrt();
      complex2.getField();
      complex7.isNaN();
      complex0.getReal();
      Complex.valueOf(304.6406574, (-605.28329131));
      complex0.isNaN();
      complex0.getField();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-853.7730460375072), 0.0);
      Complex complex1 = complex0.I.multiply((-853.7730460375072));
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex1.getArgument();
      Complex complex4 = complex1.sqrt1z();
      complex0.getImaginary();
      complex1.isInfinite();
      Complex complex5 = complex1.divide(1937.1500826464287);
      complex1.ONE.getArgument();
      complex5.ZERO.hashCode();
      complex4.abs();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.cosh();
      complex7.I.pow((-1606.0399718338924));
      Complex complex8 = complex7.ONE.divide(complex3);
      complex8.INF.getField();
      complex4.abs();
      Complex complex9 = complex2.add(complex1);
      complex9.NaN.log();
      complex0.atan();
      complex3.subtract(734.3);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      complex1.NaN.asin();
      Complex complex2 = complex0.sqrt1z();
      complex1.I.pow(0.0);
      complex1.hashCode();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.divide(0.0);
      complex4.ONE.hashCode();
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex3.subtract((-414.89093918));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.divide(complex6);
      complex8.hashCode();
      complex3.ONE.subtract(1.1479863663699871E296);
      Complex complex9 = complex6.createComplex(0.0, 0.0);
      Complex.valueOf(6279.87002047, (-414.89093918));
      Complex complex10 = complex9.multiply(complex5);
      complex8.NaN.pow(complex10);
      Complex complex11 = complex8.pow(851.12581);
      complex11.getArgument();
      Complex complex12 = complex2.conjugate();
      complex0.toString();
      complex12.pow((-414.89093918));
      Complex complex13 = complex7.acos();
      complex13.ONE.toString();
      complex12.getArgument();
      Complex complex14 = Complex.INF;
      complex6.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex.valueOf(0.0, 0.0);
      complex1.NaN.negate();
      complex0.getReal();
      complex0.ONE.sqrt();
      complex0.asin();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.sqrt1z();
      complex0.cosh();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex((-1.0), (-2093.67673));
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex1.ZERO.pow(complex2);
      complex5.I.add((-5206.77));
      complex0.getReal();
      complex3.toString();
      Complex.valueOf((-634.5), 0.0);
      Complex complex6 = complex1.cosh();
      Complex complex7 = Complex.valueOf((-2093.67673));
      Complex complex8 = complex0.ZERO.sqrt();
      complex4.getImaginary();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.ONE.sin();
      complex2.toString();
      Complex complex11 = complex6.conjugate();
      complex1.readResolve();
      complex8.sinh();
      complex0.add(1.0);
      Complex complex12 = complex2.tanh();
      complex10.log();
      Complex complex13 = complex1.cosh();
      complex7.isNaN();
      complex9.readResolve();
      complex11.cosh();
      complex7.abs();
      complex4.getImaginary();
      complex12.sqrt();
      complex3.pow((-5206.77));
      complex13.cosh();
      complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = new Complex(0.0);
      complex0.pow(complex1);
      Complex complex2 = complex1.exp();
      complex2.I.readResolve();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-868.75), (-868.75));
      Complex complex2 = complex0.I.multiply(complex1);
      complex2.NaN.asin();
      complex2.ONE.subtract((-868.75));
      complex2.multiply(complex1);
      complex0.sin();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ONE.cos();
      complex4.ZERO.hashCode();
      complex1.ONE.asin();
      Complex complex5 = complex1.NaN.conjugate();
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.ONE.exp();
      complex0.ZERO.atan();
      complex3.createComplex((-4853.29620908), (-2909.021546494));
      complex3.isInfinite();
      Complex complex7 = complex1.multiply((-868.75));
      complex3.sqrt();
      Complex complex8 = complex7.tanh();
      complex8.divide((-4853.29620908));
      complex0.multiply(370);
      complex1.conjugate();
      complex0.acos();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.createComplex(0.0, 2508.95309057);
      Complex complex2 = complex1.ZERO.multiply((-5930));
      Complex complex3 = complex2.INF.atan();
      complex1.log();
      complex3.ZERO.sqrt1z();
      int int0 = (-2853);
      Complex.valueOf(0.0, 2508.95309057);
//      try { 
        complex0.nthRoot((-2853));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,853
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      complex1.ZERO.divide((-80.06034272974591));
      Complex complex2 = null;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.NaN.tanh();
      complex0.getReal();
      Complex complex3 = complex2.divide(0.0);
      complex3.ONE.log();
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex4.NaN.multiply(Double.POSITIVE_INFINITY);
      complex4.I.divide(complex1);
      Complex complex6 = Complex.valueOf(171.7955052669728, (-1.0292817180691822E123));
      complex1.isNaN();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex7.NaN.add((-1009.3646937759196));
      Complex complex10 = complex8.atan();
      Complex complex11 = complex10.INF.sinh();
      Complex complex12 = complex10.ONE.divide(complex7);
      complex12.I.getField();
      Complex complex13 = complex1.exp();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex2.I.pow(complex14);
      Complex complex16 = complex15.INF.atan();
      assertSame(complex15, complex9);
      
      double double1 = complex10.abs();
      assertEquals(0.0, double1, 0.01);
      
      complex13.INF.conjugate();
      complex2.readResolve();
      complex0.conjugate();
      complex11.asin();
      Complex complex17 = Complex.ONE;
      Complex complex18 = complex10.multiply(complex17);
      complex10.getField();
      Complex complex19 = complex12.negate();
      assertNotSame(complex19, complex11);
      assertTrue(complex10.equals((Object)complex18));
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex6);
      assertSame(complex19, complex16);
      assertSame(complex12, complex5);
  }
}
