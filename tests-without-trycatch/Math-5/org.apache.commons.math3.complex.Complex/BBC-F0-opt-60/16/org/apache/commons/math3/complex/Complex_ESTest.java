/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:46:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.createComplex((-20.0), (-20.0));
      complex2.tan();
      Complex complex3 = complex2.pow(52.40257224796212);
      complex2.add(complex1);
      complex3.add(1.5707963267948966);
      complex3.nthRoot(146);
//      try { 
        complex2.nthRoot((-2147482902));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,147,482,902
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(20.0, Double.POSITIVE_INFINITY);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex1.multiply(2917);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex(20.0);
      complex3.ZERO.cosh();
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex4.exp();
      complex2.getField();
      complex1.I.tan();
      Complex complex6 = complex1.add(complex5);
      complex6.ONE.cos();
      complex6.I.sin();
      complex1.abs();
      complex6.subtract(complex4);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1298, 1298);
      Complex complex1 = complex0.exp();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1558.0156074), (-20.0));
      Complex complex2 = new Complex(5.5299060775883977E-8, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(complex0);
      complex3.NaN.getField();
      Complex complex4 = new Complex(6.283185307179586, 6.283185307179586);
      complex4.subtract(5.5299060775883977E-8);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1838.613185898464), Double.NaN);
      Complex complex1 = complex0.conjugate();
      complex1.ONE.add(complex0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      complex0.add(complex3);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(33.541292086205885);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 2.7689167860486803);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(657.1422615900912);
      Complex complex1 = complex0.cosh();
      complex1.ONE.readResolve();
      complex1.NaN.toString();
      complex0.ZERO.negate();
      complex0.add(495.721277);
      complex1.toString();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1119.4862919222), (-793.0));
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.ONE.negate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.sqrt();
      complex5.INF.multiply((-2447.796252487279));
      complex1.ZERO.subtract(852.98439912052);
      complex5.ZERO.asin();
      complex4.readResolve();
      Complex complex6 = Complex.valueOf((-306.48215465844265), 4032.027);
      Complex complex7 = complex3.asin();
      complex1.asin();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.divide(complex2);
      Complex complex10 = complex8.log();
      complex10.NaN.sin();
      complex6.divide((-1779.660737802));
      complex9.ONE.exp();
      Complex complex11 = complex6.reciprocal();
      complex8.NaN.abs();
//      try { 
        complex11.NaN.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex complex1 = complex0.sin();
      complex1.acos();
      complex0.multiply(1);
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.NaN;
      complex0.reciprocal();
      complex2.createComplex(0, 5.5299060775883977E-8);
      Complex complex3 = new Complex(0, 5.5299060775883977E-8);
      complex1.divide((double) 0);
      complex2.exp();
      Complex complex4 = complex2.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1106.4);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.pow(complex2);
      complex2.multiply(1106.4);
      complex4.ZERO.exp();
      complex3.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.sinh();
      complex6.atan();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.valueOf((double) 733);
      complex3.divide(complex8);
      complex3.divide(Double.NaN);
      complex3.exp();
      complex1.tan();
      Complex complex9 = complex4.tanh();
      Complex complex10 = Complex.ZERO;
      complex9.add(complex10);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1704);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide((-0.10668344124685714));
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.multiply(complex3);
      complex5.ONE.conjugate();
      Complex complex6 = complex1.exp();
      complex6.I.log();
      Complex complex7 = complex6.sqrt();
      complex7.abs();
      complex4.pow((-855.62177742999));
      Complex complex8 = complex3.subtract(complex2);
      complex8.divide(complex1);
//      try { 
        complex8.nthRoot((-1142852178));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,142,852,178
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
      complex0.ONE.getField();
      complex0.createComplex(Double.NaN, (-2292.992586171304));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.9999999999999998, 2.718281828459045);
      Complex complex2 = complex0.multiply(469);
      complex1.sqrt();
      Complex complex3 = complex1.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex1.createComplex(469, 1.3240710866573994E38);
      Complex complex5 = complex4.multiply(1.3240710866573994E38);
      Complex complex6 = complex5.pow(2587.58990777);
      Complex complex7 = complex4.conjugate();
      complex7.createComplex(0.9999999999999998, 2587.58990777);
      Complex complex8 = complex6.multiply(complex3);
      complex1.abs();
      complex8.hashCode();
      Complex complex9 = new Complex(1792.16713);
      Complex complex10 = complex9.pow(complex1);
      complex2.nthRoot(404);
      complex5.abs();
      complex10.asin();
      Complex complex11 = Complex.NaN;
      complex4.hashCode();
      complex9.divide(469.957805);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(3387);
      complex2.sinh();
      Complex complex3 = complex1.atan();
      complex3.divide(3840.211156982544);
      complex2.exp();
      Complex complex4 = Complex.ZERO;
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.tan();
      complex2.ZERO.tan();
      complex2.subtract(0.0);
      complex1.equals(complex0);
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.exp();
      complex0.readResolve();
      complex2.readResolve();
      complex0.equals(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.tan();
      complex1.multiply(1736.551444695304);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.reciprocal();
      complex4.getArgument();
      Complex complex5 = complex4.createComplex((-1.5707963267948966), 2.718281828459045);
      Complex complex6 = complex2.multiply((-26.0));
      complex2.pow(5.5299060775883977E-8);
      Complex complex7 = complex0.conjugate();
      complex2.createComplex(2.0, (-26.0));
      complex0.multiply(complex6);
      complex5.abs();
      complex4.hashCode();
      Complex complex8 = new Complex(Double.NaN);
      complex3.pow(complex8);
//      try { 
        complex7.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(0.27712851762771606);
      Complex complex3 = complex2.divide(complex1);
      complex3.sqrt();
      Complex complex4 = complex3.cos();
      complex1.readResolve();
      complex1.subtract(6.283185307179586);
      Complex complex5 = Complex.I;
      complex2.hashCode();
      complex4.hashCode();
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.valueOf((-4194.447162));
      complex7.sin();
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.5238267183303833, 6.283185307179586);
      complex0.isInfinite();
      Complex complex1 = complex0.I.divide(6.283185307179586);
      complex1.sqrt();
      complex0.NaN.sqrt();
      Complex complex2 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex0.multiply(7);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.reciprocal();
      complex3.ZERO.getArgument();
      Complex complex6 = complex5.NaN.createComplex(7, 70.146306492745);
      complex6.multiply(0.5238267183303833);
      complex6.I.pow(6.283185307179586);
      Complex complex7 = complex4.I.conjugate();
      Complex complex8 = complex3.multiply(complex1);
      complex0.abs();
      complex2.hashCode();
      complex4.pow(complex8);
      complex1.NaN.nthRoot(7);
      complex0.abs();
      complex0.reciprocal();
      complex0.add(6.304983111412291);
      Complex complex9 = new Complex((-2274.0));
      complex9.cosh();
      Complex complex10 = complex3.sqrt1z();
      complex5.subtract(6.304983111412291);
      Complex complex11 = complex5.pow(complex9);
      complex8.subtract((-2274.0));
      complex10.readResolve();
      complex2.equals(complex11);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.multiply((-1578.768924));
      Complex complex2 = Complex.valueOf(599.7864356975612);
      Complex complex3 = complex1.reciprocal();
      complex2.sin();
      complex3.hashCode();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
      complex5.tanh();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.multiply(3.681692760437727E-6);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.sin();
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      complex0.multiply(599.02328032261);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.tan();
      complex2.ZERO.exp();
      Complex complex3 = complex1.subtract(599.02328032261);
      Complex complex4 = Complex.I;
      complex4.reciprocal();
      Complex complex5 = complex2.add(17.0);
      complex1.cosh();
      complex3.sqrt1z();
      complex3.subtract(0.0);
      Complex complex6 = Complex.valueOf(17.0);
      Complex complex7 = complex5.pow(complex6);
      complex2.subtract(Double.NaN);
      complex2.exp();
      complex7.readResolve();
      Object object0 = new Object();
      Complex complex8 = new Complex(0.0, 1335.1);
      complex8.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(135783.02650323673, 1805.619665910169);
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.sqrt();
      complex2.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex1.createComplex(1709.15613062, 1709.15613062);
      Complex complex5 = complex2.multiply((-20.0));
      Complex complex6 = complex2.pow(2.0);
      Complex complex7 = complex5.conjugate();
      complex1.I.createComplex((-20.0), 2.0);
      Complex complex8 = complex3.multiply(complex7);
      complex4.abs();
      complex0.hashCode();
      Complex complex9 = complex4.pow(complex6);
      complex9.nthRoot(17);
      complex8.abs();
      complex1.asin();
      Complex complex10 = Complex.NaN;
      complex10.hashCode();
      Complex complex11 = Complex.INF;
      complex11.hashCode();
      complex6.tanh();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.subtract(1.931318759918213);
      complex1.pow(complex3);
      complex2.subtract((-6926.03482768313));
      complex1.exp();
      complex1.readResolve();
      Object object0 = new Object();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(135783.02650323673, 1805.619665910169);
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.sqrt();
      complex2.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex1.createComplex(1709.15613062, 1709.15613062);
      Complex complex5 = complex2.multiply((-20.0));
      Complex complex6 = complex2.pow(2.0);
      Complex complex7 = complex5.conjugate();
      complex1.I.createComplex((-20.0), 2.0);
      Complex complex8 = complex3.multiply(complex7);
      complex4.abs();
      complex0.hashCode();
      Complex complex9 = complex4.pow(complex6);
      complex9.nthRoot(17);
      complex8.abs();
      complex1.asin();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.add(1709.15613062);
      complex11.cosh();
      complex1.sqrt1z();
      complex6.exp();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      Complex complex1 = complex0.multiply(599.02328032261);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tan();
      complex0.tan();
      Complex complex3 = complex0.exp();
      complex0.subtract((-2009.02343204047));
      complex3.hashCode();
      complex1.hashCode();
      complex1.tanh();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2014.0402), (-2014.0402));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.multiply(complex0);
      complex0.NaN.nthRoot(625);
      Complex complex4 = complex2.NaN.multiply(899.0);
      Complex complex5 = complex0.add((-5105.73849942382));
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex7.subtract(899.0);
      complex8.ONE.tan();
      complex6.add(complex8);
      complex6.ONE.log();
      Complex complex9 = complex6.INF.divide(2.0);
      Complex complex10 = complex4.atan();
      complex8.tanh();
      complex6.pow(complex7);
      Complex complex11 = complex10.createComplex(899.0, 0.1677299439907074);
      complex11.acos();
      complex5.asin();
      Complex complex12 = complex3.sqrt();
      complex12.divide((double) 625);
      complex12.ZERO.sin();
      complex1.subtract(complex8);
      Complex complex13 = complex5.negate();
      Complex complex14 = complex12.conjugate();
      complex14.I.log();
      complex13.sin();
      complex3.multiply(625);
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.acos();
      complex0.ONE.sin();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.multiply(7);
      Complex complex5 = complex0.createComplex(7, 1.9350945949554443);
      Complex complex6 = complex3.subtract(2.381210365585917);
      complex1.sqrt1z();
      Complex complex7 = new Complex(0.0, (-4163.443281));
      Complex complex8 = complex7.multiply(20.0);
      Complex complex9 = complex2.subtract(0.0);
      complex2.divide(complex8);
      complex2.log();
      Complex complex10 = Complex.valueOf(1.9350945949554443, (-4163.443281));
      Complex complex11 = complex10.acos();
      complex9.tan();
      complex2.createComplex(455.09795484, Double.POSITIVE_INFINITY);
      complex0.sin();
      complex5.negate();
      complex4.pow(4.169293918423203E144);
      complex7.nthRoot(1368);
      complex6.getArgument();
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.5238267183303833, 6.283185307179586);
      complex0.isInfinite();
      Complex complex1 = complex0.I.divide(6.283185307179586);
      Complex complex2 = complex1.sqrt();
      complex0.NaN.sqrt();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex0.multiply(7);
      Complex complex4 = complex1.sqrt();
      Complex.valueOf(1465.2313);
      Complex complex5 = complex0.reciprocal();
      complex3.ZERO.getArgument();
      Complex complex6 = complex5.NaN.createComplex(7, 70.146306492745);
      complex6.multiply(0.5238267183303833);
      complex6.I.pow(6.283185307179586);
      complex4.I.conjugate();
      complex0.abs();
      complex5.hashCode();
      Complex complex7 = complex4.pow(complex4);
      complex1.NaN.nthRoot(7);
      complex0.abs();
      Complex complex8 = complex7.asin();
      complex0.reciprocal();
      complex3.add((double) 7);
      complex5.cosh();
      complex2.sqrt1z();
      complex8.subtract(2054.71);
      Complex complex9 = complex0.pow(complex4);
      complex9.I.subtract(6.283185307179586);
      complex6.subtract((-1769.6933402));
      Complex complex10 = Complex.NaN;
      complex10.divide(2054.71);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.acos();
      complex2.sin();
      Complex complex4 = complex0.acos();
      complex0.multiply(7);
      complex2.toString();
      complex2.hashCode();
      Complex complex5 = complex4.reciprocal();
      complex0.sqrt();
      complex1.add(Double.NaN);
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.exp();
      complex7.acos();
      complex2.getField();
      complex3.multiply(complex4);
      complex5.cos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.add(complex0);
      complex0.log();
      complex0.isNaN();
      complex0.add(complex2);
      complex1.getImaginary();
      complex2.sinh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.5238267183303833, 6.283185307179586);
      complex0.isInfinite();
      Complex complex1 = complex0.I.divide(6.283185307179586);
      Complex complex2 = complex1.sqrt();
      complex0.NaN.sqrt();
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex0.multiply(7);
      complex1.sqrt();
      complex0.reciprocal();
      complex4.ZERO.getArgument();
      Complex complex5 = complex3.multiply(7);
      complex5.toString();
      Complex complex6 = Complex.valueOf(0.0, 2115.918797737696);
      complex6.hashCode();
      Complex complex7 = complex1.reciprocal();
      complex7.NaN.nthRoot(7);
      Complex complex8 = Complex.valueOf((-744.1998075636357));
      complex8.sqrt();
      complex6.add(0.0);
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.NaN;
      complex10.exp();
      complex4.acos();
      complex2.getField();
      complex7.multiply(complex8);
      Complex complex11 = new Complex(7.241626420445137E-206, 1944.72450197);
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.4429618182751655E-8);
      Complex complex1 = complex0.createComplex((-664.0), 0.004936089988189027);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex3.ZERO.add(complex1);
      complex1.I.add(Double.POSITIVE_INFINITY);
      complex2.NaN.cosh();
      complex2.INF.readResolve();
      Complex complex4 = complex0.pow(269.181);
      Complex complex5 = Complex.valueOf(0.6482070684432983, 0.6482070684432983);
      Complex.valueOf(1.5430806348152437);
      complex0.INF.getArgument();
      Complex complex6 = complex1.reciprocal();
      complex6.INF.nthRoot(2295);
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex7.INF.sqrt1z();
      complex8.reciprocal();
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex6.divide(0.15915494309189535);
      complex1.I.tan();
      complex5.tan();
      Complex complex11 = complex1.add(0.7853981633974483);
      complex10.atan();
      complex11.sqrt1z();
      complex9.asin();
      complex4.acos();
      Complex.valueOf(1.5430806348152437, 0.6482070684432983);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1662.5612168847), (-1662.5612168847));
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.INF.nthRoot(1178);
      Complex complex2 = complex0.cosh();
      complex2.add(complex0);
      Complex complex3 = complex1.divide((-20.0));
      Complex complex4 = complex2.acos();
      complex4.divide(complex0);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1662.5612168847), (-1662.5612168847));
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.INF.nthRoot(1178);
      Complex complex2 = complex0.I.subtract((-1662.5612168847));
      Complex complex3 = complex2.divide((double) 1178);
      complex3.toString();
      Complex complex4 = complex0.sinh();
      complex4.exp();
      Complex complex5 = complex0.tan();
      Complex.valueOf(2.0, (-627.0));
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.INF;
      complex6.isInfinite();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex2.I.acos();
      Complex complex5 = complex2.I.multiply(1);
      complex3.ONE.toString();
      complex2.hashCode();
      Complex complex6 = complex0.reciprocal();
      complex5.hashCode();
      complex2.pow(complex0);
      complex3.nthRoot(292);
      Complex complex7 = Complex.INF;
      complex7.abs();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex4.reciprocal();
      complex6.add((double) 1);
      Complex complex10 = complex2.cosh();
      complex5.sqrt1z();
      Complex complex11 = complex9.subtract((double) 292);
      complex8.pow(complex10);
      Complex complex12 = complex4.subtract(0.004165448792633584);
      complex11.exp();
      complex12.readResolve();
      complex8.equals("(1.0, 0.0)");
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf(113.17714363);
      Complex complex4 = complex1.createComplex(113.17714363, (-1432.12630415));
      complex4.getField();
      Complex complex5 = complex0.subtract((-463.30725683));
      complex0.exp();
      Complex complex6 = complex3.multiply(1648);
      complex5.sin();
      Complex complex7 = Complex.I;
      complex7.sqrt();
      complex6.divide(3602.4435782134856);
      complex1.toString();
      complex3.sinh();
      Complex complex8 = complex6.tan();
      Complex complex9 = Complex.valueOf(0.6374238729476929, 0.6374238729476929);
      complex9.tan();
      complex6.atan();
      complex1.multiply(1648);
      complex8.isInfinite();
      complex2.sinh();
      complex5.createComplex(1648, (-463.30725683));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(671.8874768348);
      Complex complex2 = Complex.valueOf(671.8874768348, 671.8874768348);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.cos();
      complex5.readResolve();
      complex3.equals(complex4);
      Complex complex6 = complex5.sqrt1z();
      complex6.sin();
      Complex complex7 = Complex.INF;
      complex3.multiply(complex7);
      complex6.subtract(0.15915494309189532);
      Complex complex8 = Complex.INF;
      complex8.hashCode();
      complex1.getReal();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(20.0);
      complex2.getField();
      Complex complex3 = complex0.multiply(complex2);
      complex2.getReal();
      Complex complex4 = complex2.ZERO.cos();
      complex3.I.conjugate();
      complex4.NaN.multiply(complex1);
      Complex complex5 = complex1.reciprocal();
      complex5.INF.createComplex(0.0, 1952.0515896581217);
      Complex complex6 = Complex.valueOf(20.0);
      complex6.INF.add(complex0);
      complex6.ZERO.getField();
      Complex complex7 = complex3.divide(complex1);
      complex7.ONE.toString();
      complex1.asin();
      complex2.getImaginary();
      Complex complex8 = complex0.multiply((-567.164393591037));
      Complex complex9 = complex8.divide(complex5);
      Complex complex10 = Complex.valueOf((-567.164393591037), 1.0256131352582533E261);
      complex7.ONE.abs();
      complex10.INF.add(20.0);
      complex7.getField();
      Complex complex11 = complex6.multiply((-1066));
      complex11.acos();
      Complex complex12 = complex11.sqrt1z();
      complex0.log();
      complex4.isNaN();
      complex9.add(complex7);
      complex6.getImaginary();
      complex3.sinh();
      complex12.sqrt();
      Complex.valueOf(1.0256131352582533E261, (-142.67904413));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3137.0);
      Complex complex1 = complex0.INF.cos();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.tanh();
      complex1.isNaN();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.tanh();
      complex6.ZERO.getField();
      Complex complex7 = complex3.ONE.createComplex(3137.0, 0.0);
      Complex complex8 = complex7.NaN.createComplex(0.0, 455.09795484);
      Complex complex9 = complex0.subtract(3137.0);
      Complex complex10 = complex9.NaN.sqrt1z();
      complex10.NaN.multiply(455.09795484);
      complex6.subtract(0.0);
      complex2.divide(complex9);
      Complex complex11 = complex4.log();
      Complex complex12 = complex8.acos();
      complex5.tan();
      complex6.createComplex(0.0, 0.0);
      complex11.sin();
      complex10.negate();
      complex8.pow((-1702.57028646));
      // Undeclared exception!
      complex12.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.NaN.readResolve();
      complex1.ONE.pow(complex0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.pow(complex2);
      complex3.INF.abs();
      Complex complex4 = complex0.tan();
      complex2.nthRoot(1);
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex2.subtract(0.0);
      complex7.sqrt1z();
      Complex complex9 = complex0.sqrt1z();
      complex8.atan();
      complex6.nthRoot(1);
      Complex complex10 = complex1.atan();
      complex1.getArgument();
      complex4.reciprocal();
      Complex complex11 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex8.multiply(complex11);
      Complex complex12 = new Complex((-904.829851));
      Complex complex13 = complex12.multiply(complex5);
      complex0.hashCode();
      Complex complex14 = complex9.exp();
      Complex complex15 = new Complex(0.0);
      complex15.cosh();
      complex10.cosh();
      complex2.getReal();
      complex7.exp();
      Complex complex16 = Complex.I;
      complex16.pow(complex13);
      complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.5238267183303833, 6.283185307179586);
      complex0.isInfinite();
      Complex complex1 = complex0.I.divide(6.283185307179586);
      Complex complex2 = complex1.sqrt();
      complex0.NaN.sqrt();
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex0.multiply(7);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.reciprocal();
      complex4.ZERO.getArgument();
      Complex complex7 = complex6.NaN.createComplex(7, 70.146306492745);
      complex7.multiply(0.5238267183303833);
      Complex complex8 = complex7.I.pow(6.283185307179586);
      complex5.I.conjugate();
      Complex complex9 = complex4.multiply(complex1);
      complex0.abs();
      complex3.hashCode();
      Complex complex10 = complex5.pow(complex9);
      complex1.NaN.nthRoot(7);
      complex0.abs();
      Complex complex11 = complex10.asin();
      complex0.reciprocal();
      complex4.add((double) 7);
      complex6.cosh();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex11.subtract(2054.71);
      complex0.pow(complex5);
      complex7.subtract((-1769.6933402));
      complex13.exp();
      Object object0 = complex8.readResolve();
      complex12.equals(object0);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.getField();
      Complex complex2 = complex0.multiply((-1913));
      complex2.ZERO.atan();
      complex2.getField();
      complex1.sinh();
      complex2.pow(complex1);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-3.835454246739619E-8), (-3.835454246739619E-8));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.pow((-1978.2670269));
      complex0.NaN.acos();
      Complex complex3 = complex2.ZERO.add((-3.835454246739619E-8));
      complex0.reciprocal();
      complex0.getImaginary();
      Complex complex4 = complex1.multiply((-1978.2670269));
      complex4.ZERO.getField();
      Complex complex5 = complex1.ONE.add(complex2);
      complex5.ZERO.divide(1.4043786616805493E-54);
      Complex complex6 = Complex.valueOf(3.685169705587367E268, (-3.835454246739619E-8));
      complex3.INF.multiply(complex6);
      complex4.exp();
      Complex complex7 = complex1.ONE.multiply((-1313.1051813));
      complex4.ONE.getField();
      Complex complex8 = complex1.ZERO.sin();
      complex8.toString();
      complex1.createComplex((-3.835454246739619E-8), (-1978.2670269));
      Complex complex9 = complex1.conjugate();
      complex9.exp();
      complex3.isInfinite();
      complex3.sinh();
      complex1.divide(complex0);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      complex1.NaN.getArgument();
      Complex complex3 = complex1.I.pow(complex2);
      complex3.ONE.hashCode();
      Complex complex4 = complex0.subtract(complex1);
      complex4.INF.createComplex((-1440.4475), (-3836.891505));
      Complex complex5 = complex1.NaN.multiply(1);
      complex0.nthRoot(2540);
      complex0.negate();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1118.0837);
      Complex complex1 = Complex.valueOf(1118.0837);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ZERO.subtract(complex0);
      complex0.I.tanh();
      complex0.I.conjugate();
      Complex complex4 = complex3.ZERO.subtract(1118.0837);
      complex0.nthRoot(1470);
      complex1.toString();
      complex0.ZERO.abs();
      complex1.getReal();
      complex0.INF.readResolve();
      complex0.getArgument();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex5.NaN.multiply(complex4);
      complex6.I.sin();
      complex5.ONE.pow((double) 1470);
      Complex complex7 = complex0.log();
      complex7.I.cos();
      Complex complex8 = Complex.valueOf((double) 1470);
      Complex complex9 = Complex.valueOf(0.15442964434623718, 0.0);
      Complex complex10 = complex2.divide(complex5);
      complex7.tan();
      complex10.isNaN();
      complex5.createComplex(0.0, 20.0);
      complex2.acos();
      Complex complex11 = complex0.I.pow(complex8);
      complex4.readResolve();
      complex9.isInfinite();
      complex11.getReal();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(2.1987686050231372E-7);
      Complex complex1 = complex0.NaN.asin();
      complex1.I.toString();
      Complex complex2 = complex1.ONE.subtract(0.0);
      complex2.NaN.conjugate();
      Complex complex3 = complex0.tan();
      complex3.NaN.abs();
      complex1.NaN.tanh();
      complex3.I.conjugate();
      complex3.I.reciprocal();
//      try { 
        complex3.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.ZERO.add(complex0);
      complex0.nthRoot(456);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      complex2.getField();
      Complex complex3 = complex0.multiply(complex2);
      complex2.getReal();
      Complex complex4 = complex2.ZERO.cos();
      complex3.I.conjugate();
      complex4.NaN.multiply(complex1);
      Complex complex5 = complex1.reciprocal();
      complex5.INF.createComplex(0.0, 1952.0515896581217);
      Complex complex6 = Complex.valueOf(20.0);
      complex6.INF.add(complex0);
      complex6.ZERO.getField();
      Complex complex7 = complex3.divide(complex1);
      complex7.ONE.toString();
      complex1.asin();
      complex2.getImaginary();
      Complex complex8 = complex0.multiply((-567.164393591037));
      Complex complex9 = complex8.divide(complex5);
      Complex complex10 = Complex.valueOf((-567.164393591037), 1.0256131352582533E261);
      complex7.ONE.abs();
      complex10.INF.add(Double.POSITIVE_INFINITY);
      complex7.getField();
      Complex complex11 = complex6.multiply((-1066));
      complex11.acos();
      Complex complex12 = complex11.sqrt1z();
      complex0.log();
      complex4.isNaN();
      complex9.add(complex7);
      complex6.getImaginary();
      complex3.sinh();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.32623589038848877, 0.0);
      complex1.I.sin();
      complex1.I.sin();
      Complex complex2 = complex1.ZERO.asin();
      complex2.ONE.divide(0.32623589038848877);
      complex1.NaN.exp();
      complex0.INF.multiply(0.0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = new Complex(0.32623589038848877, (-1519.0));
      Complex complex5 = complex0.pow(complex4);
      complex5.readResolve();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2.7897360297480367E104), (-2.7897360297480367E104));
      Complex complex1 = Complex.valueOf(1805.619665910169);
      complex0.INF.divide(complex1);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ZERO.multiply(2746);
      Complex complex4 = complex1.NaN.atan();
      complex4.I.nthRoot(2746);
      Complex complex5 = complex2.NaN.cosh();
      complex0.INF.divide((-2.7897360297480367E104));
      complex1.getReal();
      complex1.I.hashCode();
      complex2.add(complex1);
      Complex complex6 = complex1.multiply(146);
      complex6.NaN.sqrt();
      Complex complex7 = complex5.asin();
      complex7.NaN.getArgument();
      Complex complex8 = Complex.valueOf(0.0);
      complex5.hashCode();
      Complex complex9 = complex3.sin();
      complex9.ONE.readResolve();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex10.multiply(1805.619665910169);
      complex11.ONE.divide(1805.619665910169);
      complex11.cosh();
      complex7.subtract(complex8);
      complex2.subtract(0.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = Complex.valueOf((-1758.9514643587306));
      Complex complex4 = complex3.add((-1080.6969));
      complex0.readResolve();
      Complex complex5 = complex0.reciprocal();
      complex3.ZERO.tanh();
      Complex complex6 = complex5.I.subtract(0.0);
      Complex complex7 = complex5.acos();
      complex5.INF.tan();
      complex4.getArgument();
      Complex complex8 = complex7.exp();
      complex5.negate();
      complex6.ONE.toString();
      complex3.sqrt1z();
      Complex complex9 = complex3.add(190.3026017813027);
      complex9.INF.sqrt1z();
      complex8.ZERO.multiply(1);
      complex6.getField();
      Complex complex10 = Complex.NaN;
      complex8.multiply(complex10);
      complex3.reciprocal();
      Complex complex11 = complex7.pow(complex5);
      complex11.NaN.getArgument();
      complex10.NaN.divide(0.0);
      complex7.exp();
      complex4.multiply(complex6);
      complex10.tanh();
      complex2.nthRoot(941);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1692.6602940983948), (-1692.6602940983948));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.cos();
      complex2.NaN.pow(complex0);
      Complex complex4 = complex2.atan();
      complex1.INF.getArgument();
      complex2.getField();
      Complex complex5 = complex0.I.sqrt();
      Complex complex6 = complex5.INF.conjugate();
      complex6.ZERO.atan();
      Complex.valueOf((-1692.6602940983948));
      complex6.INF.createComplex((-1692.6602940983948), 113.17714363);
      complex4.I.getField();
      Complex complex7 = complex5.I.subtract((-1692.6602940983948));
      complex7.ZERO.exp();
      complex4.ZERO.multiply(0);
      Complex complex8 = complex1.sin();
      complex8.INF.sqrt();
      Complex complex9 = complex0.divide((-627.0));
      complex9.toString();
      Complex complex10 = complex4.sinh();
      complex3.tan();
      Complex complex11 = Complex.valueOf((-20.0), 0.0);
      Complex complex12 = complex11.INF.atan();
      complex12.ONE.multiply(1);
      complex10.isInfinite();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex.valueOf((-865.612217), (-865.612217));
      complex0.sin();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.sin();
      complex1.I.acos();
      complex1.I.multiply(1);
      complex2.ONE.toString();
      complex1.hashCode();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.add((-2196.49219));
      Complex complex6 = complex4.exp();
      complex6.ZERO.acos();
      complex5.getField();
//      try { 
        complex2.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.atan();
      complex2.I.subtract(complex1);
      complex0.getReal();
      complex0.readResolve();
      complex0.getReal();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex3 = complex1.multiply(Double.NaN);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.8410188461165925E-8, 1554.04949);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex2.INF.divide((-1060.3794078456));
      complex3.I.pow(2839.28944);
      complex0.abs();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.I.multiply((-4037));
      complex4.ONE.sqrt();
      Complex complex6 = complex4.INF.conjugate();
      complex6.INF.tan();
      Complex complex7 = complex0.multiply(2098);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.ONE.createComplex(619.099633481, 2176.5);
      complex9.ONE.cosh();
      complex7.INF.pow(924.28);
      complex7.ZERO.pow(complex5);
      Complex complex10 = Complex.valueOf((-1.4271754202157014E-7));
      complex7.sqrt();
      complex10.cosh();
      complex5.pow(0.0);
      complex7.toString();
      Complex complex11 = complex4.multiply(complex7);
      complex11.tan();
      Complex.valueOf(1554.04949);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getReal();
      complex0.getImaginary();
      Complex complex1 = complex0.negate();
      complex1.NaN.cosh();
      Complex complex2 = complex1.ZERO.multiply(1);
      Complex complex3 = complex1.log();
      complex1.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.NaN.add(complex4);
      complex0.nthRoot(3658);
      Complex complex6 = complex1.reciprocal();
      complex6.multiply(complex1);
      complex5.log();
      complex4.getField();
      complex2.sinh();
      complex4.hashCode();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1506.7353319);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(1506.7353319);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(0);
      Complex complex5 = complex1.subtract(1506.7353319);
      complex2.subtract(complex4);
      complex2.ONE.getArgument();
      Complex complex6 = complex5.cosh();
      complex1.divide(20.0);
      Complex complex7 = complex3.ZERO.pow(1506.7353319);
      complex7.ONE.atan();
      Complex complex8 = complex6.conjugate();
      complex5.sinh();
      complex2.exp();
      complex3.add(20.0);
      Complex complex9 = complex8.createComplex(20.0, 1506.7353319);
      complex9.NaN.toString();
      int int0 = 1;
      complex9.I.nthRoot(1);
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.NaN.readResolve();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex0.pow(complex3);
      complex4.INF.abs();
      Complex complex5 = complex0.tan();
      complex3.nthRoot(1);
      Complex complex6 = complex5.subtract(0.0);
      complex6.I.pow(0.0);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex3.subtract(0.0);
      complex8.NaN.subtract(0.0);
      Complex complex9 = complex8.ONE.divide(complex2);
      Complex complex10 = complex3.ZERO.log();
      complex10.INF.acos();
      Complex complex11 = complex3.tan();
      complex4.createComplex((-1702.57028646), (-1702.57028646));
      complex11.sin();
      complex3.negate();
      complex9.pow((-1702.57028646));
      complex11.nthRoot(620);
      complex4.getArgument();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3137.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.tanh();
      complex1.isNaN();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.INF.atan();
      complex4.conjugate();
      Complex complex6 = complex3.tanh();
      complex6.ZERO.getField();
      Complex complex7 = complex4.ONE.createComplex(3137.0, 0.0);
      Complex complex8 = complex7.NaN.createComplex(0.0, 455.09795484);
      Complex complex9 = complex0.subtract(3137.0);
      Complex complex10 = complex9.NaN.sqrt1z();
      complex10.NaN.multiply(455.09795484);
      Complex complex11 = complex4.sqrt1z();
      complex8.I.sqrt1z();
      Complex complex12 = complex11.NaN.atan();
      complex1.nthRoot(1);
      Complex complex13 = complex11.atan();
      complex13.getArgument();
      Complex complex14 = complex1.reciprocal();
      complex14.ONE.multiply(complex2);
      complex1.NaN.multiply(complex9);
      complex1.hashCode();
      Complex complex15 = complex1.exp();
      complex15.NaN.cosh();
      complex2.cosh();
      complex8.getReal();
      complex8.exp();
      complex10.pow(complex5);
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-989.6940216));
      Complex complex1 = Complex.valueOf((-989.6940216), 6.283185307179586);
      Complex complex2 = complex0.ONE.log();
      complex0.INF.getArgument();
      complex2.ONE.asin();
      Complex.valueOf(1.5007857288519654E-41, Double.NaN);
      Complex complex3 = complex0.add((-989.6940216));
      complex0.INF.multiply(2.6786368134431636E-33);
      complex0.toString();
      Complex complex4 = complex3.pow(complex0);
      complex4.ZERO.divide(6.283185307179586);
      Complex complex5 = complex2.multiply(898);
      complex5.I.abs();
      complex3.ONE.cos();
      Complex complex6 = Complex.valueOf(1.5007857288519654E-41, 0.0);
      Complex complex7 = complex1.add(complex4);
      complex5.add(6.283185307179586);
      Complex complex8 = complex6.subtract(complex7);
      complex8.NaN.sinh();
      complex2.createComplex(1659.0, 7.90594243412116E-12);
      complex5.nthRoot(898);
      complex8.sqrt();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.atan();
//      try { 
        complex0.ONE.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = (-1.915204563140137E-9);
      double double1 = 0.0;
      Complex complex0 = new Complex((-1.915204563140137E-9), 0.0);
      Complex complex1 = complex0.subtract((-1.915204563140137E-9));
      double double2 = 0.0;
      complex0.ZERO.asin();
      complex1.INF.tan();
      Complex complex2 = complex0.I.subtract((-2739.866239102527));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.INF.pow(838.97);
//      try { 
        complex4.ONE.nthRoot((-2972));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,972
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.exp();
      Complex complex1 = complex0.sinh();
      complex1.readResolve();
      Complex complex2 = complex0.sin();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      complex1.NaN.asin();
      Complex complex2 = complex0.ONE.atan();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex1.multiply(complex2);
      complex0.NaN.acos();
      Complex complex4 = complex0.divide(3.3564604642699844E-8);
      complex4.NaN.toString();
      complex0.INF.getArgument();
      Complex complex5 = complex0.divide(3.3564604642699844E-8);
      complex4.isNaN();
      complex2.getArgument();
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex6.INF.divide(0.0);
      complex6.INF.readResolve();
      Complex complex8 = complex1.sin();
      complex8.asin();
      complex3.hashCode();
      complex4.pow(0.0);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex4.multiply(0);
      complex10.ZERO.createComplex(0, 1230.668536181922);
      complex9.isInfinite();
      Complex.valueOf(3.3564604642699844E-8);
      complex7.tanh();
      complex3.tanh();
      complex5.divide((-505.2046110049));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(3.137374584307575E254);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.NaN.exp();
      complex2.ZERO.divide(complex1);
      complex0.ONE.exp();
      complex0.asin();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.subtract(2.0);
      complex0.toString();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.INF.add(2.0);
      Complex complex6 = complex5.NaN.multiply(complex0);
      complex6.NaN.sin();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex1.INF.tanh();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex3.ZERO.tanh();
      complex4.ZERO.toString();
      Complex complex11 = complex1.divide((-1016.535872));
      complex9.isInfinite();
      complex2.getReal();
      complex11.NaN.cos();
      Complex complex12 = complex8.acos();
      Complex complex13 = complex11.ZERO.tanh();
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex8.negate();
      complex3.getField();
      complex9.INF.tan();
      Complex complex14 = complex7.subtract(5053.0);
      complex8.equals(complex14);
      complex9.I.getField();
      Complex complex15 = complex3.negate();
      Complex complex16 = complex5.divide(complex9);
      complex11.subtract(complex5);
      Complex complex17 = complex5.conjugate();
      complex17.isNaN();
      assertEquals(Double.NEGATIVE_INFINITY, complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex3.sqrt1z();
      assertSame(complex18, complex11);
      
      Complex complex19 = complex2.subtract(2.0);
      assertEquals((-4.0), complex19.getReal(), 0.01);
      
      complex15.toString();
      Complex complex20 = complex7.negate();
      assertEquals(1.4693517443681852, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex12.multiply((-2.0));
      assertFalse(complex21.equals((Object)complex10));
      assertSame(complex21, complex15);
      assertSame(complex1, complex16);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.sin();
      complex3.createComplex(2667.8424, 2667.8424);
      complex1.getField();
      Complex complex4 = complex1.I.log();
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      double double0 = complex3.getReal();
      assertEquals(0.04997916927067833, double0, 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex5 = Complex.valueOf((-458.49500264426376));
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.subtract(0.04997916927067833);
      assertEquals(2.083072932167196E-5, complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tanh();
      complex0.I.readResolve();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.INF.log();
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      
      Complex complex5 = complex0.subtract((-3326.76874791226));
      Complex complex6 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex7 = complex2.pow(793.56);
      double double0 = complex5.getReal();
      assertEquals(3326.76874791226, double0, 0.01);
      
      Complex complex8 = complex6.subtract(complex7);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertSame(complex8, complex7);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.I.cos();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex6.ZERO.multiply(complex1);
      assertTrue(complex7.equals((Object)complex2));
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      Complex complex8 = complex0.subtract(0.0);
      complex8.hashCode();
      complex8.getReal();
      Complex complex9 = complex4.log();
      assertTrue(complex1.equals((Object)complex3));
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex8));
      assertEquals(0.4337808304830271, complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.multiply(2941);
      Complex complex3 = complex0.sinh();
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.divide(3840.211156982544);
      complex4.exp();
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      Complex complex6 = complex5.tan();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.6445059020904734, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double double0 = 344.74847928065;
      Complex complex0 = Complex.valueOf(344.74847928065);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.sqrt();
      int int0 = 0;
      Complex complex3 = complex1.tan();
      complex2.ONE.multiply(0);
      complex3.subtract((double) 0);
      Complex complex4 = complex0.pow(complex2);
      complex2.ZERO.multiply(complex4);
//      try { 
        complex0.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
