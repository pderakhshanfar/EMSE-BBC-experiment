/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:12:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(1.0883019300873278E122);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-2206.758239182), (-2206.758239182));
      Complex complex1 = Complex.valueOf((-2353.03), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(6.283185307179586, (-20.0));
      complex0.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(643.144599122, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(643.144599122);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex7.tanh();
      complex1.ZERO.multiply(complex3);
      complex4.divide(643.144599122);
      Complex complex8 = complex1.INF.divide(Double.POSITIVE_INFINITY);
      complex6.getField();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.ONE.acos();
      complex9.ONE.abs();
      complex5.log();
      complex1.add(66408.29);
      complex10.reciprocal();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-886.2352002553581), (-886.2352002553581));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.createComplex((-766.413), Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.tan();
      complex4.multiply(complex0);
      complex3.multiply((-53.226212805015535));
      Complex.valueOf((-53.226212805015535));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(8.25673801176584E-159, 8.25673801176584E-159);
      Complex complex1 = complex0.multiply(8.25673801176584E-159);
      complex1.reciprocal();
      complex1.divide((-4001161.107875428));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.920871394985668E173);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2206.758239182));
      Complex complex1 = complex0.pow(9.85967600992008E-305);
      Complex complex2 = complex1.asin();
      complex1.INF.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.ONE.tan();
      Complex complex5 = complex4.NaN.add(complex3);
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex5.ONE.negate();
      Complex complex8 = complex0.ZERO.conjugate();
      complex8.add((-2206.758239182));
      complex7.ZERO.multiply(738);
      Complex complex9 = complex6.tan();
      complex9.INF.add(9.765695673807494);
      complex9.INF.tan();
      Complex complex10 = complex6.subtract(Double.POSITIVE_INFINITY);
      complex10.NaN.multiply(738);
      Complex complex11 = complex6.createComplex(9.85967600992008E-305, Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.INF.pow(complex5);
      Complex complex13 = complex1.reciprocal();
      Complex complex14 = complex0.add(complex6);
      complex0.INF.tanh();
      complex14.INF.subtract(complex5);
      complex5.getField();
      complex13.multiply(complex6);
      complex10.acos();
      complex3.sqrt();
      Complex complex15 = complex1.atan();
      complex15.toString();
      complex12.add(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1535.913), 2252.81074);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.exp();
      complex2.INF.conjugate();
      complex2.NaN.acos();
      complex1.NaN.hashCode();
      Complex complex3 = Complex.valueOf(3.021651450298377E-17, 20.0);
      Complex complex4 = complex1.I.multiply(complex0);
      complex0.toString();
      complex0.ZERO.getField();
      complex3.ONE.pow(2.0);
      Complex complex5 = complex0.sinh();
      complex0.abs();
      Complex complex6 = complex4.atan();
      complex6.hashCode();
      Complex complex7 = complex5.exp();
      Complex.valueOf(3.021651450298377E-17, 3.021651450298377E-17);
      Complex complex8 = complex5.subtract(complex3);
      complex8.NaN.log();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex9.sqrt();
      complex9.reciprocal();
      complex11.ONE.hashCode();
      Complex complex12 = complex11.ZERO.add(2.0);
      complex12.NaN.toString();
      Complex.valueOf(Double.NaN);
      complex9.cos();
      complex0.multiply(4068.943656);
      Complex complex13 = complex10.sinh();
      complex9.divide(20.0);
      complex3.toString();
      complex7.divide(2.0);
      complex13.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(1461.5853358201584, Double.POSITIVE_INFINITY);
      complex0.multiply(2908);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.tanh();
      complex2.I.tanh();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-3741.1));
      complex0.ONE.subtract(complex1);
      complex1.I.asin();
      complex0.INF.acos();
      Complex complex2 = complex1.INF.reciprocal();
      complex1.ZERO.nthRoot(417);
      Complex.valueOf(0.6144464015960693);
      Complex complex3 = complex2.INF.multiply((-3741.1));
      complex3.tan();
      complex0.cosh();
      complex0.toString();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.pow((-1188.136));
      complex5.INF.readResolve();
      complex5.ZERO.getArgument();
      Complex complex6 = complex0.log();
      Complex complex7 = complex1.exp();
      complex7.ONE.cos();
      Complex.valueOf(2.00147971196607E-7, (-3741.1));
      complex0.sinh();
      complex6.negate();
      complex2.nthRoot(2643);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.tanh();
      complex3.sinh();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex7.divide(complex5);
      Complex complex8 = complex5.divide(61.0566907077761);
      complex6.log();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf((-1901.997494), Double.POSITIVE_INFINITY);
      complex4.pow(complex10);
      complex8.acos();
      Complex complex11 = Complex.valueOf(1.0, (-1069.3962));
      complex11.pow(complex3);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex9.divide(complex0);
      Complex.valueOf(2842.16456, Double.POSITIVE_INFINITY);
      complex0.asin();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-1.6166170913368169E-12), (-1.6166170913368169E-12));
      complex0.sqrt();
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex((-1.6166170913368169E-12), (-1.782057727259199));
      complex2.tan();
      Complex complex3 = new Complex((-1.6166170913368169E-12), Double.NaN);
      complex3.pow(20.0);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.25673801176584E-159, 8.25673801176584E-159);
      complex0.cos();
      Complex complex1 = new Complex(1017.235914, 1017.235914);
      complex1.sqrt();
      Complex complex2 = new Complex(Double.NaN);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1401);
      Complex complex2 = Complex.valueOf((-5.8846316709255E16));
      complex2.ONE.add(complex1);
      Complex complex3 = complex2.tanh();
      complex2.asin();
      complex3.subtract(1.198363039426718E-70);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.subtract((-1391.0));
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
      Complex complex2 = Complex.ZERO;
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(90.91705215351823, 267.63);
      complex0.multiply(complex1);
      Complex complex2 = complex0.multiply(2141663672);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.NaN.tanh();
      complex1.tan();
      complex2.getField();
      complex4.multiply((-988));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.sin();
      complex0.log();
      Complex complex4 = complex2.subtract(Double.NaN);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex3.divide(complex1);
      complex6.toString();
      complex4.add(Double.NaN);
      complex0.isNaN();
      complex2.conjugate();
      complex2.sqrt();
      Complex complex7 = new Complex(20.0);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(267.63, 2155.73675706484);
      Complex complex1 = new Complex((-1912.35), (-1912.35));
      complex0.multiply(complex1);
      complex1.hashCode();
      complex1.add((-1912.35));
      complex0.createComplex((-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 5.1271712215233855E64);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      complex0.subtract(20.0);
      Complex.valueOf(1.0);
      complex2.tanh();
      complex2.sinh();
      Complex complex3 = new Complex(1.0, 223.9177200368933);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.subtract(1.0);
      Complex complex6 = complex2.subtract(complex5);
      complex6.INF.conjugate();
      complex3.divide(complex1);
      Complex complex7 = new Complex(1.0);
      complex7.toString();
      Complex complex8 = complex4.add(Double.NaN);
      complex7.NaN.hashCode();
      complex2.isNaN();
      complex8.conjugate();
      complex4.sqrt();
      Complex complex9 = new Complex(1.0000755362803215);
      complex5.tan();
      complex7.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(92.795595786143, 2136.03270496131);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.pow(6.283185307179586);
      complex2.ZERO.add(92.795595786143);
//      try { 
        complex1.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.73775183800122E11), (-3.73775183800122E11));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.INF.reciprocal();
      Complex.valueOf((-3.73775183800122E11), (-3.73775183800122E11));
      Complex complex3 = complex2.sqrt();
      complex1.tan();
      complex3.I.cosh();
      complex1.ONE.multiply(0);
      Complex complex4 = complex1.ONE.cos();
      complex4.ONE.toString();
      complex0.cos();
      Complex complex5 = complex3.divide((-2323.466656));
      complex5.readResolve();
      Complex complex6 = complex1.pow(360.1829726320504);
      Complex complex7 = complex6.INF.atan();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
//      try { 
        complex7.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = 4554025.6940670265;
      Complex complex0 = Complex.valueOf(311.502587, 4554025.6940670265);
      Complex complex1 = complex0.multiply((-1199910368));
      complex0.hashCode();
      complex0.sinh();
      complex1.subtract(6.283185307179586);
      complex1.multiply((-414.0));
      complex1.sqrt();
      Complex complex2 = new Complex(0.8414709848078965);
      // Undeclared exception!
      complex2.nthRoot(2045226512);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(0.5205078726367633);
      Complex complex2 = new Complex(1220.25574924756, 0.5205078726367633);
      Complex complex3 = Complex.valueOf(1220.25574924756, (-792.3020758921));
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex2.createComplex(0.5205078726367633, Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.pow(complex2);
      complex5.log();
      complex6.conjugate();
      Complex complex9 = Complex.ONE;
      complex9.reciprocal();
      Complex complex10 = complex9.pow(238.240923126867);
      complex2.getArgument();
      complex8.negate();
      complex4.cosh();
      Complex.valueOf(1220.25574924756, 4.265563521326269E-4);
      complex1.readResolve();
      complex10.pow(238.240923126867);
      complex3.sin();
      complex7.sqrt();
      complex10.getField();
      complex3.add((-871.186350125));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      complex6.readResolve();
      complex4.add(complex0);
      complex3.conjugate();
      complex5.sqrt();
      complex4.reciprocal();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.hashCode();
      Complex complex2 = complex1.cos();
      complex1.nthRoot(17);
      complex2.cosh();
      complex1.equals(complex0);
      complex0.getImaginary();
      Complex complex3 = Complex.NaN;
      complex3.add(1.0);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.multiply(complex2);
      complex3.negate();
      Complex complex5 = complex3.subtract(2.5904487437231458E96);
      Complex.valueOf(1329.0011395880542);
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex5.sinh();
      complex7.subtract(2.5904487437231458E96);
      complex1.multiply(Double.NaN);
      complex1.cosh();
      complex7.nthRoot(822);
      complex4.toString();
      complex3.log();
      complex6.tan();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex((-7161.28), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.pow(complex0);
      Complex complex8 = Complex.ZERO;
      complex8.log();
      complex7.conjugate();
      complex7.reciprocal();
      Complex complex9 = complex7.pow(1.0);
      complex6.getArgument();
      complex3.getImaginary();
      complex8.negate();
      complex6.cosh();
      Complex.valueOf((-7161.28), (-1077.5989735634626));
      complex1.readResolve();
      complex7.pow((-1077.5989735634626));
      Complex complex10 = complex9.sin();
      complex7.getField();
      complex10.add(Double.POSITIVE_INFINITY);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(1760.723176584572);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex3.pow(complex0);
      complex2.asin();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = Complex.valueOf(5084.158472943426, (-2018.0));
      Complex complex8 = Complex.I;
      complex8.isInfinite();
      complex4.atan();
      Complex complex9 = new Complex(5084.158472943426, 2.0);
      complex8.divide(complex0);
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.log();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex5.pow(complex0);
      complex10.acos();
      Complex complex13 = complex6.pow(complex0);
      Complex complex14 = new Complex(17, (-2018.0));
      complex13.divide(complex7);
      Complex.valueOf((double) 17, (-2018.0));
      Complex complex15 = new Complex(1760.723176584572);
      complex15.asin();
      complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.tanh();
      complex5.sinh();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex(4713.5995767181, Double.POSITIVE_INFINITY);
      complex8.divide(complex6);
      Complex complex9 = complex6.divide(61.0566907077761);
      complex7.log();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.valueOf((-1901.997494), 4713.5995767181);
      complex4.pow(complex11);
      complex9.acos();
      Complex complex12 = Complex.valueOf(1.0, (-1069.3962));
      complex12.pow(complex3);
      Complex complex13 = new Complex(4713.5995767181, 4713.5995767181);
      Complex complex14 = new Complex(6.283185307179586);
      complex14.divide(complex0);
      Complex.valueOf(2842.16456, Double.POSITIVE_INFINITY);
      complex5.asin();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.reciprocal();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.ONE.subtract(20.0);
      Complex complex5 = complex3.I.subtract(complex0);
      Complex complex6 = complex0.divide(complex3);
      complex6.NaN.toString();
      complex6.divide((-17.67031252848586));
      complex4.NaN.add((-17.67031252848586));
      complex4.isNaN();
      complex2.conjugate();
      complex5.sqrt();
      Complex complex7 = Complex.valueOf(20.0, 20.0);
      complex7.reciprocal();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.asin();
      complex2.I.multiply(complex3);
      Complex complex5 = complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex6 = complex3.ZERO.pow(complex4);
      Complex complex7 = complex0.log();
      complex7.ZERO.conjugate();
      complex7.ONE.reciprocal();
      complex4.I.pow(Double.POSITIVE_INFINITY);
      complex1.getArgument();
      complex7.getImaginary();
      Complex complex8 = complex4.negate();
      complex8.NaN.cosh();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 1.0);
      complex6.readResolve();
      Complex complex10 = complex9.pow((double) (-1171));
      complex10.ONE.multiply((-2040953868));
      Complex complex11 = complex10.ONE.sin();
      complex5.sqrt();
      complex3.getField();
      complex11.add(1.0);
      complex7.tan();
      complex8.multiply((-2890));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      complex0.negate();
      Complex complex4 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.tanh();
      complex4.pow(complex1);
      complex0.asin();
      Complex complex6 = complex0.conjugate();
      Complex.valueOf((-2018.0), 5084.158472943426);
      complex5.INF.multiply(complex6);
      complex4.isInfinite();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex5.ZERO.divide(complex4);
      complex7.readResolve();
      complex6.getImaginary();
      complex8.add(5438.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.tanh();
      complex5.sinh();
      Complex complex8 = complex6.subtract((-597.4358));
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex4.nthRoot(822);
      complex8.toString();
      complex8.log();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(4242.06);
      Complex complex2 = Complex.valueOf(4242.06);
      complex1.INF.divide(complex2);
      Complex complex3 = complex0.add(complex2);
      complex1.nthRoot(17);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.pow((double) 17);
      complex3.getArgument();
      complex5.getImaginary();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.negate();
      complex2.cosh();
      Complex.valueOf((double) 17, (-1813.561));
      complex3.readResolve();
      complex7.pow(Double.NaN);
      complex5.sin();
      Complex complex8 = Complex.valueOf(4242.06, 4.2227350158771926E-5);
      complex8.sqrt();
      complex7.getField();
      complex0.add((-6541.0));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.nthRoot(17);
      Complex complex1 = Complex.valueOf((-3392.286802331249));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex0.asin();
      complex3.conjugate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.I;
      complex1.isInfinite();
      Complex complex7 = complex0.atan();
      Complex complex8 = new Complex(673.0, 2.1110986326630363);
      Complex complex9 = complex1.divide(complex4);
      complex3.divide(1.570796251296997);
      complex2.log();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.pow(complex3);
      Complex complex13 = complex9.acos();
      complex6.pow(complex13);
      Complex complex14 = new Complex((-1.0), 1.0);
      Complex complex15 = Complex.valueOf((-446.77464));
      complex12.divide(complex15);
      Complex.valueOf(2.1110986326630363, 2.0);
      Complex complex16 = complex7.asin();
      complex16.isNaN();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.9242560971295217E-8), (-538.03));
      Complex complex1 = Complex.NaN;
      complex1.I.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.multiply((-723.0));
      complex2.INF.getArgument();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex1.INF.subtract(complex0);
      complex5.ZERO.multiply(complex4);
      Complex.valueOf((-538.03), 0.7853981633974483);
      complex2.createComplex((-723.0), 20.0);
      complex4.getImaginary();
      Complex complex7 = complex0.acos();
      complex7.INF.sinh();
      Complex complex8 = complex3.createComplex(0.7853981633974483, (-538.03));
      Complex complex9 = complex3.divide(complex8);
      complex9.ONE.sqrt();
      complex4.acos();
      complex6.nthRoot(441);
      complex9.exp();
      complex8.reciprocal();
      complex5.add(0.7853981633974483);
      complex0.asin();
      complex7.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-2770.84104877146), (-2770.84104877146));
      complex0.I.getArgument();
      Complex complex1 = Complex.valueOf(1480.42);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.subtract(complex1);
      complex1.ZERO.readResolve();
      Complex.valueOf(1480.42);
      complex3.toString();
      complex1.add(1496.089855357515);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.INF.sqrt();
      complex1.I.toString();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.divide((-1276.3189));
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex1.I.cos();
      Complex complex7 = Complex.valueOf(2341.8551995, 516.8668133742);
      complex7.atan();
      Complex complex8 = complex0.subtract(complex6);
      complex3.ZERO.cos();
      complex1.ZERO.cos();
      complex5.I.hashCode();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex2.subtract(complex1);
      complex10.ONE.tanh();
      complex10.getImaginary();
      Complex complex11 = complex5.multiply(complex4);
      complex11.sqrt();
      Complex complex12 = complex5.sinh();
      Complex complex13 = complex12.subtract((-2824.27687991));
      complex13.ONE.getField();
      complex9.atan();
      complex8.multiply(32.823653806254);
      Complex.valueOf(1782220.0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(1394.4974894, 1394.4974894);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = Complex.valueOf(1394.4974894);
      complex4.ONE.hashCode();
      complex4.NaN.multiply(1394.4974894);
      complex3.NaN.conjugate();
      Complex complex5 = complex0.multiply(714);
      complex2.multiply((double) 714);
      complex3.tan();
      complex5.add(complex1);
      Complex complex6 = Complex.valueOf((-5495.4));
      complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      complex0.negate();
      Complex complex4 = complex0.subtract((-6000.40576274));
      Complex.valueOf(6.283185307179586);
      Complex complex5 = Complex.ZERO;
      complex5.tanh();
      complex5.pow(complex0);
      Complex complex6 = new Complex((-6000.40576274), 6.283185307179586);
      complex6.asin();
      complex1.conjugate();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-6000.40576274));
      complex7.isInfinite();
      complex2.atan();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex1.divide(complex8);
      Complex complex10 = new Complex((-1512.88));
      complex10.divide((-2018.0));
      Complex complex11 = complex7.log();
      Complex complex12 = complex3.pow(complex7);
      complex11.acos();
      complex9.pow(complex4);
      Complex complex13 = new Complex(8.937957126662392E-8, (-666.3745));
      complex8.divide(complex3);
      complex12.asin();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      complex1.multiply(complex2);
      Complex complex3 = complex1.negate();
      complex1.subtract(0.11410418002953493);
      Complex complex4 = Complex.valueOf(0.11410418002953493);
      Complex.valueOf(0.2658022288340798, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.pow(complex4);
      complex1.asin();
      complex2.conjugate();
      Complex complex7 = Complex.valueOf(402.9, 0.6374238729476929);
      complex7.I.conjugate();
      Complex complex8 = Complex.INF;
      complex8.isInfinite();
      complex5.atan();
      complex8.divide(complex3);
      Complex complex9 = complex5.divide(0.11410418002953493);
      complex4.log();
      complex6.pow(complex3);
      Complex complex10 = Complex.valueOf(5084.158472943426, 0.6374238729476929);
      complex10.acos();
      complex10.pow(complex8);
      Complex complex11 = new Complex(402.9, 1.5800256583859738);
      complex1.divide(complex9);
      complex6.asin();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(1760.723176584572);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.tanh();
      complex3.pow(complex0);
      complex2.asin();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.valueOf(5084.158472943426, (-2018.0));
      Complex complex7 = Complex.I;
      complex7.isInfinite();
      complex4.atan();
      Complex complex8 = new Complex(5084.158472943426, 2.0);
      Complex complex9 = complex6.divide(complex8);
      complex7.divide((-1069.3962));
      complex9.log();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex0.pow(complex10);
      complex11.acos();
      complex3.pow(complex5);
      Complex complex12 = new Complex(1760.723176584572, (-1069.3962));
      complex5.divide(complex8);
      Complex complex13 = Complex.valueOf(1335.0, 2.0);
      Complex complex14 = complex13.asin();
      complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      complex0.negate();
      Complex complex4 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.tanh();
      complex6.NaN.add(59.8);
      complex4.pow(complex1);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = Complex.valueOf((-2018.0), 5084.158472943426);
      complex4.isInfinite();
      complex4.atan();
      Complex complex10 = complex5.ZERO.divide(complex4);
      complex7.divide(367.98497002);
      complex1.log();
      complex8.pow(complex4);
      Complex complex11 = complex5.acos();
      complex0.pow(complex11);
      complex10.reciprocal();
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY, (-3077.8439569696216));
      complex10.divide(complex9);
      complex9.asin();
      Complex complex13 = Complex.valueOf(2031.0);
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.cos();
      complex2.I.tan();
      complex1.getField();
      Complex complex3 = Complex.valueOf((double) 17, 6.283185307179586);
      Complex complex4 = Complex.valueOf((double) 17);
      complex4.sinh();
      complex1.createComplex(0.11410418002953493, (-2021.322543081));
      complex1.log();
      complex4.pow(0.41421356237309515);
      complex3.cos();
      Complex complex5 = complex1.reciprocal();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract(6.861870970598542E106);
      Complex complex3 = Complex.valueOf(6.861870970598542E106);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = Complex.ZERO;
      complex0.conjugate();
      Complex complex7 = Complex.valueOf(5084.158472943426, 6.861870970598542E106);
      complex1.isInfinite();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.atan();
      complex5.divide(complex7);
      Complex complex10 = complex3.divide(0.7615941559557649);
      complex5.log();
      Complex complex11 = complex10.pow(complex6);
      complex0.acos();
      complex11.pow(complex9);
      Complex complex12 = new Complex(2.718281828459045, 2447.091436);
      Complex complex13 = Complex.ZERO;
      complex5.asin();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.reciprocal();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.ONE.subtract(20.0);
      Complex complex5 = complex3.I.subtract(complex0);
      Complex complex6 = complex0.divide(complex3);
      complex6.NaN.toString();
      complex6.divide((-20.0));
      complex4.NaN.add((-20.0));
      complex4.isNaN();
      complex2.conjugate();
      complex5.sqrt();
      Complex complex7 = new Complex(20.0);
      complex7.reciprocal();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ONE.asin();
      complex2.I.multiply(complex3);
      complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex6 = complex3.ZERO.pow(complex4);
      Complex complex7 = complex0.log();
      complex1.conjugate();
      complex4.reciprocal();
      complex5.pow((-6.11041311179286E-10));
      complex6.getArgument();
      complex4.getImaginary();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.negate();
      Complex complex10 = Complex.NaN;
      complex10.cosh();
      Complex complex11 = Complex.valueOf((-6.11041311179286E-10), 0.6360918665423811);
      complex10.readResolve();
      complex11.pow((-1751.9));
      complex9.sin();
      complex3.sqrt();
      complex0.getField();
      complex7.add((-125.167306520618));
      Complex complex12 = Complex.I;
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.asin();
      Complex complex5 = complex2.I.multiply(complex3);
      Complex complex6 = complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex7 = complex3.ZERO.pow(complex4);
      complex0.log();
      complex7.conjugate();
      complex0.reciprocal();
      complex4.pow(973.11056095436);
      complex3.getArgument();
      Complex complex8 = Complex.INF;
      complex8.getImaginary();
      complex1.negate();
      complex6.cosh();
      Complex complex9 = Complex.valueOf(1.0, 973.11056095436);
      complex3.readResolve();
      complex9.pow(1.0);
      Complex complex10 = new Complex(2.718281828459045, (-1546.96462658363));
      complex10.sin();
      Complex complex11 = complex3.sqrt();
      complex11.getField();
      complex5.add((double) (-1171));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex2.I.multiply(complex3);
      Complex complex7 = complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex1.subtract(complex4);
      Complex complex8 = new Complex(0.7080734182735711, 0.7080734182735711);
      complex8.divide(complex3);
      Complex complex9 = Complex.I;
      complex9.toString();
      complex1.divide((-317.8));
      complex5.add((-317.8));
      Complex complex10 = complex2.tanh();
      complex10.tanh();
      complex7.readResolve();
      complex0.equals(complex6);
      Complex complex11 = Complex.ONE;
      complex11.abs();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      complex0.negate();
      Complex complex4 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.tanh();
      complex4.pow(complex1);
      complex0.asin();
      complex0.conjugate();
      Complex.valueOf((-2018.0), 5084.158472943426);
      complex4.isInfinite();
      Complex complex6 = complex4.atan();
      complex5.ZERO.divide(complex4);
      complex6.readResolve();
//      try { 
        complex4.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.tan();
      complex1.getField();
      complex0.getReal();
      Complex complex4 = complex3.acos();
      complex2.cosh();
      complex1.sinh();
      complex4.I.sin();
      complex4.divide((double) 17);
      Complex complex5 = new Complex(250.22378151306128, 17);
      complex5.log();
      Complex complex6 = Complex.INF;
      complex0.pow(complex6);
      complex2.acos();
//      try { 
        complex3.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.cos();
      complex0.createComplex(17, 6.94872148530716E-8);
      Complex complex3 = complex1.pow(complex0);
      complex2.log();
      Complex complex4 = complex1.conjugate();
      complex1.reciprocal();
      Complex complex5 = complex4.pow(1.0);
      complex3.getArgument();
      complex1.getImaginary();
      Complex complex6 = complex5.negate();
      complex6.cosh();
      Complex.valueOf(6.94872148530716E-8, 9.710435805122717E-67);
      complex1.readResolve();
      complex5.pow(0.0);
      complex6.sin();
      complex3.sqrt();
      complex1.getField();
      Complex complex7 = Complex.valueOf(0.45160030615905045, 1.0);
      complex7.add((double) 17);
      Complex complex8 = Complex.INF;
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.asin();
      complex2.I.multiply(complex3);
      complex1.tan();
      complex3.getField();
      complex1.getReal();
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex(0.7615941559557649, 630.8111025732939);
      complex1.sinh();
      complex0.add(complex1);
      complex0.isNaN();
      complex5.conjugate();
      complex3.sqrt();
      complex6.reciprocal();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.pow((-1866.0));
      complex4.getArgument();
      complex0.getImaginary();
      Complex complex5 = complex4.negate();
      complex3.cosh();
      Complex.valueOf(0.0, 1041.126467842602);
      complex0.readResolve();
      complex3.pow(-0.0);
      Complex complex6 = complex0.sin();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sqrt();
      complex5.getField();
      Complex complex9 = Complex.ZERO;
      complex6.ONE.hashCode();
      complex9.add(0.0);
      complex6.tan();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.I.multiply(complex3);
      Complex complex5 = complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex3.ZERO.pow(complex4);
      Complex complex6 = complex0.log();
      complex6.ZERO.conjugate();
      complex5.nthRoot(628983398);
      complex1.equals(complex2);
      complex4.getImaginary();
      complex4.multiply((-608));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex3.INF.pow(complex0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.multiply(complex6);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex6.isInfinite();
      complex5.hashCode();
      Complex complex9 = complex7.cos();
      complex9.ZERO.getArgument();
      Complex complex10 = complex2.divide(Double.NaN);
      complex1.log();
      Complex complex11 = complex8.pow(complex4);
      complex5.acos();
      complex9.pow(complex3);
      Complex.valueOf((-344.11601774));
      Complex complex12 = new Complex(2920.7102, 2920.7102);
      complex10.divide(complex1);
      complex11.asin();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.7105759559075);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      complex2.I.toString();
      complex2.INF.cos();
      double double0 = (-8.794689652049879E-8);
      complex0.multiply((-8.794689652049879E-8));
      Complex complex3 = complex2.asin();
      complex0.multiply(complex2);
      double double1 = (-1911.0);
      complex1.createComplex((-1911.0), 1.5631615647329739E-7);
      complex2.pow(complex3);
      complex1.log();
      complex1.conjugate();
      int int0 = (-1171);
//      try { 
        complex1.nthRoot((-511));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -511
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      complex0.negate();
      Complex complex4 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.tanh();
      complex4.pow(complex1);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.conjugate();
      Complex.valueOf((-2018.0), 5084.158472943426);
      complex4.isInfinite();
      Complex complex9 = complex4.atan();
      complex5.ZERO.divide(complex4);
      complex7.divide(367.98497002);
      complex1.log();
      complex8.pow(complex4);
      Complex complex10 = complex5.acos();
      complex0.pow(complex10);
      Complex complex11 = new Complex(1.5800256583859738, 2031.0);
      complex6.divide(complex9);
      complex7.asin();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = Complex.valueOf((-247.133107));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.sqrt();
      complex3.multiply(1);
      complex3.NaN.divide(0.0);
      complex2.sqrt();
      complex2.toString();
      Complex complex4 = complex2.add((-247.133107));
      complex0.tanh();
      Complex complex5 = complex2.tanh();
      complex4.readResolve();
      complex4.equals(complex5);
      complex2.nthRoot(1);
      complex0.abs();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.7105759559075);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      complex2.I.toString();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex2.multiply(complex1);
      complex4.INF.negate();
      Complex complex5 = complex0.subtract(842.7105759559075);
      Complex complex6 = complex2.tanh();
      complex2.ONE.pow(complex3);
      complex4.asin();
      complex6.conjugate();
      Complex complex7 = Complex.valueOf((-2018.0), (-2018.0));
      complex7.isInfinite();
      Complex complex8 = complex3.atan();
      complex8.NaN.divide(1.0);
      complex5.log();
      complex3.pow(complex6);
      Complex complex9 = complex6.acos();
      Complex.valueOf(309.1403493529);
      Complex complex10 = new Complex((-630.8111025732939), 842.7105759559075);
      Complex complex11 = complex2.divide(complex10);
      complex11.NaN.asin();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.tan();
      complex1.getField();
      complex0.getReal();
      Complex complex4 = complex3.acos();
      complex2.cosh();
      Complex complex5 = complex1.sinh();
      complex5.readResolve();
      Complex complex6 = complex4.add(complex2);
      Complex complex7 = complex6.log();
      complex7.exp();
      complex4.sinh();
      Complex complex8 = Complex.valueOf((double) 17);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add((-20.0));
      Complex complex1 = Complex.valueOf(2472.038721748);
      Complex complex2 = complex0.divide(complex1);
      complex0.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.divide(2031.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.log();
      Complex complex7 = new Complex((-2.105749999899302E-7), (-20.0));
      complex7.sqrt();
      Complex complex8 = complex5.negate();
      complex6.exp();
      Object object0 = complex6.readResolve();
      complex8.equals(object0);
      complex4.equals(complex1);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ONE.tanh();
      complex2.I.tanh();
      complex2.cosh();
      Complex.valueOf(0.0040464024109889895);
      complex1.isInfinite();
      complex1.hashCode();
      Complex complex4 = complex3.cos();
      complex4.getArgument();
      Complex.valueOf((-1351.21), 0.0040464024109889895);
      complex1.toString();
      Complex complex5 = Complex.valueOf((-1373.6245777459862), (-1351.21));
      Complex complex6 = complex1.multiply(complex5);
      complex3.conjugate();
      Complex.valueOf(3485.001975);
      Complex complex7 = complex6.conjugate();
      complex7.exp();
      Complex.valueOf(3485.001975);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.log();
      complex1.NaN.cos();
      complex3.INF.pow(complex0);
      Complex complex4 = Complex.ZERO;
      complex1.multiply(complex4);
      Complex complex5 = complex1.tan();
      Complex.valueOf((-7.447341328399208E30), Double.NaN);
      Complex.valueOf((-7.447341328399208E30));
      complex5.sinh();
      Complex complex6 = complex2.createComplex(1.0, 1.74193476087936E-7);
      Complex.valueOf(1.2723604303854572);
      Complex complex7 = Complex.INF;
      Complex.valueOf((-0.9999949739101598), (-7.447341328399208E30));
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.createComplex(1.0, (-261.2));
      Complex complex2 = complex0.I.tan();
      complex0.reciprocal();
      Complex complex3 = complex2.pow((-261.2));
      complex2.getArgument();
      Complex complex4 = new Complex((-261.2));
      Complex complex5 = complex4.negate();
      complex2.cosh();
      Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex0.readResolve();
      complex0.pow(1.0);
      complex3.sin();
      Complex complex6 = new Complex((-261.2));
      complex6.sqrt();
      complex1.getField();
      complex5.add((-32.554));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.7609457648450225E-8), (-2.7609457648450225E-8));
      complex0.I.hashCode();
      Complex complex1 = complex0.NaN.pow(0.0);
      complex1.ONE.reciprocal();
      Complex.valueOf((-1206.573), 0.0);
      Complex.valueOf(0.5244048833847046, (-2.7609457648450225E-8));
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.reciprocal();
      complex0.log();
      complex0.I.sin();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.subtract(20.0);
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex0.divide(complex1);
      complex5.NaN.toString();
      Complex complex6 = complex5.divide((-20.0));
      complex2.NaN.add((-20.0));
      Complex complex7 = complex6.ONE.tanh();
      complex7.INF.tanh();
      complex2.readResolve();
      complex0.equals(complex6);
      complex6.abs();
      complex0.log();
      complex4.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.cos();
      complex1.sqrt1z();
      Complex complex2 = complex1.divide(2599.92254);
      Complex complex3 = new Complex(2599.92254);
      complex3.tanh();
      Complex complex4 = Complex.ZERO;
      complex4.log();
      complex2.sqrt();
      Complex complex5 = complex4.negate();
      complex0.exp();
      Object object0 = complex5.readResolve();
      complex3.equals(object0);
      complex2.equals("p94");
      Complex complex6 = Complex.INF;
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = Complex.valueOf((-247.133107));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.multiply(1);
      complex3.NaN.divide(0.0);
      complex2.sqrt();
      complex2.toString();
      complex1.getImaginary();
      Complex complex5 = Complex.valueOf((double) 1, (-185.0941048621007));
      complex5.readResolve();
      Complex complex6 = complex3.pow((-185.0941048621007));
      complex6.sin();
      complex4.sqrt();
      complex4.getField();
      complex3.add(20.0);
      complex1.tan();
      complex2.pow(2.718281828459045);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.asin();
      complex2.I.multiply(complex3);
      Complex complex5 = complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex6 = complex3.ZERO.pow(complex4);
      Complex complex7 = complex0.log();
      complex7.ZERO.conjugate();
      complex7.ONE.reciprocal();
      complex4.I.pow(Double.POSITIVE_INFINITY);
      complex1.getArgument();
      complex7.getImaginary();
      Complex complex8 = complex4.negate();
      complex8.NaN.cosh();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 1.0);
      complex6.readResolve();
      Complex complex10 = complex9.pow((double) (-1171));
      Complex complex11 = complex10.ONE.sin();
      complex5.sqrt();
      complex3.getField();
      complex11.add(1.0);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.log();
      complex1.NaN.cos();
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.multiply(complex5);
      Complex.valueOf(Double.NaN);
      complex5.isInfinite();
      complex4.hashCode();
      Complex complex7 = complex6.cos();
      complex7.ZERO.getArgument();
      Complex complex8 = Complex.valueOf(976.0, 976.0);
      complex8.I.toString();
      Complex complex9 = complex4.multiply(complex2);
      complex0.INF.conjugate();
      Complex.valueOf(3485.001975);
      Complex complex10 = complex9.ZERO.conjugate();
      complex10.NaN.exp();
      Complex.valueOf(1147.1653314199734);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      complex0.toString();
      complex0.NaN.getArgument();
      Complex complex1 = complex0.tanh();
      complex1.I.getField();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.divide(648.1797939872107);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.ONE.tanh();
      Complex complex5 = complex2.atan();
      complex4.multiply(complex5);
      complex0.isInfinite();
      Complex complex6 = complex3.NaN.sqrt1z();
      complex6.getField();
      Complex complex7 = complex3.add(648.1797939872107);
      Complex.valueOf(0.0);
      complex4.ONE.divide((-848.33918407));
      Complex complex8 = complex0.add(1148.825);
      complex3.divide(complex7);
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex9.ONE.log();
      complex7.ZERO.log();
      complex10.atan();
      complex10.INF.sqrt();
      complex3.add(complex8);
      complex4.add(complex8);
      Complex complex11 = complex1.multiply(3531);
      complex11.add(complex7);
      complex4.pow((double) 3531);
      Complex.valueOf((-485.8), (-1062.07248));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.reciprocal();
      complex0.log();
      complex0.I.sin();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.subtract(20.0);
      complex1.I.subtract(complex0);
      Complex complex3 = complex0.divide(complex1);
      complex3.NaN.toString();
      Complex complex4 = complex3.divide((-20.0));
      complex2.NaN.add((-20.0));
      Complex complex5 = complex4.ONE.tanh();
      complex5.INF.tanh();
      complex2.readResolve();
      complex0.equals(complex4);
      complex4.abs();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.ONE.toString();
      complex0.ZERO.cosh();
      Complex.valueOf((-2140.09185997), 0.0);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = Complex.valueOf((-1633.461));
      complex4.INF.getField();
      complex4.INF.sin();
      Complex complex5 = complex4.INF.createComplex(0.0, (-2140.09185997));
      complex3.ONE.pow((-2140.09185997));
      complex3.NaN.atan();
      Complex complex6 = complex0.acos();
      complex6.I.abs();
      complex6.nthRoot(37);
      complex3.getField();
      Complex complex7 = complex5.ONE.exp();
      complex7.ONE.cos();
      complex4.cos();
      Complex complex8 = Complex.valueOf((-313.245));
      complex4.INF.sqrt1z();
      complex5.pow((-2047.911304086495));
      complex4.multiply((-1393));
      complex1.sqrt();
      complex4.createComplex(0.0, 4085.751015688);
      complex8.cosh();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.INF.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.add(1.8537070751190186);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.NaN.subtract(1.8537070751190186);
      complex0.abs();
      Complex complex8 = complex0.pow(complex2);
      complex8.pow(complex7);
      complex1.isNaN();
      complex6.createComplex((-1643.78), 0.0);
      complex5.add((-870.8778024));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = Complex.valueOf((-247.133107));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.sqrt();
      complex3.multiply(1);
      complex3.NaN.divide(0.0);
      complex2.sqrt();
      complex2.toString();
      complex1.getImaginary();
      Complex complex4 = complex0.atan();
      complex0.log();
      Complex complex5 = complex4.exp();
      complex5.ZERO.sinh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      complex2.equals("");
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.sinh();
      complex4.ZERO.divide(complex2);
      Complex complex5 = Complex.valueOf(8.446532344375812E-242);
      complex5.I.abs();
      complex2.getArgument();
      complex1.isInfinite();
      complex0.getField();
      Complex complex6 = complex0.add(1.9655680656433105);
      complex6.pow(complex0);
      complex0.multiply(1);
      complex1.multiply((-1763));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.cos();
      complex1.NaN.nthRoot(17);
      Complex complex2 = complex0.cosh();
      complex2.equals(complex1);
      complex0.getImaginary();
      Complex.valueOf((double) 17);
      complex2.multiply(4067);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.I.log();
      complex4.ONE.cos();
      complex4.I.atan();
      Complex complex5 = complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.I.multiply(complex2);
      complex5.ZERO.pow(complex0);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex0.sinh();
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.ZERO.cosh();
      Complex complex10 = complex3.subtract(5.31750271790054E282);
      Complex complex11 = complex8.subtract(complex7);
      Complex complex12 = complex11.INF.reciprocal();
      complex10.add(complex1);
      complex6.subtract(complex9);
      Complex complex13 = complex8.cosh();
      complex13.ZERO.multiply(complex12);
      complex0.sinh();
      complex10.negate();
      Complex.valueOf((-2592.8312));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-108.32395193737);
      Complex complex0 = new Complex((-1.2906712010774655E-8), (-108.32395193737));
      complex0.ONE.pow(0.3824149966239929);
      Complex complex1 = complex0.multiply(1322.0262355884);
      Complex complex2 = complex1.createComplex((-1.2906712010774655E-8), (-108.32395193737));
      complex2.hashCode();
      Complex complex3 = complex1.NaN.sin();
      complex3.INF.add(1322.0262355884);
      Complex.valueOf(2042.3);
      complex1.ZERO.abs();
      Complex complex4 = complex2.subtract(0.0);
      complex1.tanh();
      int int0 = (-3528);
//      try { 
        complex4.nthRoot((-3528));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,528
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(986.0645842671289, 0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.INF.multiply(986.0645842671289);
      complex1.I.negate();
      Complex complex4 = complex0.multiply(0.0);
      complex4.ONE.reciprocal();
      complex4.subtract(complex1);
      complex3.subtract(complex1);
      Complex.valueOf(0.0, (-2784.9));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = (-1605.94580491387);
      Complex complex0 = new Complex((-1605.94580491387));
      Complex complex1 = null;
//      try { 
        complex0.INF.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.7105759559075);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      complex2.I.toString();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.subtract(842.7105759559075);
      Complex complex7 = complex2.tanh();
      complex2.ONE.pow(complex3);
      complex4.asin();
      complex7.conjugate();
      Complex complex8 = Complex.valueOf((-2018.0), (-2018.0));
      complex8.isInfinite();
      Complex complex9 = complex3.atan();
      complex9.NaN.divide(1.0);
      complex6.log();
      complex3.pow(complex7);
      Complex complex10 = complex7.acos();
      complex10.pow(complex5);
      Complex.valueOf(309.1403493529);
      Complex complex11 = new Complex((-630.8111025732939), 0.0);
      Complex complex12 = complex2.divide(complex11);
      complex12.NaN.asin();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-312.213768103));
      complex0.NaN.log();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.createComplex(17, (-8.146080588190463E-9));
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex3.NaN.atan();
      Complex complex6 = complex3.pow((-361.402362));
      Complex complex7 = Complex.valueOf((double) 17);
      Complex complex8 = complex7.INF.atan();
      complex8.INF.getArgument();
      complex0.nthRoot(17);
      complex0.isInfinite();
      Complex complex9 = complex6.acos();
      complex9.ZERO.abs();
      complex7.nthRoot(17);
      complex9.getImaginary();
      complex2.cosh();
      complex4.isInfinite();
      complex9.nthRoot(991);
      Complex complex10 = complex1.cos();
      complex6.cos();
      complex9.multiply(complex10);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      complex0.I.cosh();
      Complex complex2 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      complex0.ONE.asin();
      complex4.I.multiply(complex2);
      double double0 = 1.0;
      complex3.ZERO.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex2.ZERO.pow(complex3);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.conjugate();
      int int0 = (-1171);
//      try { 
        complex6.INF.nthRoot((-1171));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,171
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.25673801176584E-159, 8.25673801176584E-159);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.exp();
      complex3.NaN.cosh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex2.cosh();
      complex0.tan();
      Complex.valueOf(1939.5859531341982, 1.3106298446655273);
      Complex.valueOf((-2021.322543081));
      complex5.I.sinh();
      complex5.createComplex((-2021.322543081), (-2021.322543081));
      complex5.log();
      Complex.valueOf(0.3443927764892578, 3033.544090047);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.createComplex(1.0, (-261.2));
      Complex complex2 = complex0.I.tan();
      complex2.NaN.asin();
      complex1.divide(0.0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-446.23759));
      Complex complex1 = complex0.negate();
      complex0.ONE.divide(1041.251074018);
      complex0.toString();
      Complex complex2 = complex0.ZERO.createComplex((-446.23759), 1716.1);
      Complex complex3 = complex2.I.sin();
      complex2.NaN.sinh();
      Complex complex4 = complex1.NaN.add(complex0);
      Complex complex5 = complex1.multiply((-2376.87744603114));
      complex5.INF.hashCode();
      complex0.getImaginary();
      Complex complex6 = complex1.sqrt1z();
      complex6.ZERO.negate();
      Object object0 = new Object();
      complex0.hashCode();
      complex4.equals(object0);
      complex1.equals(complex3);
      complex0.tan();
      Complex complex7 = complex5.cosh();
      complex7.getReal();
      complex7.pow((-964.91956));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply((-52));
      complex1.ONE.hashCode();
      complex1.INF.sinh();
      complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.I.multiply(1220.25574924756);
//      try { 
        complex2.NaN.nthRoot((-52));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -52
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2068.0), (-701.83));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.NaN;
      complex2.NaN.sqrt1z();
      Complex complex3 = complex1.NaN.multiply(complex2);
      complex3.ZERO.multiply(complex2);
      complex3.ONE.nthRoot(1436);
      Complex complex4 = complex3.NaN.multiply(complex1);
      complex4.NaN.abs();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.negate();
      complex6.getField();
      complex6.acos();
      complex1.atan();
      complex0.getReal();
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.tan();
      complex1.getField();
      complex0.getReal();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex1.sinh();
      complex6.readResolve();
      Complex complex7 = complex4.add(complex2);
      complex4.isNaN();
      complex5.conjugate();
      complex7.sqrt();
      complex3.reciprocal();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.I.multiply(3132.9164577003);
      Complex complex7 = complex5.INF.atan();
      Complex.valueOf((-2528.9687396), (-212.4004490342751));
      complex7.ZERO.asin();
      Complex complex8 = complex0.divide(complex4);
      complex0.ZERO.cos();
      Complex complex9 = complex5.divide(complex8);
      complex8.tan();
      complex9.NaN.abs();
      Complex complex10 = complex9.INF.add(complex4);
      complex10.ONE.getField();
      complex10.ZERO.exp();
      Complex complex11 = complex2.divide(complex6);
      complex11.negate();
      Complex complex12 = complex0.reciprocal();
      complex12.ZERO.sinh();
      complex11.negate();
      complex4.acos();
      Complex complex13 = complex2.tan();
      Complex complex14 = Complex.INF;
      complex2.equals(complex14);
      complex2.getImaginary();
      Complex complex15 = complex3.divide(complex12);
      complex15.isNaN();
      complex13.abs();
      complex4.asin();
      complex15.sqrt1z();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = Complex.valueOf((double) 1, 0.0);
      Complex complex4 = complex0.I.divide(complex3);
      complex0.ZERO.nthRoot(1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.subtract(complex5);
      complex6.I.nthRoot(1141);
      Complex complex7 = complex1.ZERO.pow(complex5);
      complex6.INF.tanh();
      complex6.ZERO.getField();
      complex5.getField();
      Complex complex8 = complex5.cosh();
      complex3.ONE.pow((-474.393768308));
      complex0.sqrt1z();
      complex6.getReal();
      Complex complex9 = complex4.pow(complex2);
      complex0.cos();
      complex9.reciprocal();
      Complex complex10 = Complex.ZERO;
      complex7.INF.pow(complex10);
      complex0.nthRoot(1141);
      Complex complex11 = complex8.acos();
      complex11.NaN.pow((-1.0235056525096769E156));
      complex9.createComplex(1, Double.NEGATIVE_INFINITY);
      Complex.valueOf((double) 1141, (-595.7613981509));
      complex1.sqrt();
      complex7.tanh();
      complex0.exp();
      complex0.nthRoot(1);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.multiply(2107);
      Complex complex4 = complex3.exp();
      complex0.add(complex3);
      complex2.isNaN();
      Complex complex5 = complex3.atan();
      complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.sinh();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2645.0);
      Complex complex2 = complex1.NaN.tanh();
      complex2.ZERO.hashCode();
      Complex complex3 = complex1.cosh();
      complex3.NaN.sin();
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = Complex.valueOf(2645.0);
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex3.ZERO.pow(0.0);
      Complex complex8 = complex6.NaN.sin();
      complex8.readResolve();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex5.pow(complex6);
      complex0.hashCode();
      Complex complex11 = complex9.atan();
      complex0.NaN.createComplex(2645.0, 2645.0);
      Complex complex12 = complex11.sqrt();
      assertEquals(0.7830042052516439, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex4.createComplex(1955.9743891472974, 6.283185307179586);
      complex13.NaN.subtract((-1.2093068629412478E-8));
      complex13.getArgument();
      Complex complex14 = complex10.subtract(1955.9743891472974);
      assertEquals(685.08870281042, complex14.getReal(), 0.01);
      
      complex3.toString();
      complex9.isNaN();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex8.atan();
      assertSame(complex8, complex2);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex16.equals((Object)complex4));
      assertSame(complex8, complex15);
      assertNotSame(complex8, complex7);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1938.93412508, 1938.93412508);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.ZERO.divide(1938.93412508);
      Complex complex4 = complex3.atan();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.NaN.cos();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.I.multiply((-1244));
      assertEquals(-0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.ZERO.sin();
      complex0.hashCode();
      Complex complex9 = new Complex(2501.4816287016, 1057.4914727528437);
      complex5.pow(complex9);
      complex5.hashCode();
      Complex.valueOf(2501.4816287016);
      complex8.equals((Object) null);
      assertTrue(complex8.equals((Object)complex4));
      
      Complex complex10 = complex2.cos();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex10.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex6));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(4242.06);
      Complex complex2 = Complex.valueOf(4242.06);
      Complex complex3 = complex1.INF.divide(complex2);
      complex0.add(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.divide(4242.06);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.log();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex7.negate();
      assertEquals((-8.352804251510785), complex9.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(4242.059882132737, complex4.getImaginary(), 0.01);
      
      Complex complex10 = complex1.exp();
      complex1.equals(complex10);
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      assertTrue(complex10.equals((Object)complex6));
      
      complex0.equals((Object) null);
      complex3.hashCode();
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertSame(complex0, complex8);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = Complex.valueOf(Double.NaN, (-3.102678910525039E288));
      Complex complex5 = complex2.ONE.multiply(1.163423776626587);
      Complex complex6 = complex5.ONE.createComplex(0.0, Double.NaN);
      Complex complex7 = complex1.multiply(1085.99526367);
      complex2.hashCode();
      Complex complex8 = complex2.add(9.693260855961159E-8);
      assertEquals(1.0000000969326086, complex8.getReal(), 0.01);
      
      Complex complex9 = complex5.ONE.add(complex6);
      assertSame(complex9, complex3);
      
      complex2.ONE.conjugate();
      complex0.createComplex(1725.72935, (-149.78));
      Complex complex10 = complex6.tanh();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertSame(complex10, complex4);
      
      complex2.getImaginary();
      complex7.hashCode();
      Complex complex11 = complex2.asin();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex11.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.isNaN();
      Complex complex1 = complex0.multiply(0.0);
      double double0 = complex1.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.INF.negate();
      assertTrue(complex3.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.ONE.sqrt1z();
      complex2.atan();
      Complex complex5 = complex4.INF.sqrt();
      assertFalse(complex5.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      
      Complex complex6 = complex2.add(0.0);
      assertTrue(complex1.equals((Object)complex4));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertSame(complex6, complex2);
      
      complex0.getField();
      Complex complex7 = Complex.valueOf(694.0);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.toString();
      Complex complex1 = complex0.tanh();
      double double0 = complex1.I.abs();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.ZERO.divide(1.0);
      double double1 = complex2.ONE.abs();
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      Complex complex3 = complex0.multiply(1.0);
      complex0.exp();
      Complex complex4 = complex0.divide((-1.0));
      complex4.INF.getField();
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex1.subtract(complex5);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex2));
      
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.pow((-1.0));
      assertTrue(complex1.equals((Object)object0));
      assertSame(complex8, complex6);
      assertSame(complex0, complex3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(589.242);
      complex0.getArgument();
      Complex complex2 = complex0.asin();
      assertTrue(complex2.isNaN());
      
      Complex complex3 = complex1.sqrt();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(24.274307405155763, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.conjugate();
      assertTrue(complex4.isInfinite());
      assertFalse(complex4.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-1224.0257);
      Complex complex0 = Complex.valueOf((-2821.746), (-1224.0257));
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.reciprocal();
      complex1.ONE.divide((-1224.0257));
      double double1 = 3538.36572;
      Complex.valueOf((-2821.746), 3538.36572);
      complex0.getArgument();
      Complex complex2 = complex1.cos();
      double double2 = 6.283185307179586;
      int int0 = (-457);
//      try { 
        complex2.I.nthRoot((-457));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -457
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
