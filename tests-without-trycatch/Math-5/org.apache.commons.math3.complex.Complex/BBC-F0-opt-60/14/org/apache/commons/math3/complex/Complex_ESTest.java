/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:40:06 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.createComplex(2.625423995658143E-82, (-1.0));
      complex2.acos();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex3.sinh();
      complex5.hashCode();
      Complex.valueOf(2.625423995658143E-82);
      Complex complex7 = complex2.multiply(complex4);
      complex2.nthRoot(1470);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex6.add(1891.754);
      Complex complex10 = Complex.INF;
      complex7.tan();
      Complex complex11 = Complex.NaN;
      complex11.log();
      complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.acos();
      Complex complex1 = complex0.createComplex(20.0, 2.8274080250412226E-6);
      complex1.ONE.sinh();
      Complex complex2 = complex0.I.conjugate();
      complex2.INF.nthRoot(480);
      complex2.tan();
      Complex complex3 = complex1.divide(3247.64106243);
      Complex complex4 = complex1.tanh();
      complex4.add(complex3);
      complex3.toString();
      double double0 = 1.60116838240163E-78;
      Complex.valueOf(3247.64106243, 1.60116838240163E-78);
//      try { 
        complex4.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1541.8), Double.POSITIVE_INFINITY);
      complex0.tan();
      complex0.multiply(1176);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = new Complex((-20.0), (-20.0));
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.NaN.multiply(422.1822581625622);
      complex4.NaN.subtract((-20.0));
      complex5.I.add(complex3);
      Complex complex6 = complex4.divide((-20.0));
      Complex complex7 = complex6.subtract(6.283185307179586);
      Complex complex8 = complex3.NaN.pow((-2.0));
      Complex.valueOf(2.114933490753174);
      Complex complex9 = complex3.tan();
      complex9.ONE.multiply(complex6);
      Complex complex10 = complex5.multiply(27332188);
      complex3.tan();
      complex10.add(complex1);
      complex8.multiply(complex2);
      Complex complex11 = Complex.valueOf(2.114933490753174, 6.283185307179586);
      complex11.cosh();
      complex7.subtract((-2.0));
      complex7.multiply(27332188);
      Complex complex12 = complex7.asin();
      complex12.I.toString();
      complex5.cosh();
      complex11.multiply((-2.0));
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.I.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.nthRoot(303);
      Complex complex1 = complex0.sqrt();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(19.398879257518416, 19.398879257518416);
      Complex complex1 = new Complex(19.398879257518416);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.add(19.398879257518416);
      Complex complex6 = complex5.tan();
      complex4.atan();
      Complex complex7 = complex3.reciprocal();
      complex7.atan();
      complex1.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.readResolve();
      complex0.ONE.negate();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(19.398879257518416, 19.398879257518416);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      complex1.NaN.log();
      complex0.ONE.cosh();
      Complex complex3 = Complex.valueOf(19.398879257518416, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(265.41723345175217);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.42863214015960693, (-3023.73605118407));
      Complex complex3 = complex1.NaN.cosh();
      complex3.NaN.asin();
      complex2.NaN.toString();
      Complex complex4 = complex1.I.subtract(complex2);
      complex0.I.pow(Double.NaN);
      Complex complex5 = complex0.INF.add(Double.NaN);
      complex5.ONE.toString();
      Complex complex6 = complex0.add(199.49545555);
      complex6.getField();
      Complex complex7 = complex0.createComplex(199.49545555, (-1443.676127956));
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = Complex.valueOf(Double.NaN, 265.41723345175217);
      complex9.INF.sqrt();
      complex9.ONE.acos();
      complex8.ZERO.readResolve();
      Complex.valueOf(1374917.1344279267);
      complex7.ONE.multiply((-1843499945));
      complex4.sqrt1z();
      Complex complex10 = complex7.subtract(Double.NaN);
      complex7.reciprocal();
      complex10.readResolve();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(2.129323729978037E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      complex0.multiply((-1183.347406239));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.divide(1123.75053820822);
      Complex complex7 = complex1.negate();
      complex7.add(1123.75053820822);
      complex6.tan();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.497405487919762E-139));
      complex0.nthRoot(692);
      complex0.NaN.multiply(1431655765);
      Complex complex1 = complex0.I.add((double) 692);
      Complex complex2 = Complex.valueOf(1346.4623, (-4252.813808));
      Complex complex3 = Complex.valueOf((-906.28581595), 2.4224166870117188);
      Complex complex4 = complex1.I.subtract(complex2);
      complex0.ONE.atan();
      Complex complex5 = complex0.tanh();
      complex5.ONE.sin();
      complex5.NaN.negate();
      complex2.ZERO.tan();
      complex4.ONE.nthRoot(692);
      complex3.ONE.divide(Double.NaN);
      complex1.multiply(complex3);
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.ZERO.atan();
      complex0.INF.getArgument();
      complex7.ZERO.readResolve();
      complex6.INF.acos();
      complex4.pow(complex1);
      complex1.cos();
      complex1.multiply((-3171678.970709407));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.I.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
      Complex complex1 = Complex.INF;
      complex1.hashCode();
      Complex complex2 = complex0.log();
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.acos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.asin();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.004947529841222807);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex0.hashCode();
      Complex complex2 = new Complex(0.004947529841222807, Double.POSITIVE_INFINITY);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
//      try { 
        complex0.ONE.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1592.185951501407, 1592.185951501407);
      Complex.valueOf((-2086.833373384962));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(939387.2943395365);
      Complex complex1 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-1.7743467191652895E-7));
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(55.964102850302);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.cosh();
      Complex complex5 = new Complex(0.9950524701587772, 1400.551882392431);
      complex5.tanh();
      Complex complex6 = complex4.add(complex2);
      Complex complex7 = complex3.divide((-1514.0));
      complex6.add((-1514.0));
      Complex complex8 = Complex.NaN;
      complex8.tan();
      Complex complex9 = complex4.add(55.964102850302);
      complex2.pow(complex4);
      Complex complex10 = Complex.valueOf(1400.551882392431, (-1.7743467191652895E-7));
      complex7.divide((-1514.0));
      complex9.conjugate();
      complex10.exp();
      complex0.cosh();
      Complex complex11 = Complex.valueOf(816.8150232698133);
      complex11.tanh();
      Complex complex12 = Complex.ONE;
      complex12.nthRoot(947);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 3049.352);
      complex1.nthRoot(1133);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add(9.916187343252014E175);
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(9.916187343252014E175);
      complex3.divide(9.916187343252014E175);
      Complex complex4 = complex1.add(9.916187343252014E175);
      complex1.tan();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.pow(complex1);
      complex2.multiply(2.0);
      complex6.getArgument();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(3049.352, 3049.352);
      complex0.getArgument();
      complex0.NaN.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.reciprocal();
      complex1.multiply(complex0);
      Complex.valueOf((-2397.0), Double.NaN);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(3049.352, 3049.352);
      complex0.getArgument();
      complex0.NaN.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ONE.multiply(complex1);
      complex2.toString();
      complex3.pow(complex2);
      complex0.multiply(193.255135567907);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-237.267933636), (-237.267933636));
      complex0.getArgument();
      Complex complex2 = complex1.tan();
      complex1.getArgument();
      complex2.tanh();
      complex2.createComplex((-2.356194490192345), (-3009.024564679756));
      complex1.divide(0.0020635117302589072);
      Complex complex3 = Complex.valueOf(1918.09794);
      complex3.hashCode();
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      Complex complex1 = complex0.ZERO.subtract((-3463.0));
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.NaN.multiply(complex0);
      complex3.NaN.divide((-3463.0));
      Complex complex4 = Complex.valueOf((-3463.0));
      Complex complex5 = complex4.ONE.pow(complex1);
      complex5.divide(complex2);
      complex3.abs();
      complex5.divide(3169.062179427);
      Complex complex6 = new Complex(2.0, Double.NaN);
      Complex complex7 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(9.916187343252014E175);
      Complex complex2 = complex1.acos();
      complex2.readResolve();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex4.multiply(3745.1282165203274);
      Complex complex5 = Complex.valueOf(9.916187343252014E175);
      Complex complex6 = Complex.NaN;
      complex6.cos();
      Complex complex7 = complex2.sqrt();
      complex5.add(complex3);
      complex3.add(complex4);
      Complex complex8 = complex1.atan();
      complex7.nthRoot(1999);
      Complex complex9 = Complex.valueOf((-2011.0), 2899.990007718);
      complex9.sqrt();
      Complex.valueOf((-980.4964233764789));
//      try { 
        complex8.nthRoot((-224));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -224
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(3049.352, 3049.352);
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      complex1.NaN.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.multiply(1498);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ONE.multiply(complex2);
      Complex complex6 = complex4.multiply(complex3);
      Complex complex7 = Complex.valueOf(3049.352, 3049.352);
      complex7.add(complex6);
      complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 939387.37762025;
      Complex complex0 = new Complex(939387.37762025);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.acos();
      complex0.readResolve();
      complex1.I.sqrt1z();
      Complex complex2 = complex0.I.multiply(939387.37762025);
      Complex complex3 = Complex.valueOf(939387.37762025);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.sqrt();
      complex5.ONE.add(complex2);
      complex1.NaN.add(complex0);
      complex5.ONE.atan();
      complex2.I.nthRoot(1999);
      complex2.INF.sqrt();
      Complex.valueOf(939387.37762025);
//      try { 
        complex1.nthRoot((-2144575355));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,144,575,355
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(3073.3576315136247, 3073.3576315136247);
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      complex1.NaN.getArgument();
      complex0.tanh();
      complex0.createComplex((-3009.024564679756), 1.5804200403673568E-61);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      Complex complex1 = new Complex((-3463.0));
      Complex.valueOf((-3463.0), (-3463.0));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.multiply(complex0);
      complex2.divide((-3463.0));
      Complex complex5 = Complex.valueOf(1566.3);
      complex5.pow(complex2);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex4.divide(complex6);
      complex2.abs();
      complex7.divide(1566.3);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      Complex complex1 = complex0.subtract((-3463.0));
      Complex complex2 = Complex.valueOf(784120.1312180001, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.multiply(complex3);
      complex4.divide((-557.2021));
      complex4.I.add((-557.2021));
      Complex.valueOf((-557.2021));
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex2.divide(complex6);
      complex3.abs();
      complex5.divide((-557.2021));
      Complex complex8 = new Complex((-557.2021), (-557.2021));
      Complex complex9 = Complex.ZERO;
      complex7.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(626.147, 626.147);
      Complex complex1 = complex0.atan();
      complex0.log();
      Complex complex2 = complex0.sinh();
      complex1.createComplex((-1.0), (-1.0));
      Complex complex3 = Complex.I;
      complex3.acos();
      complex0.sqrt1z();
      Complex complex4 = Complex.valueOf((-1.0));
      complex4.multiply(complex3);
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.reciprocal();
      complex0.asin();
      Complex complex2 = complex0.add((-3374.15263146354));
      complex2.ZERO.conjugate();
      Complex complex3 = Complex.ONE;
      complex2.log();
      Complex complex4 = new Complex((-20.0), (-3306.754));
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(3049.352, 3049.352);
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      complex1.NaN.getArgument();
      complex0.tanh();
      complex0.multiply(1498);
      Complex complex2 = complex1.createComplex((-1678.4), 183.0);
      Complex complex3 = complex2.acos();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex.valueOf((-1.0));
      complex3.I.atan();
      complex1.multiply(complex0);
      complex3.nthRoot(1498);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      complex0.ZERO.subtract((-3463.0));
      Complex complex1 = Complex.valueOf((-3463.0), (-3463.0));
      complex1.atan();
      Complex complex2 = complex0.log();
      complex2.sinh();
      complex1.createComplex((-1.0), 1938.440484121381);
      complex0.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt1z();
      Complex.valueOf(2.625423995658143E-82);
      Complex complex5 = Complex.valueOf(2.625423995658143E-82, 20.0);
      complex1.multiply(complex5);
      complex4.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(969.2205);
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
      complex2.ZERO.hashCode();
      Complex complex3 = complex1.createComplex((-1974.168672943), 2583.7368);
      complex2.acos();
      Complex complex4 = Complex.INF;
      complex4.sqrt1z();
      Complex.valueOf(2583.7368);
      complex1.multiply(complex3);
      complex4.nthRoot(3046);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      complex0.getField();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.NaN.sinh();
      complex5.I.hashCode();
      complex1.ONE.add(5099.758979);
      Complex complex8 = complex5.log();
      complex5.readResolve();
      Complex complex9 = complex5.ONE.sin();
      complex9.ZERO.cosh();
      complex8.conjugate();
      complex1.divide(complex2);
      Complex complex10 = complex8.cos();
      Complex complex11 = complex10.NaN.sinh();
      complex6.ZERO.getArgument();
      Complex complex12 = complex11.NaN.sin();
      complex6.multiply(2146376378);
      Complex complex13 = complex7.conjugate();
      complex13.I.pow(2.957719615324095E-4);
      complex4.tanh();
      complex12.log();
      complex9.subtract(1.0331339486251539E8);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(626.147, 626.147);
      complex0.I.nthRoot(1);
      complex0.hashCode();
      Complex complex1 = complex0.exp();
      complex0.nthRoot(1);
      Complex complex2 = complex0.pow((-397.797761511709));
      complex2.equals(complex0);
      Complex complex3 = complex1.multiply((double) 1);
      complex2.abs();
      complex3.multiply(290);
      complex3.reciprocal();
      Complex complex4 = new Complex(290);
      Complex complex5 = Complex.valueOf(626.147, 626.147);
      complex3.subtract(complex5);
      complex2.hashCode();
      Complex complex6 = Complex.ZERO;
      complex5.pow((-1760.58887816179));
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(969.2205);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.tanh();
      complex3.hashCode();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex4.log();
      complex2.sinh();
      complex6.createComplex(1814.4478862, 969.2205);
      complex1.acos();
      Complex complex7 = complex1.sqrt1z();
      Complex.valueOf(1814.4478862);
      complex5.multiply(complex3);
      complex7.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-816.815635403281));
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.multiply(1498);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.multiply(complex0);
      complex1.multiply(complex2);
      Complex.valueOf(421.49263111, (-264.3));
      Complex complex5 = complex4.tan();
      Complex.valueOf((-784120.1312180001));
      complex3.subtract(complex4);
      complex0.acos();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
      Complex complex1 = new Complex(2116.32, (-1445.91030795));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf(2116.32, 1704.0);
      complex3.ONE.sqrt();
      complex2.sqrt();
      Complex complex4 = complex1.cos();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(19.214580517842, 19.214580517842);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.multiply(19.214580517842);
      Complex complex4 = complex1.sqrt();
      complex0.ONE.cosh();
      complex1.ZERO.tanh();
      Complex complex5 = complex3.I.divide((-1.7743467191652895E-7));
      Complex complex6 = complex4.add(0.0);
      complex3.tan();
      complex4.add((-1.7743467191652895E-7));
      complex4.I.pow(complex6);
      complex3.multiply(2.0);
      complex0.getArgument();
      complex4.asin();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(626.147, 626.147);
      complex0.I.nthRoot(1);
      complex0.hashCode();
      Complex complex1 = complex0.add(626.147);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.add(4.247240125405735E-8);
      complex3.pow(complex1);
      Complex complex4 = complex1.multiply(626.147);
      complex1.add(4.247240125405735E-8);
      Complex complex5 = complex0.multiply(0.0);
      complex4.tanh();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals("");
      complex0.nthRoot(3413);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf((-20.0), (-2116.32));
      complex3.nthRoot(290);
      Complex complex4 = complex3.pow((double) 290);
      Complex complex5 = Complex.I;
      complex5.equals(complex2);
      Complex complex6 = complex3.multiply(Double.NaN);
      complex1.abs();
      complex4.multiply(476);
      Complex complex7 = new Complex((-2169.732536554042));
      complex1.subtract(complex0);
      complex6.hashCode();
      complex5.subtract((-2169.732536554042));
      Complex complex8 = complex2.negate();
      complex1.acos();
      complex3.getField();
      complex8.add(complex3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-816.815635403281));
      Complex complex1 = Complex.valueOf((-816.815635403281), 0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.add(complex2);
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = complex1.I.add(0.0);
      complex4.isInfinite();
      Complex complex6 = complex2.sqrt1z();
      complex3.hashCode();
      Complex complex7 = new Complex(0.0, 1.1991832256317139);
      complex7.toString();
      complex0.ONE.add((-816.815635403281));
      complex3.ZERO.multiply(complex5);
      complex1.getField();
      Complex complex8 = complex3.divide(939.0);
      Complex complex9 = Complex.INF;
      complex2.multiply(complex8);
      complex6.createComplex(Double.NaN, 0.6176109313964844);
      complex7.createComplex(939.0, 1.1991832256317139);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      complex0.INF.acos();
      Complex complex1 = complex0.reciprocal();
      complex0.tan();
      complex0.nthRoot(2808);
      Complex complex2 = complex1.log();
//      try { 
        complex2.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = 5.2508465939060334E-82;
      double double1 = 6.283185307179586;
//      try { 
        complex0.ONE.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      complex0.ZERO.subtract((-3463.0));
      Complex complex1 = Complex.valueOf((-3463.0), (-3463.0));
      Complex complex2 = Complex.valueOf((-3463.0), (-3463.0));
      complex0.divide(complex2);
      complex2.add(complex0);
      Complex complex3 = complex2.sqrt1z();
      complex1.add(2.011589233663723E-10);
      Complex complex4 = Complex.ONE;
      complex1.log();
      Complex complex5 = new Complex(1796.0, (-865.6975));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-816.815635403281));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf((-4478809.3424), (-4478809.3424));
      Complex complex4 = complex3.divide((-3932.405319));
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = Complex.valueOf((-816.815635403281));
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.divide(complex4);
      complex6.divide(complex1);
      complex0.abs();
      Complex complex9 = complex1.tan();
      complex8.createComplex((-289.37048991955464), (-816.815635403281));
      Complex complex10 = Complex.valueOf((-3932.405319));
      complex10.isInfinite();
      Complex complex11 = complex5.sqrt1z();
      complex10.hashCode();
      complex1.toString();
      complex11.getField();
      Complex complex12 = complex11.divide(19.214580517842);
      Complex complex13 = Complex.INF;
      complex12.multiply(complex6);
      complex9.createComplex(535.9775, (-816.815635403281));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("");
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.multiply((-1.3548568223001414E-8));
      complex2.pow(complex3);
      Complex.valueOf((-1572.8141388), (-1572.8141388));
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide(0.0);
      complex0.nthRoot(1);
      complex0.hashCode();
      complex1.INF.sqrt1z();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.tan();
      complex3.NaN.hashCode();
      complex1.ONE.tan();
      Complex complex4 = complex3.add(complex2);
      complex4.I.hashCode();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.subtract(0.0);
      complex6.NaN.sqrt();
      Complex complex7 = complex0.sin();
      complex7.I.nthRoot(1);
      Complex complex8 = complex7.ONE.log();
      complex8.INF.add(complex1);
      complex5.NaN.nthRoot(290);
      complex0.equals(complex0);
      complex6.multiply(0.0);
      complex0.abs();
      complex0.multiply(290);
      Complex complex9 = new Complex((-573.0));
      complex0.NaN.subtract(complex9);
      complex0.hashCode();
      complex1.subtract(2301.0002931);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals("");
      complex0.createComplex((-2116.32), (-2116.32));
      Complex complex1 = complex0.createComplex((-2116.32), 2.625423995658143E-82);
      Complex complex2 = complex0.acos();
      complex2.I.sqrt1z();
      complex2.sqrt1z();
      Complex.valueOf(2.625423995658143E-82);
      Complex complex3 = Complex.I;
      complex0.multiply(complex3);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex2.add(1.080639291795678E-30);
      complex4.add(1.080639291795678E-30);
      complex2.pow(complex5);
      complex2.sin();
      Complex complex6 = new Complex(Double.NaN, (-4078.0));
      Complex complex7 = complex6.divide(Double.NaN);
      Complex complex8 = Complex.ONE;
      complex8.conjugate();
      complex8.exp();
      complex7.cosh();
      Complex.valueOf(0.0);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.2987112652900916, (-886.4));
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ZERO;
      complex0.multiply(1207);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = new Complex(2.2987112652900916);
      complex4.add((double) 1207);
      Complex complex6 = Complex.ONE;
      complex6.subtract((-48.23691894463952));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1884.7671249857744);
      complex0.nthRoot(637);
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      complex1.exp();
      Complex.valueOf(0.0);
      complex1.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.ZERO;
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-360.88), (-360.88));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.pow((-360.88));
      Complex complex3 = complex1.subtract(8957620.6848);
      complex2.add(complex1);
      Complex complex4 = Complex.valueOf(934.4541175042, (-1578.0));
      complex4.getField();
      complex1.add(290.939854984832);
      complex3.readResolve();
      complex3.getImaginary();
      complex4.multiply(complex1);
      complex4.subtract(complex3);
      Complex complex5 = Complex.valueOf(920.13409);
      complex5.readResolve();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3704.0442267, 0.0);
      Complex complex1 = complex0.conjugate();
      complex1.sqrt();
      Complex.valueOf((-9.415506349675128E-64), (-9.415506349675128E-64));
      complex0.toString();
      Complex complex2 = complex0.asin();
      complex2.hashCode();
      complex0.multiply(3704.0442267);
      Complex complex3 = new Complex((-1139.47195));
      complex3.reciprocal();
      complex0.multiply(1216);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex0.I.tan();
      complex5.INF.multiply(1135);
      Complex complex6 = complex2.negate();
      complex6.I.exp();
      complex5.sin();
      complex4.divide(0.4177590012550354);
      complex5.conjugate();
      complex3.exp();
      Complex complex7 = Complex.I;
      complex7.cosh();
      Complex.valueOf(0.0);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      complex1.I.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex3.ONE.pow(complex0);
      complex0.hashCode();
      Complex complex5 = complex0.acos();
      complex5.ZERO.divide((-1.0));
      Complex complex6 = complex3.pow(2046.19);
      Complex complex7 = new Complex(2046.19);
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.subtract(complex4);
      complex0.readResolve();
      complex6.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(969.2205);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.ZERO;
      complex3.ZERO.hashCode();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex4.sinh();
      complex6.nthRoot(1687);
      complex1.createComplex(1687, 0);
      Complex complex7 = complex3.add(1.1812958655355033E-4);
      Complex complex8 = complex5.cos();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.divide((double) 1687);
      Complex complex11 = complex10.sin();
      Complex complex12 = complex1.tan();
      complex0.hashCode();
      complex12.subtract(complex4);
      Complex complex13 = Complex.ZERO;
      complex13.divide(1.1812958655355033E-4);
      Complex complex14 = Complex.INF;
      complex14.createComplex(2436.731, (-2238.13416864435));
      complex7.getField();
      complex6.conjugate();
      Complex complex15 = new Complex((-2238.13416864435), 0);
      complex15.isInfinite();
      complex2.exp();
      complex10.sin();
      complex8.conjugate();
      Complex complex16 = Complex.ZERO;
      complex16.log();
      complex15.getReal();
      complex11.negate();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      complex0.ZERO.subtract((-3463.0));
      Complex complex1 = Complex.valueOf((-3463.0), (-3463.0));
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.NaN.divide((-3463.0));
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = Complex.valueOf((-3463.0));
      complex5.I.reciprocal();
      complex4.NaN.divide(complex0);
      Complex complex6 = complex4.INF.divide(complex0);
      complex6.ZERO.abs();
      complex0.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.pow(complex7);
      Complex complex9 = complex3.sin();
      complex1.divide((-462.066723572));
      Complex complex10 = new Complex((-1025.93829));
      complex10.conjugate();
      Complex complex11 = Complex.valueOf((-816.815635403281));
      complex11.exp();
      complex8.cosh();
      Complex.valueOf((-3463.0));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.reciprocal();
      complex0.cos();
      double double0 = (-1997.628182046968);
      complex1.subtract((-1997.628182046968));
      complex2.sqrt();
      complex2.sin();
      // Undeclared exception!
      complex0.nthRoot(981305269);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.multiply(complex3);
      complex3.pow(complex4);
      complex2.hashCode();
      Complex complex5 = complex1.acos();
      complex5.divide((-1.0));
      Complex complex6 = complex2.pow((-1.0));
      Complex complex7 = new Complex(1.0);
      Complex complex8 = complex3.add(complex7);
      complex0.divide(2.0);
      complex6.exp();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.multiply(complex3);
      complex4.ONE.pow(complex0);
      complex0.hashCode();
      Complex complex5 = complex0.acos();
      complex5.ZERO.divide((-1.0));
      complex4.pow(2046.19);
      Complex complex6 = new Complex(2046.19);
      complex0.add(complex6);
      complex1.divide(2.0);
      complex2.exp();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.acos();
      Complex.valueOf(0.0, (-5.720173456146447E-8));
      Complex complex3 = complex0.I.add(0.0);
      complex3.INF.hashCode();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.INF.pow(0.20660123229026794);
      complex5.ZERO.hashCode();
      complex5.ZERO.multiply(complex0);
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex8.createComplex(0.0, 0.0);
      complex7.toString();
      complex0.abs();
      complex0.equals(complex3);
      Complex complex10 = complex0.pow(187.0799143);
      complex10.createComplex(1.0, 66.4249472644207);
      complex10.ONE.cos();
      complex6.multiply(complex2);
      complex7.getReal();
      complex5.add(1.557407724654902);
      complex4.cos();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1868.3846));
      complex0.pow(512.903);
      Complex complex1 = complex0.sqrt();
      double double0 = 601.071961;
      Complex complex2 = complex0.pow((-1868.3846));
      complex2.INF.acos();
      Complex complex3 = complex1.ZERO.pow(601.071961);
      complex0.tan();
      complex0.ONE.sinh();
      Complex complex4 = Complex.ZERO;
      int int0 = (-1204);
//      try { 
        complex3.nthRoot((-1204));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,204
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1357.826926420941, 0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.I.divide(complex1);
      complex3.ZERO.tan();
      Complex complex4 = complex0.INF.multiply(complex2);
      complex0.atan();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex5.I.tan();
      complex6.negate();
      complex6.ONE.tanh();
      Complex complex7 = complex0.multiply((-2.193190669794277E-108));
      complex7.abs();
      complex5.ONE.multiply(0.8109631538391113);
      complex5.isInfinite();
      complex5.INF.sinh();
      complex4.ZERO.cos();
      Complex complex8 = complex5.sinh();
      complex8.abs();
      complex8.ONE.abs();
      complex0.add(complex2);
      complex1.sqrt();
      complex8.add(0.0);
//      try { 
        complex8.nthRoot((-2128));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,128
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(19.214580517842, 19.214580517842);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.multiply(19.214580517842);
      Complex complex4 = complex1.sqrt();
      complex0.ONE.cosh();
      complex1.ZERO.tanh();
      complex3.I.divide((-1.7743467191652895E-7));
      Complex complex5 = complex4.add(0.0);
      complex3.tan();
      complex4.add((-1.7743467191652895E-7));
      complex4.I.pow(complex5);
      complex5.sin();
      complex0.ZERO.divide(19.214580517842);
      complex2.conjugate();
      complex2.exp();
      complex4.cosh();
      Complex.valueOf(0.0);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(1);
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.sqrt();
      complex3.ZERO.getArgument();
      complex3.toString();
      complex3.toString();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.ZERO.pow(0.0);
      complex6.ZERO.negate();
      complex6.NaN.toString();
      complex1.NaN.divide((double) 1);
      Complex complex7 = complex3.tan();
      complex7.INF.getArgument();
      complex7.I.tanh();
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = Complex.valueOf((double) 1, 2279.5206807);
      complex3.ZERO.asin();
      Complex.valueOf(1218.51078100819);
      complex9.I.add(complex2);
      Complex complex10 = complex2.subtract(complex7);
      Complex complex11 = complex10.I.log();
      complex4.sqrt1z();
      complex0.negate();
      complex5.conjugate();
      complex11.isNaN();
      complex6.divide(0.0);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-3.128894928199484E-290));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.ZERO.multiply((-3.128894928199484E-290));
      complex0.I.getArgument();
      complex1.ONE.hashCode();
      Complex complex4 = new Complex(115.863077112, 1235.1);
      Complex complex5 = complex1.INF.pow(complex4);
      complex0.abs();
      complex1.isNaN();
      complex5.multiply(1);
      complex5.createComplex(3969.46013, (-31.086466138));
      complex3.getImaginary();
      Complex.valueOf(3969.46013);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.cosh();
      complex0.NaN.sqrt();
      complex2.add((-389.468));
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex4.NaN.cos();
      complex5.getArgument();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex1.subtract((-20.0));
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.INF.divide(4109.08407097);
      Complex complex9 = complex7.NaN.exp();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex10.ZERO.subtract(complex3);
      complex11.INF.sqrt1z();
      complex10.toString();
      complex7.sqrt1z();
      Complex complex12 = complex0.multiply(complex4);
      complex12.NaN.exp();
      Complex complex13 = complex6.acos();
      complex3.reciprocal();
      complex13.negate();
      complex1.equals(complex5);
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 5925.2;
      double double1 = 4638.02166;
      Complex complex0 = new Complex(5925.2, 4638.02166);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.exp();
      complex2.sin();
      complex2.ONE.toString();
      Complex complex3 = complex1.cosh();
      int int0 = 0;
//      try { 
        complex3.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      complex1.asin();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.atan();
      complex3.INF.add(complex2);
      Complex complex4 = complex0.I.tan();
      complex4.INF.multiply(1135);
      Complex complex5 = complex2.negate();
      complex5.I.exp();
      complex2.ONE.multiply(2.0);
      Complex complex6 = complex5.NaN.add(2332.618);
      complex6.NaN.multiply(0.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-2823.36642));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.negate();
      complex2.createComplex(1410.5123888107653, (-2823.36642));
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ONE.multiply(1.986264756071962E44);
      Complex complex5 = complex4.ZERO.divide(complex1);
      complex3.isNaN();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex4.reciprocal();
      complex6.NaN.multiply(1);
      Complex complex8 = complex7.exp();
      Complex.valueOf((-2823.36642));
      complex5.isNaN();
      complex8.subtract(0.0);
      complex8.sqrt1z();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.asin();
      complex1.INF.toString();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex3.ONE.multiply(1571);
      complex2.INF.toString();
      Complex complex5 = complex1.exp();
      complex5.subtract(complex2);
      Complex complex6 = complex0.add(0.0);
      complex6.multiply(1403.7978326);
      complex6.I.acos();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex8.reciprocal();
      complex9.isInfinite();
      complex7.acos();
      complex4.subtract(2766.55);
      complex5.getReal();
      complex8.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.tan();
      complex2.INF.conjugate();
      complex2.getReal();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.INF.sinh();
      complex4.NaN.tan();
      Complex complex5 = complex3.ZERO.divide(1680.4247);
      Complex complex6 = complex2.reciprocal();
      complex6.I.tanh();
      complex6.I.readResolve();
      double double1 = 0.0;
      double double2 = 6.283185307179586;
      complex5.INF.tanh();
      int int0 = 0;
//      try { 
        complex1.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.sinh();
      Complex complex4 = Complex.valueOf((-779.9449572));
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.NaN.divide(complex5);
      complex0.pow(complex4);
      complex0.conjugate();
      complex6.getReal();
      complex4.multiply(Double.NaN);
      complex2.ZERO.divide(complex3);
      complex5.cos();
      complex2.add(1528.223);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.I.subtract((-4540.7666));
      complex2.ZERO.toString();
      Complex complex3 = complex0.divide(complex1);
      complex1.getReal();
      Complex.valueOf(0.0);
      Complex complex4 = complex0.INF.divide(complex1);
      complex0.multiply(0);
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      complex0.getImaginary();
      complex0.hashCode();
      complex3.INF.multiply(0.0);
      Complex complex6 = complex3.cos();
      complex6.INF.abs();
      complex4.readResolve();
      Complex complex7 = complex3.pow(complex2);
      complex5.sqrt();
      complex4.sin();
      complex4.pow(complex5);
      Complex complex8 = complex7.multiply((-8.77224935488516E-8));
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(1574.74719677, 1574.74719677);
      Complex complex1 = complex0.NaN.pow(1574.74719677);
      complex0.ZERO.readResolve();
      complex0.pow(1574.74719677);
      Complex complex2 = complex0.subtract(6.079434951446575E-234);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.valueOf((-1578.0), (-1578.0));
      complex3.ONE.getField();
      Complex complex5 = complex3.add(290.939854984832);
      complex4.NaN.readResolve();
      complex1.getImaginary();
      complex0.multiply(complex4);
      complex5.subtract(complex0);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.342604067787756E-8), (-1.0));
      complex0.ZERO.getField();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex2.NaN.pow(complex1);
      complex0.ONE.multiply(1);
      Complex complex4 = complex0.add((-6.342604067787756E-8));
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex5.I.acos();
      complex6.ZERO.createComplex(0.0, 1044.406998);
      complex4.NaN.toString();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.INF.tanh();
      complex1.getArgument();
      complex3.getImaginary();
      complex6.isInfinite();
      Complex complex9 = complex6.createComplex(1, (-307.13372));
      complex4.readResolve();
      Complex complex10 = complex6.pow(0.0);
      complex6.getField();
      complex7.exp();
      complex10.isInfinite();
      complex8.equals(complex4);
      Complex complex11 = complex9.negate();
      complex11.INF.sqrt();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(969.2205);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.tanh();
      complex3.ZERO.hashCode();
      Complex complex4 = complex0.atan();
      complex4.I.log();
      complex4.sinh();
      Complex complex5 = complex1.createComplex(2.625423995658143E-82, 969.2205);
      Complex complex6 = complex5.acos();
      complex1.I.sqrt1z();
      complex5.createComplex((-473.09788), 3042.70449507);
      Complex complex7 = complex6.acos();
      complex5.exp();
      complex4.hashCode();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.sqrt();
      complex1.ONE.add(complex2);
      complex0.isNaN();
      Complex complex3 = complex0.add(complex1);
      complex0.reciprocal();
      complex3.cos();
      complex2.hashCode();
      Complex complex4 = complex2.ZERO.sin();
      complex4.cos();
      complex4.I.abs();
      complex1.getImaginary();
      complex2.isInfinite();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex1.add(complex0);
      complex6.multiply(0);
      Complex.valueOf((-796.484347015938), 5.900089995748943E-29);
      complex3.exp();
      complex1.isInfinite();
      complex5.cosh();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      Complex complex1 = complex0.ZERO.subtract((-3463.0));
      Complex complex2 = Complex.valueOf((-3463.0), (-3463.0));
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.NaN.multiply(complex2);
      complex4.NaN.divide((-3463.0));
      Complex complex5 = complex0.INF.sqrt1z();
      Complex complex6 = Complex.valueOf((-3463.0));
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex5.NaN.divide(complex0);
      Complex complex9 = complex5.INF.divide(complex0);
      complex9.ZERO.abs();
      Complex complex10 = complex0.tan();
      complex10.createComplex((-289.37048991955464), (-1025.93829));
      complex0.isInfinite();
      complex6.ZERO.sqrt1z();
      complex1.hashCode();
      complex3.toString();
      complex7.getField();
      Complex complex11 = complex8.divide((-3463.0));
      Complex complex12 = Complex.INF;
      complex1.multiply(complex12);
      complex11.createComplex((-289.37048991955464), 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1.0);
      complex1.I.hashCode();
      complex0.NaN.tan();
      Complex complex2 = complex1.ONE.cosh();
      complex1.INF.pow(1.0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ZERO.add(complex1);
      complex4.ONE.cosh();
      Complex.valueOf(1.0);
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex3.NaN.multiply(complex2);
      Complex complex7 = complex6.ONE.subtract(1.0);
      complex3.NaN.log();
      complex7.ONE.hashCode();
      Complex complex8 = complex7.divide(1.0);
      Complex complex9 = complex0.reciprocal();
      complex9.NaN.conjugate();
      Complex complex10 = complex0.multiply(complex2);
      complex10.ZERO.getField();
      complex4.ONE.tanh();
      Complex complex11 = complex3.add(0.0);
      complex11.NaN.hashCode();
      complex4.hashCode();
      complex11.tanh();
      Complex complex12 = Complex.valueOf((-1213.547447591518), 440.59206);
      complex1.NaN.pow(complex12);
      complex8.multiply(1);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(626.147, 626.147);
      complex0.I.nthRoot(1);
      complex0.hashCode();
      Complex complex1 = complex0.exp();
      Complex.valueOf((double) 1);
      complex1.toString();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.multiply(37);
      Complex complex4 = complex1.I.log();
      complex1.getImaginary();
      complex0.isNaN();
      Complex complex5 = complex4.reciprocal();
      complex5.I.negate();
      complex5.ZERO.getArgument();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.negate();
      complex7.I.add(complex4);
      complex7.I.conjugate();
      Complex.valueOf(20.0);
      complex6.ZERO.toString();
      Complex complex8 = complex7.ZERO.add(complex4);
      Complex complex9 = complex8.ZERO.add((-83.7553149029949));
      complex0.NaN.hashCode();
      complex5.ONE.add((-2093.04671188));
      complex6.exp();
      Complex complex10 = complex0.add(0.0);
      complex10.atan();
      complex6.reciprocal();
      complex8.pow(2531.1241026906905);
      Complex.valueOf(5.184023388254773E-130);
      complex7.NaN.negate();
      complex3.equals("");
      complex1.NaN.abs();
      complex9.getReal();
      complex9.createComplex((-1895.0), (-83.7553149029949));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-1868));
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.INF.conjugate();
      complex3.getArgument();
      complex3.I.getField();
      complex4.ZERO.nthRoot(2033);
      complex1.getField();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex1.INF.asin();
      complex7.ONE.reciprocal();
      complex4.ONE.divide(complex3);
      Complex complex8 = complex6.ONE.exp();
      complex8.ZERO.getArgument();
      complex1.equals(complex4);
      Complex complex9 = complex4.pow(complex2);
      Complex.valueOf((-2126.0));
      complex9.ZERO.conjugate();
      Complex complex10 = complex1.sin();
      complex10.acos();
      complex3.abs();
      complex8.getImaginary();
      complex9.pow(complex4);
      complex2.createComplex(0.0, 0.0);
//      try { 
        complex5.nthRoot((-1868));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,868
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(178.8723603192);
      complex0.I.readResolve();
      complex0.getField();
      Complex complex1 = complex0.negate();
      complex1.divide(complex0);
      Complex complex2 = complex1.sinh();
      Complex.valueOf(178.8723603192);
      complex1.isInfinite();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      complex1.ONE.sqrt();
      Complex complex2 = Complex.valueOf(536.48, 536.48);
      complex0.toString();
      complex0.asin();
      complex1.hashCode();
      complex2.multiply(536.48);
      complex2.reciprocal();
      complex2.multiply(1216);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      complex1.add(0.0);
      Complex complex2 = Complex.valueOf(0.0, 2854.045589);
      complex0.readResolve();
      Complex complex3 = complex0.add(complex2);
      complex0.INF.multiply(1);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.INF.tanh();
//      try { 
        complex5.NaN.nthRoot((-15));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -15
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      double double0 = 3.5869215528816054E-262;
      Complex complex2 = complex1.ONE.createComplex(3.5869215528816054E-262, 3.5869215528816054E-262);
//      try { 
        complex2.ONE.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1288.0));
      Complex complex1 = new Complex((-1288.0), (-1288.0));
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.I.sin();
      complex4.INF.sqrt();
      complex0.log();
      complex2.ZERO.pow((-339.2478634));
      Complex.valueOf((-1288.0), (-339.2478634));
      Complex complex5 = complex2.add((-1288.0));
      complex5.INF.log();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.abs();
      complex0.ZERO.pow(Double.NaN);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ZERO.pow(complex0);
      complex3.INF.sqrt();
      complex3.ZERO.multiply(Double.NaN);
      Complex complex4 = complex2.ZERO.negate();
      complex4.tan();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.sinh();
      complex6.exp();
      complex4.getField();
      complex2.NaN.toString();
//      try { 
        complex4.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(290.1247, 0.0);
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ONE.sqrt();
      complex0.cos();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1433.5984333252, 1433.5984333252);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.ZERO.acos();
      complex3.INF.add(complex0);
      Complex complex4 = complex0.I.multiply(1346.206586185);
      complex4.ONE.nthRoot(1);
      complex0.getField();
      Complex complex5 = complex1.NaN.subtract((-157.173));
      Complex complex6 = Complex.valueOf(1433.5984333252, 2.561702766944378E139);
      complex6.I.divide(complex5);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex5.tanh();
      complex6.reciprocal();
      complex4.ZERO.nthRoot(2243);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex9.ZERO.multiply(complex5);
      complex10.ONE.abs();
      complex0.isInfinite();
      Complex complex11 = complex8.NaN.tanh();
      complex5.INF.hashCode();
      complex4.toString();
      complex8.sin();
      complex4.getImaginary();
      complex3.pow(complex11);
      complex11.multiply(37);
      Complex.valueOf(1433.5984333252, 0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.divide(2703.0530359);
      Complex complex3 = complex0.subtract(complex1);
      complex3.NaN.tanh();
      Complex complex4 = complex2.INF.exp();
      complex4.ONE.reciprocal();
      complex0.I.toString();
      complex0.I.reciprocal();
      complex2.I.abs();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.multiply(complex0);
      complex6.NaN.getArgument();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex0.multiply(3.865007795216205E-213);
      Complex complex10 = complex8.INF.sqrt1z();
      complex5.ZERO.nthRoot(167);
      complex2.divide(complex7);
      Complex complex11 = complex8.divide(2703.0530359);
      complex11.NaN.sin();
      complex7.sqrt1z();
      complex0.multiply(complex9);
      complex9.multiply(0);
      Complex complex12 = complex4.log();
      complex12.ONE.log();
      complex10.log();
      complex1.acos();
      complex3.divide(complex8);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-2819.222), 238.80853220525185);
      Complex complex1 = Complex.INF;
      complex1.ONE.divide(complex0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.pow(0.0);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.pow(complex4);
      complex5.NaN.readResolve();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex2.acos();
      complex7.ONE.conjugate();
      Complex complex10 = complex9.ONE.atan();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex9.ZERO.sqrt1z();
      Complex complex12 = complex11.NaN.sqrt();
      complex11.INF.abs();
      Complex complex13 = complex7.sin();
      complex6.subtract((-2819.222));
      Complex complex14 = complex13.negate();
      Complex complex15 = complex6.add(complex1);
      String string0 = complex7.toString();
      assertEquals("(2819.222, -238.80853220525185)", string0);
      
      complex6.acos();
      Complex complex16 = complex14.asin();
      complex12.hashCode();
      complex6.getImaginary();
      complex12.NaN.multiply(complex15);
      Complex complex17 = complex16.atan();
      assertEquals(1.5707750504491493, complex17.getReal(), 0.01);
      assertEquals((-0.00418737144272795), complex17.getImaginary(), 0.01);
      
      Complex.valueOf(0.0);
      Complex complex18 = complex11.multiply(complex13);
      assertEquals((-2.4201819762298103E103), complex18.getReal(), 0.01);
      
      double double0 = complex12.getArgument();
      assertSame(complex12, complex9);
      assertFalse(complex1.equals((Object)complex8));
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertSame(complex12, complex5);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.nthRoot(1);
      complex0.hashCode();
      Complex complex3 = complex2.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      complex2.toString();
      Complex complex4 = complex2.subtract(0.0);
      Complex complex5 = complex4.tan();
      complex5.NaN.hashCode();
      Complex complex6 = complex1.ONE.tan();
      assertEquals(1.557407724654902, complex6.getReal(), 0.01);
      
      Complex complex7 = complex5.add(complex4);
      complex7.I.hashCode();
      Complex complex8 = complex1.cos();
      assertTrue(complex8.equals((Object)complex3));
      
      Complex complex9 = complex0.subtract(0.0);
      complex9.NaN.sqrt();
      Complex complex10 = complex0.sin();
      List<Complex> list0 = complex10.I.nthRoot(1);
      assertFalse(list0.contains(complex2));
      assertEquals(1, list0.size());
      
      Complex complex11 = complex10.ONE.log();
      complex11.INF.add(complex2);
      assertTrue(complex11.equals((Object)complex7));
      
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      List<Complex> list1 = complex12.NaN.nthRoot(290);
      assertFalse(list1.contains(complex4));
      
      Complex complex13 = complex12.pow(0.0);
      complex0.equals(complex2);
      Complex complex14 = complex12.multiply(0.0);
      complex2.abs();
      complex0.multiply(290);
      Complex complex15 = new Complex((-573.0));
      Complex complex16 = complex13.NaN.subtract(complex15);
      complex0.hashCode();
      Complex complex17 = complex13.subtract(2301.0002931);
      assertNotSame(complex17, complex13);
      
      Complex complex18 = complex10.negate();
      assertEquals(-0.0, complex18.getReal(), 0.01);
      assertNotSame(complex0, complex16);
      assertFalse(complex18.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add((-1596.4925666015));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.ZERO.createComplex((-1596.4925666015), 0.0);
      Complex complex6 = complex3.INF.multiply(complex4);
      complex6.INF.getField();
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex5.tan();
      Complex complex9 = Complex.valueOf(1077.76749);
      assertEquals(1077.76749, complex9.getReal(), 0.01);
      
      double double0 = complex8.getArgument();
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals((-0.631834017679411), complex8.getReal(), 0.01);
      
      Complex complex10 = complex4.pow(complex3);
      assertSame(complex10, complex6);
      assertFalse(complex3.isInfinite());
      assertSame(complex10, complex7);
  }
}
