/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:15:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.NaN.multiply(complex1);
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.add(1.1752011936438014);
      Complex complex4 = complex3.log();
      complex4.ONE.divide(complex0);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.ZERO.multiply(3322);
      complex6.NaN.abs();
      Complex complex7 = Complex.valueOf(1.1752011936438014, Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.add((-2075.80289876645));
      complex7.pow((-1793.46648));
      Complex complex9 = complex4.reciprocal();
      complex9.NaN.atan();
      complex9.sin();
      complex3.ONE.divide((-1793.46648));
      complex7.createComplex(4.4102476363150345E-4, 6.963429563637273E139);
      complex5.tan();
      complex0.acos();
      complex2.sin();
      complex8.multiply(3322);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-207.4), Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(567792967);
      Complex complex2 = complex0.asin();
      complex1.pow((double) 567792967);
      Complex complex3 = complex2.multiply(661);
      complex0.readResolve();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.multiply((double) 661);
      Complex complex6 = complex2.subtract((double) 567792967);
      Complex complex7 = complex6.sqrt1z();
      complex2.subtract(complex0);
      complex3.multiply(complex4);
      Complex complex8 = complex6.createComplex(567792967, (-1132.507621669));
      complex2.createComplex(437.0530402020553, 2394.245421434854);
      complex8.acos();
      complex0.multiply(2338);
      complex7.exp();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.add(586.2);
      Complex complex1 = complex0.pow((-1947.6651));
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-724.31));
      Complex complex6 = complex4.asin();
      complex2.pow(2.414213562373095);
      complex6.multiply(3543);
      Complex.valueOf((-980.407270491));
      complex6.readResolve();
      Complex complex7 = complex2.tan();
      Complex complex8 = new Complex(2.0, 2.0);
      complex2.divide(complex8);
      Complex complex9 = complex5.multiply(20.0);
      complex8.multiply(complex9);
      complex7.sinh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(610.53);
      Complex complex1 = Complex.valueOf(20.2432736, 2.0);
      Complex complex2 = new Complex(2236.016423478125);
      Complex complex3 = new Complex(552.6386343, 20.0);
      Complex complex4 = complex3.tan();
      complex3.asin();
      complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3250.51702717), 2.9279594746502846E161);
      Complex complex1 = new Complex((-541.7642072924));
      complex1.INF.abs();
      complex0.abs();
      complex1.tan();
      Complex complex2 = new Complex(2219.17463);
      complex2.multiply(complex0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(5151.425871876504, 1713.18082679517);
      complex1.nthRoot(678);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.pow((-0.518400667777589));
      Complex.valueOf(451.88300670607);
      Complex complex3 = Complex.valueOf((double) 678, 0.518400667777589);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.tan();
      Complex.valueOf(4.62608152166211E-167);
      complex2.readResolve();
      Complex.valueOf(5151.425871876504, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.asin();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.multiply(612);
      complex5.readResolve();
      complex7.tan();
      Complex complex8 = Complex.valueOf(1713.18082679517, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.multiply(2.0);
      complex4.multiply(2.0);
      Complex complex10 = complex5.multiply(complex9);
      complex10.acos();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
      complex2.log();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.log();
      complex6.getArgument();
      Complex complex7 = complex5.tanh();
      complex6.negate();
      complex3.atan();
      Complex complex8 = complex5.multiply(627);
      complex6.multiply(complex7);
      complex4.createComplex(21396.95446272, (-1261.974990998));
      complex2.sqrt1z();
      complex5.tan();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.NaN);
      complex1.NaN.atan();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.getArgument();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.cos();
      complex3.subtract(complex2);
      complex0.isInfinite();
      complex2.conjugate();
      Complex complex5 = complex4.sinh();
      complex2.log();
      Complex complex6 = new Complex((-1.5707963267948966));
      Complex complex7 = complex6.subtract(complex2);
      Complex complex8 = new Complex((-1.5707963267948966), 2631.262195704822);
      Complex complex9 = complex8.tanh();
      complex2.getArgument();
      complex2.tanh();
      complex2.negate();
      complex7.atan();
      complex3.multiply((-1));
      Complex complex10 = Complex.ZERO;
      complex10.readResolve();
      complex5.pow((double) (-1));
      complex4.acos();
      complex8.pow(complex9);
      complex2.abs();
      complex4.nthRoot(1797);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.createComplex(9.813901863427107E161, 6.845178997009503);
      complex2.tan();
      complex2.asin();
      complex1.divide(9.813901863427107E161);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2937137239227448, (-20.0));
      Complex complex1 = complex0.tan();
      Complex.valueOf(2.2937137239227448, (-20.0));
      complex0.divide(complex1);
      Complex complex2 = complex0.sqrt1z();
      complex2.createComplex(6.283185307179586, (-1133.7225239894));
      complex0.tan();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(-0.0, Double.NaN);
      Complex complex2 = complex1.pow(-0.0);
      complex2.INF.negate();
      complex2.nthRoot(678);
      complex0.pow((-254.667002));
      Complex complex3 = Complex.ZERO;
      complex3.negate();
      complex3.tan();
      Complex complex4 = Complex.valueOf(2661.182742);
      complex4.negate();
      complex3.readResolve();
      Complex complex5 = Complex.valueOf(7.561041519403049E-9, 3.667900819885245);
      Complex complex6 = complex5.asin();
      complex5.multiply((-102));
      complex1.readResolve();
      complex0.divide(complex6);
      complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(118.1, Double.POSITIVE_INFINITY);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(2.9279594746502846E161);
      complex0.isInfinite();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.log();
      complex3.getField();
      Complex complex5 = complex4.tanh();
      Complex complex6 = (Complex)complex5.readResolve();
      complex2.equals(complex6);
      complex6.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      complex0.nthRoot(1498);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((double) 1498, (double) 1498);
      Complex complex4 = complex3.INF.sqrt();
      complex4.I.getField();
      complex3.NaN.reciprocal();
      complex2.nthRoot(1498);
      Complex complex5 = complex0.pow((-1.943473623641502E-9));
      Complex complex6 = complex2.negate();
      complex6.tan();
      complex3.negate();
      complex1.readResolve();
      Complex complex7 = Complex.ONE;
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      complex0.nthRoot(1498);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((double) 1498, (double) 1498);
      Complex complex4 = complex3.INF.sqrt();
      complex4.ONE.hashCode();
      complex4.I.getField();
      complex3.NaN.reciprocal();
      complex3.exp();
      complex2.nthRoot(1498);
      Complex complex5 = complex0.pow((-1.943473623641502E-9));
      Complex complex6 = complex2.negate();
      complex6.tan();
      Complex complex7 = complex3.negate();
      complex1.readResolve();
      Complex.valueOf((double) 1498, (double) 1498);
      Complex complex8 = complex5.asin();
      complex0.multiply(1498);
      complex7.readResolve();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(2.9279594746502846E161);
      complex0.isInfinite();
      complex1.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.log();
      complex2.getField();
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(452.442);
      Complex.valueOf(1414.25674013, 1309.454343911188);
      complex1.NaN.pow(1475715.1475678221);
      complex3.I.tan();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex.valueOf(231.71313220579, 4492.9862132072);
      Complex.valueOf(1.0);
      Complex complex5 = complex2.sqrt1z();
      complex5.cosh();
      complex0.sin();
      Complex complex6 = complex0.createComplex(2093.6, 5753.309608746228);
      Complex complex7 = complex6.NaN.divide(2093.6);
      complex6.ONE.tanh();
      Complex complex8 = complex6.cosh();
      complex8.NaN.tan();
      complex0.toString();
      complex0.atan();
      complex4.divide(452.442);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(1214.7915759860384);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.subtract(complex0);
      complex0.getField();
      complex1.tanh();
      complex2.tan();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(3968.807704818195, (-1547.06912));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex2.INF.negate();
      Complex complex3 = complex0.I.divide(complex2);
      complex0.reciprocal();
      Complex.valueOf((-1195.0));
      Complex complex4 = complex2.pow((-2035.820943));
      Complex complex5 = complex4.ONE.subtract((-1.0));
      complex5.ONE.sinh();
      complex1.sqrt();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(793.3049925, 793.3049925);
      Complex complex1 = Complex.I;
      complex1.ZERO.tanh();
      Complex complex2 = complex1.I.add(793.3049925);
      Complex complex3 = complex0.INF.pow(complex1);
      complex3.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.atan();
      complex4.NaN.abs();
      complex2.multiply(793.3049925);
      complex0.cos();
      Complex complex6 = complex3.tanh();
      complex6.acos();
      complex2.sin();
      Complex.valueOf((-439.1257358923397), (-3.176199594915881E-8));
      Complex complex7 = complex3.asin();
      complex7.NaN.multiply(0.6316148810291219);
      Complex complex8 = complex5.cosh();
      complex1.toString();
      complex7.negate();
      complex4.divide(complex0);
      complex5.isNaN();
      Complex complex9 = complex3.exp();
      complex4.pow(complex8);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(20.0);
      complex0.ZERO.pow(20.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex0.NaN.multiply(complex1);
      complex4.ZERO.getArgument();
      Complex complex5 = complex0.atan();
      complex5.ONE.negate();
      Complex complex6 = complex1.cos();
      complex6.NaN.abs();
      Complex complex7 = complex5.INF.subtract(complex1);
      complex2.isInfinite();
      complex0.ZERO.conjugate();
      Complex complex8 = complex0.sinh();
      complex8.tan();
      Complex complex9 = complex8.negate();
      complex7.readResolve();
      Complex.valueOf((-3.7979660725865874E274), Double.NaN);
      complex8.add(complex3);
      complex9.asin();
      Complex complex10 = Complex.ONE;
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.add(complex1);
      complex3.NaN.add(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1462.431));
      Complex complex4 = complex1.acos();
      complex4.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3199396743916215);
      Complex complex1 = Complex.valueOf(0.3199396743916215, 0.3199396743916215);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex((-3076.5502570131703), (-814));
      complex3.getArgument();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.cos();
      Complex complex7 = new Complex((-2.8829374809371346));
      complex7.abs();
      Complex complex8 = complex0.subtract(complex3);
      complex2.isInfinite();
      Complex complex9 = new Complex(2428.261543627563, 2.8829374809371346);
      complex9.conjugate();
      complex8.sinh();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex6.subtract(complex5);
      complex5.tanh();
      complex0.getArgument();
      Complex complex12 = Complex.NaN;
      Complex.valueOf(1.0);
      Complex complex13 = Complex.ZERO;
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      complex0.acos();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex1.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf((-1538.275291026277));
      Complex complex4 = complex1.negate();
      complex4.NaN.acos();
      Complex complex5 = complex2.subtract(1.0);
      complex4.sqrt();
      complex0.multiply((-1538.275291026277));
      complex3.negate();
      complex5.sin();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.negate();
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex2.add(complex1);
      complex0.asin();
      Complex complex5 = complex2.reciprocal();
      complex3.equals(complex5);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1498);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-3258.45), 4.996350953167304E-4);
      Complex complex3 = complex1.sqrt();
      complex2.getField();
      complex1.reciprocal();
      complex1.nthRoot(1498);
      Complex complex4 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.tan();
      complex4.negate();
      complex3.readResolve();
      Complex.valueOf(4.996350953167304E-4, Double.POSITIVE_INFINITY);
      complex3.add(complex6);
      complex1.asin();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = 20.0;
      Complex complex1 = new Complex(20.0);
      complex0.ZERO.pow(20.0);
      Complex complex2 = Complex.ONE;
      complex0.NaN.sin();
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(20.0);
      complex0.ZERO.pow(20.0);
      Complex complex2 = Complex.ONE;
      complex0.NaN.sin();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.reciprocal();
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.reciprocal();
      complex8.nthRoot(37);
      Complex complex9 = complex6.pow(8.446704379314168E-4);
      Complex complex10 = new Complex(1.2481715679168701, (-476.272));
      Complex complex11 = complex10.negate();
      complex10.tan();
      complex3.negate();
      complex5.readResolve();
      Complex.valueOf(0.0, (-476.272));
      complex8.add(complex9);
      complex11.asin();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-607.39558219626), (-607.39558219626));
      Complex complex5 = complex4.INF.sqrt();
      complex5.I.getField();
      complex3.abs();
      Complex complex6 = complex1.subtract(complex4);
      complex4.isInfinite();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex7.log();
      complex1.subtract(complex5);
      complex7.tanh();
      Complex complex9 = Complex.ONE;
      complex9.getArgument();
      complex5.tan();
      complex0.negate();
      Complex complex10 = Complex.ONE;
      complex10.multiply((-607.39558219626));
      complex2.negate();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex.valueOf((-1538.275291026277));
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.NaN.acos();
      complex2.subtract(2879.072165049);
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.INF;
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.INF;
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      complex1.subtract(complex0);
      complex0.nthRoot(1498);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((-607.39558219626), (-607.39558219626));
      Complex complex4 = complex3.INF.sqrt();
      complex4.I.getField();
      complex3.NaN.reciprocal();
      complex2.nthRoot(1498);
      complex0.pow((-1.943473623641502E-9));
      Complex complex5 = complex2.negate();
      complex5.tan();
      Complex complex6 = complex3.negate();
      complex1.readResolve();
      complex6.acos();
      Complex complex7 = complex4.pow(complex5);
      complex7.equals(complex0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.I.subtract(complex0);
      complex0.nthRoot(1498);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-607.39558219626), (-607.39558219626));
      Complex complex5 = complex4.INF.sqrt();
      complex5.I.getField();
      Complex complex6 = complex4.NaN.reciprocal();
      complex3.nthRoot(1498);
      Complex complex7 = complex4.pow(Double.NaN);
      Complex complex8 = complex2.negate();
      complex1.tan();
      Complex complex9 = complex5.negate();
      complex9.acos();
      complex5.pow(complex6);
      complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(20.0);
      complex0.ZERO.pow(20.0);
      Complex complex2 = new Complex(0.0);
      complex0.NaN.sin();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex4.cos();
      complex7.NaN.abs();
      complex5.INF.subtract(complex1);
      complex0.ZERO.conjugate();
      Complex complex8 = complex0.sinh();
      Complex complex9 = Complex.I;
      complex8.NaN.subtract(complex3);
      complex9.tanh();
      complex8.getArgument();
      Complex.valueOf(Double.NaN, 0.0);
      complex0.negate();
      complex3.readResolve();
      Complex complex10 = complex6.acos();
      complex8.pow(complex10);
      complex9.abs();
      complex1.add(complex6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(1214.7915759860384);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.sinh();
      complex1.log();
      complex2.subtract(complex1);
      Complex complex4 = complex2.tanh();
      complex3.getArgument();
      Complex complex5 = complex0.tan();
      Complex complex6 = new Complex(1214.7915759860384, 1214.7915759860384);
      complex6.negate();
      complex5.readResolve();
      Complex complex7 = complex4.acos();
      Complex complex8 = new Complex(0.0, 2201.9);
      complex0.pow(complex8);
      complex3.abs();
      complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.ZERO.pow(20.0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex0.NaN.multiply(complex1);
      Complex complex6 = complex0.reciprocal();
      complex3.getArgument();
      Complex complex7 = complex6.atan();
      complex7.ONE.negate();
      Complex complex8 = complex6.cos();
      complex8.NaN.abs();
      Complex complex9 = complex7.INF.subtract(complex1);
      complex6.isInfinite();
      complex0.ZERO.conjugate();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex7.log();
      complex4.subtract(complex6);
      Complex complex12 = complex1.tanh();
      complex1.getArgument();
      complex7.tan();
      Complex complex13 = complex11.negate();
      complex5.acos();
      complex10.pow(complex12);
      complex9.abs();
      complex6.add(complex13);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.conjugate();
      Complex.valueOf(2833.854336733);
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.valueOf((-1077.61716491), 2.0);
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex5.add(2.0);
      complex2.getReal();
      complex6.hashCode();
      complex6.atan();
      complex1.getArgument();
      Complex complex7 = Complex.NaN;
      complex3.add((-407.845861));
      complex1.isInfinite();
      Complex complex8 = Complex.INF;
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2088.5981528, 762.61907802);
      Complex complex1 = complex0.ONE.tan();
      complex1.ZERO.abs();
      Complex complex2 = complex1.ZERO.subtract((-1716.024930823));
      Complex complex3 = complex2.divide(0.0);
      complex1.abs();
      Complex complex4 = new Complex(2088.5981528);
      complex4.ONE.abs();
      Complex complex5 = complex0.subtract((-1716.024930823));
      Complex complex6 = complex1.pow(complex0);
      complex6.nthRoot(7);
      complex3.getArgument();
      complex5.subtract(Double.NaN);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2088.5981528, 762.61907802);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.pow(2088.5981528);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.multiply(complex1);
      complex4.reciprocal();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex4.cos();
      Complex complex9 = Complex.ONE;
      complex8.subtract(complex9);
      complex7.isInfinite();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex5.log();
      Complex complex12 = complex7.subtract(complex2);
      complex10.tanh();
      Complex complex13 = Complex.ONE;
      complex13.getArgument();
      complex11.tanh();
      Complex complex14 = complex0.negate();
      complex3.atan();
      Complex complex15 = Complex.ONE;
      complex12.readResolve();
      complex13.acos();
      complex8.pow(complex14);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2088.5981528, 762.61907802);
      Complex complex1 = complex0.ONE.tan();
      complex1.ZERO.abs();
      Complex complex2 = complex1.ZERO.subtract((-1716.024930823));
      complex2.tanh();
      complex2.ZERO.add(complex1);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex3.ONE.divide(complex0);
      complex4.atan();
      complex4.INF.divide(complex1);
      Complex complex5 = complex4.multiply(37);
      Complex complex6 = complex5.asin();
      complex6.ONE.asin();
      Complex complex7 = complex3.I.divide(762.61907802);
      complex7.ONE.nthRoot(37);
      complex5.I.log();
      Complex complex8 = complex1.I.subtract(0.0);
      Complex complex9 = Complex.valueOf(0.0, 1134.456532043);
      complex8.pow(complex9);
      Complex complex10 = complex0.acos();
      complex0.readResolve();
      complex7.pow(complex10);
      Complex complex11 = complex6.exp();
      complex11.NaN.createComplex(813.5043709493543, 1134.456532043);
      Complex complex12 = complex11.conjugate();
      Object object0 = complex6.readResolve();
      complex10.equals(object0);
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-554.2576088));
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.tan();
      Complex complex3 = complex0.NaN.divide((-1680.6556));
      Complex complex4 = Complex.valueOf(2063.225, 2063.225);
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex1.add(20.0);
      complex3.getReal();
      Complex complex8 = Complex.ONE;
      complex8.hashCode();
      complex7.atan();
      complex4.getArgument();
      Complex complex9 = complex1.reciprocal();
      complex9.ZERO.add(20.0);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex6.add(2063.225);
      complex0.isInfinite();
      complex0.exp();
      complex11.add((-1680.6556));
      complex4.divide(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.add((-1190.26214036054));
      complex2.ONE.getArgument();
      Complex complex4 = complex3.ONE.atan();
      Complex.valueOf((-1190.26214036054));
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.valueOf(20.0, 1.4674011002723395);
      Complex complex7 = Complex.valueOf(0.0, (-1190.26214036054));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex1.subtract(complex5);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex0.add(complex10);
      complex6.readResolve();
      complex11.subtract(1238.7143554556346);
      complex2.createComplex(1.4674011002723395, 0.0);
      complex9.add(complex7);
      complex6.equals(complex9);
      complex4.tan();
      Complex.valueOf(0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      complex1.divide(1.043905258178711);
      Complex.valueOf((-1680.6556), 2282.54156319978);
      Complex complex4 = Complex.valueOf((-16.678990495172908), (-16.678990495172908));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.ZERO;
      complex7.add(complex8);
      complex3.readResolve();
      complex7.subtract((-16.678990495172908));
      Complex complex9 = complex4.createComplex((-2520.60311196733), (-1479.212793251459));
      complex6.add(complex8);
      Object object0 = complex2.readResolve();
      complex5.equals(object0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-554.2576088));
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-607.39558219626));
      Complex complex4 = complex3.sqrt();
      complex1.getField();
      Complex complex5 = Complex.valueOf(2282.54156319978);
      Complex complex6 = complex5.reciprocal();
      complex2.nthRoot(1497);
      complex0.pow(0.1760765678736359);
      complex4.negate();
      complex3.tan();
      complex1.negate();
      complex6.readResolve();
      complex2.acos();
      complex6.pow(complex3);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      complex1.I.subtract(complex0);
      complex0.nthRoot(1498);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((-607.39558219626), (-607.39558219626));
      Complex complex4 = complex3.INF.sqrt();
      complex4.I.getField();
      complex3.NaN.reciprocal();
      complex2.nthRoot(1498);
      complex0.pow((-1.943473623641502E-9));
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.tan();
      complex6.ONE.getField();
      complex3.negate();
      complex1.readResolve();
      complex1.acos();
//      try { 
        complex1.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.INF.divide(complex2);
      complex0.ONE.nthRoot(1247);
      Complex complex3 = complex2.I.pow(484.45000816906);
      complex2.hashCode();
      complex1.atan();
      complex3.getArgument();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.add(Double.NaN);
      complex4.isInfinite();
      complex3.exp();
      complex2.add(1.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.add((-1190.26214036054));
      complex1.getArgument();
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.valueOf(1.5707963267948966);
      complex1.cosh();
      Complex.valueOf(1.5707963267948966, 0.0);
      Complex complex6 = complex1.divide(complex4);
      complex0.add(0.42319912171599805);
      Complex complex7 = new Complex(1955.5495422187);
      complex7.getReal();
      complex7.hashCode();
      complex4.atan();
      complex6.getArgument();
      complex5.reciprocal();
      Complex complex8 = Complex.NaN;
      complex7.add((-64.99289999));
      Complex complex9 = Complex.valueOf(1955.5495422187, 0.0);
      complex9.isInfinite();
      Complex complex10 = complex1.exp();
      complex3.add(3.3903703993793316E224);
      complex10.subtract(1955.5495422187);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.reciprocal();
      complex3.getArgument();
      Complex complex4 = new Complex((-5904.446393105971));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex4.cos();
      Complex complex8 = new Complex(3155.43295);
      complex8.subtract(complex2);
      complex8.isInfinite();
      complex2.conjugate();
      Complex complex9 = complex7.sinh();
      complex7.log();
      complex6.subtract(complex9);
      Complex complex10 = complex4.tanh();
      complex10.getArgument();
      complex4.tanh();
      complex8.negate();
      Complex complex11 = complex10.atan();
      complex9.multiply(490);
      complex6.multiply(complex10);
      complex11.createComplex(0.0, 3155.43295);
      complex1.sqrt1z();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sinh();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.add((-1190.26214036054));
      complex1.ONE.getArgument();
      Complex complex3 = complex2.ONE.atan();
      Complex.valueOf((-1190.26214036054));
      Complex complex4 = Complex.valueOf(0.0, (-1190.26214036054));
      Complex complex5 = Complex.valueOf((-1190.26214036054), 0.0);
      complex5.ZERO.divide(complex4);
      Complex complex6 = complex4.add((-1190.26214036054));
      complex1.getReal();
      Complex complex7 = Complex.INF;
      complex7.negate();
      complex2.tan();
      Complex complex8 = Complex.INF;
      complex8.negate();
      complex0.readResolve();
      complex3.acos();
      complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-554.2576088));
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.NaN.divide((-1680.6556));
      Complex complex5 = Complex.valueOf(1213.7244309861326, (-115.30990711));
      Complex complex6 = Complex.valueOf(1213.7244309861326, Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.ZERO;
      complex5.subtract(complex7);
      complex1.ZERO.add(complex7);
      complex7.ONE.readResolve();
      Complex complex8 = complex6.INF.subtract(1576.503779535962);
      complex2.createComplex(0.9999999999999998, (-2520.60311196733));
      complex6.add(complex3);
      complex1.equals(complex8);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.subtract((-554.2576088));
      complex2.pow(complex0);
      complex0.nthRoot(1);
      complex0.getArgument();
      Complex complex4 = complex3.subtract(20.0);
      complex4.NaN.reciprocal();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      complex0.INF.divide(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.subtract(20.0);
      complex3.ZERO.pow(complex0);
      complex0.nthRoot(518);
      complex3.getArgument();
      Complex complex4 = new Complex(0.0, (-931.91535965));
      complex4.reciprocal();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.add(2884.4953028);
      complex2.isInfinite();
      complex2.exp();
      complex4.add(0.0);
      complex6.subtract((-931.91535965));
      complex2.getImaginary();
      Complex.valueOf(2884.4953028);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(1409.439654527774, 1409.439654527774);
      Complex complex1 = complex0.ZERO.log();
      complex1.reciprocal();
      Complex complex2 = complex1.divide((-937.82));
      complex0.ZERO.add((-2.183125937905008E-8));
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.ZERO.multiply(1409.439654527774);
      complex1.sqrt();
      Complex complex5 = complex4.createComplex(1409.439654527774, 1213.7244309861326);
      complex3.abs();
      Complex complex6 = Complex.I;
      complex6.hashCode();
      complex6.sin();
      complex5.nthRoot(209);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-143.184685914));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.multiply(551);
      Complex complex3 = complex1.INF.divide((-143.184685914));
      List<Complex> list0 = complex0.nthRoot(467);
      Complex complex4 = complex0.multiply(complex1);
      complex4.I.hashCode();
      Complex complex5 = complex1.add(complex4);
      complex5.ONE.subtract((-1665.860842657));
      complex0.pow((-3399.41138));
      complex0.equals(list0);
      complex2.subtract(complex3);
      Complex.valueOf((-3399.41138));
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.INF.divide(complex2);
      complex0.conjugate();
      Complex complex3 = complex0.sin();
      complex0.pow(complex1);
      complex1.add(complex2);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.conjugate();
      complex3.nthRoot(1247);
      complex1.pow((double) 1247);
      Complex complex4 = Complex.valueOf((double) 1247, (double) 1247);
      complex4.negate();
      complex4.tan();
      Complex complex5 = complex2.negate();
      complex4.readResolve();
      complex1.acos();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.pow(20.0);
      Complex complex2 = complex1.NaN.sqrt1z();
      complex0.NaN.sin();
      Complex complex3 = complex0.NaN.multiply(complex0);
      Complex complex4 = complex0.reciprocal();
      complex4.ZERO.getArgument();
      complex4.atan();
      complex0.getField();
      Complex complex5 = complex2.reciprocal();
      complex4.acos();
      Complex complex6 = complex5.multiply(1801);
      complex6.atan();
      Complex complex7 = Complex.valueOf(2604.0226768467182);
      complex2.sqrt();
      Complex complex8 = complex1.multiply(115.30990711);
      complex3.nthRoot(1);
      complex8.getArgument();
      complex7.reciprocal();
      Complex complex9 = new Complex((-5393.88991393061));
      Complex complex10 = complex9.add(Double.NaN);
      Complex complex11 = Complex.ZERO;
      complex11.isInfinite();
      complex0.I.pow(complex11);
      Complex complex12 = complex10.exp();
      complex12.add(2604.0226768467182);
      complex7.subtract(2604.0226768467182);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.multiply(0);
      Complex complex6 = complex5.subtract(complex2);
      complex5.sqrt();
      complex6.createComplex(0, 1413.694789);
      complex2.abs();
      complex5.hashCode();
      complex3.sin();
      complex6.nthRoot(209);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-554.2576088));
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.tan();
      complex0.NaN.divide((-1680.6556));
      Complex complex4 = Complex.valueOf(1213.7244309861326, (-115.30990711));
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.add((-115.30990711));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.subtract(complex7);
      complex1.ZERO.add(complex7);
      complex4.INF.readResolve();
      Complex complex9 = (Complex)complex7.ONE.readResolve();
      complex5.INF.subtract(1576.503779535962);
      Complex complex10 = complex2.createComplex(3119.256656, (-2520.60311196733));
      complex10.NaN.add(complex6);
      complex3.equals(complex8);
      complex6.subtract(complex9);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.INF.divide(complex2);
      complex0.ONE.nthRoot(1247);
      complex1.pow(complex0);
      Complex complex4 = Complex.I;
      complex4.nthRoot(1247);
      complex2.getArgument();
      complex3.subtract((-0.9060367009005804));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.I.subtract(complex0);
      complex0.nthRoot(1498);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-607.39558219626), (-607.39558219626));
      Complex complex5 = complex4.INF.sqrt();
      complex5.I.getField();
      complex4.NaN.reciprocal();
      complex3.nthRoot(1498);
      complex0.pow((-1.943473623641502E-9));
      Complex complex6 = complex3.negate();
      complex6.tan();
      Complex complex7 = complex4.negate();
      complex1.readResolve();
      complex7.acos();
      complex5.pow(complex6);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex0.subtract(20.0);
      complex4.ZERO.pow(complex0);
      complex3.nthRoot(1);
      complex2.getArgument();
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-554.2576088));
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.tan();
      complex0.NaN.divide((-1680.6556));
      Complex complex3 = Complex.valueOf(1213.7244309861326, (-115.30990711));
      Complex complex4 = complex0.subtract(complex3);
      complex4.add((-115.30990711));
      Complex complex5 = Complex.ZERO;
      complex3.subtract(complex5);
      complex1.ZERO.add(complex5);
      complex5.ONE.readResolve();
      complex4.INF.subtract(1576.503779535962);
      complex2.createComplex(3119.256656, (-2520.60311196733));
      complex3.subtract(0.5624021291732788);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      complex1.I.subtract(complex0);
      complex0.nthRoot(1498);
      complex0.tan();
      Complex complex2 = Complex.valueOf((-607.39558219626), (-607.39558219626));
      Complex complex3 = complex2.INF.sqrt();
      complex3.I.getField();
      Complex complex4 = complex2.NaN.reciprocal();
      complex1.acos();
      Complex complex5 = Complex.ONE;
      complex1.atan();
      Complex complex6 = Complex.valueOf((-1083.0));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.add(complex2);
      complex8.readResolve();
      complex4.subtract((-1282.2947038632035));
      complex3.createComplex(1576.503779535962, 1.557407724654902);
      Complex complex9 = Complex.INF;
      complex1.equals(complex5);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-554.2576088));
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.tan();
      complex0.NaN.divide((-1680.6556));
      Complex complex3 = Complex.valueOf(1213.7244309861326, (-115.30990711));
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.add((-115.30990711));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.subtract(complex6);
      complex7.I.multiply((-1680.6556));
      complex5.multiply((-554.2576088));
      complex0.nthRoot(4995);
      complex4.getArgument();
      complex3.reciprocal();
      complex3.add((-1680.6556));
      complex6.isInfinite();
      complex0.exp();
      complex5.add((-1.0));
      complex6.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sinh();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.add((-1190.26214036054));
      complex2.INF.hashCode();
      complex1.ONE.getArgument();
      complex2.ONE.atan();
      Complex.valueOf((-1190.26214036054));
      complex1.tanh();
      double double0 = (-1.0);
      Complex complex3 = Complex.valueOf((-975.25524), (-1.0));
      double double1 = 1312.11644745;
      complex3.createComplex(1312.11644745, (-1190.26214036054));
      complex0.cosh();
      complex3.reciprocal();
      complex0.getField();
      complex0.multiply(987257480);
      Complex.valueOf((double) 987257480);
      // Undeclared exception!
      complex3.nthRoot(987257480);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      complex0.conjugate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.log();
      complex5.subtract(complex4);
      Complex complex6 = complex2.tanh();
      complex6.getArgument();
      Complex complex7 = new Complex(-0.0);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex8.atan();
      complex8.multiply(0);
      Complex complex10 = Complex.INF;
      complex4.multiply(complex10);
      complex2.createComplex((-1393.4), 1148.82425);
      complex9.sqrt1z();
      Complex complex11 = Complex.valueOf((-1393.4), (-3.064060124024764E-9));
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.ZERO.pow(20.0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex0.NaN.multiply(complex1);
      Complex complex6 = complex0.reciprocal();
      complex6.ZERO.getArgument();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.ONE.negate();
      complex6.cos();
      Complex complex9 = complex7.INF.subtract(complex1);
      complex6.isInfinite();
      Complex complex10 = Complex.I;
      complex10.conjugate();
      complex10.sin();
      complex9.pow(complex4);
      complex5.add(complex3);
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.NaN;
      int int0 = 1;
      Complex complex2 = complex1.ONE.multiply(1);
      complex0.hashCode();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.sinh();
      complex1.subtract(complex5);
      complex1.ONE.conjugate();
      complex6.ZERO.subtract((-1.0));
      complex4.tan();
      Complex complex7 = complex3.conjugate();
      complex7.I.nthRoot(1);
      Complex complex8 = complex4.tan();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex9 = complex8.createComplex(Double.POSITIVE_INFINITY, 93.09);
      complex9.I.sqrt();
      complex4.add(complex3);
//      try { 
        complex9.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.NaN.createComplex((-1.0), (-1.0));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.pow(complex1);
      complex2.I.conjugate();
      complex2.atan();
      complex1.I.abs();
      complex3.NaN.hashCode();
      complex2.acos();
      complex2.ONE.readResolve();
      complex2.getReal();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.multiply((-3636));
      complex5.NaN.cos();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.INF.conjugate();
      complex7.I.getArgument();
      complex6.ONE.cosh();
      complex4.NaN.log();
      complex6.INF.hashCode();
      complex4.getReal();
      complex1.isNaN();
      complex0.exp();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1.1793478462381443E-7);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.asin();
      complex4.ONE.toString();
      complex0.getArgument();
      complex2.sin();
      complex3.nthRoot(1);
      Complex complex5 = complex2.add(254.0764647299);
      complex5.ZERO.sqrt1z();
      complex3.isInfinite();
      complex0.multiply(complex2);
      Complex complex6 = complex4.negate();
      complex6.ONE.add((-1658.0142517984));
//      try { 
        complex3.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1409.439654527774, 1409.439654527774);
      Complex complex1 = complex0.ZERO.log();
      complex1.reciprocal();
      Complex complex2 = complex1.divide((-937.8234050719));
      complex0.ZERO.add((-2.183125937905008E-8));
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.ZERO.multiply(1409.439654527774);
      complex3.ONE.getArgument();
      Complex complex5 = complex0.reciprocal();
      complex5.atan();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-4.768909872963015E232));
      complex0.NaN.acos();
      Complex.valueOf(5.1876107490791666E-250);
      Complex complex1 = complex0.createComplex((-4.768909872963015E232), (-4.768909872963015E232));
      complex0.getReal();
      complex0.hashCode();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      complex1.I.subtract(complex0);
      complex0.nthRoot(1498);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((-607.39558219626), (-607.39558219626));
      Complex complex4 = complex3.INF.sqrt();
      complex4.I.getField();
      complex3.NaN.reciprocal();
      complex1.acos();
      Complex complex5 = complex1.multiply(1498);
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.valueOf((-1083.0));
      Complex complex8 = complex7.sqrt();
      complex7.I.multiply((-1083.0));
      complex8.NaN.nthRoot(7);
      complex6.getArgument();
      complex6.reciprocal();
      complex6.add(0.0);
      complex7.isInfinite();
      Complex complex9 = complex2.exp();
      complex9.add((double) 7);
      complex5.subtract((double) 1498);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(9.324622137237299E-90, 0.0);
      complex1.NaN.pow(complex0);
      Complex complex2 = complex1.negate();
      complex0.equals(object0);
      Complex complex3 = complex0.pow((-2122.9894));
      Complex complex4 = Complex.valueOf((-2122.9894), 5246.737);
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex4.ONE.sinh();
      Complex complex8 = complex3.divide((-2122.9894));
      complex8.ZERO.subtract(complex1);
      complex8.INF.divide(complex3);
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex4.pow(complex9);
      complex10.NaN.pow(complex2);
      Complex complex11 = complex6.tan();
      complex11.divide(complex10);
      complex3.subtract(9.324622137237299E-90);
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-43.155));
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.INF.pow(0.0);
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex3.ZERO.multiply(5346);
      Complex complex5 = complex0.cos();
      complex3.NaN.abs();
      complex0.getArgument();
      Complex complex6 = complex3.multiply((-43.155));
      complex6.ZERO.conjugate();
      complex6.ZERO.abs();
      Complex complex7 = complex5.divide(complex2);
      complex1.I.toString();
      complex6.asin();
      Complex complex8 = complex5.sinh();
      complex4.tan();
      complex5.cos();
      complex7.nthRoot(5346);
      Complex complex9 = complex8.multiply(complex4);
      complex3.atan();
      complex9.exp();
//      try { 
        complex8.nthRoot((-2694));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,694
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.exp();
      complex0.I.exp();
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.INF.pow(3443.438475797699);
//      try { 
        complex1.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sinh();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.add((-1190.26214036054));
      complex1.ONE.getArgument();
      complex2.ONE.atan();
      Complex complex3 = Complex.valueOf((-1190.26214036054));
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf((-1190.26214036054), 0.0);
      complex5.ZERO.divide(complex4);
      complex4.add((-1190.26214036054));
      complex1.getReal();
      complex0.hashCode();
      Complex complex6 = complex2.atan();
      complex3.abs();
      complex0.sin();
      complex6.multiply(1);
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex0.subtract(20.0);
      complex4.ZERO.pow(complex0);
      complex3.nthRoot(1);
      complex2.getArgument();
      complex4.subtract((-970.3));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-143.184685914));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.multiply(551);
      Complex complex3 = complex1.INF.divide((-143.184685914));
      List<Complex> list0 = complex0.nthRoot(467);
      Complex complex4 = complex0.multiply(complex1);
      complex4.I.hashCode();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex5.ONE.subtract((-1665.860842657));
      complex0.pow((-3399.41138));
      complex0.equals(list0);
      complex2.subtract(complex3);
      Complex.valueOf((-3399.41138));
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.atan();
      complex1.nthRoot(2140);
      complex0.I.getField();
      Complex complex2 = complex1.ONE.multiply(8.593554223894477E135);
      Complex complex3 = complex2.NaN.log();
      complex3.negate();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.negate();
      complex1.conjugate();
      complex5.nthRoot(2140);
      Complex complex6 = complex4.INF.asin();
      complex4.readResolve();
      complex4.tan();
      complex2.conjugate();
      Complex complex7 = complex6.acos();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-554.2576088));
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.tan();
      complex0.NaN.divide((-1680.6556));
      Complex complex4 = Complex.valueOf(1213.7244309861326, (-115.30990711));
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.add((-115.30990711));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.subtract(complex7);
      complex1.ZERO.add(complex7);
      complex7.ONE.readResolve();
      complex5.INF.subtract(1576.503779535962);
      Complex complex9 = complex2.createComplex(3119.256656, (-2520.60311196733));
      complex9.NaN.add(complex6);
      complex3.equals(complex8);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.INF.divide(complex2);
      complex0.ONE.nthRoot(1247);
      complex2.I.pow(484.45000816906);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.tan();
      complex4.INF.negate();
      complex1.readResolve();
      Complex complex5 = complex3.acos();
      complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-518.414091));
      Complex complex1 = complex0.pow(2.144047260284424);
      Complex complex2 = Complex.valueOf((-518.414091), 2.144047260284424);
      Complex complex3 = complex0.multiply(complex2);
      complex2.INF.atan();
      Complex complex4 = complex1.NaN.divide(1723.7377304978);
      complex4.hashCode();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.ZERO.sin();
      Complex complex7 = complex1.pow((-1578.3395329227));
      complex7.ONE.multiply(complex6);
      Complex complex8 = complex2.sin();
      Complex complex9 = Complex.valueOf((-518.414091));
      complex8.getArgument();
      complex5.NaN.nthRoot(958);
      complex9.toString();
      complex9.hashCode();
      Complex complex10 = complex5.reciprocal();
      complex10.ZERO.asin();
      complex2.hashCode();
      Complex complex11 = complex1.exp();
      complex4.sqrt();
      Complex complex12 = Complex.INF;
      complex11.divide(complex12);
      complex10.createComplex(2.144047260284424, Double.POSITIVE_INFINITY);
      complex11.subtract(complex0);
      Complex.valueOf(731.08130661);
      complex1.nthRoot(958);
      complex3.readResolve();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.getField();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = Complex.I;
      complex2.ONE.pow(1041.45393381306);
      Object object0 = complex1.NaN.readResolve();
      Complex complex5 = complex0.divide(complex4);
      complex5.I.createComplex(1041.45393381306, 1041.45393381306);
      Complex complex6 = Complex.valueOf(742.31055);
      Complex complex7 = complex2.cos();
      complex7.NaN.atan();
      Complex complex8 = complex2.pow(2.3318915367126465);
      Complex complex9 = complex2.sin();
      complex8.getReal();
      Complex complex10 = complex9.subtract(complex5);
      complex10.readResolve();
      Complex.valueOf(2.3318915367126465, 4.473779311490168E-38);
      Complex complex11 = complex6.pow(0.0);
      complex3.nthRoot(1);
      complex5.equals(object0);
      complex11.isInfinite();
      complex9.tanh();
      complex2.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt();
      complex0.ZERO.subtract(complex1);
      complex1.ONE.pow(0.0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.I.cosh();
      complex4.NaN.readResolve();
      complex4.ONE.add(1497.2506);
      Complex complex5 = complex0.acos();
      complex5.cosh();
      Complex complex6 = complex1.tan();
      complex6.I.abs();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex7.NaN.atan();
      complex8.I.pow(1.0);
      complex5.multiply((-2115));
      Complex complex9 = Complex.valueOf(908.64438379189, 0.0);
      Complex complex10 = complex5.multiply(1.0);
      complex10.ONE.sqrt();
      complex9.isInfinite();
      complex1.log();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.cos();
      complex0.INF.conjugate();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.valueOf((double) 1, (double) 1);
      Complex complex6 = complex4.add(complex5);
      Complex.valueOf((double) 1, 219.0);
      complex4.NaN.abs();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex7.INF.multiply(complex0);
      Complex complex9 = complex4.divide((double) 1);
      complex9.NaN.acos();
      Complex complex10 = complex2.add(complex3);
      Complex complex11 = complex1.ZERO.sqrt1z();
      complex11.NaN.subtract(0.0);
      complex10.ZERO.nthRoot(1693);
      Object object0 = complex5.readResolve();
      complex10.equals(object0);
      complex4.hashCode();
      Complex.valueOf((double) 1693);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      complex0.toString();
      Complex complex2 = complex0.sin();
      complex1.ZERO.negate();
      Complex complex3 = complex1.add(complex0);
      complex3.INF.getArgument();
      complex2.I.getField();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex5.tan();
      complex5.INF.subtract(complex1);
      Complex complex7 = complex4.ZERO.tanh();
      Complex complex8 = complex2.add(complex0);
      complex8.abs();
      complex4.abs();
      complex8.abs();
      Complex complex9 = complex4.divide(complex2);
      Complex complex10 = complex9.INF.sinh();
      complex9.ONE.subtract(complex6);
      complex2.toString();
      complex10.toString();
      complex7.tan();
      complex10.log();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getField();
      Complex complex1 = Complex.valueOf(0.0, 2.592721454922832E-15);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.INF.asin();
      complex7.NaN.divide(complex1);
      Complex complex9 = complex0.subtract(complex7);
      Complex complex10 = complex9.I.conjugate();
      complex9.isNaN();
      complex8.conjugate();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex5.sqrt();
      complex12.INF.pow((-2486.235717034));
      complex12.reciprocal();
      Complex complex13 = complex0.asin();
      Complex.valueOf(0.0);
      Complex complex14 = complex13.ZERO.multiply(0.0);
      Complex complex15 = complex13.pow(complex3);
      complex10.toString();
      complex14.sqrt1z();
      complex15.acos();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex0.INF.multiply(1614.166269);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ONE.subtract(1614.166269);
      Complex complex6 = complex0.ONE.multiply(0.0);
      complex6.INF.hashCode();
      complex1.ZERO.toString();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.NaN.tanh();
      complex8.I.tanh();
      complex7.abs();
      complex0.isNaN();
      Complex complex9 = Complex.valueOf(1614.166269);
      complex9.ZERO.divide(complex2);
      complex9.cosh();
      complex5.multiply(0);
      complex7.getArgument();
      Complex complex10 = Complex.INF;
      complex9.subtract(complex10);
      complex0.isInfinite();
      complex3.isInfinite();
      complex8.subtract(-0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = complex0.sin();
      double double0 = 596.044600873;
      complex1.ZERO.add(596.044600873);
      Complex complex2 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex2.INF.asin();
      complex3.atan();
      Complex complex4 = complex2.add(Double.NaN);
      int int0 = (-1649);
//      try { 
        complex4.ONE.nthRoot((-1649));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,649
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(625.89175609);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.multiply(complex0);
      complex1.readResolve();
      Complex complex4 = complex3.I.multiply(3552);
      Complex complex5 = complex0.multiply((-995.816));
      Complex complex6 = complex4.I.sqrt1z();
      complex6.I.add(complex5);
      complex1.isInfinite();
      complex3.cosh();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1405.726150954296);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.I.sin();
      complex2.I.sqrt();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = Complex.valueOf((double) 7);
      complex4.I.createComplex(7, 1405.726150954296);
      complex0.ONE.nthRoot(7);
      Complex complex6 = complex5.I.multiply((-20.0));
      complex6.getArgument();
      complex0.hashCode();
      Complex complex7 = complex3.log();
      complex7.ONE.add(0.0);
      Complex complex8 = complex3.NaN.acos();
      Complex complex9 = complex8.NaN.createComplex((-1.0), 658.82);
      Complex complex10 = complex5.sqrt1z();
      complex10.ONE.tanh();
      Complex complex11 = complex10.sqrt();
      complex4.getReal();
      complex4.exp();
      complex1.log();
      complex9.conjugate();
      Complex.valueOf((-21.4100424));
      complex5.multiply(7);
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.acos();
      complex0.I.getField();
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex0.NaN.sqrt1z();
      complex0.getField();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex2.log();
      Complex complex9 = complex4.createComplex(0.0, 0.0);
      Complex complex10 = Complex.valueOf((-1760.8225), 674.295);
      Complex complex11 = complex10.NaN.negate();
      Complex complex12 = complex7.I.reciprocal();
      Complex complex13 = complex12.INF.sqrt();
      complex13.I.pow((-1760.8225));
      complex11.NaN.cosh();
      Complex.valueOf(0.0);
      complex11.ONE.readResolve();
      complex8.toString();
      complex9.equals(complex7);
      complex7.abs();
      complex0.subtract(complex6);
      complex3.acos();
      complex9.readResolve();
      complex1.multiply(complex10);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 4323.36937;
      Complex complex0 = Complex.valueOf(4323.36937);
      int int0 = 0;
      Complex complex1 = complex0.INF.pow(408.2654670280367);
      complex1.I.sqrt();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex1.ZERO.multiply(complex0);
      complex0.ONE.getArgument();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.I.multiply(0);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.I.exp();
      complex5.INF.negate();
      complex0.getImaginary();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex4.createComplex(0.0, 1.0);
      complex7.ZERO.cosh();
      complex0.reciprocal();
      complex2.ONE.getField();
      Complex complex8 = complex0.ONE.multiply(0);
      Complex.valueOf((-687.36096));
      complex0.nthRoot(1373);
      complex5.hashCode();
      Complex complex9 = complex6.tanh();
      complex9.abs();
      complex0.subtract((double) 0);
      complex3.getArgument();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2188.9866474061, 2188.9866474061);
      Complex complex1 = Complex.I;
      complex0.NaN.multiply((-2656.70965614695));
      Complex complex2 = complex0.INF.multiply((-92));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex4.I.multiply(complex1);
      Complex complex6 = complex3.NaN.divide(2188.9866474061);
      complex6.NaN.add(complex5);
      complex3.abs();
      complex3.hashCode();
      complex0.equals(complex3);
      complex1.isNaN();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5018.71012, 5018.71012);
      complex0.negate();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.subtract(0.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.pow(0.5278670787811279);
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.ZERO;
      complex3.ONE.tanh();
      complex0.ZERO.divide(complex4);
      Complex complex5 = complex3.ZERO.sqrt1z();
      complex3.ONE.createComplex(0.0, 1423.82);
      complex3.I.createComplex(0.5278670787811279, 7.868666894503849E-163);
      complex5.sin();
      complex1.getReal();
      complex2.sinh();
      complex3.hashCode();
      Complex.valueOf(1.7650169203544438E51);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.ZERO.pow(20.0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex0.NaN.multiply(complex1);
      Complex complex6 = complex0.reciprocal();
      complex6.ZERO.getArgument();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex6.cos();
      complex7.INF.subtract(complex1);
      complex6.isInfinite();
      complex0.ZERO.conjugate();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.log();
      Complex complex12 = complex10.NaN.subtract(complex5);
      complex11.tanh();
      assertTrue(complex11.isInfinite());
      
      complex10.getArgument();
      Complex complex13 = complex0.tanh();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex5.negate();
      Complex complex14 = complex0.atan();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex3.multiply(0);
      Complex complex16 = complex2.multiply(complex4);
      complex16.I.createComplex(0.0, (-653.752598));
      assertTrue(complex2.equals((Object)complex9));
      
      Complex complex17 = complex8.sqrt1z();
      assertSame(complex7, complex15);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertSame(complex6, complex4);
      assertTrue(complex17.equals((Object)complex14));
      
      complex12.exp();
      assertTrue(complex10.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex17));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex((-1133.7225239894), 1.0);
      String string0 = complex0.toString();
      assertEquals("(-1133.7225239894, 1.0)", string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.negate();
      complex5.sqrt();
      Complex complex8 = complex6.multiply(complex5);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex8.equals((Object)complex7));
      
      Complex complex9 = complex3.multiply(0.0);
      assertSame(complex9, complex2);
      
      Complex complex10 = complex4.sinh();
      assertTrue(complex4.equals((Object)complex5));
      assertEquals(0.0, complex10.getImaginary(), 0.01);
  }
}
