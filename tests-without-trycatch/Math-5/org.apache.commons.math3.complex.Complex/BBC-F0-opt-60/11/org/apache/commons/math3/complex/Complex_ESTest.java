/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:31:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, 6014.0);
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 6014.0);
      complex1.I.reciprocal();
      complex1.nthRoot(947);
      Complex complex2 = complex1.sqrt();
      complex2.createComplex((-1459.5116409), 1.1309373378753662);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.cosh();
      complex3.getArgument();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex0.log();
      complex1.subtract(complex5);
      complex1.toString();
      Complex complex7 = complex5.negate();
      complex7.isInfinite();
      complex2.acos();
      complex4.conjugate();
      complex2.divide(complex6);
      Complex complex8 = Complex.ONE;
      complex5.toString();
      Complex complex9 = Complex.valueOf((-20.0), (-1.0));
      complex9.tanh();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-627.74185278977), 20.0);
      Complex complex1 = complex0.asin();
      complex1.toString();
      complex0.tanh();
      complex0.reciprocal();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1735.27128836772, 1.6911191940307617);
      complex0.getField();
      Complex complex1 = complex0.ONE.log();
      Complex.valueOf(1830.458944);
      complex1.ONE.acos();
      Complex complex2 = Complex.ONE;
      complex2.NaN.abs();
      Complex complex3 = Complex.valueOf(1735.27128836772);
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0850715739509136E-225, 1.0850715739509136E-225);
      Complex complex1 = new Complex(1.0850715739509136E-225, (-5.004237248003625E181));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.pow(complex3);
      complex4.NaN.subtract(complex1);
      complex4.abs();
      complex1.getField();
      Complex complex5 = complex1.sqrt1z();
      complex5.INF.add(complex2);
      complex0.log();
      complex1.readResolve();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1735.27128836772, 1.6911191940307617);
      complex0.getField();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.valueOf(1830.458944);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = Complex.ONE;
      complex4.NaN.abs();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = new Complex((-845.45382427));
      Complex complex7 = Complex.ONE;
      complex6.add(complex7);
      complex2.multiply(complex0);
      Complex complex8 = Complex.I;
      complex8.log();
      complex1.abs();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex3.acos();
      complex0.divide(Double.NaN);
      Complex complex13 = Complex.ZERO;
      complex13.hashCode();
      complex7.reciprocal();
      complex10.reciprocal();
      complex5.toString();
      complex12.sqrt1z();
      complex7.subtract(219.4000000000001);
      Complex.valueOf(6.283185307179586);
      complex8.acos();
      complex9.asin();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1735.27128836772, 1.6911191940307617);
      complex0.getField();
      Complex complex1 = complex0.ONE.log();
      Complex.valueOf(1830.458944);
      complex1.ONE.acos();
      Complex complex2 = Complex.ONE;
      complex2.NaN.abs();
      Complex complex3 = Complex.valueOf(1735.27128836772);
      complex0.add(complex2);
      Complex complex4 = complex3.multiply(complex0);
      complex0.I.abs();
      Complex complex5 = complex0.tanh();
      complex4.sin();
      complex5.cosh();
      complex3.acos();
      complex5.INF.hashCode();
      Complex complex6 = complex4.reciprocal();
      complex5.multiply(1830.458944);
//      try { 
        complex6.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = Complex.valueOf(3663395.0);
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.ONE;
      complex2.abs();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.add(complex4);
      complex7.multiply(complex4);
      Complex complex8 = complex0.log();
      complex1.abs();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex3.sin();
      complex7.cosh();
      complex4.acos();
      Complex complex11 = complex8.divide(Double.POSITIVE_INFINITY);
      complex6.hashCode();
      Complex complex12 = complex9.reciprocal();
      complex10.reciprocal();
      complex11.toString();
      complex8.sqrt1z();
      complex4.subtract(0.0);
      Complex.valueOf((-126.2759223));
      complex12.acos();
      complex0.asin();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1914.0));
      Complex complex1 = complex0.subtract((-2133.4));
      Complex complex2 = complex1.NaN.multiply(0);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex1.ONE.cosh();
      complex1.add((-2133.4));
      Complex complex5 = complex2.negate();
      complex5.I.reciprocal();
      complex5.I.atan();
      complex5.ZERO.multiply(0);
      Complex complex6 = complex4.NaN.divide(0.0013261463322972434);
      complex6.toString();
      complex1.I.getArgument();
      Complex complex7 = complex1.pow((-734.587));
      complex7.I.getArgument();
      complex0.acos();
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.cos();
      complex8.ZERO.abs();
      complex1.atan();
      complex1.readResolve();
      Complex.valueOf((-734.587), 2943.577048061379);
      complex3.multiply(1.2852799892425537);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sin();
      double double0 = 3252.085112998474;
      complex2.ZERO.divide(3252.085112998474);
      Complex complex3 = complex2.sqrt1z();
      complex3.I.getArgument();
      Complex complex4 = Complex.I;
      complex1.NaN.divide(complex4);
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex1.divide(complex4);
      double double1 = Double.NaN;
      Complex complex7 = complex6.pow(Double.NaN);
      complex7.INF.abs();
      double double2 = (-57.1);
      complex1.ZERO.reciprocal();
      complex7.INF.pow((-57.1));
      Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
//      try { 
        complex5.nthRoot((-799624807));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -799,624,807
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.5229914366077327);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex(0.5229914366077327, 0.5229914366077327);
      Complex complex4 = complex3.cosh();
      complex4.getArgument();
      Complex complex5 = complex3.exp();
      complex3.log();
      Complex complex6 = complex1.subtract(complex5);
      complex2.toString();
      complex0.negate();
      Complex complex7 = new Complex(0.5229914366077327, Double.NaN);
      complex7.isInfinite();
      complex6.acos();
      Complex complex8 = complex6.conjugate();
      complex8.divide(complex4);
      Complex complex9 = complex7.reciprocal();
      complex9.toString();
      Complex complex10 = complex8.tanh();
      complex10.ZERO.reciprocal();
      complex2.tan();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex.valueOf(959.150898317549);
      Complex complex0 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex1 = Complex.valueOf(995.7963335660129, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((double) 1077);
      Complex complex3 = (Complex)complex1.readResolve();
      complex0.conjugate();
      complex2.toString();
      Complex complex4 = Complex.I;
      complex1.negate();
      complex3.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex complex1 = Complex.valueOf(7205407.570037212, 959.150898317549);
      Complex complex2 = complex0.createComplex(6.283185307179586, (-20.0));
      complex0.nthRoot(1);
      Complex complex3 = Complex.ONE;
      complex1.getField();
      Complex complex4 = complex2.subtract(3736.29);
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.ONE;
      complex6.conjugate();
      Complex complex7 = complex2.tan();
      complex6.subtract(0.0);
      complex7.reciprocal();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex.valueOf(959.150898317549);
      Complex complex0 = Complex.valueOf(3.8072183820435085E293, (-2666.8645234696));
      Complex.valueOf(0.0);
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      complex0.toString();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.I;
      complex4.conjugate();
      complex3.getField();
      complex2.add((double) 1077);
      complex4.subtract(5.724180836308973E-124);
      complex2.asin();
      Complex complex5 = complex0.reciprocal();
      complex5.toString();
      Complex complex6 = new Complex(6.283185307179586);
      Complex complex7 = complex6.tanh();
      complex7.reciprocal();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(1645.360712985241);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 1645.360712985241);
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex1.cosh();
      complex6.getArgument();
      Complex complex8 = complex6.tan();
      complex5.exp();
      Complex complex9 = Complex.ZERO;
      complex9.log();
      Complex complex10 = complex1.subtract(complex7);
      complex3.toString();
      complex0.negate();
      complex8.isInfinite();
      complex10.acos();
      complex4.conjugate();
      complex6.divide(complex2);
      complex9.reciprocal();
      complex4.toString();
      complex0.tanh();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.divide(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      complex3.readResolve();
      complex4.conjugate();
      complex2.toString();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.negate();
      complex6.isInfinite();
      Complex complex7 = complex6.acos();
      complex7.conjugate();
      Complex complex8 = complex4.divide(complex6);
      complex5.readResolve();
      complex8.negate();
      complex1.hashCode();
      complex0.nthRoot(568);
      Complex.valueOf(0.0);
      complex0.toString();
      Complex complex9 = new Complex(0.0, 568);
      complex6.equals(complex2);
      Complex complex10 = new Complex(2.789468100949932E-10, (-1577.88521110096));
      Complex complex11 = Complex.NaN;
      complex11.reciprocal();
      Complex complex12 = Complex.INF;
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide(2.453117120472083E-9);
      Complex complex2 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex.valueOf(2.453117120472083E-9);
      complex2.I.readResolve();
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex3.ONE.conjugate();
      complex4.INF.getField();
      complex4.ZERO.negate();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex complex1 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex2 = Complex.valueOf(994.579686066, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.cosh();
      complex4.getArgument();
      Complex complex5 = complex2.tan();
      complex1.exp();
      Complex complex6 = complex3.log();
      complex6.subtract(complex5);
      complex1.toString();
      complex1.isInfinite();
      complex4.negate();
      complex5.isInfinite();
      Complex complex7 = Complex.valueOf((-2.176456945360728));
      complex7.acos();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex3.divide(complex6);
      complex8.reciprocal();
      complex9.toString();
      Complex complex10 = new Complex(959.150898317549);
      complex10.tanh();
      complex9.reciprocal();
      Complex complex11 = Complex.ONE;
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex complex1 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex2 = Complex.valueOf(994.579686066, Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex3 = complex1.multiply(complex2);
      complex0.conjugate();
      complex3.toString();
      Complex complex4 = Complex.NaN;
      complex4.isInfinite();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.negate();
      complex6.isInfinite();
      Complex complex7 = complex1.conjugate();
      complex7.divide(complex0);
      complex6.readResolve();
      complex0.negate();
      Complex complex8 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex8.hashCode();
      complex0.nthRoot(1077);
      Complex.valueOf((-648.1772326));
      complex7.toString();
      complex4.equals(complex3);
      complex7.reciprocal();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex complex1 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex2 = Complex.valueOf(994.579686066, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((double) 1077);
      Complex complex4 = (Complex)complex2.readResolve();
      Complex complex5 = complex1.conjugate();
      complex3.toString();
      complex5.isInfinite();
      complex0.negate();
      complex3.isInfinite();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = new Complex(959.150898317549, 1077);
      complex4.divide(complex5);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex1.toString();
      complex7.tanh();
      complex3.reciprocal();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex.valueOf(959.150898317549);
      Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex0 = Complex.valueOf(994.579686066, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(1434.20837, 6.283185307179586);
      complex1.nthRoot(2603);
      Complex complex2 = Complex.ONE;
      complex2.getField();
      complex0.add(959.150898317549);
      complex0.abs();
      complex0.multiply((-26));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.valueOf(0.0, 0.6430866718292236);
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      complex0.nthRoot(1135);
      Complex complex3 = Complex.ONE;
      complex1.getField();
      complex1.add(1.4909508228302002);
      Complex complex4 = complex1.subtract(2718.0);
      complex4.asin();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = new Complex(Double.NaN, (-147.650885811826));
      Complex complex7 = complex6.reciprocal();
      complex7.toString();
      complex0.tanh();
      complex7.reciprocal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 54.5107662154994);
      Complex complex1 = Complex.valueOf((-926.0), 54.5107662154994);
      Complex complex2 = complex0.createComplex(54.5107662154994, 2.0);
      Complex complex3 = complex1.cosh();
      complex2.getArgument();
      complex2.ONE.negate();
      complex1.tan();
      Complex complex4 = complex1.exp();
      complex4.ZERO.cos();
      Complex complex5 = complex3.log();
      complex3.subtract(complex5);
      Complex complex6 = new Complex((-869.46209), (-696.8582204));
      complex6.toString();
      complex2.isNaN();
      Complex complex7 = complex1.negate();
      complex3.isInfinite();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex1.conjugate();
      Complex.valueOf((-926.0));
      Complex complex10 = complex2.divide(complex1);
      Complex complex11 = complex8.reciprocal();
      complex9.toString();
      complex11.tanh();
      complex10.reciprocal();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex.valueOf(959.150898317549);
      Complex complex0 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex1 = Complex.valueOf(994.579686066, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.createComplex(1434.20837, 6.283185307179586);
      complex2.nthRoot(2603);
      Complex complex3 = Complex.ONE;
      complex3.getField();
      Complex complex4 = complex1.add(959.150898317549);
      Complex complex5 = complex4.subtract(959.150898317549);
      Complex complex6 = complex5.asin();
      complex4.conjugate();
      complex1.tan();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.subtract((double) 2603);
      complex7.reciprocal();
      complex8.reciprocal();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1.6149279479975042E-9));
      complex0.ONE.negate();
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(2364.003, 2118.646252);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 229.3627);
      complex1.nthRoot(1135);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ZERO;
      complex3.getField();
      Complex complex4 = complex2.add((-133.0));
      Complex complex5 = complex1.subtract(1.4909508228302002);
      Complex complex6 = Complex.INF;
      complex6.asin();
      complex2.conjugate();
      complex6.tan();
      complex4.negate();
      complex0.subtract(1693.0);
      complex2.reciprocal();
      complex1.reciprocal();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex complex1 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex2 = Complex.valueOf(994.579686066, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((double) 1077);
      complex2.readResolve();
      Complex complex4 = complex3.multiply(complex0);
      complex1.conjugate();
      complex3.toString();
      Complex complex5 = Complex.valueOf(2.1782039447564253E47);
      complex5.isInfinite();
      complex2.negate();
      complex0.isInfinite();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex3.conjugate();
      complex5.divide(complex2);
      complex7.readResolve();
      complex5.negate();
      complex4.hashCode();
      complex0.nthRoot(1077);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.toString();
      Complex complex8 = new Complex(0.5844172239303589, 2036.3);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 2036.3);
      complex9.equals(complex6);
      Complex complex10 = new Complex((-849.148), 6.283185307179586);
      Complex complex11 = Complex.INF;
      complex11.add(complex10);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2.414213562373095);
      Complex complex2 = complex0.atan();
      Complex complex3 = new Complex((-4.3307634616102625E-8));
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = Complex.valueOf(2.414213562373095, (-4.3307634616102625E-8));
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.ZERO;
      complex6.INF.divide(complex1);
      complex7.abs();
      complex6.conjugate();
      complex4.tan();
      complex4.getArgument();
      complex4.createComplex(176.8603317827777, (-1.0));
      Complex complex8 = complex3.log();
      Complex complex9 = complex1.divide(complex7);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.sin();
      Complex complex12 = complex9.multiply(771);
      Complex complex13 = Complex.valueOf((double) 771, 176.8603317827777);
      Complex complex14 = complex13.pow(complex11);
      complex5.pow((-364.981755876257));
      complex8.getReal();
      Complex complex15 = complex10.reciprocal();
      complex3.toString();
      complex9.tanh();
      complex2.add((-244.9115218232));
      complex15.reciprocal();
      Complex complex16 = complex14.tan();
      complex12.getArgument();
      complex11.tanh();
      complex16.sinh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 54.5107662154994);
      Complex complex1 = Complex.valueOf((-926.0), 54.5107662154994);
      Complex complex2 = complex0.createComplex(54.5107662154994, 2.0);
      complex1.hashCode();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.ONE;
      complex6.getField();
      complex4.cos();
      Complex complex7 = complex2.sqrt1z();
      complex3.pow(complex0);
      complex5.tanh();
      Complex complex8 = new Complex((-926.0));
      complex0.reciprocal();
      complex5.add(2718.0);
      Complex complex9 = complex7.sqrt();
      complex9.ONE.pow(complex6);
      Complex complex10 = Complex.INF;
      complex1.exp();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.tanh();
      complex12.sqrt1z();
      complex8.tanh();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-1138.74646251927), (-1377.0));
      Complex complex4 = complex2.divide((-927.1602193));
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = Complex.I;
      complex4.add(complex6);
      Complex complex7 = complex4.multiply(complex1);
      Complex complex8 = complex1.cosh();
      complex8.getArgument();
      complex0.tan();
      complex7.exp();
      Complex complex9 = complex6.log();
      Complex complex10 = complex5.subtract(complex3);
      complex3.toString();
      complex5.isInfinite();
      complex9.negate();
      complex1.isInfinite();
      Complex complex11 = Complex.NaN;
      complex11.acos();
      complex4.conjugate();
      Complex complex12 = complex10.divide(complex1);
      Complex complex13 = complex12.reciprocal();
      complex3.toString();
      complex0.tanh();
      complex13.reciprocal();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      Complex complex2 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex complex3 = Complex.valueOf((-1262.5233));
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex4.ONE.conjugate();
      complex1.toString();
      complex1.isInfinite();
      complex3.negate();
      complex4.isInfinite();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex2.conjugate();
      complex5.divide(complex1);
      complex6.readResolve();
      Complex complex8 = complex0.negate();
      complex1.hashCode();
      complex7.nthRoot(1077);
      Complex.valueOf(19.733502648321966);
      complex1.toString();
      Complex complex9 = new Complex(614.5102816, (-1262.5233));
      Object object1 = complex8.readResolve();
      object0.equals(object1);
      Complex complex10 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.valueOf(0.0, 0.6430866718292236);
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      complex0.nthRoot(1135);
      Complex complex3 = Complex.ONE;
      complex1.getField();
      Complex complex4 = complex1.add(1.4909508228302002);
      Complex complex5 = complex1.subtract(2718.0);
      complex5.asin();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex2.cos();
      complex4.subtract(0.0);
      Complex complex10 = Complex.INF;
      complex10.subtract((double) 1135);
      complex8.sinh();
      Complex.valueOf(0.6430866718292236, 20.0);
      complex9.multiply(1262.5233);
      complex9.readResolve();
      int int0 = (-3043);
//      try { 
        complex7.nthRoot((-3043));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,043
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = 959.150898317549;
      Complex complex0 = Complex.valueOf(959.150898317549);
      double double1 = 6.283185307179586;
      Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex1 = Complex.ONE;
      complex1.INF.multiply(2764.935646609);
      Complex complex2 = complex1.NaN.atan();
      complex0.divide(complex1);
//      try { 
        complex2.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-799.431879), 1046.6);
      complex0.subtract(1046.6);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-92.04));
      complex0.multiply(140);
      Complex.valueOf(5.251554594269693E-10);
      complex0.ONE.exp();
      complex0.abs();
      complex0.readResolve();
      complex0.multiply(140);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      Complex complex2 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex complex3 = Complex.valueOf((-1262.5233));
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex4.ONE.conjugate();
      complex1.toString();
      complex1.isInfinite();
      complex3.negate();
      complex4.isInfinite();
      Complex complex6 = complex3.acos();
      complex2.conjugate();
      Complex complex7 = complex5.divide(complex1);
      complex6.readResolve();
      Complex complex8 = complex0.negate();
      complex1.hashCode();
      complex1.nthRoot(1);
      Complex complex9 = Complex.valueOf(2.453117120472083E-9);
      complex9.toString();
      Complex complex10 = new Complex(614.5102816, 1077);
      complex8.equals(object0);
      Complex complex11 = new Complex(2.453117120472083E-9, (-434.666088));
      complex7.add(complex11);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.valueOf(0.0, 0.6430866718292236);
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.I.reciprocal();
      Complex.valueOf(7.14086761642476, (-1445.7747978));
      complex2.getReal();
      Complex complex4 = complex3.atan();
      complex1.sqrt();
      Complex.valueOf(8.217889857132832);
      complex0.add(3.4861525114107774);
      complex4.getArgument();
      Complex complex5 = complex1.cosh();
      complex1.atan();
      complex5.divide(2718.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.atan();
      complex0.toString();
      Complex complex2 = complex0.multiply(2606);
      complex1.getArgument();
      Complex complex3 = complex2.negate();
      complex1.getReal();
      complex1.pow((-3782.891664939686));
      Complex.valueOf((-1.0));
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 54.5107662154994);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.divide(54.5107662154994);
      complex0.I.subtract(complex3);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.INF.add(complex4);
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = complex6.ONE.cosh();
      complex6.getArgument();
      complex6.ONE.tan();
      Complex complex8 = complex5.ONE.exp();
      Complex complex9 = complex0.ZERO.log();
      complex8.ONE.subtract(complex4);
      complex7.ZERO.toString();
      complex0.isInfinite();
      complex4.negate();
      complex4.isInfinite();
      complex4.acos();
      Complex complex10 = complex5.conjugate();
      complex10.INF.divide(complex8);
      complex6.reciprocal();
      complex10.toString();
      complex9.tanh();
      complex6.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.divide((-1262.5233));
      Complex complex1 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex complex2 = Complex.valueOf((-1262.5233));
      Complex complex3 = (Complex)complex1.I.readResolve();
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex4.ONE.conjugate();
      complex5.INF.getField();
      complex5.ZERO.negate();
      Complex complex6 = complex2.pow(complex3);
      complex6.pow((double) 1077);
      complex6.getReal();
      complex3.readResolve();
      Complex complex7 = complex5.negate();
      complex0.hashCode();
      Complex complex8 = Complex.ONE;
      complex8.nthRoot(768);
      complex7.toString();
      Complex complex9 = new Complex(768, (-1133.71603745));
      complex8.equals("(-1.0, 0.0)");
      complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.INF.toString();
      complex0.abs();
      complex0.readResolve();
      Complex complex2 = Complex.NaN;
      complex2.multiply(complex0);
      Complex complex3 = complex1.conjugate();
      complex3.getField();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.pow(complex1);
      complex3.pow(Double.NaN);
      complex2.reciprocal();
      complex5.I.exp();
      complex0.toString();
      complex2.tanh();
      complex4.reciprocal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = (Complex)complex1.readResolve();
      Complex complex6 = complex2.ONE.subtract(4919.0);
      complex6.I.sqrt();
      Complex complex7 = complex0.NaN.pow(complex1);
      Complex complex8 = complex1.divide(complex2);
      Complex.valueOf(2116.874407);
      complex3.I.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(4919.0, Double.POSITIVE_INFINITY);
      complex2.sin();
      complex7.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex1.getArgument();
      Complex complex10 = complex4.acos();
      complex2.tanh();
      Complex complex11 = new Complex(4919.0);
      complex8.ZERO.reciprocal();
      complex11.add(1918.3023179069955);
      complex5.sqrt();
      complex8.exp();
      complex10.tanh();
      Complex complex12 = Complex.valueOf((-122.99381589963346), 0.26373106494024423);
      complex12.pow((-1.0));
      Complex complex13 = Complex.ONE;
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 54.5107662154994);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.divide(54.5107662154994);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.INF.add(complex4);
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = complex6.ONE.cosh();
      complex6.getArgument();
      Complex complex8 = complex6.ONE.tan();
      complex0.ZERO.log();
      complex6.ONE.subtract(complex4);
      complex7.ZERO.toString();
      complex0.isInfinite();
      complex4.negate();
      complex4.isInfinite();
      complex4.acos();
      Complex complex9 = complex5.conjugate();
      complex9.ZERO.subtract(1916.93408928);
      complex9.INF.divide(complex1);
      complex5.readResolve();
      Complex complex10 = complex1.negate();
      complex10.INF.negate();
      complex8.hashCode();
      complex5.nthRoot(1);
      complex1.toString();
      Complex complex11 = new Complex(0.0, 614.5102816);
      complex5.equals(complex11);
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.686613082885742);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.sin();
      Complex complex3 = new Complex(0.0, 2.686613082885742);
      Complex complex4 = complex3.reciprocal();
      complex3.subtract(complex0);
      complex1.getArgument();
      Complex complex5 = complex3.acos();
      complex4.tanh();
      Complex complex6 = new Complex(1.1951816781959388);
      complex5.reciprocal();
      complex0.add((-3297.57829570343));
      complex0.sqrt();
      complex1.exp();
      complex6.tanh();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex7.tanh();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      complex3.I.multiply(complex1);
      complex1.readResolve();
      Complex complex4 = complex2.ONE.subtract(4919.0);
      complex4.I.sqrt();
      complex0.NaN.pow(complex1);
      complex1.divide(complex2);
      Complex complex5 = Complex.valueOf(2116.874407);
      complex5.tan();
      complex4.getField();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.cos();
      Complex complex7 = complex6.reciprocal();
      complex7.createComplex(815.6890903, 3.4861525114107774);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      complex3.I.multiply(complex1);
      complex1.readResolve();
      Complex complex4 = complex2.ONE.subtract(4919.0);
      complex4.I.sqrt();
      complex0.NaN.pow(complex1);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = Complex.valueOf(2116.874407);
      Complex complex7 = complex6.tan();
      complex5.toString();
      complex6.add(complex7);
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(4548.254705, (-1.0));
      complex0.atan();
      Complex complex1 = complex0.sin();
      complex1.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      complex2.getArgument();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex(3.1415580322943994);
      complex2.reciprocal();
      complex2.add((-805.0));
      complex0.sqrt();
      complex1.exp();
      complex3.tanh();
      complex3.sqrt1z();
      complex4.tanh();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      Complex complex3 = Complex.I;
      complex2.readResolve();
      Complex complex4 = complex2.multiply(complex0);
      complex0.conjugate();
      complex1.getField();
      Complex complex5 = complex2.negate();
      complex5.pow(complex2);
      complex1.pow(1.2019307065458128E277);
      complex0.getReal();
      complex4.reciprocal();
      complex1.toString();
      complex3.tanh();
      complex0.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex complex1 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.multiply(2764.935646609);
      Complex complex4 = complex2.NaN.atan();
      complex0.divide(complex2);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = Complex.valueOf(959.150898317549, 2764.935646609);
      Complex complex7 = complex2.sqrt1z();
      complex7.I.abs();
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex8.tan();
      complex3.NaN.getArgument();
      Complex complex10 = complex4.createComplex(2764.935646609, 2764.935646609);
      complex2.log();
      complex2.divide(complex5);
      complex10.NaN.sin();
      complex6.ONE.multiply(771);
      Complex complex11 = complex7.pow(complex1);
      complex11.pow(2764.935646609);
      complex7.getReal();
      complex7.reciprocal();
      complex11.toString();
      Complex complex12 = complex7.tanh();
      complex12.add(Double.NaN);
      complex2.reciprocal();
      complex6.tan();
      complex9.subtract(959.150898317549);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.divide((-1262.5233));
      Complex complex1 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex complex2 = Complex.valueOf((-1262.5233));
      Complex complex3 = (Complex)complex1.I.readResolve();
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = Complex.valueOf((-1262.5233));
      complex4.getField();
      complex4.negate();
      Complex complex6 = Complex.valueOf(1123.286, (double) 1077);
      Complex complex7 = complex3.pow(complex6);
      complex2.pow((-1262.5233));
      complex5.getReal();
      complex6.reciprocal();
      complex7.toString();
      complex5.tanh();
      complex1.reciprocal();
      complex1.tan();
      Complex.valueOf(6.257216813084462E103, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex complex1 = Complex.valueOf((-1262.5233));
      Complex complex2 = (Complex)complex0.I.readResolve();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = new Complex(2423.3286, (-2610.12));
      complex4.negate();
      complex3.pow(5310.38640571568);
      complex1.getReal();
      complex0.toString();
      complex3.tanh();
      Complex complex5 = Complex.valueOf(5310.38640571568);
      complex5.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.valueOf(0.0, 0.6430866718292236);
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.I.reciprocal();
      complex3.INF.subtract(complex0);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex4.INF.tan();
      complex1.I.getField();
      Complex complex6 = complex2.cos();
      complex6.NaN.sqrt1z();
      complex0.pow(complex2);
      complex4.tanh();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.reciprocal();
      complex8.add(Double.POSITIVE_INFINITY);
      complex8.sqrt();
      Complex complex9 = Complex.INF;
      complex9.exp();
      complex9.tanh();
      complex7.sqrt1z();
      complex2.tanh();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1.7670931816101074, 1.7670931816101074);
      Complex complex1 = complex0.NaN.subtract(1.7670931816101074);
      Complex complex2 = complex1.I.acos();
      complex0.isNaN();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.INF.divide(1655.7);
      complex5.INF.toString();
      complex4.atan();
      Complex complex6 = complex4.cos();
      complex6.readResolve();
      complex3.multiply(complex2);
      complex4.conjugate();
      complex6.getField();
      Complex complex7 = new Complex(1655.7, 0.5932556009542901);
      complex7.negate();
      complex2.getReal();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex1.add((-2.8742587656021775E-215));
      complex9.getArgument();
      complex5.cosh();
      complex0.atan();
      Complex complex11 = complex10.pow(complex5);
      complex11.divide(2916.9878772053094);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex complex4 = complex3.ONE.multiply(1077);
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = new Complex((-483.2996579718212), 432.0816);
      complex6.getField();
      Complex complex7 = complex2.multiply(2.691069481157875E-6);
      Complex complex8 = complex4.negate();
      complex0.tanh();
      Complex complex9 = complex8.divide(complex7);
      complex9.sqrt1z();
      complex5.getField();
      Complex complex10 = complex3.createComplex(432.0816, 1077);
      complex4.tan();
      complex1.tan();
      complex10.getField();
      complex8.multiply(2228);
      complex0.cos();
      Complex complex11 = complex9.add(693.0);
      Complex.valueOf(0.0);
      complex11.divide(complex1);
      complex6.multiply(2228);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      complex1.INF.multiply(complex0);
      Complex complex2 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      complex2.ONE.multiply(1077);
      Complex complex3 = (Complex)complex2.I.readResolve();
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex4.ONE.conjugate();
      complex5.INF.getField();
      complex5.ZERO.negate();
      complex0.getReal();
      complex0.ZERO.atan();
      Complex complex6 = complex0.sqrt();
      complex6.NaN.add((-1262.5233));
      complex0.NaN.getArgument();
      complex2.cosh();
      Complex complex7 = new Complex((-805.0));
      complex2.add((-1008.2366));
      complex5.reciprocal();
      complex3.tan();
      complex1.asin();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.valueOf((-1262.5233), 0.6430866718292236);
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex3.NaN.exp();
      complex1.multiply((-662));
      complex0.toString();
      Complex complex6 = complex5.cos();
      complex4.cosh();
      complex6.ONE.getArgument();
      complex3.add((-1262.5233));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      complex3.ONE.multiply(1077);
      complex3.I.readResolve();
      Complex complex4 = complex0.I.multiply(complex3);
      complex4.ONE.conjugate();
      Complex complex5 = complex3.multiply((-1097));
      Complex complex6 = Complex.ZERO;
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.multiply(complex1);
      complex1.readResolve();
      Complex complex5 = complex2.ONE.subtract(4919.0);
      complex0.NaN.pow(complex1);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.divide(complex0);
      Complex.valueOf(1.0);
      Complex complex8 = complex4.tan();
      complex4.sin();
      Complex complex9 = Complex.INF;
      complex9.reciprocal();
      Complex complex10 = complex7.subtract(complex5);
      complex10.getArgument();
      Complex.valueOf(4919.0);
      complex7.tanh();
      Complex complex11 = complex9.add(2116.874407);
      complex5.sqrt();
      Complex complex12 = Complex.valueOf(2.0, 1046.499436394);
      complex12.exp();
      complex5.tanh();
      complex11.sqrt1z();
      Complex complex13 = Complex.ZERO;
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      complex3.ONE.multiply(1077);
      Complex complex4 = (Complex)complex3.I.readResolve();
      Complex complex5 = complex0.I.multiply(complex3);
      Complex complex6 = complex5.ONE.conjugate();
      complex6.INF.getField();
      complex6.ZERO.negate();
      complex0.getReal();
      Complex complex7 = complex1.acos();
      complex0.tanh();
      Complex complex8 = Complex.INF;
      complex8.add((-3943.96661));
      complex7.sqrt();
      complex6.exp();
      complex2.tanh();
      complex4.sqrt1z();
      Complex complex9 = new Complex(2972.464200704);
      Complex complex10 = complex9.tanh();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.INF.toString();
      complex0.abs();
      Complex complex2 = Complex.ZERO;
      complex2.getField();
      Complex complex3 = Complex.valueOf(2839.7090537671, (-1226.0));
      complex3.add((-1221.20636));
      Complex complex4 = complex1.subtract((-1221.20636));
      Complex complex5 = complex0.asin();
      complex4.conjugate();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex8.subtract(0.0);
      Complex complex10 = complex5.subtract(1474.9041791);
      complex10.sinh();
      Complex complex11 = complex9.multiply(4.737693450915584E247);
      complex11.readResolve();
      complex2.nthRoot(35);
      complex5.readResolve();
      complex4.sinh();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(1.7670931816101074, 1.7670931816101074);
      Complex complex1 = complex0.NaN.subtract(1.7670931816101074);
      Complex complex2 = complex1.I.acos();
      complex0.isNaN();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.INF.divide(1655.7);
      complex5.INF.toString();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.multiply(complex6);
      complex3.ONE.getField();
      Complex complex9 = complex0.INF.multiply(0.0);
      complex7.NaN.negate();
      complex1.tanh();
      Complex complex10 = complex3.divide(complex2);
      complex10.I.sqrt1z();
      complex10.NaN.getField();
      Complex complex11 = complex9.createComplex(0.11517547070980072, 1.7670931816101074);
      Complex complex12 = complex3.tan();
      complex12.INF.tan();
      complex12.ONE.getField();
      complex3.multiply(2228);
      complex7.cos();
      complex8.add(0.0);
      Complex.valueOf(0.11517547070980072);
      complex8.divide(complex2);
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.valueOf(0.0, 0.6430866718292236);
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.I.reciprocal();
      complex3.INF.subtract(complex0);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex4.INF.tan();
      complex1.I.getField();
      complex1.INF.getArgument();
      Complex complex6 = complex2.cos();
      complex6.NaN.sqrt1z();
      complex4.getReal();
      complex1.atan();
      Complex complex7 = complex3.sqrt();
      complex7.I.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex8.add(0.6430866718292236);
      complex0.getArgument();
      Complex complex9 = Complex.NaN;
      complex9.cosh();
      Complex complex10 = Complex.ZERO;
      complex10.atan();
      complex5.pow(complex2);
      Complex complex11 = new Complex(277.50748781099);
      complex11.divide((-420.34));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      complex1.INF.multiply(complex0);
      Complex complex2 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      Complex complex3 = Complex.valueOf((-1262.5233));
      Complex complex4 = (Complex)complex2.I.readResolve();
      Complex complex5 = complex0.I.multiply(complex2);
      Complex complex6 = complex5.ONE.conjugate();
      complex6.INF.getField();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex3.pow(complex4);
      Complex complex9 = complex8.pow((double) 1077);
      complex8.getReal();
      Complex complex10 = complex4.reciprocal();
      complex10.toString();
      complex7.tanh();
      complex5.add((-1574.0401251297));
      complex9.reciprocal();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex complex1 = Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.multiply(2764.935646609);
      Complex complex4 = complex2.NaN.atan();
      complex4.readResolve();
      complex4.subtract((-1460.79068375156));
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = Complex.valueOf(2764.935646609);
      complex2.tan();
      Complex complex8 = complex4.sin();
      complex6.reciprocal();
      Complex complex9 = complex5.subtract(complex7);
      Complex complex10 = Complex.I;
      complex10.getArgument();
      complex1.acos();
      complex5.tanh();
      complex9.add((-2675.22));
      complex3.sqrt();
      complex6.exp();
      complex10.tanh();
      complex0.sqrt1z();
      complex9.tanh();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1.7670931816101074, 1.7670931816101074);
      Complex complex1 = complex0.NaN.subtract(1.7670931816101074);
      Complex complex2 = complex1.I.acos();
      complex0.isNaN();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.INF.divide(1655.7);
      complex5.INF.toString();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.cos();
      complex7.multiply(complex6);
      complex1.getField();
      Complex complex8 = complex5.multiply(0.0);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex4.tanh();
      complex9.divide(complex8);
      complex10.sqrt1z();
      complex2.getField();
      complex6.createComplex(2.0699825504508618, (-691.6222354868994));
      complex7.tan();
      Complex complex11 = complex10.tan();
      complex5.getField();
      complex1.multiply(2228);
      Complex complex12 = complex4.cos();
      complex11.add(0.0);
      Complex complex13 = Complex.valueOf((double) 2228);
      complex12.divide(complex0);
      complex13.multiply(2228);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.INF.toString();
      complex0.abs();
      complex0.toString();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.multiply(complex4);
      complex0.getField();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex0.divide(complex2);
      complex8.sqrt1z();
      Complex complex10 = new Complex(0.0);
      complex10.getField();
      complex3.createComplex(0.0, 0.0);
      complex5.tan();
      Complex complex11 = complex8.tan();
      complex9.getField();
      complex4.multiply(857);
      Complex complex12 = complex0.cos();
      complex1.add(0.21460183660255172);
      Complex.valueOf(0.21460183660255172);
      complex12.divide(complex7);
      complex11.multiply((-909));
      complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.150898317549);
      Complex.valueOf(6.283185307179586, 959.150898317549);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.multiply(2764.935646609);
      Complex complex3 = complex1.NaN.atan();
      complex0.divide(complex1);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = Complex.valueOf(959.150898317549, 2764.935646609);
      Complex complex6 = complex1.sqrt1z();
      complex6.I.abs();
      Complex complex7 = complex6.I.conjugate();
      complex7.tan();
      complex2.NaN.getArgument();
      Complex complex8 = complex3.createComplex(2764.935646609, 2764.935646609);
      complex1.log();
      complex1.divide(complex4);
      complex8.NaN.sin();
      Complex complex9 = complex5.ONE.multiply(771);
      complex4.toString();
      complex5.sinh();
      complex8.I.cosh();
      complex8.sinh();
      complex8.negate();
      complex9.sqrt1z();
      complex5.sinh();
      complex2.sin();
//      try { 
        complex9.nthRoot((-725));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -725
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1489.404557));
      Complex complex1 = new Complex((-1.6149279479975042E-9));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = "0)Uv)\\utt??u";
      complex0.equals(string0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.createComplex((-2972.464200704), (-20.0));
      Complex complex3 = complex1.I.createComplex(0.0, 0.0);
      Complex complex4 = complex0.multiply(complex1);
      complex3.I.getArgument();
      complex1.tan();
      complex0.subtract(complex3);
      complex2.pow(325.4141438603076);
      complex4.sin();
      complex3.log();
      Complex.valueOf(0.0, 1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.sin();
      complex1.INF.sqrt1z();
      complex1.INF.cosh();
      complex1.NaN.subtract(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.I.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex1.getField();
      Complex complex4 = complex0.acos();
      complex4.NaN.getArgument();
      complex1.INF.getArgument();
      Complex complex5 = complex2.multiply(331);
      complex1.negate();
      complex4.cosh();
      complex5.getImaginary();
      Complex complex6 = complex2.log();
      complex6.ZERO.getArgument();
      complex3.pow(complex2);
      Complex complex7 = complex1.createComplex(Double.NaN, 619.424069071);
      complex7.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.5866883048437488E280), (-2.5866883048437488E280));
      double double0 = 2126.95852504747;
      Complex complex1 = complex0.NaN.multiply((-2.5866883048437488E280));
      complex1.I.getField();
      Complex complex2 = complex0.multiply(2126.95852504747);
      int int0 = 37;
      complex2.ONE.multiply(37);
      Complex complex3 = complex0.multiply(2126.95852504747);
      Complex complex4 = complex0.NaN.subtract((-2.5866883048437488E280));
      complex4.I.cosh();
      complex2.I.add((double) 37);
      Complex complex5 = complex3.NaN.multiply(complex2);
      complex5.INF.subtract(complex2);
      Complex.valueOf(1091.741);
//      try { 
        complex0.nthRoot((-2016));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,016
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.I.nthRoot(941);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ONE.divide(complex2);
      complex3.NaN.readResolve();
      Complex complex4 = complex2.NaN.sqrt1z();
      complex2.I.getField();
      Complex complex5 = complex1.ZERO.acos();
      complex0.getField();
      Complex complex6 = complex2.multiply(complex1);
      complex6.nthRoot(2197);
      Complex complex7 = complex6.ZERO.add((double) 941);
      Complex complex8 = complex7.ONE.multiply(complex5);
      complex7.ONE.getField();
      Complex.valueOf((double) 941);
      Complex complex9 = complex4.createComplex(941, 941);
      complex9.toString();
      complex9.cosh();
      complex8.cosh();
      complex7.subtract((double) 2197);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1.7670931816101074, 1.7670931816101074);
      Complex complex1 = complex0.NaN.subtract(1.7670931816101074);
      Complex complex2 = complex1.I.acos();
      complex0.isNaN();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.INF.divide(1655.7);
      complex5.INF.toString();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.multiply(complex6);
      complex3.ONE.getField();
      Complex complex9 = complex0.INF.multiply(0.0);
      complex7.NaN.negate();
      complex1.tanh();
      Complex complex10 = complex3.divide(complex2);
      complex10.I.sqrt1z();
      complex10.NaN.getField();
      complex9.createComplex(0.11517547070980072, 1.7670931816101074);
      Complex complex11 = complex3.tan();
      complex11.INF.tan();
      complex11.ONE.getField();
      complex3.multiply(2228);
      complex7.cos();
      complex8.add(0.0);
      Complex.valueOf(0.11517547070980072);
      complex8.divide(complex2);
      complex1.multiply(2228);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.40871500968933105, 0.40871500968933105);
      Complex complex1 = complex0.pow(0.40871500968933105);
      complex0.NaN.asin();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex1.ONE.multiply((-3700));
      complex3.NaN.log();
      complex2.ZERO.pow(complex1);
      Complex complex4 = complex0.multiply(1377);
      Complex complex5 = complex0.INF.log();
      complex1.nthRoot(769);
      Complex complex6 = complex0.sqrt();
      complex6.NaN.multiply(1377);
      complex4.getField();
      Complex complex7 = complex6.log();
      complex7.ONE.divide(20.0);
      complex5.abs();
      complex2.sqrt1z();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      complex0.exp();
      Complex complex2 = complex0.I.pow(complex1);
      int int0 = 0;
//      try { 
        complex2.NaN.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ONE.divide(complex0);
      complex3.cos();
      Complex complex4 = complex1.pow(0.0);
      complex1.INF.asin();
      complex1.INF.pow(complex0);
      Complex complex5 = complex4.INF.add(complex0);
      complex1.getArgument();
      Complex complex6 = complex0.tan();
      complex6.ZERO.multiply(1);
      complex1.getImaginary();
      complex6.nthRoot(3056);
      complex0.exp();
      complex4.getReal();
      complex6.readResolve();
      complex5.getImaginary();
      complex1.abs();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.INF.toString();
      complex0.abs();
//      try { 
        complex1.I.nthRoot((-372));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -372
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 54.5107662154994);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.divide(54.5107662154994);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.INF.add(complex4);
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = complex6.ONE.cosh();
      complex6.getArgument();
      Complex complex8 = complex6.ONE.tan();
      Complex complex9 = complex5.ONE.exp();
      complex0.ZERO.log();
      complex9.ONE.subtract(complex4);
      complex7.ZERO.toString();
      complex0.isInfinite();
      complex4.negate();
      complex4.isInfinite();
      complex4.acos();
      Complex complex10 = complex5.conjugate();
      complex10.INF.divide(complex9);
      complex5.readResolve();
      complex1.negate();
      complex8.hashCode();
      Complex complex11 = complex4.sqrt();
      complex11.nthRoot(1);
      complex11.toString();
      Complex complex12 = new Complex(0.0, 614.5102816);
      complex5.equals(complex12);
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.ONE.sin();
      complex0.getField();
      complex0.abs();
      complex1.abs();
      Complex complex4 = complex1.sqrt();
      complex4.ONE.cos();
      complex4.NaN.toString();
      Complex complex5 = complex4.NaN.sqrt();
      complex5.ZERO.conjugate();
      complex1.INF.getField();
      Complex complex6 = complex4.subtract(0.0);
      complex3.conjugate();
      Complex complex7 = complex1.multiply(Double.NaN);
      complex3.exp();
      complex7.add(0.0);
      complex1.INF.negate();
      Complex complex8 = complex3.sqrt1z();
      complex8.INF.subtract(Double.NaN);
      complex7.sqrt1z();
      complex1.log();
      complex6.add(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.tan();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.reciprocal();
      complex2.divide(complex0);
      Complex complex3 = complex2.add(0.0);
      complex3.INF.abs();
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex0.sin();
      complex6.ONE.exp();
      complex4.ONE.pow(complex1);
      Complex complex7 = complex6.atan();
      Complex complex8 = Complex.ONE;
      complex5.ONE.subtract(6.918275021321188E-284);
      Complex complex9 = complex7.ZERO.multiply(1);
      complex0.equals(complex8);
      complex7.toString();
      Complex complex10 = Complex.valueOf(3536.008281708348);
      complex10.subtract((double) 1);
      complex4.isInfinite();
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      complex6.subtract(complex0);
      complex1.isNaN();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      complex3.I.multiply(complex1);
      complex1.readResolve();
      Complex complex4 = complex2.ONE.subtract(4919.0);
      Complex complex5 = complex0.NaN.pow(complex1);
      complex1.divide(complex2);
      Complex complex6 = Complex.valueOf(2116.874407);
      complex6.NaN.tan();
      Complex complex7 = complex4.NaN.sin();
      complex7.ONE.reciprocal();
      Complex complex8 = complex1.subtract(complex6);
      complex8.ONE.getArgument();
      complex5.acos();
      Complex complex9 = complex0.tanh();
      complex9.add(0.0);
      Complex complex10 = complex8.sqrt();
      complex10.NaN.exp();
      complex4.tanh();
      complex0.sqrt1z();
      complex9.tanh();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(308.1429987, 308.1429987);
      Complex complex2 = complex0.subtract(complex1);
      complex0.getArgument();
      complex2.isInfinite();
      complex1.toString();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex1.ZERO.asin();
      complex4.ZERO.conjugate();
      Complex complex6 = complex3.NaN.conjugate();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = Complex.valueOf(308.1429987);
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.INF.acos();
      complex0.I.atan();
      complex7.getReal();
      complex7.cosh();
      Complex complex11 = complex1.multiply(complex0);
      complex9.pow(complex8);
      complex11.multiply(1);
      complex1.getImaginary();
      complex8.sqrt1z();
      complex9.atan();
      complex1.sinh();
      Complex complex12 = complex5.sqrt();
      complex12.I.nthRoot(1);
      complex10.atan();
      Complex complex13 = complex10.createComplex(Double.NaN, 1.5707963267948966);
      Complex complex14 = complex13.ZERO.multiply(complex10);
      complex0.abs();
      complex10.sin();
      complex14.getReal();
      complex6.divide((-942.0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex0.ZERO.sqrt();
      Complex complex2 = complex0.NaN.subtract(1781.89238571);
      Complex complex3 = complex2.I.asin();
      complex3.NaN.reciprocal();
      Complex complex4 = complex1.ZERO.multiply(1781.89238571);
      Complex complex5 = complex4.asin();
      complex0.getImaginary();
      Complex complex6 = Complex.valueOf((-7.1844969234484515E-96), Double.POSITIVE_INFINITY);
      complex6.ONE.multiply(4927);
      Complex complex7 = complex0.sin();
      complex0.I.tanh();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.ZERO.add(complex4);
      complex9.ONE.sqrt1z();
      Complex complex10 = complex5.multiply(7);
      complex10.ZERO.getField();
      complex0.abs();
      Complex complex11 = complex4.tanh();
      complex11.asin();
      complex11.isInfinite();
      Complex complex12 = complex10.pow((-7.1844969234484515E-96));
      complex12.ZERO.multiply((-7.1844969234484515E-96));
      Complex complex13 = complex6.pow(1781.89238571);
      complex12.toString();
      complex8.createComplex(4927, 0.0);
      Complex complex14 = complex7.negate();
      complex13.cos();
      complex13.isNaN();
      complex14.abs();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1286.86652);
      complex0.isNaN();
      Complex complex1 = Complex.valueOf((-523.30484), 1527.284318098714);
      complex1.ONE.atan();
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.multiply(97);
      Complex complex3 = complex1.log();
      Complex.valueOf(1527.284318098714, 1286.86652);
      complex3.ONE.acos();
      complex3.subtract(complex2);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-1718.64));
      complex1.I.conjugate();
      Complex complex2 = complex0.tanh();
      complex0.ZERO.tan();
//      try { 
        complex2.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      complex0.NaN.nthRoot(1);
      Complex complex3 = complex0.sqrt();
      complex3.getField();
      Complex complex4 = complex2.add(2839.7090537671);
      Complex complex5 = complex4.NaN.subtract(4.737693450915584E247);
      Complex complex6 = complex5.ONE.asin();
      complex6.conjugate();
      complex6.I.tan();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex7.NaN.cos();
      complex5.subtract(4.4181618172507453E-8);
      complex7.ZERO.subtract((double) 1);
      complex3.sinh();
      Complex complex9 = Complex.valueOf(3148.2518793222066, 3148.2518793222066);
      complex9.ZERO.multiply(3430.43);
      complex7.readResolve();
      complex0.nthRoot(1);
      complex8.readResolve();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.createComplex(0.0, 1.9932945470297703E120);
      complex3.INF.sin();
      complex2.ONE.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex2.INF.tanh();
      complex0.toString();
      Complex complex7 = complex6.sqrt1z();
      complex2.conjugate();
      complex6.getField();
      Complex complex8 = complex7.negate();
      complex8.NaN.abs();
      Complex complex9 = complex7.tan();
      complex9.ZERO.tanh();
      complex1.tan();
      complex1.asin();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex8.cos();
      Complex complex12 = Complex.valueOf(Double.NaN);
      Complex complex13 = complex11.ZERO.add(complex12);
      complex5.isNaN();
      complex11.reciprocal();
      complex7.pow(complex4);
      complex12.asin();
      complex10.subtract(complex11);
//      try { 
        complex13.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.isInfinite();
      double double0 = (-417.3842836396662);
      Complex.valueOf((-417.3842836396662), (-20.0));
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.NaN.add((-417.3842836396662));
//      try { 
        complex1.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-8.27343074126263E-8));
      Complex complex1 = complex0.ZERO.tan();
      complex1.INF.toString();
      Complex complex2 = complex0.ONE.createComplex((-8.27343074126263E-8), 1384.4728933699798);
      Complex complex3 = complex2.NaN.multiply(1.0);
      complex1.I.pow(complex3);
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex5.sqrt();
      complex0.getReal();
      Complex complex7 = complex2.negate();
      complex7.I.tanh();
      complex7.ONE.cos();
      complex7.isNaN();
      complex6.abs();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.0891604448087654E-25, 3.0891604448087654E-25);
      Complex complex1 = new Complex(3.0891604448087654E-25, 3.0891604448087654E-25);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ZERO.cosh();
      complex3.NaN.abs();
      complex0.INF.nthRoot(3209);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.INF.reciprocal();
      complex0.I.cosh();
      complex4.readResolve();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex4.divide(complex6);
      complex5.getArgument();
      Complex complex10 = complex9.I.exp();
      Complex complex11 = complex9.createComplex(1.0582754611968994, 3.0891604448087654E-25);
      complex8.NaN.subtract(complex4);
      Complex complex12 = complex11.ZERO.pow(complex8);
      Complex complex13 = complex12.I.atan();
      complex13.I.log();
      Complex complex14 = complex11.I.subtract(1.0582754611968994);
      complex9.readResolve();
      complex12.add(complex9);
      complex14.add(complex2);
      complex0.nthRoot(1210);
      complex10.add(complex1);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.686613082885742);
      complex0.divide(0.0);
      Complex.valueOf((-1287.33629233441));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.acos();
      complex3.INF.divide(1706.26450443);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.I.sin();
      Complex complex6 = complex1.NaN.negate();
      Complex complex7 = complex5.ONE.reciprocal();
      Complex complex8 = complex2.pow(20.0);
      complex4.add(20.0);
      Complex complex9 = complex8.I.asin();
      complex9.multiply(complex4);
      Complex complex10 = complex2.NaN.asin();
      Complex complex11 = complex1.acos();
      complex11.INF.getField();
      Complex complex12 = complex8.add(complex7);
      complex12.ZERO.toString();
      Complex complex13 = complex12.INF.pow(complex7);
      complex13.I.abs();
      complex10.divide(1706.26450443);
      complex6.subtract(2660.5179877414307);
      complex5.cosh();
      complex10.pow(20.0);
      complex11.getImaginary();
      complex7.pow(1139.96);
      complex6.exp();
      Complex.valueOf(1139.96);
      complex9.divide(1706.26450443);
      complex11.divide(1139.96);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(95.63362);
      complex0.exp();
      complex0.NaN.divide(0.0);
      complex0.pow(95.63362);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8742587656021775E-215);
      Complex complex1 = complex0.exp();
      complex1.INF.multiply((-1097));
      Complex complex2 = Complex.ZERO;
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1262.5233));
      complex1.INF.multiply(complex0);
      Complex complex2 = Complex.valueOf(2.453117120472083E-9, (-805.0));
      complex2.ONE.multiply(1077);
      complex2.I.readResolve();
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex3.ONE.conjugate();
      complex4.INF.getField();
      complex4.ZERO.negate();
      complex0.getReal();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex0.sqrt();
      complex6.NaN.add((-1262.5233));
      complex0.NaN.getArgument();
      Complex complex7 = complex2.cosh();
      complex6.atan();
      complex3.pow(complex7);
      complex5.divide((-420.34));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = Complex.ONE;
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.I.pow(6.283185307179586);
      Complex complex4 = Complex.valueOf(2.0, 2130.22396);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.I.divide(20.0);
      complex5.divide(complex6);
      Complex complex8 = complex2.tan();
      Complex complex9 = complex3.multiply(complex0);
      Complex complex10 = complex9.ONE.sqrt();
      Complex complex11 = complex4.log();
      complex2.nthRoot(1);
      complex8.hashCode();
      complex10.pow(2417.540107778);
      complex11.exp();
      complex1.readResolve();
      complex0.getArgument();
      complex1.hashCode();
      complex11.pow(1.5707963267948966);
      complex7.exp();
      complex11.add(2417.540107778);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      complex1.log();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6430866718292236, 0.6430866718292236);
      Complex complex1 = Complex.valueOf(0.0, 0.6430866718292236);
      Complex complex2 = complex0.createComplex(0.6430866718292236, 2718.0);
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.I.reciprocal();
      complex3.INF.subtract(complex0);
      Complex complex4 = complex3.NaN.exp();
      complex4.INF.tan();
      complex1.I.getField();
      Complex complex5 = complex2.cos();
      complex5.NaN.sqrt1z();
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex1.pow(0.0);
      complex7.getReal();
      Complex complex8 = complex1.reciprocal();
      complex8.toString();
      complex6.tanh();
      complex7.add(0.6430866718292236);
      complex1.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.750367485925089E-8);
      Complex complex1 = complex0.ONE.asin();
      complex0.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.multiply(1280);
      complex1.getArgument();
      complex2.negate();
      complex3.getReal();
      complex3.pow(8.750367485925089E-8);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      complex0.readResolve();
      complex0.getField();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex0.hashCode();
      Complex complex3 = complex1.sqrt1z();
      complex3.getField();
      complex1.ONE.subtract(complex2);
      Complex complex4 = complex1.ONE.sqrt1z();
      complex4.I.negate();
      complex3.equals("(");
      Complex complex5 = complex1.cos();
      complex5.INF.getArgument();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(4548.254705, (-1.0));
      Complex complex1 = complex0.atan();
      complex0.toString();
      Complex complex2 = complex1.add(complex0);
      complex2.nthRoot(322);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.subtract(219.775760071);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = Complex.valueOf(219.775760071);
      complex0.toString();
      complex5.ZERO.readResolve();
      complex0.getField();
      complex0.NaN.readResolve();
      Complex complex6 = complex5.ONE.exp();
      complex4.toString();
      complex5.nthRoot(451);
      complex5.isNaN();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex7.INF.cos();
      complex8.I.asin();
      complex5.add(complex6);
      Complex complex9 = complex7.negate();
      Complex complex10 = complex5.add(complex3);
      complex4.getReal();
      complex2.getArgument();
      Complex complex11 = complex3.INF.multiply(complex5);
      complex2.hashCode();
      Complex complex12 = Complex.valueOf(219.775760071);
      Complex complex13 = complex3.subtract(complex12);
      complex13.I.toString();
      complex7.NaN.negate();
      Complex complex14 = complex5.sqrt();
      Complex complex15 = complex6.divide(3.337143177933685E-8);
      complex10.toString();
      complex1.divide(complex15);
      Complex complex16 = complex9.divide(complex11);
      complex16.I.nthRoot(451);
      complex5.conjugate();
      complex14.exp();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.valueOf((-1041.918712763), 0.0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex5.add(complex0);
      complex6.ONE.log();
      complex1.I.abs();
      Complex complex8 = complex7.ZERO.pow(0.0);
      Complex complex9 = complex8.conjugate();
      complex9.INF.hashCode();
      complex5.NaN.add(complex3);
      complex7.ZERO.hashCode();
      Complex complex10 = new Complex(0.0);
      Complex complex11 = complex6.INF.divide(complex10);
      complex5.getImaginary();
      complex4.abs();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex12.I.reciprocal();
      Complex complex14 = complex13.I.pow(0.0);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals((-1.0), complex13.getImaginary(), 0.01);
      
      Complex complex15 = complex10.ZERO.sin();
      Complex complex16 = complex15.NaN.log();
      Complex complex17 = complex16.ZERO.tan();
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertTrue(complex17.equals((Object)complex12));
      
      complex16.NaN.reciprocal();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      
      Complex complex18 = complex6.asin();
      complex11.divide(complex18);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertSame(complex18, complex7);
      assertSame(complex5, complex9);
      
      complex0.isInfinite();
      assertTrue(complex0.equals((Object)complex4));
      
      Complex complex19 = complex2.reciprocal();
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertEquals((-9.597677705088544E-4), complex19.getReal(), 0.01);
  }
}
