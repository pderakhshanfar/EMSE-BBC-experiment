/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:22:04 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4.788483302183556E-9, 4.788483302183556E-9);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.acos();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(8.288260960926296E-17, 0.9999999935625079);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.conjugate();
      complex0.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.log();
      complex6.getField();
      Complex complex7 = complex5.acos();
      complex6.sqrt();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex3.reciprocal();
      complex9.acos();
      complex8.INF.exp();
      Complex complex10 = complex8.multiply((-4.3307634616102625E-8));
      complex10.I.multiply(complex4);
      complex3.add(2.0);
      Complex complex11 = complex3.pow((-2080.38));
      complex5.I.nthRoot(2592);
      Complex complex12 = complex11.divide(2.8835418231126645E-9);
      Complex complex13 = new Complex(1333.198046256);
      complex13.INF.subtract((-2080.38));
      complex7.pow(complex13);
      complex12.getField();
      complex11.atan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.negate();
      complex1.ZERO.multiply(complex0);
      complex0.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex4.INF.cos();
      complex5.ZERO.multiply(633);
      complex0.acos();
      complex3.negate();
      complex4.subtract((-779.46964556));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(357.5472, 0.0);
      Complex complex1 = complex0.cosh();
      complex1.nthRoot(758);
      Complex complex2 = complex0.pow(9.456905756416903E-14);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.I;
      complex3.acos();
      complex4.sinh();
//      try { 
        complex2.nthRoot((-21));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -21
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(2083.451666450687, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.cosh();
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(20.0);
      Complex complex3 = complex2.tanh();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.ONE.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3442378838418366E212, 1.0);
      complex0.tan();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(24.556347205605253);
      Complex complex1 = Complex.valueOf((-6.437492120743254E-9), (-6.437492120743254E-9));
      Complex complex2 = complex1.cosh();
      Complex complex3 = new Complex((-20.0), (-2538.0));
      complex3.tanh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(24.556347205605253, 24.556347205605253);
      Complex complex1 = Complex.ZERO;
      complex1.abs();
      complex0.getImaginary();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf((-6.437E-9), (-6.437E-9));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.pow(0.043007105588912964);
      complex4.INF.reciprocal();
      complex4.sqrt1z();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-1874.138130279928), (-1874.138130279928));
      Complex complex1 = complex0.acos();
      complex0.sqrt1z();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.I.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-114.0), Double.POSITIVE_INFINITY);
      complex3.multiply(37);
      Complex.valueOf((-751.0));
      complex3.pow((-751.0));
      complex2.tanh();
      Complex complex4 = new Complex((-1022.6156526), 0.1585290151921035);
      complex2.nthRoot(42);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
      complex0.sinh();
      Complex complex1 = Complex.I;
      complex1.multiply(37);
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex1.pow(Double.NaN);
      complex1.sqrt();
      Complex complex3 = Complex.valueOf((double) 37, 1930.589);
      complex3.tanh();
      Complex complex4 = new Complex(1510.3354065, Double.NaN);
//      try { 
        complex2.nthRoot((-2145704498));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,145,704,498
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(2792.5475377068187, 2792.5475377068187);
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(24.556347205605253, 24.556347205605253);
      complex0.I.divide(20.0);
      complex0.tan();
      Complex complex1 = Complex.valueOf(9.113713162029408E267, 24.556347205605253);
      complex1.pow((-213.23437));
      complex1.acos();
      complex0.subtract(9.113713162029408E267);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.tan();
      complex2.nthRoot(656);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1135.76370907732), (-1135.76370907732));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.multiply((-1135.76370907732));
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.reciprocal();
      complex5.I.getField();
      complex0.divide(complex2);
      Complex complex6 = new Complex((-1135.76370907732), 0.9999930253396107);
      Complex complex7 = complex6.ONE.asin();
      complex7.NaN.toString();
      complex0.ZERO.toString();
      complex4.ZERO.divide(complex6);
      complex4.hashCode();
      complex3.ONE.multiply(complex0);
      complex4.I.atan();
      complex3.NaN.toString();
      complex2.nthRoot(1092);
      complex4.toString();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.ZERO.reciprocal();
      complex9.ZERO.negate();
      complex8.getField();
      Complex complex10 = complex0.multiply((-1135.76370907732));
      complex10.abs();
      complex7.multiply(1092);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.I.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      complex2.toString();
      complex0.asin();
      complex2.tan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2126.429633031, 6.283185307179586);
      complex0.negate();
      complex0.tanh();
      complex0.tan();
      Complex complex1 = Complex.valueOf(6.283185307179586, (-4521662.505814749));
      complex1.I.log();
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.reciprocal();
      complex3.NaN.tan();
      Complex complex4 = complex3.I.atan();
      complex4.divide(complex2);
      Complex complex5 = new Complex(Double.NaN, Double.NaN);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = 676.588763228333;
      Complex complex0 = new Complex(676.588763228333, 676.588763228333);
      Complex complex1 = complex0.NaN.add(676.588763228333);
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.I.add(676.588763228333);
      complex1.NaN.reciprocal();
      Complex.valueOf(676.588763228333, 0.5403023058681398);
      complex4.INF.negate();
      Complex complex5 = complex0.sin();
      complex5.ONE.exp();
      complex3.subtract(complex2);
      Complex complex6 = Complex.valueOf(0.5403023058681398);
//      try { 
        complex6.I.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      complex3.toString();
      Complex complex4 = complex0.asin();
      complex4.INF.abs();
      complex4.getImaginary();
      complex2.hashCode();
      Complex complex5 = Complex.ONE;
      complex1.add(complex0);
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ONE;
      complex0.pow(complex6);
      complex1.tanh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(726.65753816605, 726.65753816605);
      Complex complex1 = complex0.sinh();
      Complex.valueOf(726.65753816605, 726.65753816605);
      Complex complex2 = complex1.ZERO.add(726.65753816605);
      Complex complex3 = complex1.reciprocal();
      complex3.I.cosh();
      Complex complex4 = Complex.valueOf(726.65753816605);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.add(1.0);
      complex4.divide(complex1);
      Complex complex7 = complex5.cos();
      Complex.valueOf(726.65753816605, 985.5);
      complex6.sinh();
      complex2.negate();
      complex2.atan();
      complex7.subtract(985.5);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-342));
      Complex complex2 = Complex.I;
      complex1.acos();
      complex1.readResolve();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-2457.5659352900207), (-2457.5659352900207));
      Complex complex1 = complex0.sqrt();
      complex0.toString();
      Complex complex2 = complex0.ZERO.multiply((-2457.5659352900207));
      complex1.ONE.multiply(complex2);
      complex2.nthRoot(715);
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf((-2457.5659352900207));
      Complex complex5 = complex3.I.createComplex((-1009.03), (-2457.5659352900207));
      complex1.readResolve();
      Complex complex6 = complex2.INF.divide(complex1);
      complex6.INF.multiply((-2457.5659352900207));
      Complex complex7 = complex6.ZERO.subtract(complex3);
      complex7.ONE.subtract(complex4);
      Complex complex8 = complex0.acos();
      complex8.I.hashCode();
      Complex complex9 = complex2.sqrt1z();
      complex8.toString();
      Complex complex10 = complex8.add(646.63);
      complex4.ZERO.conjugate();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex8.pow(complex5);
      complex9.getField();
      Complex complex13 = complex9.sinh();
      complex13.abs();
      Complex complex14 = complex10.negate();
      complex5.add(20.0);
      Complex complex15 = complex12.tanh();
      complex14.nthRoot(715);
      complex15.divide(complex13);
      complex11.log();
      Complex complex16 = complex4.acos();
      complex16.nthRoot(715);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-321.80667938), 0.36900103092193604);
      Complex complex2 = Complex.ZERO;
      complex0.tanh();
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-342));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = new Complex(2.0);
      Complex complex4 = Complex.INF;
      complex2.tan();
      complex2.multiply((-2380));
      Complex.valueOf(0.9999799586767958);
      complex3.log();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.ZERO.toString();
      Complex complex6 = complex0.asin();
      complex6.INF.abs();
      complex6.getImaginary();
      complex6.getArgument();
      Complex complex7 = complex2.add((-52.3513));
      complex7.subtract(-0.0);
      Complex complex8 = complex5.sqrt();
      complex8.I.abs();
      Object object0 = new Object();
      complex2.equals(complex3);
      complex4.getArgument();
      complex0.hashCode();
      complex4.getField();
      complex2.equals((Object) null);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex1.exp();
      complex0.abs();
      complex1.tanh();
      Complex.valueOf(1.537490712803659E-166, 1.537490712803659E-166);
      Complex complex2 = Complex.I;
      complex0.divide(complex1);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      complex4.ONE.sqrt();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(20.0);
      complex0.isInfinite();
      Complex complex3 = complex2.sqrt();
      complex2.asin();
      complex1.nthRoot(1);
      complex2.add(919.4186567197255);
      complex3.pow(20.26957124203793);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.multiply((-1773.53));
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = Complex.valueOf((-979.14318));
      Complex complex6 = complex5.NaN.pow((-979.14318));
      Complex complex7 = Complex.valueOf(9.183480622172801E148);
      Complex complex8 = complex5.tan();
      complex8.INF.toString();
      Complex complex9 = complex0.createComplex(9.183480622172801E148, 9.183480622172801E148);
      Complex complex10 = complex8.multiply(1);
      complex6.toString();
      complex9.divide(complex0);
      Complex complex11 = complex10.acos();
      complex11.add(9.183480622172801E148);
      Complex complex12 = complex5.log();
      Complex complex13 = complex7.acos();
      Complex complex14 = complex10.sin();
      complex7.I.pow(complex2);
      Complex complex15 = complex6.sinh();
      Complex complex16 = complex12.acos();
      complex16.INF.hashCode();
      complex7.createComplex(3.4674011002723395, (-1773.53));
      complex15.sin();
      complex14.sinh();
      complex13.add((-1773.53));
      complex4.multiply(1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex1.reciprocal();
      Complex complex2 = Complex.valueOf((-1063.84));
      Complex complex3 = complex2.pow((-1063.84));
      complex3.toString();
      Complex complex4 = Complex.NaN;
      complex4.asin();
      complex4.abs();
      complex3.getImaginary();
      complex2.hashCode();
      Complex complex5 = Complex.ONE;
      Complex.valueOf((-1063.84), 2.1128692626953125);
      Complex complex6 = Complex.valueOf(2.1128692626953125);
      complex6.pow(5.908356249789671E66);
      Complex.valueOf(2.1128692626953125, Double.POSITIVE_INFINITY);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-6.329342805230603E-8), (-1517.730849));
      complex0.add(complex0);
      complex0.reciprocal();
      complex0.pow((double) 4399);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7794190449526737E-106, (-1.0));
      Complex complex1 = complex0.tan();
      complex1.tanh();
      Complex complex2 = complex0.divide(complex1);
      complex1.tan();
      Complex complex3 = complex0.reciprocal();
      Complex.valueOf(0.0, 1.7794190449526737E-106);
      complex1.multiply(complex3);
      complex2.tanh();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.1748409271240234, (-116.91560658931));
      Complex complex2 = complex1.tan();
      complex0.tanh();
      complex2.divide(complex1);
      Complex complex3 = new Complex((-116.91560658931), 1.1748409271240234);
      complex3.tan();
      Complex complex4 = Complex.ONE;
      complex4.reciprocal();
      Complex complex5 = Complex.valueOf((-6.437492120743254E-9), 3965.06202653);
      complex5.pow(1.1748409271240234);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.divide(complex0);
      complex0.tan();
      complex2.reciprocal();
      complex3.pow(514.083);
      complex2.divide(2185.45);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-0.2723414689118316));
      Complex complex2 = complex1.multiply(complex0);
      complex2.sqrt1z();
      complex1.abs();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex.valueOf((-7.145758990550526E-9));
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ONE.acos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.tan();
      complex0.equals(complex3);
      Complex complex5 = complex0.createComplex((-1188.43594269), (-1188.43594269));
      Complex complex6 = complex4.I.log();
      complex6.ZERO.multiply(1.2312228679656982);
      complex5.ONE.multiply(1120);
      Complex complex7 = complex5.subtract(complex4);
      Complex complex8 = complex7.ZERO.add((-1188.43594269));
      complex8.multiply((-7.145758990550526E-9));
      complex7.ONE.getArgument();
      Complex complex9 = complex4.createComplex(0.7827478242289663, (-1188.43594269));
      complex9.INF.divide(4208.856138);
      complex7.isInfinite();
      complex2.nthRoot(1220);
      Complex.valueOf(7.309452951429663E-4, 2.0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.exp();
      complex2.abs();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(2176.2429646);
      Complex complex7 = complex4.divide(complex6);
      complex6.multiply(7.462678536479685E-9);
      complex6.subtract(2.2638862982382794E248);
      complex7.conjugate();
      Complex complex8 = complex5.tanh();
      complex4.readResolve();
      complex8.getField();
      Complex complex9 = complex3.atan();
      complex6.tan();
      Complex complex10 = Complex.NaN;
      complex7.multiply(2.2638862982382794E248);
      complex9.negate();
      Object object0 = new Object();
      complex2.equals(complex0);
      complex3.getArgument();
      Complex complex11 = complex6.conjugate();
      complex11.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1.3134287685114547E204, 1.3134287685114547E204);
      Complex complex1 = complex0.multiply(1.3134287685114547E204);
      Complex complex2 = complex0.subtract(2736.1825107148);
      complex1.conjugate();
      Complex complex3 = complex0.tanh();
      complex0.readResolve();
      Complex complex4 = new Complex(2736.1825107148);
      complex4.getField();
      Complex complex5 = Complex.valueOf((-1936.9913713286767), (-111.07254564));
      Complex complex6 = complex5.atan();
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.NaN;
      complex2.multiply(2736.1825107148);
      complex2.negate();
      Object object0 = new Object();
      complex3.getArgument();
      complex7.conjugate();
      complex6.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(1.3134287685114547E204);
      Complex complex1 = Complex.NaN;
      complex1.ONE.negate();
      complex1.tan();
      complex1.nthRoot(1491166181);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      complex3.tanh();
      Complex complex4 = Complex.ONE;
      complex0.asin();
      complex0.reciprocal();
      complex1.add(1269.4717591);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.pow((-1.0));
      complex6.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
      complex3.add((-1857.572));
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex3.pow(1820.0726);
      Complex complex8 = Complex.ZERO;
      complex8.ZERO.multiply(Double.NaN);
      Object object0 = complex8.readResolve();
      complex6.equals(object0);
      complex6.pow(Double.POSITIVE_INFINITY);
      complex7.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.exp();
      complex1.toString();
      complex2.abs();
      complex3.getImaginary();
      complex2.hashCode();
      Complex complex4 = Complex.ONE;
      complex4.readResolve();
      Complex.valueOf(0.7071067811865476, 0.5816118143902308);
      complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(2001.4075615327392, 2001.4075615327392);
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.hashCode();
      Complex complex2 = Complex.NaN;
      complex2.INF.readResolve();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.ONE.subtract(2001.4075615327392);
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = Complex.valueOf(2001.4075615327392, 2001.4075615327392);
      complex4.INF.tanh();
      Complex complex7 = complex3.multiply(complex6);
      complex7.I.toString();
      complex4.ONE.atan();
      complex4.multiply(3475);
      complex5.conjugate();
      complex1.conjugate();
      Complex complex8 = complex0.sin();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(0.6480542736638855, 602.850166518492);
      Complex complex3 = complex2.divide(602.850166518492);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.pow(5.2364136172269755E-8);
      complex0.toString();
      complex0.asin();
      complex0.abs();
      complex2.getImaginary();
      complex0.getArgument();
      Complex complex6 = Complex.ONE;
      complex6.sqrt();
      complex5.multiply(3.856291077979099E-8);
      Complex.valueOf(0.0);
      complex3.add(complex5);
      complex2.log();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      complex3.ZERO.toString();
      Complex complex4 = complex0.asin();
      complex4.INF.abs();
      complex4.getImaginary();
      complex2.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.valueOf(6.283185307179586, Double.NaN);
      complex6.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = Complex.valueOf(5.2364136172269755E-8, 5.2364136172269755E-8);
      complex1.ZERO.toString();
      complex0.divide(complex4);
      complex2.multiply((-75.206653879));
      Complex complex5 = complex0.subtract(5.2364136172269755E-8);
      complex0.conjugate();
      complex5.tanh();
      complex1.getField();
      Complex complex6 = Complex.ONE;
      complex6.add((-75.206653879));
      complex5.reciprocal();
      complex3.pow(5.2364136172269755E-8);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.pow(complex4);
      complex1.abs();
      complex1.isInfinite();
      complex1.getArgument();
      complex1.equals(complex4);
      complex2.getField();
      Complex complex6 = complex2.divide(0.0);
      complex3.equals(complex1);
      Complex complex7 = complex0.tanh();
      complex6.reciprocal();
      complex4.divide((-414.3));
      complex5.getImaginary();
      complex7.I.readResolve();
      complex1.hashCode();
      Complex complex8 = Complex.INF;
      complex8.subtract(0.4363901311233559);
      // Undeclared exception!
      complex7.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.exp();
      complex2.ZERO.abs();
      complex2.tanh();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.ONE;
      complex6.getArgument();
      Complex complex7 = complex5.negate();
      complex6.cosh();
      complex7.abs();
      Complex complex8 = complex4.subtract(complex1);
      complex3.add(0.0);
      Complex complex9 = complex4.exp();
      Complex complex10 = complex8.multiply(511);
      complex9.readResolve();
      complex0.sqrt();
      complex8.toString();
      Complex complex11 = complex7.conjugate();
      complex11.createComplex(20.0, 0.0);
      complex10.getArgument();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.NaN.pow((-52.3513));
      complex5.ZERO.toString();
      Complex complex6 = complex0.asin();
      complex6.INF.abs();
      complex6.getImaginary();
      complex6.getArgument();
      complex0.subtract(-0.0);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex6.multiply(-0.0);
      complex3.abs();
      Complex complex9 = complex2.acos();
      complex8.getReal();
      complex9.getReal();
      complex4.isNaN();
      complex7.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1.0333241479437797E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.add(complex1);
      complex5.INF.readResolve();
      Complex complex6 = complex4.ONE.reciprocal();
      Complex complex7 = complex6.NaN.pow(complex2);
      Complex complex8 = complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.cos();
      complex6.ONE.cosh();
      complex2.isInfinite();
      Complex complex10 = complex9.tanh();
      complex2.ZERO.asin();
      complex1.subtract(complex0);
      complex10.exp();
      complex7.I.sqrt();
      complex10.ZERO.pow(1.0333241479437797E-8);
      complex10.ZERO.hashCode();
      Complex complex11 = complex9.add(Double.POSITIVE_INFINITY);
      complex4.NaN.exp();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex11.I.getField();
      Complex complex12 = complex5.pow(complex10);
      complex12.ZERO.abs();
      complex1.multiply(1.0333241479437797E-8);
      complex8.toString();
      Complex complex13 = complex8.sqrt1z();
      Complex complex14 = complex13.log();
      complex14.cos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(Double.NaN);
      Complex.valueOf(0.0);
      Complex complex3 = complex0.pow((-2277.11484342));
      complex1.toString();
      complex3.abs();
      complex2.getImaginary();
      complex3.getArgument();
      complex2.add((-20.0));
      complex3.abs();
      Complex.valueOf((-835.9352139512));
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      complex1.INF.abs();
      complex1.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.asin();
      complex1.ONE.add(41.657);
      Complex complex3 = complex0.reciprocal();
      complex2.pow(6.283185307179586);
      complex2.reciprocal();
      complex3.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex0.isInfinite();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.subtract((-962.4654971933307));
      complex0.asin();
      Complex complex4 = complex3.conjugate();
      complex4.getField();
      complex2.atan();
      Complex complex5 = Complex.NaN;
      complex5.subtract(20.0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.subtract(1.0);
      complex4.acos();
      Complex complex8 = complex2.sqrt1z();
      complex8.ONE.getField();
      complex8.abs();
      complex7.abs();
      complex1.getReal();
      Complex complex9 = Complex.ONE;
      complex9.divide((-0.9640275800758169));
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      Complex complex2 = complex0.NaN.createComplex(0.0, Double.NaN);
      Complex complex3 = Complex.ZERO;
      complex3.isInfinite();
      complex3.sqrt();
      Complex complex4 = Complex.INF;
      complex4.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0, (-962.4654971933307));
      Complex complex6 = complex5.asin();
      complex4.nthRoot(1);
      complex1.hashCode();
      complex1.exp();
      complex6.multiply(complex2);
      complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.tan();
      complex2.ONE.tanh();
      Complex complex3 = Complex.valueOf(5.2364136172269755E-8, 5.2364136172269755E-8);
      complex1.ZERO.toString();
      complex0.divide(complex3);
      Complex complex4 = complex2.multiply((-75.206653879));
      Complex complex5 = complex0.subtract(5.2364136172269755E-8);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex5.tanh();
      complex6.readResolve();
      complex1.getField();
      complex7.atan();
      complex3.tan();
      complex7.multiply(Double.NaN);
      Complex complex8 = complex5.negate();
      Object object0 = new Object();
      complex8.equals((Object) null);
      complex4.getArgument();
      complex6.getField();
      Object object1 = complex5.readResolve();
      complex5.equals(object1);
      Complex complex9 = new Complex((-75.206653879), (-996.0656484425));
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.pow(2658.77867234);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.asin();
      complex1.log();
      Complex complex6 = complex5.sin();
      complex3.exp();
      complex6.add(2658.77867234);
      complex0.reciprocal();
      Complex complex7 = Complex.valueOf(2658.77867234, 406.853);
      complex7.abs();
      complex3.exp();
      complex3.multiply(complex2);
      Complex complex8 = Complex.valueOf(2658.77867234, 406.853);
      complex8.cosh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      complex1.multiply(complex0);
      Complex complex2 = complex0.asin();
      complex0.I.reciprocal();
      Complex complex3 = complex2.I.add((-20.0));
      complex2.INF.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex5.sqrt();
      complex6.ONE.cosh();
      complex4.getField();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-2279.408883));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.acos();
      complex2.INF.atan();
      complex1.subtract(complex0);
      complex1.tan();
      complex1.multiply((-2279.408883));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.reciprocal();
      complex0.add(2.0);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf(6.165958325782564E70, 6.165958325782564E70);
      complex2.subtract(complex4);
      complex3.sqrt();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.exp();
      complex2.ZERO.abs();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.ONE.divide(complex0);
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = complex5.tan();
      complex2.conjugate();
      Complex complex7 = Complex.valueOf(708.9407712435, 0.0);
      Complex complex8 = complex1.log();
      Complex complex9 = complex2.cos();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex4.subtract(complex3);
      Complex complex12 = complex5.divide(complex6);
      Complex complex13 = new Complex(1.0);
      Complex complex14 = complex13.add(complex9);
      complex2.toString();
      complex13.abs();
      complex3.acos();
      complex11.getReal();
      complex10.getReal();
      complex3.isNaN();
      Complex complex15 = complex14.tanh();
      Complex complex16 = complex10.asin();
      Complex complex17 = complex3.log();
      complex10.sin();
      complex15.exp();
      Complex complex18 = Complex.NaN;
      complex18.add(1.0);
      complex7.reciprocal();
      complex12.abs();
      complex16.exp();
      complex17.multiply(complex8);
      complex7.cosh();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = Complex.valueOf(5.2364136172269755E-8, 5.2364136172269755E-8);
      complex1.ZERO.toString();
      complex4.reciprocal();
      Complex complex5 = complex2.add((-20.0));
      complex5.reciprocal();
      Complex complex6 = Complex.valueOf(5.2364136172269755E-8, (-1.0132955046410241));
      Complex complex7 = Complex.valueOf(289.576, 20.0);
      Complex complex8 = complex6.subtract(complex7);
      complex8.sqrt();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.tan();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.reciprocal();
      complex1.I.add((-20.0));
      complex2.reciprocal();
      complex1.pow(3965.06202653);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.exp();
      complex2.ZERO.abs();
      complex2.tanh();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex3.multiply(0.0);
      complex4.ONE.subtract(Double.NaN);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.tanh();
      complex1.readResolve();
      complex5.I.getField();
      Complex complex7 = complex0.atan();
      complex7.tan();
      Complex complex8 = complex6.multiply(1572.83856);
      complex5.ONE.conjugate();
      complex8.ONE.negate();
      Complex complex9 = Complex.valueOf(844.5);
      complex9.getArgument();
      complex6.multiply(Double.NaN);
      Complex.valueOf(0.0);
      complex1.add(complex9);
      Complex complex10 = Complex.ONE;
      complex10.toString();
      complex10.log();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.NaN.pow((-52.3513));
      complex5.ZERO.toString();
      Complex complex6 = complex0.asin();
      complex6.INF.abs();
      complex6.getImaginary();
      complex6.getArgument();
      Complex complex7 = complex2.add((-52.3513));
      complex7.subtract(-0.0);
      Complex complex8 = complex5.sqrt();
      complex8.I.abs();
      Object object0 = new Object();
      complex2.equals(complex3);
      complex4.getArgument();
      complex0.hashCode();
      complex4.getField();
      complex2.equals((Object) null);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.sinh();
      complex0.getReal();
      Complex complex3 = complex0.createComplex(1.545539007875769E25, 1.545539007875769E25);
      complex3.NaN.readResolve();
      complex3.subtract((-418.31921));
      Object object0 = new Object();
      complex3.equals(object0);
      complex1.ONE.createComplex(6.23514943204966E27, (-358.771));
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.INF.multiply(complex5);
      complex6.NaN.toString();
      Complex complex7 = Complex.NaN;
      complex1.equals(complex7);
      complex2.tan();
      Object object1 = new Object();
      complex4.ZERO.exp();
      complex1.equals(object1);
      Complex complex8 = complex4.asin();
      complex8.NaN.toString();
      Complex complex9 = complex2.atan();
      complex7.getReal();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(1401.696);
      complex0.NaN.tanh();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.multiply(1401.696);
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex3.NaN.divide(complex0);
      complex4.ZERO.conjugate();
      Complex complex5 = Complex.valueOf(1401.696, 1401.696);
      complex4.hashCode();
      complex3.NaN.getField();
      Complex complex6 = complex2.ONE.createComplex(1401.696, 1401.696);
      Complex complex7 = Complex.valueOf((-1460.1));
      complex1.tan();
      complex0.isInfinite();
      complex5.ONE.nthRoot(1);
      complex1.equals("Dnhy;XBXsarW]");
      complex0.I.toString();
      complex0.divide(complex1);
      Complex complex8 = complex0.exp();
      complex8.I.toString();
      complex8.INF.asin();
      Complex complex9 = complex8.INF.add(complex5);
      complex9.I.conjugate();
      Complex complex10 = complex8.divide(1409.311);
      complex10.I.tanh();
      complex7.tan();
      complex6.pow(1409.311);
      Complex complex11 = complex10.multiply((-3547.7834103));
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1796.38), (-1796.38));
      complex0.getField();
      complex0.ZERO.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(2103.49533066798);
      Complex.valueOf(Double.NaN, (-1796.38));
      complex3.sinh();
      complex2.divide(2103.49533066798);
      complex3.multiply(0.29619067907333374);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex0.isInfinite();
      Complex complex2 = complex0.sqrt();
      complex2.subtract((-962.4654971933307));
      complex0.asin();
      complex1.nthRoot(1);
      complex2.hashCode();
      Complex complex3 = complex1.exp();
      complex3.ZERO.multiply(complex0);
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.022045553485609E-264));
      Complex complex1 = new Complex((-6.022045553485609E-264));
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(1713.4112347600244, (-6.022045553485609E-264));
      complex0.log();
      Complex complex4 = complex2.subtract((-6.022045553485609E-264));
      complex4.ZERO.sqrt();
      Complex complex5 = complex4.INF.asin();
      complex5.INF.asin();
      complex4.tanh();
      Complex complex6 = complex3.add(complex1);
      complex6.createComplex(1713.4112347600244, 1488.5516219408048);
      complex6.readResolve();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-75.206653879), (-75.206653879));
      complex0.log();
      Complex complex1 = Complex.valueOf((-75.206653879), 2.893485277253286E-8);
      Complex complex2 = complex0.negate();
      complex2.INF.sin();
      Complex complex3 = complex2.I.divide(2.893485277253286E-8);
      complex3.ONE.acos();
      Complex complex4 = complex2.atan();
      complex4.NaN.atan();
      complex1.subtract(2.893485277253286E-8);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(517.49827205798, 2729.0);
      Complex complex1 = complex0.createComplex((-6.0893829005035E-8), (-3048.03934));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex1.I.multiply((-5158));
      Complex complex4 = complex3.ZERO.tanh();
      complex4.tanh();
      Complex complex5 = complex1.tanh();
      complex5.INF.getField();
      complex5.getReal();
      Complex complex6 = complex3.asin();
      complex6.ONE.getField();
      complex5.atan();
      Complex complex7 = complex2.sin();
      Complex.valueOf(0.0, (-3048.03934));
      complex7.multiply(1.3478247120462365E194);
      complex3.getArgument();
      Complex complex8 = Complex.valueOf(0.0, (-1.0313441393036992E-7));
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.createComplex(0.0, Double.NaN);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.add(complex4);
      complex5.INF.hashCode();
      complex5.I.abs();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.tan();
      complex7.ZERO.conjugate();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex7.ONE.log();
      Complex complex10 = complex6.ZERO.cos();
      Complex complex11 = Complex.NaN;
      complex10.NaN.subtract(complex11);
      Complex complex12 = complex1.divide(complex0);
      complex0.add(complex2);
      complex6.ZERO.toString();
      complex12.NaN.abs();
      complex12.ZERO.acos();
      complex6.getReal();
      complex12.getReal();
      complex8.isNaN();
      Complex complex13 = complex7.tanh();
      complex13.asin();
      Complex complex14 = complex0.ONE.log();
      complex1.sin();
      complex10.exp();
      Complex complex15 = complex12.add(Double.NaN);
      complex15.reciprocal();
      complex9.abs();
      Complex complex16 = complex6.exp();
      complex0.multiply(complex14);
      complex14.cosh();
      complex16.reciprocal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.nthRoot(287);
      Complex complex1 = complex0.log();
      complex1.createComplex(287, 287);
      Complex complex2 = Complex.valueOf((double) 287);
//      try { 
        complex2.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1587.62408994), 76.922001451);
      Complex complex1 = complex0.INF.tanh();
      Complex.valueOf(1366.67275009);
      complex0.ZERO.log();
      Complex complex2 = new Complex(9.599214853681978E245, 0.0);
      Complex complex3 = complex0.add(complex2);
      complex0.multiply(complex3);
      complex1.asin();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.NaN.createComplex(3447.83, 0.0);
      complex4.ZERO.multiply(complex1);
      Complex complex5 = complex0.add(0.0);
      complex5.ZERO.getArgument();
      Complex complex6 = complex2.sinh();
      Complex complex7 = Complex.valueOf(992.7672474607);
      complex7.I.divide(complex3);
      Complex complex8 = Complex.ZERO;
      complex7.add(complex8);
      Complex complex9 = complex6.acos();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.cosh();
      complex11.I.multiply(complex0);
      Complex complex12 = complex11.acos();
      Complex complex13 = complex12.ZERO.cos();
      Complex complex14 = complex12.ONE.add(complex11);
      complex10.ZERO.cos();
      complex9.getArgument();
      complex11.atan();
      Complex complex15 = complex12.sqrt1z();
      complex2.sinh();
      complex13.getField();
      complex6.readResolve();
      complex14.sqrt1z();
      complex4.divide(0.0);
      complex15.abs();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.exp();
      complex2.ZERO.abs();
      complex2.tanh();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex3.multiply(0.0);
      complex4.ONE.subtract(Double.NaN);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.tanh();
      Object object0 = complex1.readResolve();
      complex5.I.getField();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex6.multiply(1572.83856);
      complex9.ONE.negate();
      Object object1 = new Object();
      complex6.equals(object1);
      complex5.getArgument();
      complex8.hashCode();
      complex0.getField();
      complex8.equals(object0);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(1.5510089388648915E101, 2888.278);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.INF.pow(2.0);
      Complex complex2 = complex1.add(complex0);
      complex2.INF.cosh();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.exp();
      complex3.I.asin();
      complex0.hashCode();
      complex4.getReal();
      complex1.isInfinite();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      complex1.INF.abs();
      complex1.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.ONE.add(41.657);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.divide(complex3);
      complex4.INF.conjugate();
      complex0.ZERO.hashCode();
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      Complex complex6 = complex3.ZERO.add(complex1);
      Complex complex7 = Complex.valueOf(41.657, 0.0);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex1.ONE.createComplex(0.0, 0.0);
      complex8.ONE.cos();
      Complex complex10 = complex5.conjugate();
      complex7.getField();
      complex10.ONE.atan();
      Complex complex11 = complex7.subtract(0.0);
      complex2.subtract(1.0);
      complex11.acos();
      complex6.sqrt1z();
      complex2.abs();
      complex9.getReal();
      Complex complex12 = complex6.divide(2763.44);
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-172.251276606));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.ONE.log();
      complex1.INF.createComplex((-172.251276606), (-172.251276606));
      complex4.I.divide((-172.251276606));
      Complex.valueOf((-172.251276606), 0.0);
      Complex complex5 = complex1.pow((-1537.6009080396127));
      complex5.ONE.sin();
      complex1.isNaN();
      complex3.isNaN();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.INF.sqrt1z();
      complex0.add(complex1);
      complex0.getField();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.I.subtract(complex2);
      complex3.INF.sqrt();
      complex3.NaN.sinh();
      complex3.ZERO.exp();
      complex5.ZERO.multiply(complex3);
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex0.add(5.016820182185716E-121);
      complex6.reciprocal();
      Complex complex8 = complex4.add(5.016820182185716E-121);
      Complex complex9 = complex2.acos();
      complex9.I.negate();
      complex9.I.tan();
      Complex complex10 = complex0.pow(453.3504460931654);
      complex10.I.abs();
      Complex complex11 = complex10.ZERO.negate();
      Complex complex12 = complex7.multiply(0.0);
      complex12.I.atan();
      complex7.isInfinite();
      Complex complex13 = complex11.exp();
      complex13.I.atan();
      complex5.getReal();
      Complex complex14 = complex9.add(1.0);
      complex14.toString();
      complex8.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply((-134));
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex2.ONE.tanh();
      complex3.ONE.subtract(complex0);
      complex0.multiply((-20.0));
      Complex complex4 = complex0.atan();
      complex4.toString();
      int int0 = 1;
      Complex complex5 = complex1.multiply(1);
//      try { 
        complex5.nthRoot((-134));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -134
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-635.5818));
      Complex complex1 = complex0.ONE.log();
      complex0.I.getArgument();
      Complex complex2 = complex1.I.asin();
      complex2.NaN.divide(complex1);
      Complex complex3 = complex0.tanh();
      complex1.tanh();
      Complex complex4 = complex0.exp();
      complex4.sin();
      complex3.subtract((-635.5818));
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.ONE.acos();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex3.ONE.tan();
      complex4.ONE.cosh();
      complex0.getImaginary();
      complex4.createComplex(1.9642232209552433E87, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 3.720075801577098E-44);
      complex1.add(complex5);
      complex5.pow(7.316033240396569E150);
      Complex.valueOf(Double.NaN, 7.316033240396569E150);
      complex5.readResolve();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.NaN;
      complex0.multiply(complex2);
      Complex complex3 = complex1.sin();
      complex3.INF.add(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex4.ONE.add(793.990083);
      Complex complex8 = complex7.ONE.reciprocal();
      complex7.I.readResolve();
      complex8.getField();
      complex6.pow(complex0);
      complex4.INF.log();
      Complex complex9 = complex5.cosh();
      complex9.tan();
      Complex complex10 = complex1.divide(complex5);
      complex9.toString();
      complex10.add(793.990083);
      complex1.log();
      Complex.valueOf(793.990083);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.NaN.reciprocal();
      complex1.NaN.add(complex0);
      complex1.NaN.readResolve();
      complex0.hashCode();
      Complex complex3 = Complex.valueOf((-1.0), (-2147.139418));
      complex3.INF.pow(1345.8684);
      complex3.INF.getArgument();
      complex0.toString();
      complex1.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = Complex.valueOf((-1669.7), (-1759.0));
      complex4.toString();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.I.sinh();
      complex7.I.pow(1345.8684);
      complex8.sin();
      complex8.cosh();
      complex2.pow((-365.1122));
      complex7.getImaginary();
      complex8.isNaN();
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.tan();
      Complex complex1 = complex0.asin();
      complex0.I.reciprocal();
      complex1.I.add((-20.0));
      complex1.INF.reciprocal();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.subtract(complex0);
      complex3.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.NaN.pow((-52.3513));
      complex3.ZERO.toString();
      Complex complex4 = complex0.asin();
      complex4.INF.abs();
      complex4.getImaginary();
      complex4.getArgument();
      Complex complex5 = complex2.add((-52.3513));
      complex5.subtract(-0.0);
      Complex complex6 = complex3.sqrt();
      complex6.I.abs();
      complex6.ONE.getArgument();
      Complex complex7 = complex4.multiply(-0.0);
      Complex.valueOf((-1522.2));
      complex7.add(complex3);
      complex0.log();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(3.7201467248814224E-9);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = (-2319.0);
      complex2.createComplex(3.7201467248814224E-9, (-2319.0));
      Complex complex3 = Complex.ZERO;
      complex0.NaN.multiply(complex3);
      complex0.I.sqrt();
      Complex complex4 = complex0.sqrt1z();
      complex4.INF.pow(3.7201467248814224E-9);
      int int0 = 7;
      Complex complex5 = complex0.multiply(7);
      complex5.I.getField();
      // Undeclared exception!
      complex5.nthRoot(5193);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex1.NaN.log();
      complex1.INF.multiply(0);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      Complex complex5 = complex0.multiply((-418));
      complex5.I.createComplex((-418), 0.0);
      complex2.conjugate();
      complex4.toString();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-3613.3334);
      Complex complex0 = Complex.valueOf((-3613.3334));
      Complex complex1 = complex0.multiply(2487);
      Complex complex2 = complex1.ONE.add((double) 2487);
      complex2.ZERO.getArgument();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      complex3.ONE.sinh();
      Complex complex4 = complex3.ZERO.add((double) 2487);
      complex4.ZERO.getField();
      Complex complex5 = complex0.sqrt();
      complex3.negate();
      Complex complex6 = complex4.cosh();
      complex6.ZERO.multiply((-3613.3334));
//      try { 
        complex5.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(1235.7519);
      complex0.isNaN();
      complex0.INF.tanh();
      Complex complex1 = complex0.divide(1235.7519);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.NaN.exp();
      complex3.acos();
      Complex complex4 = complex2.NaN.multiply(1235.7519);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex6.NaN.tan();
      complex2.I.reciprocal();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex8.ONE.asin();
      complex1.divide(complex6);
      Complex.valueOf(0.0);
      complex1.atan();
      Complex complex11 = complex7.pow(2.528773307800293);
      complex11.I.sqrt1z();
      complex1.atan();
      Complex complex12 = complex1.log();
      complex12.ZERO.readResolve();
      complex0.pow(complex6);
      complex8.asin();
      complex10.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      complex2.hashCode();
      Complex complex3 = Complex.ONE;
      complex2.ONE.add(complex3);
      complex0.multiply(0.0);
      complex2.INF.asin();
      Complex complex4 = complex0.INF.conjugate();
      complex4.I.negate();
      Complex complex5 = complex2.tanh();
      complex5.ONE.cos();
      complex2.NaN.tanh();
      Complex.valueOf(1.475020408630371, (-2113.7377903491897));
      complex1.negate();
      complex2.reciprocal();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(2617);
      Complex complex1 = new Complex((-121.55750830017477), 1936.9293064);
      complex0.divide(complex1);
      Complex complex2 = complex0.asin();
      complex1.NaN.divide((-580.868330709));
      Complex complex3 = complex2.INF.subtract((-2432.3899356415));
      Complex complex4 = complex2.ZERO.tan();
      complex1.getField();
      complex3.hashCode();
      complex3.pow(complex4);
      complex2.acos();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.tan();
      complex2.ONE.tanh();
      Complex complex3 = Complex.valueOf(5.2364136172269755E-8, 5.2364136172269755E-8);
      complex1.ZERO.toString();
      complex3.ONE.pow(complex1);
      Complex complex4 = complex0.negate();
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.ZERO.cosh();
      complex6.ONE.abs();
      Complex complex7 = complex6.subtract(complex1);
      Complex complex8 = complex7.INF.add(5.2364136172269755E-8);
      complex0.exp();
      Complex complex9 = complex5.multiply(1);
      complex5.readResolve();
      Complex complex10 = complex4.ZERO.sqrt();
      complex7.toString();
      complex5.conjugate();
      Complex complex11 = complex9.I.createComplex((-1508.24424), 0.0);
      complex11.I.getArgument();
      complex7.getField();
      Complex complex12 = complex5.atan();
      complex12.ONE.add(complex8);
      complex0.toString();
      complex7.subtract(complex8);
      complex10.log();
      complex8.subtract(complex9);
      complex3.tanh();
      complex4.log();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-643.5619125), (-643.5619125));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(3171.374);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.ONE.divide(complex2);
      Complex complex5 = complex2.pow((-2993.1117811435056));
      complex5.INF.tanh();
      Complex complex6 = complex2.tan();
      complex6.ONE.abs();
      complex0.NaN.add(complex3);
      Complex complex7 = complex2.divide(6.283185307179586);
      Complex complex8 = complex1.sqrt();
      complex8.readResolve();
      Complex.valueOf((-2993.1117811435056));
      complex4.pow((-68.7));
//      try { 
        complex7.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      complex1.pow(2658.77867234);
      complex0.reciprocal();
      complex0.pow(3965.06202653);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.3318578004837036, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.ZERO.sin();
      Complex complex6 = complex4.I.sin();
      complex4.I.hashCode();
      Complex complex7 = complex2.I.negate();
      Complex complex8 = Complex.valueOf(0.0);
      complex3.ZERO.getArgument();
      Complex complex9 = complex1.NaN.sin();
      complex4.NaN.log();
      complex2.ONE.subtract(1.7379989624023438);
      complex1.equals(complex0);
      Complex complex10 = complex3.add(complex0);
      Complex complex11 = complex10.NaN.pow(complex3);
      Complex complex12 = complex3.sqrt();
      Complex complex13 = complex2.I.pow(complex3);
      double double0 = complex12.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      complex1.isInfinite();
      complex6.getArgument();
      boolean boolean0 = complex9.equals(complex8);
      assertSame(complex9, complex11);
      
      complex2.getField();
      Complex complex14 = complex1.divide(Double.POSITIVE_INFINITY);
      assertTrue(complex14.equals((Object)complex5));
      
      boolean boolean1 = complex0.equals(complex10);
      assertTrue(boolean1 == boolean0);
      
      Complex complex15 = complex13.tanh();
      assertEquals(0.5459878416940748, complex15.getImaginary(), 0.01);
      assertEquals(0.8459729348499774, complex15.getReal(), 0.01);
      
      complex6.reciprocal();
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex16 = complex10.divide(1.1199469566345215);
      complex7.getImaginary();
      assertTrue(complex7.equals((Object)complex4));
      
      complex2.hashCode();
      assertTrue(complex2.isInfinite());
      
      Complex complex17 = complex16.subtract(0.3318578004837036);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.48377869860455813, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 236.1437534671);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.NaN.getArgument();
      Complex complex2 = complex1.add((-644.3262802819));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.tanh();
      complex0.tanh();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.INF.reciprocal();
      assertEquals(1.1719227099934433, complex5.getReal(), 0.01);
      
      double double0 = complex4.getReal();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.subtract((-524.05753));
      assertEquals(524.05753, complex8.getReal(), 0.01);
      
      Complex complex9 = complex7.divide(complex2);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex6));
      assertEquals(2.5204797728592724E-4, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.reciprocal();
      complex1.I.atan();
      Complex.valueOf(0.0);
      Complex complex5 = complex0.ZERO.divide(complex4);
      Complex complex6 = Complex.NaN;
      complex5.subtract(complex6);
      complex3.ZERO.sinh();
      Complex complex7 = complex3.ONE.exp();
      complex7.INF.tanh();
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.INF.abs();
      List<Complex> list0 = complex0.nthRoot(1);
      assertTrue(list0.contains(complex0));
      
      Complex complex3 = new Complex(1);
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex5.ZERO.multiply(complex1);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex7 = complex0.divide(complex3);
      String string0 = complex3.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex8 = complex7.I.tan();
      Complex complex9 = complex8.ZERO.multiply(1);
      assertEquals(0.7615941559557649, complex8.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex6));
      
      Complex complex10 = complex2.log();
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex7.tan();
      assertEquals(1.557407724654902, complex11.getReal(), 0.01);
      
      Complex complex12 = complex4.cos();
      complex0.getArgument();
      assertTrue(complex0.equals((Object)complex12));
  }
}
