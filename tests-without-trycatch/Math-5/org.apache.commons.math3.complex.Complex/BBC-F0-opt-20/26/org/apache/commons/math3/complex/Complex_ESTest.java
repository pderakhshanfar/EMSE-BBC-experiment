/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:06:34 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.pow((double) 1832);
      complex2.acos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1832, 20.0);
      Complex complex1 = new Complex(1832);
      Complex complex2 = complex1.sinh();
      complex2.nthRoot(1832);
      Complex complex3 = complex1.asin();
      complex0.tan();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.5403023058681398, (-20.0));
      complex1.tan();
      Complex complex2 = Complex.valueOf(0.5403023058681398);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.63985600437427E180);
      Complex complex1 = complex0.NaN.negate();
      complex1.ZERO.nthRoot(919);
      Complex complex2 = complex0.divide(0.6218148469924927);
      complex2.ONE.log();
      Complex complex3 = complex2.multiply(4.983191803254889E-7);
      Complex complex4 = complex3.ONE.subtract(complex2);
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex3.ONE.cosh();
      complex1.createComplex(2.85040095144011776E17, 0.6218148469924927);
      Complex complex8 = Complex.valueOf(4.983191803254889E-7, 2.0);
      complex8.NaN.divide((-485.6857308191378));
      complex6.subtract(2.0);
      Complex complex9 = complex6.atan();
      complex9.NaN.cos();
      Complex complex10 = complex4.reciprocal();
      complex10.ONE.multiply(complex7);
      Complex complex11 = complex2.add(2837.250158);
      complex4.add(4.63985600437427E180);
      complex1.getField();
      Complex complex12 = complex5.atan();
      complex1.sinh();
      complex6.tanh();
      complex4.sqrt1z();
      complex11.multiply(919);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1832, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-3562), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex0.subtract((-1403.623176));
      complex1.add((-4.789917000227385E145));
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1832, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1832, Double.POSITIVE_INFINITY);
      complex0.multiply(1541);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1809, Double.POSITIVE_INFINITY);
      complex0.ZERO.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3304.68, 3304.68);
      Complex complex1 = complex0.multiply(37);
      Complex complex2 = complex1.INF.divide((double) 37);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.sqrt1z();
      complex1.tan();
      complex3.ONE.asin();
      complex2.toString();
      complex0.pow((double) 37);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex1.cos();
      complex1.ZERO.add((-2474.174183));
      Complex.valueOf((double) 37, 0.0);
      Complex complex9 = complex4.asin();
      complex9.NaN.add(complex1);
      complex2.tanh();
      complex9.ZERO.log();
      Complex complex10 = complex4.exp();
      complex9.getField();
      complex7.tan();
      complex5.asin();
      complex8.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tanh();
      complex0.abs();
      Complex complex2 = new Complex(2.718281828459045);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-4253.61969321));
      Complex complex1 = Complex.I;
      complex0.ZERO.multiply(complex1);
      complex0.atan();
      Complex.valueOf(6318.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-245.39057835), 1114.37626112966);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      Complex complex1 = complex0.reciprocal();
      complex1.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = complex0.tanh();
      complex1.abs();
      complex1.abs();
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(671.074324388235);
      Complex complex2 = new Complex(2.807412843982421, 3871.55604459);
      complex1.abs();
      complex1.abs();
      complex0.multiply(complex1);
      complex2.abs();
      complex1.negate();
      Complex complex3 = complex2.reciprocal();
//      try { 
        complex3.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(221.54697);
      Complex complex2 = new Complex(2.0, 2.0);
      Complex complex3 = complex2.tanh();
      complex1.reciprocal();
      Complex complex4 = complex1.subtract((-4.2010168716546394E36));
      complex2.getReal();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.valueOf(221.54697);
      complex6.getField();
      complex4.asin();
      Complex complex7 = complex0.subtract(complex4);
      complex3.log();
      complex1.sqrt1z();
      Complex complex8 = new Complex((-4.2010168716546394E36));
      complex4.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.tanh();
      complex0.abs();
      complex1.abs();
      Complex complex2 = new Complex(0.7615941559557649, 1.0);
      complex2.multiply(complex1);
      Complex complex3 = complex1.tan();
      complex3.NaN.divide(0.15);
      complex2.reciprocal();
      complex2.subtract(531.8445127);
      complex1.pow(1.3575372396796738E-7);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(288.5098285867578);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.ONE.getArgument();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.equals(complex1);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.divide(1666.83722759);
      Complex complex2 = complex1.sqrt();
      complex2.acos();
      Complex complex3 = Complex.valueOf(1666.83722759, Double.POSITIVE_INFINITY);
      complex3.negate();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1.301267783434537E-7), (-408.333015549901));
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.divide((-1.1082738637924194E-7));
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex1.cosh();
      complex3.I.toString();
      complex1.tanh();
      Complex complex4 = complex1.INF.divide(complex3);
      Complex complex5 = complex3.add((-408.333015549901));
      Complex complex6 = complex3.conjugate();
      complex5.I.log();
      Complex complex7 = complex6.I.log();
      complex2.sqrt1z();
      Complex complex8 = complex5.subtract(complex0);
      Complex complex9 = Complex.valueOf((-1.0000000000000004));
      complex2.sqrt1z();
      complex4.add((-20.0));
      Complex.valueOf((-1.301267783434537E-7));
      Complex.valueOf((-1.1082738637924194E-7), 1821.888153513603);
      Complex complex10 = complex0.multiply((-1.1082738637924194E-7));
      complex10.I.nthRoot(2667);
      Complex complex11 = complex8.conjugate();
      complex11.NaN.hashCode();
      complex7.abs();
      complex6.subtract((-1.1082738637924194E-7));
      complex1.createComplex((-1.301267783434537E-7), 1821.888153513603);
      complex5.add(complex9);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(166.9776401710094);
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.divide(166.9776401710094);
      Complex complex3 = complex0.tanh();
      complex3.abs();
      complex0.abs();
      Complex complex4 = Complex.NaN;
      complex1.reciprocal();
      Complex complex5 = complex3.subtract((-4.2010168716546394E36));
      complex2.getReal();
      Complex complex6 = complex5.conjugate();
      complex6.getField();
      Complex complex7 = complex4.subtract(4516261.46760753);
      Complex complex8 = complex6.divide(1.0);
      complex7.asin();
      complex8.acos();
      Complex.valueOf((-1198.0232499089454), 776.88);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(complex0);
      Complex complex2 = new Complex((-1020.2465674208), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tanh();
      complex3.abs();
      complex2.abs();
      Complex complex4 = complex3.negate();
      complex0.multiply(complex3);
      complex3.tan();
      complex1.reciprocal();
      Complex complex5 = Complex.I;
      complex5.subtract(690.0);
      complex4.getReal();
      complex1.getField();
      Complex complex6 = Complex.ONE;
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2595.183609592668);
      complex0.nthRoot(782);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf((double) 782, 2595.183609592668);
      complex3.ONE.log();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.divide((-2604.23969024728));
      complex5.I.multiply(5);
      complex5.NaN.negate();
      complex1.sqrt1z();
      Complex complex7 = complex6.acos();
      complex7.multiply(782);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4.308816643345461E286, (-1361.0));
      complex0.ZERO.add((-1.2471543820137223));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.I.add(complex0);
      complex2.INF.multiply(complex0);
      Complex complex4 = complex0.multiply(0.684319257736206);
      complex4.ZERO.sqrt1z();
      Complex complex5 = complex1.multiply(0.684319257736206);
      complex0.log();
      Complex complex6 = Complex.NaN;
      complex1.add(complex6);
      Complex complex7 = complex3.sqrt();
      complex1.divide(4.308816643345461E286);
      complex5.cosh();
      Complex complex8 = complex7.negate();
      complex8.getField();
      complex1.multiply(856031463);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.log();
      complex3.sqrt1z();
      Complex complex5 = new Complex((-27880.53231707911));
      Complex complex6 = Complex.valueOf(34.767699222637255);
      complex4.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.conjugate();
      complex3.getField();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.divide(1.1082738637924194E-7);
      Complex complex6 = complex2.asin();
      complex6.log();
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(221.54697);
      Complex complex2 = new Complex(2.0, 2.0);
      Complex complex3 = complex2.tanh();
      complex3.abs();
      complex0.abs();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.subtract((-2753.70208691));
      complex1.getReal();
      complex6.multiply(221.54697);
      complex3.getArgument();
      complex4.acos();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(221.54697);
      Complex complex1 = new Complex(2.0, 2.0);
      Complex complex2 = complex1.tanh();
      complex2.abs();
      Complex complex3 = Complex.valueOf((-0.39704833743513734), 7582873.18345249);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.tanh();
      Complex.valueOf(1671848.0);
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = new Complex(221.54697, (-1477.0));
      complex0.hashCode();
      complex1.tanh();
      Complex complex8 = complex6.exp();
      complex1.abs();
      Complex complex9 = complex0.tan();
      complex9.getReal();
      complex5.abs();
      Complex complex10 = Complex.ZERO;
      complex10.add(2.0);
      complex0.tanh();
      complex4.readResolve();
      complex3.equals(complex10);
      complex3.exp();
      complex8.sin();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.multiply((-275727));
      complex0.add(complex1);
      Complex complex2 = complex0.conjugate();
      complex1.getField();
      Complex complex3 = complex2.subtract((double) (-275727));
      Complex complex4 = Complex.ZERO;
      complex0.divide(1.1082738637924194E-7);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.subtract(complex5);
      complex4.log();
      complex5.sqrt1z();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(166.9776401710094);
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.divide(166.9776401710094);
      Complex complex3 = complex0.tanh();
      complex3.abs();
      complex0.abs();
      Complex complex4 = complex1.negate();
      complex1.reciprocal();
      Complex complex5 = complex3.subtract((-4.2010168716546394E36));
      complex2.getReal();
      Complex complex6 = complex5.conjugate();
      complex3.getField();
      Complex complex7 = complex4.subtract(4516261.46760753);
      complex6.divide(1.0);
      complex7.asin();
      complex2.subtract(complex7);
      complex3.log();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = new Complex((-27880.53231707911));
      complex8.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex.valueOf(1.0005716603861212);
      Complex complex1 = Complex.INF;
      complex1.I.add(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-2499.973659889303));
      Complex complex2 = complex0.divide((-2499.973659889303));
      Complex complex3 = complex2.tanh();
      complex0.abs();
      complex1.abs();
      Complex complex4 = complex1.negate();
      complex1.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract((-2499.973659889303));
      complex6.getReal();
      Complex complex7 = complex3.conjugate();
      complex5.getField();
      complex3.subtract(0.0);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex7.asin();
      Complex complex8 = complex4.subtract(complex3);
      Complex complex9 = complex8.log();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.exp();
      complex2.subtract(complex0);
      Complex complex3 = complex1.subtract((-1595.6000000021052));
      Complex complex4 = complex3.multiply(3318);
      Complex complex5 = complex4.NaN.subtract(0.0);
      Complex complex6 = complex4.INF.createComplex(3318, (-845.115602154139));
      complex6.ZERO.pow(complex5);
      complex6.INF.getArgument();
      complex5.I.reciprocal();
      Complex complex7 = complex0.multiply((-1595.6000000021052));
      complex7.ONE.getArgument();
      complex5.log();
      Complex complex8 = Complex.valueOf((-1.4255188208147591));
      Complex complex9 = complex7.createComplex(6.283185307179586, 3318);
      complex8.atan();
      complex9.tan();
      Complex.valueOf(8.881784197001252E-16, 0.0);
      complex7.pow((-647.62140300339));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-3613));
      Complex complex2 = complex1.ONE.acos();
      complex2.pow((double) (-3613));
      complex2.sin();
      Complex complex3 = complex1.ZERO.log();
      complex3.multiply((double) (-3613));
      complex1.INF.toString();
      complex1.NaN.tanh();
      complex0.readResolve();
      int int0 = 1356;
      complex0.INF.log();
//      try { 
        complex0.nthRoot((-978));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -978
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(166.9776401710094);
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.divide(166.9776401710094);
      Complex complex3 = complex0.tanh();
      complex3.abs();
      complex0.abs();
      Complex complex4 = complex1.negate();
      complex1.reciprocal();
      Complex complex5 = complex3.subtract((-4.2010168716546394E36));
      complex2.getReal();
      Complex complex6 = complex5.conjugate();
      complex2.getField();
      Complex complex7 = complex4.subtract(4516261.46760753);
      complex6.divide(1.0);
      complex7.asin();
      complex2.subtract(complex7);
      complex3.log();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1129.63598254672), (-1129.63598254672));
      Complex complex1 = new Complex(9.222671009756424E-306);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.ONE.acos();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.ONE;
      complex3.subtract(complex0);
      complex3.multiply(complex0);
      complex1.nthRoot(4967);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      complex1.NaN.getArgument();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.acos();
      complex2.sinh();
      Complex complex3 = new Complex(200.6431, Double.NaN);
      complex3.subtract(0.0);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(165.76743687);
      complex0.getField();
      complex0.abs();
      Complex complex1 = Complex.valueOf(1.5707963267948966, Double.POSITIVE_INFINITY);
      complex1.ZERO.hashCode();
      complex0.add(complex1);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.tanh();
      complex4.ONE.exp();
      Complex complex5 = complex3.ZERO.conjugate();
      complex5.ZERO.cosh();
      complex2.NaN.cosh();
      Complex complex6 = complex2.multiply((-3259.0));
      complex6.conjugate();
      complex0.I.add(Double.POSITIVE_INFINITY);
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = Complex.valueOf((-27880.53231707909));
      Complex complex9 = complex8.conjugate();
      complex9.conjugate();
      complex7.subtract((-3076.398450852));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.cos();
      Complex complex1 = complex0.reciprocal();
      complex0.exp();
      Complex complex2 = complex1.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.acos();
      complex2.nthRoot(1431655765);
      complex3.tanh();
      Complex complex4 = complex3.divide((double) 1431655765);
      complex4.pow((double) 1431655765);
      Complex complex5 = new Complex((-2010.1929));
      Complex complex6 = Complex.ZERO;
      complex6.multiply((-821.4426));
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.valueOf((-2010.1929), 20.0);
      complex8.getArgument();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      complex1.I.exp();
      Complex complex2 = complex0.I.divide(2984.272138061731);
      Complex complex3 = complex2.NaN.exp();
      complex3.NaN.negate();
      Complex complex4 = complex0.createComplex(1719.47854676704, 1719.47854676704);
      Complex complex5 = complex4.I.subtract(2984.272138061731);
      complex4.sinh();
      complex4.readResolve();
      complex5.sinh();
      complex1.pow(3893.7348609967);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.sin();
      complex2.I.multiply(474);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex0.reciprocal();
      complex5.acos();
      Complex complex6 = complex3.multiply(complex1);
      complex5.acos();
      Complex complex7 = complex6.INF.multiply(complex5);
      Complex complex8 = complex7.ZERO.createComplex(474, 4061.253540003313);
      complex8.ONE.tan();
      complex4.toString();
      Complex complex9 = complex1.ZERO.divide(20.0);
      complex3.nthRoot(474);
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex10.cosh();
      complex11.abs();
      complex2.nthRoot(474);
      Complex complex12 = new Complex(1.681239366531372);
      complex9.add(complex12);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.pow(2765.763);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.divide(2765.763);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.tanh();
      complex4.abs();
      complex2.abs();
      Complex complex9 = Complex.valueOf(9.140964977432485E-8, 5488173.463384);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex7.reciprocal();
      complex0.subtract((-1.0));
      complex11.getReal();
      Complex complex12 = complex0.conjugate();
      complex12.getField();
      complex6.subtract(3893.7348609967);
      Complex complex13 = complex10.divide(2765.763);
      complex13.asin();
//      try { 
        complex8.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1996.5556), (-1996.5556));
      Complex complex1 = Complex.valueOf((-1996.5556), (-1996.5556));
      complex1.multiply(complex0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.add(1.5707963267948966);
      complex1.NaN.subtract(20.0);
      complex0.ONE.hashCode();
      complex0.hashCode();
      complex1.cos();
      complex1.I.createComplex((-345.53814233551), (-345.53814233551));
      complex0.toString();
      Complex complex3 = complex0.multiply(20.0);
      Complex complex4 = complex3.reciprocal();
      complex4.INF.add(1.5707963267948966);
      complex2.getField();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.sqrt1z();
      complex6.getField();
      complex6.ONE.sqrt();
      complex5.readResolve();
      Complex complex7 = complex1.subtract(2089.99113837763);
      Complex complex8 = complex5.cos();
      complex7.conjugate();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex9.ONE.subtract((-3137.0));
      complex10.I.log();
      complex8.createComplex(0.5403023058681398, 20.0);
      complex7.conjugate();
      complex0.sqrt1z();
      complex4.exp();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      complex0.I.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tan();
      complex3.NaN.toString();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.INF.divide(83.698109);
      Complex complex6 = complex4.I.cos();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex2.tanh();
      complex1.add(complex8);
      Complex complex10 = new Complex(83.698109, 972);
      complex5.hashCode();
      Complex.valueOf(83.698109);
      complex9.exp();
      complex6.abs();
      Complex complex11 = complex10.tan();
      complex7.getReal();
      complex11.abs();
      complex4.add((-1.5917476684968344E10));
      Complex complex12 = Complex.I;
      complex4.equals(complex10);
      complex4.exp();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1996.5556), (-1996.5556));
      Complex complex1 = Complex.valueOf((-1996.5556), (-1996.5556));
      complex1.multiply(complex0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      complex0.getArgument();
      complex1.NaN.tanh();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.I.cosh();
      complex3.ZERO.negate();
      // Undeclared exception!
      complex3.nthRoot(2147095491);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.ONE.add(6604.373450175882);
      complex0.I.sqrt();
      complex0.nthRoot(2947);
      Complex complex1 = complex0.log();
      complex1.ONE.tanh();
      complex1.INF.getArgument();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.tan();
      complex3.multiply((-4175));
      complex1.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.INF.pow(2765.763);
      complex4.I.divide(2765.763);
      Complex complex5 = complex3.I.tanh();
      complex5.NaN.abs();
      complex0.abs();
      complex3.hashCode();
      Complex complex6 = complex0.conjugate();
      complex3.sin();
      complex2.negate();
      complex4.subtract(complex6);
      Complex complex7 = Complex.ONE;
      complex7.multiply(Double.NaN);
      complex7.ONE.add(2765.763);
      complex4.abs();
      complex2.subtract((-2375.246));
      complex0.toString();
//      try { 
        complex7.nthRoot((-2130757292));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,130,757,292
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sinh();
      complex2.ONE.conjugate();
      Complex complex3 = complex2.INF.pow(2765.763);
      complex3.I.divide(2765.763);
      complex0.NaN.abs();
      complex0.abs();
      Complex complex4 = complex0.negate();
      complex4.NaN.reciprocal();
      Complex complex5 = complex4.subtract(Double.NaN);
      complex0.getReal();
      complex1.getField();
      Complex complex6 = complex1.subtract(Double.NaN);
      complex3.divide(2765.763);
      complex5.asin();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      complex0.I.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tan();
      complex3.NaN.toString();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.INF.divide(83.698109);
      Complex complex6 = complex4.I.cos();
      complex3.cosh();
      complex6.I.nthRoot(972);
      Complex complex7 = complex3.add(complex1);
      complex7.cosh();
      Complex complex8 = complex4.atan();
      Complex complex9 = complex8.asin();
      Complex complex10 = Complex.valueOf(83.698109, (-20.0));
      complex10.asin();
      Complex complex11 = complex0.tanh();
      Complex complex12 = Complex.valueOf(1054.2);
      Complex complex13 = complex12.add(complex11);
      Complex complex14 = new Complex(972, (-20.0));
      complex3.hashCode();
      complex9.tanh();
      Complex complex15 = complex3.exp();
      complex1.abs();
      complex4.tan();
      complex1.getReal();
      complex9.abs();
      complex5.add(972.0);
      complex2.tanh();
      Object object0 = complex15.readResolve();
      complex13.equals(object0);
      complex9.exp();
      complex14.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.ZERO.acos();
      complex2.NaN.getArgument();
      Complex complex3 = complex2.multiply((-3170));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.tanh();
      complex3.subtract(complex5);
      Complex complex6 = complex0.tanh();
      complex3.getField();
      Complex complex7 = Complex.valueOf(Double.NaN, 0.4974554181098938);
      complex7.getReal();
      complex6.isInfinite();
      complex7.equals(complex1);
      complex0.sinh();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.cosh();
      complex0.INF.readResolve();
      Complex complex3 = complex0.ZERO.pow((-1001.356323849));
      complex1.isInfinite();
      Complex complex4 = complex2.exp();
      complex0.ZERO.getField();
      Complex complex5 = complex0.pow(complex1);
      complex5.hashCode();
      complex5.ZERO.toString();
      Complex complex6 = complex1.divide(complex0);
      complex6.NaN.getArgument();
      complex2.getField();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = Complex.NaN;
      complex4.ONE.asin();
      complex2.INF.tanh();
      Complex complex8 = Complex.valueOf((-2328.76854670658));
      complex8.sin();
      Complex.valueOf(Double.NaN);
      Object object0 = new Object();
      complex3.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-1996.5556), (-1996.5556));
      Complex complex1 = Complex.valueOf((-1996.5556), (-1996.5556));
      Complex complex2 = complex1.multiply(complex0);
      complex2.toString();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = new Complex((-1996.5556), 1525.327684829972);
      Complex complex5 = Complex.valueOf((-1996.5556));
      complex5.hashCode();
      complex4.exp();
      complex0.abs();
      complex1.tan();
      complex1.getReal();
      complex5.abs();
      complex2.add(20.0);
      complex3.tanh();
      complex5.equals("(0.0, 7972468.52778272)");
      complex3.exp();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex0.INF.multiply(3385.75353);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.createComplex((-1177.5), (-1177.5));
      Complex complex6 = Complex.valueOf((-1177.5), (-1177.5));
      complex6.ONE.hashCode();
      Complex complex7 = complex1.conjugate();
      complex3.reciprocal();
      complex5.subtract(3385.75353);
      complex3.getReal();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = Complex.ONE;
      complex9.getField();
      complex7.subtract(0.0);
      complex6.divide(1253.785754611737);
      Complex complex10 = complex8.asin();
      complex10.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.INF.pow(2765.763);
      complex1.toString();
      Complex.valueOf(2765.763);
      complex3.sin();
      Complex.valueOf(154.6671762331);
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      complex0.I.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tan();
      complex3.NaN.toString();
      Complex complex4 = complex3.NaN.sqrt();
      complex3.INF.divide(83.698109);
      Complex complex5 = complex4.I.cos();
      complex3.cosh();
      complex5.I.nthRoot(972);
      Complex complex6 = complex3.add(complex1);
      Complex complex7 = complex4.atan();
      complex0.negate();
      complex6.reciprocal();
      complex3.subtract((-842.3));
      complex2.getReal();
      Complex complex8 = complex6.conjugate();
      complex8.getField();
      complex5.subtract(3893.7348609967);
      complex8.ZERO.nthRoot(309);
      Complex complex9 = complex3.divide(1332.63);
      complex9.asin();
      complex7.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-467.96), (-467.96));
      Complex complex1 = complex0.I.createComplex(20.0, 1343.4025);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.INF.cosh();
      complex3.ONE.getField();
      Complex complex4 = complex1.I.exp();
      complex4.I.toString();
      Complex complex5 = complex1.NaN.divide((-1553.34759834));
      complex5.ZERO.add((-1380.9877872855195));
      Complex complex6 = Complex.valueOf(3434.7685);
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = Complex.valueOf((-467.96), (-467.96));
      complex8.INF.tan();
      complex8.NaN.getArgument();
      Complex complex9 = complex8.subtract(complex7);
      Complex complex10 = complex2.sin();
      complex7.multiply(complex3);
      complex9.INF.exp();
      complex8.createComplex(20.0, (-467.96));
      Complex.valueOf((-467.96), (-1553.34759834));
      Complex complex11 = complex9.exp();
      complex11.I.acos();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.multiply((-1.0));
      complex1.NaN.cosh();
      complex0.NaN.createComplex((-1.0), (-3520.095414252681));
      Complex complex2 = complex1.divide(1343.4025);
      Complex complex3 = complex2.INF.exp();
      complex2.ZERO.cosh();
      Complex complex4 = new Complex((-2825.28));
      complex0.pow(complex4);
      Complex complex5 = complex4.add(complex2);
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.pow(628.351151665);
      Complex complex4 = complex1.divide((-1617.953331369719));
      complex0.tanh();
      complex3.abs();
      complex2.abs();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.subtract(2765.763);
      Complex complex9 = complex0.subtract(2765.763);
      complex4.getReal();
      complex9.conjugate();
      complex8.getField();
      Complex complex10 = complex7.subtract(628.351151665);
      complex5.divide(Double.NaN);
      complex6.asin();
      complex10.subtract(complex6);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(1502.70780054, 1502.70780054);
      Complex complex3 = complex0.subtract(complex2);
      complex3.acos();
      complex2.reciprocal();
      Complex complex4 = complex2.pow(1502.70780054);
      complex3.tan();
      complex0.tanh();
      complex4.asin();
      Complex complex5 = complex0.exp();
      Complex complex6 = Complex.valueOf(1502.70780054);
      complex6.log();
      complex5.getReal();
      complex2.acos();
      complex1.acos();
      Complex complex7 = Complex.valueOf((-2.134387988350615E-80), 2.7487849807248755E-43);
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.INF;
      complex8.subtract(complex9);
      Complex complex10 = new Complex((-2.134387988350615E-80), 793.0);
      complex10.getReal();
//      try { 
        complex7.nthRoot((-1230));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,230
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(166.9776401710094);
      complex0.ZERO.multiply(1670);
      complex0.nthRoot(1293);
      Complex complex1 = Complex.valueOf(166.9776401710094, (double) 1293);
      complex0.multiply(1293);
      Complex complex2 = Complex.NaN;
      complex2.multiply((double) 1670);
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.ONE;
      complex3.add(complex4);
      Complex.valueOf(1.0, 363.332);
      complex2.createComplex(363.332, (-2421.4587631648));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1617.953331369719), 1502.70780054);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = complex0.pow((-1617.953331369719));
      Complex complex6 = complex5.tan();
      complex5.NaN.tanh();
      complex6.asin();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex6.log();
      complex8.NaN.exp();
      complex8.pow(2.414213562373095);
      complex7.cosh();
      Complex complex9 = complex4.multiply(2.414213562373095);
      complex3.tan();
      complex9.exp();
      Complex complex10 = complex9.pow(complex3);
      Complex complex11 = complex0.acos();
      Complex complex12 = complex7.divide(complex0);
      complex10.pow(0.0);
      Complex complex13 = complex12.sqrt();
      complex11.hashCode();
      complex13.add((-1617.953331369719));
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide(complex0);
      Complex complex2 = complex0.acos();
      complex2.INF.sinh();
      Complex complex3 = complex2.subtract((-4796.0973262944));
      complex1.hashCode();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.I.log();
      complex3.INF.cos();
      complex0.INF.multiply(3385.75353);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = complex0.createComplex((-1177.5), (-1177.5));
      Complex complex5 = Complex.valueOf((-1177.5), (-1177.5));
      complex5.ONE.hashCode();
      Complex complex6 = complex1.conjugate();
      complex6.NaN.sin();
      Complex complex7 = complex6.INF.negate();
      complex6.INF.subtract(complex7);
      complex6.INF.multiply((-1177.5));
      complex4.abs();
      Complex complex8 = complex1.subtract((-2375.246));
      complex8.divide((-2375.246));
      complex4.conjugate();
      Complex complex9 = Complex.INF;
      complex9.nthRoot(380);
      Complex complex10 = Complex.ONE;
      complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1488.09768965));
      Object object0 = new Object();
      complex0.equals(complex1);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = Complex.valueOf((-1177.5), 0.0);
      complex3.hashCode();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.negate();
      complex2.subtract(complex6);
      complex1.abs();
      complex6.subtract(30.09457239383092);
      complex5.toString();
      complex1.nthRoot(1);
      Complex complex7 = complex6.cos();
      complex7.abs();
      Complex.valueOf((-2050610.9771296098), 1.4454470027638629E283);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.subtract(0.0);
      int int0 = 1432;
      complex0.nthRoot(1432);
      Complex complex2 = complex0.exp();
      complex2.getField();
      Complex complex3 = new Complex(1432, 3.4674011002723395);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.pow(3893.7348609967);
      Complex complex6 = Complex.ONE;
      complex6.getField();
      complex6.abs();
      Complex complex7 = complex1.divide((-20.0));
      complex7.conjugate();
//      try { 
        complex5.nthRoot((-2364));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,364
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(17.963153766700415, (-1996.2432613861379));
      Complex complex1 = complex0.tan();
      complex0.sin();
      Complex complex2 = complex1.I.divide(20.0);
      complex2.NaN.tan();
      complex1.createComplex(3679.0, (-1104.0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(17);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.multiply(17);
      complex0.getField();
      Complex complex4 = Complex.valueOf((double) 17, 1.2518336772918701);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.pow(2333.669736);
      complex2.getField();
      complex2.abs();
      Complex complex7 = complex5.divide(6318.0);
      complex6.conjugate();
      complex7.nthRoot(17);
      Complex complex8 = Complex.ONE;
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1617.953331369719), 1502.70780054);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.acos();
      complex2.ONE.reciprocal();
      Complex complex4 = complex0.pow((-1617.953331369719));
      Complex complex5 = complex4.tan();
      complex4.NaN.tanh();
      Complex complex6 = complex5.asin();
      complex3.exp();
      complex1.subtract(complex6);
      complex0.subtract((-1617.953331369719));
      Complex complex7 = Complex.NaN;
      complex7.pow(5489.60527954);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = (Complex)complex0.INF.readResolve();
      Complex complex4 = complex1.conjugate();
      complex4.pow(2765.763);
      complex0.divide((-1001.356323849));
      complex0.tanh();
      complex0.abs();
      Complex complex5 = Complex.ZERO;
      complex5.abs();
      complex0.negate();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex0.subtract(0.0);
      complex5.subtract(0.0);
      complex2.getReal();
      complex0.conjugate();
      complex5.getField();
      complex6.subtract(1.5430806348152437);
      complex7.divide((-6.971366338144781E56));
      complex7.asin();
      complex6.subtract(complex7);
      Complex complex8 = Complex.I;
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.cosh();
      complex0.INF.readResolve();
      complex0.ZERO.pow((-1001.356323849));
      complex1.isInfinite();
      Complex complex3 = complex2.exp();
      complex0.ZERO.getField();
      Complex complex4 = complex0.pow(complex1);
      complex4.hashCode();
      complex4.ZERO.toString();
      Complex complex5 = complex1.divide(complex0);
      complex5.NaN.getArgument();
      complex2.getField();
      complex5.getField();
      Complex complex6 = Complex.NaN;
      complex3.ONE.asin();
      complex2.INF.tanh();
      complex2.I.add(complex0);
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      complex6.INF.hashCode();
      Complex complex8 = complex6.ONE.tanh();
      complex8.INF.exp();
      complex6.I.abs();
      Complex complex9 = complex0.tan();
      complex0.getReal();
      complex3.abs();
      complex2.add(0.0);
      complex2.tanh();
      complex9.equals("");
      complex9.exp();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex3.INF.createComplex(0.0, 0);
      complex0.getField();
      Complex complex5 = complex2.sinh();
      complex5.NaN.hashCode();
      Complex complex6 = new Complex((-670.3286475124851), 625.9255166287);
      complex3.I.add(complex6);
      complex3.add(7.75933511025868E163);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.INF.pow(2765.763);
      Complex complex5 = complex4.I.divide(2765.763);
      Complex complex6 = complex3.I.tanh();
      complex6.NaN.abs();
      complex0.abs();
      Complex complex7 = complex0.negate();
      complex7.NaN.reciprocal();
      Complex complex8 = complex0.ONE.subtract(3893.7348609967);
      Complex complex9 = complex7.subtract(3893.7348609967);
      complex0.getReal();
      Complex complex10 = complex7.conjugate();
      complex1.getField();
      Complex complex11 = complex1.subtract(3893.7348609967);
      complex8.divide(3893.7348609967);
      complex9.asin();
      complex5.subtract(complex10);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
      complex0.readResolve();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.createComplex((-3905.8064), 0.0);
      Complex complex3 = complex0.multiply(1140);
      Complex complex4 = complex3.ONE.sqrt();
      complex4.ONE.nthRoot(1140);
      Complex complex5 = complex3.I.atan();
      complex1.NaN.add(complex2);
      Complex complex6 = complex0.sin();
      complex6.toString();
      Complex complex7 = complex3.negate();
      complex7.INF.reciprocal();
      complex7.ZERO.getArgument();
      complex6.getField();
      complex2.ONE.multiply(complex0);
      complex6.tan();
      complex0.getArgument();
      Complex complex8 = null;
//      try { 
        complex5.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.createComplex(3988.0, 0.0);
      complex4.readResolve();
      Complex complex5 = complex3.ZERO.pow(complex2);
      complex5.readResolve();
      complex1.I.subtract(complex3);
      Complex complex6 = Complex.INF;
      complex3.ZERO.divide(complex6);
      complex2.ZERO.subtract(complex6);
      complex3.INF.toString();
      Complex complex7 = complex1.reciprocal();
      complex7.ZERO.toString();
      complex7.ONE.add((-1267.27119));
      complex5.sinh();
      complex7.isNaN();
      complex6.isNaN();
      Complex complex8 = complex2.sinh();
      complex8.getField();
      complex6.readResolve();
      Complex.valueOf((-1.0), (-212.34811));
      Complex complex9 = new Complex(0.0, 5.479138512760614E77);
      complex5.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ZERO.multiply(293);
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex5.NaN.tan();
      complex6.I.acos();
      complex0.ZERO.abs();
      complex0.abs();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.multiply(complex7);
      Complex complex9 = complex8.INF.negate();
      complex8.ONE.reciprocal();
      Complex complex10 = complex8.multiply(complex2);
      complex10.NaN.subtract(complex2);
      complex10.NaN.atan();
      complex0.tanh();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex2.ONE.log();
      complex12.I.reciprocal();
      complex11.NaN.nthRoot(293);
      complex8.equals(complex10);
      complex9.equals("");
      complex0.add(2.3900289095512176E-221);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      complex0.I.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tan();
      complex3.NaN.toString();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.INF.divide(83.698109);
      Complex complex6 = complex4.I.cos();
      complex3.cosh();
      complex6.I.nthRoot(972);
      Complex complex7 = complex3.add(complex1);
      Complex complex8 = complex4.atan();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex7.multiply((-1598));
      complex10.readResolve();
      complex6.readResolve();
      complex3.conjugate();
      Complex complex11 = complex2.ZERO.asin();
      Complex complex12 = complex2.INF.subtract(0.0);
      Complex complex13 = complex7.pow(0.0);
      complex13.I.cosh();
      complex12.multiply(0.0);
      Complex complex14 = complex0.tan();
      complex14.NaN.exp();
      Complex complex15 = complex5.pow(complex9);
      complex15.INF.acos();
      complex11.divide(complex2);
      complex0.pow((double) (-1598));
      complex11.sqrt();
      complex12.hashCode();
      complex9.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 979.0053242246421;
      Complex complex0 = Complex.valueOf(979.0053242246421);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.divide(complex1);
      complex0.abs();
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.sqrt1z();
      complex0.ZERO.multiply(1);
      Complex complex2 = complex0.I.add((-259.5815861));
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex2.I.exp();
      complex0.multiply(0.6102112531661987);
      complex2.getImaginary();
      complex4.conjugate();
      Complex complex5 = complex4.ZERO.atan();
      complex5.I.add((double) 1);
      complex3.log();
      Complex complex6 = complex4.log();
      complex6.hashCode();
      complex4.sqrt();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.cosh();
      complex0.INF.readResolve();
      complex0.ZERO.pow((-1001.356323849));
      complex1.isInfinite();
      Complex complex3 = complex2.exp();
      complex0.ZERO.getField();
      Complex complex4 = complex0.pow(complex1);
      complex4.hashCode();
      complex4.ZERO.toString();
      Complex complex5 = complex1.divide(complex0);
      complex5.NaN.getArgument();
      complex2.getField();
      complex5.getField();
      Complex complex6 = complex2.divide(complex4);
      complex3.ONE.asin();
      complex2.INF.tanh();
      complex2.I.add(complex0);
      complex6.NaN.sinh();
      complex6.INF.hashCode();
      Complex complex7 = complex6.ONE.tanh();
      complex7.INF.exp();
      complex6.I.abs();
      Complex complex8 = complex0.tan();
      complex0.getReal();
      complex3.abs();
      complex2.add(0.0);
      complex2.tanh();
      complex8.equals("");
      complex8.exp();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.acos();
      complex0.ONE.cos();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = new Complex(0.0);
      complex1.ONE.subtract(complex2);
      complex0.INF.conjugate();
      complex0.ONE.negate();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1996.5556), 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-1996.5556));
      Complex complex2 = complex1.multiply(complex0);
      complex2.ONE.subtract(2357.2716883291);
      int int0 = (-2364);
//      try { 
        complex1.I.nthRoot((-2364));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,364
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.asin();
      complex1.NaN.getField();
      Complex complex3 = complex1.NaN.tan();
      complex1.ZERO.hashCode();
      Complex complex4 = complex1.I.divide(complex3);
      Complex complex5 = complex3.NaN.add(1.0577249492414076E-176);
      Complex complex6 = complex5.I.sinh();
      complex6.I.toString();
      complex6.INF.divide(0.0);
      Complex complex7 = complex0.ONE.reciprocal();
      complex7.NaN.sqrt1z();
      Complex complex8 = complex0.pow((-3147.3));
      complex8.isInfinite();
      complex0.add((-3147.3));
      complex7.reciprocal();
      Complex complex9 = complex1.cosh();
      complex9.subtract(complex4);
      Complex complex10 = complex0.subtract(complex2);
      complex10.ZERO.exp();
      complex8.pow(0.0);
      Complex.valueOf(903.388, (-20.0));
      Complex.valueOf(0.0, (-20.0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2196.7542693783));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.createComplex((-2196.7542693783), (-778.57194));
      complex0.sin();
      complex2.ONE.abs();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(complex0);
      complex3.ONE.atan();
      complex4.ZERO.getField();
      complex0.isNaN();
      complex3.isInfinite();
      Complex complex5 = Complex.valueOf((-2133.0));
      complex5.INF.multiply(1321);
      Complex complex6 = complex1.conjugate();
      complex6.ZERO.sin();
      complex6.hashCode();
      complex1.multiply(0);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(2.0);
      complex0.ONE.hashCode();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.subtract(complex2);
      complex0.ONE.add(0.0);
      complex0.ONE.pow((-377.2448614));
      complex2.INF.acos();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex4.INF.subtract(2.0);
      complex1.sqrt1z();
      complex2.multiply(complex3);
      complex5.getImaginary();
      complex3.subtract(2.0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(1908.334067638894);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex1.I.divide(1908.334067638894);
      Complex.valueOf(1908.334067638894, 1908.334067638894);
      complex0.getArgument();
      Complex complex5 = complex0.cosh();
      complex5.getImaginary();
      Complex complex6 = complex4.multiply(152);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex4.pow(complex3);
      complex8.ONE.getField();
      Complex complex9 = complex8.acos();
      complex8.I.hashCode();
      complex2.reciprocal();
      complex2.tan();
      complex2.divide(complex7);
      Complex complex10 = complex9.cos();
      complex10.createComplex(152, 1908.334067638894);
      complex10.I.multiply((-1175.4630397));
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getField();
      complex0.INF.toString();
      Complex complex1 = complex0.I.sqrt1z();
      complex1.sqrt();
      Complex complex2 = complex1.conjugate();
      complex0.getImaginary();
      Complex complex3 = complex0.NaN.tanh();
      complex3.ZERO.cosh();
      complex0.isNaN();
      complex1.isInfinite();
      complex3.isNaN();
      complex2.subtract(3098.0);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.divide(0.0);
      double double1 = (-4295.79859);
      Complex.valueOf(1068.508656028, (-4295.79859));
      complex0.INF.abs();
      Complex complex3 = complex2.ONE.divide(4.241536392174967E-9);
      complex0.exp();
      complex0.sin();
      int int0 = (-1304);
      complex1.multiply((-1304));
      complex3.getReal();
      complex0.sin();
      Complex complex4 = complex1.tan();
      complex4.nthRoot(1969);
//      try { 
        complex4.I.nthRoot((-1304));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,304
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(961.9117906800893, 3.203391672602453E-8);
      Complex complex2 = complex0.pow(complex1);
//      try { 
        complex2.INF.nthRoot((-481));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -481
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      complex0.getArgument();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex3.I.cosh();
      complex4.exp();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.multiply(619);
      complex6.ZERO.hashCode();
      complex1.abs();
      Complex complex7 = complex1.reciprocal();
      complex7.pow(complex2);
      complex7.INF.negate();
      Complex complex8 = Complex.valueOf(0.0, Double.NaN);
      complex1.getImaginary();
      complex8.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6318.0));
      Complex complex1 = complex0.sqrt();
      complex0.getImaginary();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.createComplex((-6318.0), 0.0);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.I.tan();
      complex1.ONE.multiply(3431);
      Complex complex5 = complex0.add(20.0);
      complex5.ONE.acos();
      complex2.hashCode();
      complex4.exp();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.7836800219410262E-8), 1235.895);
      Complex complex1 = complex0.add((-2.7836800219410262E-8));
      Complex complex2 = complex1.cos();
      complex2.nthRoot(838);
      complex2.exp();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(17);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.multiply(17);
      Complex complex5 = complex3.NaN.divide(1.2518336772918701);
      complex2.ONE.tanh();
      complex5.I.subtract(complex4);
      complex3.INF.tanh();
      complex0.getField();
      complex1.getReal();
      complex0.isInfinite();
      complex2.equals(complex1);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.negate();
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.exp();
      Complex.valueOf((-1267.0134568961732));
      complex2.I.multiply(2572.43596041);
      Complex complex4 = complex2.ZERO.reciprocal();
      complex4.ONE.abs();
      Complex complex5 = complex0.multiply((-2500.635047777201));
      complex1.I.multiply(0);
      complex3.acos();
      Complex complex6 = complex1.sqrt();
      complex1.getImaginary();
      complex1.sqrt1z();
      complex5.getField();
      complex4.isNaN();
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.readResolve();
      Complex complex1 = Complex.I;
      complex1.ONE.multiply(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex1.getReal();
      Complex complex3 = complex2.ONE.cos();
      complex3.INF.subtract(complex0);
      Complex complex4 = complex0.atan();
      complex2.conjugate();
      Complex complex5 = Complex.NaN;
      complex4.ZERO.divide(complex5);
      complex4.getReal();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.acos();
      complex3.INF.sinh();
      complex3.subtract((-4796.0973262944));
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.sin();
      complex2.subtract(complex1);
      complex2.readResolve();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.acos();
      complex0.NaN.add(complex1);
      Complex complex3 = Complex.ONE;
      complex0.subtract(complex3);
      Complex complex4 = complex3.divide((-3137.0));
      complex4.getArgument();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1428.15, 1428.15);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ONE.createComplex(0.0, 1949.403479);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex4.ONE.divide(6.283185307179586);
      complex1.INF.pow(complex0);
      Complex complex6 = complex5.ONE.createComplex(979.0, 0.0);
      Complex complex7 = complex6.tan();
      complex0.getField();
      complex0.getReal();
      complex0.nthRoot(1);
      complex1.nthRoot(1);
      complex4.atan();
      complex2.log();
      Complex complex8 = Complex.ZERO;
      complex6.I.divide(complex8);
      complex4.divide(2.4801413921885483E-274);
      Complex complex9 = complex7.cosh();
      complex9.I.readResolve();
      complex6.multiply((-485.9653478037));
      complex7.getArgument();
      complex3.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.createComplex(0.07250232994556427, 1.0019550323486328);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex2.exp();
      complex4.ONE.subtract(complex3);
      complex1.subtract(0.0);
      complex3.pow(5489.60527954);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.NaN.cosh();
      complex0.NaN.createComplex(Double.POSITIVE_INFINITY, (-3520.095414252681));
      Complex complex2 = complex1.divide(1343.4025);
      Complex complex3 = complex2.INF.exp();
      complex2.ZERO.cosh();
      Complex complex4 = new Complex((-2825.28));
      complex0.pow(complex4);
      Complex complex5 = complex4.add(complex2);
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.I.getField();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.atan();
      complex0.getImaginary();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.conjugate();
      complex6.ONE.getField();
      Complex complex7 = complex2.conjugate();
      complex6.sqrt();
      complex7.ZERO.exp();
      complex1.tan();
      complex6.getArgument();
      Complex complex8 = complex4.cosh();
      complex5.abs();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex3.add(complex9);
      Complex.valueOf(4102.4087, Double.NaN);
      complex10.reciprocal();
      complex6.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.971378973445109E-8, (-2519.076520666));
      complex0.I.sinh();
      complex0.I.sqrt1z();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(0.0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2057.1248199096212));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.nthRoot(963);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex3.I.asin();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.NaN.divide(complex1);
      complex0.getReal();
      Complex complex6 = complex3.add(complex1);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex5.INF.sin();
      complex7.INF.readResolve();
      Complex complex9 = complex6.subtract(complex1);
      Complex complex10 = complex9.pow(complex1);
      Complex complex11 = complex9.INF.add(Double.NaN);
      Complex complex12 = complex6.pow(Double.NaN);
      complex12.NaN.multiply(complex3);
      Complex complex13 = complex2.tan();
      Complex complex14 = complex1.multiply((-2231));
      Complex complex15 = complex11.subtract(complex5);
      Complex complex16 = complex14.ZERO.asin();
      Complex complex17 = complex1.createComplex(6.283185307179586, 2039.1305655);
      Complex complex18 = complex17.ONE.cosh();
      assertEquals(1.5430806348152437, complex18.getReal(), 0.01);
      
      complex13.getReal();
      Complex complex19 = complex9.cosh();
      assertSame(complex19, complex7);
      
      Complex complex20 = complex1.atan();
      Complex complex21 = complex20.ONE.pow(0.0);
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex20.getReal(), 0.01);
      
      complex13.readResolve();
      complex14.tanh();
      complex0.getField();
      complex8.negate();
      complex15.log();
      assertSame(complex11, complex2);
      assertSame(complex5, complex10);
      
      Complex complex22 = complex16.tanh();
      assertEquals((-2231.0), complex14.getReal(), 0.01);
      assertEquals(-0.0, complex22.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex21));
      assertEquals(0.0, complex22.getReal(), 0.01);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(2056.185810432);
      complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(2056.185810432, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(Double.NaN, (-238.90166));
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-238.90166), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.valueOf(166.9776401710094);
      Complex complex1 = complex0.ZERO.multiply(1670);
      List<Complex> list0 = complex0.nthRoot(1293);
      assertEquals(1293, list0.size());
      assertFalse(list0.contains(complex1));
      
      Complex.valueOf(166.9776401710094, (double) 1293);
      Complex complex2 = complex0.multiply(1293);
      Complex complex3 = complex0.multiply(20.0);
      assertEquals(3339.552803420188, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.acos();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(12.975721201285479, complex4.getImaginary(), 0.01);
      
      complex0.add(complex2);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex5 = Complex.valueOf((-1024.2), (double) 1670);
      assertEquals(1670.0, complex5.getImaginary(), 0.01);
      assertEquals((-1024.2), complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.createComplex(1293, 1670);
      assertEquals(1670.0, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.ZERO.acos();
      complex2.NaN.getArgument();
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex4.NaN.sin();
      complex0.getField();
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = complex6.asin();
      assertSame(complex7, complex4);
      
      complex6.createComplex(2414.287455498, (-2379.5756355));
      assertEquals(0.7615941559557649, complex3.getImaginary(), 0.01);
      assertSame(complex6, complex5);
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex1 = Complex.valueOf(2.5436339378356934);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.sin();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals(complex3);
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(boolean0);
  }
}
