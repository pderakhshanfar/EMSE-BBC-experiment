/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:00:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt1z();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.INF;
      complex0.sin();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.tan();
      complex6.nthRoot(1369);
      complex8.acos();
      complex3.hashCode();
      Complex.valueOf(20.0);
      complex4.nthRoot(3124);
      Complex complex9 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex9.multiply(complex7);
      complex2.multiply((double) 3124);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.pow((-1488.47002332946));
      Complex complex3 = complex1.I.exp();
      complex3.sin();
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex0.ZERO.multiply(1513.402322741);
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex8.sqrt1z();
      complex10.NaN.readResolve();
      complex10.negate();
      Complex complex11 = complex2.subtract(complex8);
      complex10.cos();
      complex1.asin();
      Complex complex12 = complex0.sinh();
      Complex complex13 = Complex.valueOf(2043.2654674, 2043.2654674);
      complex8.sqrt();
      Complex complex14 = complex11.INF.divide(complex9);
      complex14.INF.createComplex((-542.6432636159516), 1337.2277055);
      complex5.readResolve();
      complex2.ONE.conjugate();
      complex12.ONE.cosh();
      complex13.add(complex7);
      complex12.atan();
      complex11.subtract(complex1);
      complex11.add(1513.402322741);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.cos();
      complex3.NaN.nthRoot(4967);
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex0.ONE.atan();
      Complex complex7 = complex6.ZERO.conjugate();
      complex7.ZERO.hashCode();
      Complex complex8 = complex0.log();
      Complex complex9 = complex5.ONE.cosh();
      Complex complex10 = complex8.divide((-20.0));
      Complex complex11 = complex10.ZERO.asin();
      complex11.sinh();
      Complex complex12 = complex8.cosh();
      complex12.I.pow(complex8);
      complex12.INF.sqrt();
      Complex complex13 = complex5.pow(complex10);
      complex10.INF.tanh();
      complex13.I.acos();
      complex1.reciprocal();
      complex6.getField();
      Complex complex14 = complex12.log();
      complex4.getField();
      complex10.toString();
      complex6.exp();
      Complex complex15 = complex8.sqrt();
      complex15.sqrt1z();
      Complex complex16 = complex9.cosh();
      complex16.INF.getField();
      complex1.conjugate();
      complex10.add((-2004.7788614));
      complex14.multiply(4967);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.459885432869825E182));
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.conjugate();
      Complex complex2 = complex0.INF.multiply((-1));
      Complex complex3 = complex1.ONE.divide((-0.8903812984646423));
      complex3.ONE.conjugate();
      complex0.pow(complex1);
      Complex complex4 = complex0.sqrt1z();
      complex2.subtract(complex4);
      Complex complex5 = complex1.sinh();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(2.414213562373095, 2225.48);
      Complex complex1 = complex0.INF.multiply(6.283185307179586);
      complex1.negate();
      Complex complex2 = Complex.valueOf((-859.2005), Double.POSITIVE_INFINITY);
      complex1.INF.subtract(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.pow(complex0);
      complex4.INF.sinh();
      Complex complex5 = Complex.valueOf(2.414213562373095, Double.NaN);
      complex2.divide(complex3);
      complex3.readResolve();
      complex5.ONE.negate();
      complex4.subtract(2225.48);
      complex5.subtract(1.994572401046753);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.pow((-2676.25));
      complex0.asin();
      complex1.sqrt();
      Complex.valueOf((-2676.25), (-4.905712741596318E-9));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1313950901331177E258);
      Complex complex1 = Complex.valueOf(2.1313950901331177E258, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.multiply(complex1);
      complex3.tan();
      Complex complex4 = complex2.log();
      complex4.INF.reciprocal();
      Complex complex5 = complex4.ZERO.subtract(0.022745953821257103);
      complex5.I.cos();
      complex1.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tan();
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.toString();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3818.1659568), 0.009384053);
      Complex complex1 = complex0.pow((-3818.1659568));
      complex1.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.cos();
      Complex complex5 = complex0.subtract((double) 2147483381);
      complex1.log();
      complex4.pow((double) 2147483381);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(843.7465464362492, 20.0);
      complex0.tan();
      Complex complex1 = complex0.pow(0.9860912691725444);
      complex0.readResolve();
      complex1.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.cos();
      complex1.subtract((-467.93387));
      complex1.log();
      complex4.multiply(2147483381);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.pow(0.009384053);
      complex0.readResolve();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ZERO;
      complex3.cos();
      Complex complex5 = complex2.subtract(0.009384053);
      complex2.log();
      Complex complex6 = Complex.INF;
      complex6.toString();
      complex3.multiply(2147483381);
      complex5.tanh();
      complex5.add(0.009384053);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1772.82301);
      Complex complex1 = complex0.tan();
      complex1.ONE.conjugate();
      complex0.I.pow(1772.82301);
      Complex complex2 = complex1.pow(1772.82301);
      complex2.acos();
      Complex.valueOf(1772.82301);
      Complex complex3 = new Complex((-2039.2242486885), (-2039.2242486885));
      Complex complex4 = Complex.ZERO;
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-3237.6529332));
      Complex complex3 = complex1.I.subtract(2.0014700145557332E-75);
      complex3.ONE.tan();
      complex0.NaN.hashCode();
      complex0.NaN.readResolve();
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.pow((-62.067));
      Complex complex6 = complex4.INF.sin();
      complex4.readResolve();
      Complex complex7 = complex4.ONE.multiply(2.0014700145557332E-75);
      complex7.ONE.sinh();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.NaN.add(complex4);
      complex9.NaN.subtract(1898.769771222223);
      Complex complex10 = complex1.multiply(2.0014700145557332E-75);
      Complex complex11 = complex10.exp();
      complex11.ZERO.toString();
      Complex complex12 = Complex.INF;
      complex5.multiply(complex12);
      complex3.getField();
      complex6.abs();
      complex11.acos();
      Complex complex13 = complex8.sqrt();
      complex11.abs();
      complex2.add(Double.NaN);
      Complex.valueOf(2115.4324102010705, (-3237.6529332));
      complex13.log();
      complex8.sqrt();
      complex3.asin();
      Complex complex14 = Complex.I;
      complex5.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex(6.569676185250389E-264, 2473);
      complex1.sinh();
      Complex complex4 = complex0.divide(complex2);
      complex2.sinh();
      complex3.tanh();
      complex2.sqrt1z();
      complex4.multiply((double) 2473);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.INF.getArgument();
      Complex complex2 = complex0.I.multiply((-1019));
      Complex complex3 = complex1.ZERO.divide(complex0);
      complex1.getImaginary();
      complex3.I.conjugate();
      Complex complex4 = complex0.conjugate();
      complex3.isInfinite();
      complex3.equals(complex4);
      complex0.asin();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.I.atan();
      complex2.getArgument();
      Complex complex7 = complex2.createComplex(Double.NaN, Double.NaN);
      Complex complex8 = complex4.sinh();
      complex5.abs();
      Complex complex9 = Complex.INF;
      complex1.acos();
      complex6.ZERO.add(Double.POSITIVE_INFINITY);
      complex8.log();
      Complex complex10 = Complex.valueOf((-1435.0), Double.NaN);
      Complex complex11 = Complex.ONE;
      complex7.hashCode();
      complex3.subtract(1019.0);
      complex6.getReal();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((double) 7, (double) 7);
      Complex complex3 = complex2.multiply(634);
      Complex complex4 = complex3.sin();
      complex1.log();
      complex0.subtract(complex3);
      complex2.log();
      complex2.toString();
      complex2.divide(complex4);
      Complex complex5 = new Complex(634);
      Complex complex6 = complex5.sin();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), 0.4430227241169225);
      Complex complex2 = new Complex((-20.0), (-20.0));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.pow((-20.0));
      Complex complex5 = new Complex((-227.60893381579), 131.294488);
      Complex complex6 = Complex.I;
      complex1.sin();
      Complex complex7 = Complex.INF;
      complex3.readResolve();
      complex5.hashCode();
      Complex complex8 = complex6.cos();
      complex6.log();
      Complex complex9 = complex3.subtract((-2215.220494762));
      complex4.log();
      complex6.toString();
      complex8.sqrt1z();
      complex4.add(complex5);
      Complex complex10 = new Complex((-2215.220494762));
      complex10.tanh();
      complex9.log();
      Complex.valueOf(1.0);
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.pow((-278.30438326294336));
      Complex complex4 = complex3.I.conjugate();
      complex3.readResolve();
      complex3.hashCode();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.tan();
      complex1.log();
      Complex complex7 = complex2.multiply(12);
      Complex complex8 = complex4.subtract(1030.805303);
      complex4.pow(complex6);
      Complex complex9 = complex2.log();
      Complex complex10 = Complex.I;
      complex5.toString();
      Complex complex11 = complex6.sqrt1z();
      complex4.subtract(3527.14655299811);
      complex6.add(complex9);
      complex7.tanh();
      complex8.log();
      complex3.exp();
      Complex complex12 = Complex.I;
      complex12.readResolve();
      complex12.equals(complex4);
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.569676185250389E-264);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.multiply(2071991876);
      Complex complex4 = complex2.subtract(6.569676185250389E-264);
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex0.log();
      Complex complex7 = Complex.I;
      complex3.toString();
      complex5.sqrt1z();
      complex3.subtract((double) 2071991876);
      Complex complex8 = complex0.add(complex1);
      complex4.tanh();
      complex6.log();
      complex2.exp();
      Complex complex9 = Complex.I;
      complex4.readResolve();
//      try { 
        complex8.nthRoot((-1016));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,016
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.pow(2.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.multiply(2.0);
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = (Complex)complex4.NaN.readResolve();
      complex1.subtract(Double.NaN);
      complex5.getField();
      Complex complex7 = complex6.tanh();
      Complex complex8 = new Complex(Double.NaN);
      Complex complex9 = complex6.cosh();
      complex9.negate();
      complex0.acos();
      complex7.sqrt();
      complex8.sinh();
      Complex.valueOf(2.0);
      Complex complex10 = new Complex(2.0);
      complex10.equals("G t\",@*9]MH");
      Complex complex11 = new Complex(0.24998666445935958, 0.0);
      complex11.subtract(complex10);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex0.multiply(complex2);
      Complex complex3 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex3.sinh();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = Complex.ONE;
      complex5.sinh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(199.41058386);
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.tan();
      complex0.pow(1.0);
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf(199.41058386, 1251.179689196);
      Complex complex6 = complex5.multiply(3539.03);
      Complex complex7 = complex6.sin();
      complex4.readResolve();
      complex2.hashCode();
      complex6.cos();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex7.log();
      complex6.NaN.readResolve();
      Complex complex10 = complex1.multiply((-3331));
      Complex complex11 = complex0.subtract((double) 1190);
      complex1.pow(complex0);
      Complex complex12 = complex10.log();
      Complex complex13 = complex7.sqrt1z();
      Complex complex14 = complex5.add(complex13);
      complex8.tanh();
      complex14.log();
      complex7.subtract(complex11);
      Complex complex15 = new Complex((-2.123576985145695), 3539.03);
      complex11.sqrt();
      complex3.sinh();
      Complex.valueOf(1.0);
      Complex complex16 = Complex.INF;
      complex1.equals(complex16);
      complex5.subtract(complex2);
      complex9.asin();
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex2 = complex0.negate();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 1185);
      complex2.readResolve();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-8.506249827909456E7));
      complex4.sinh();
      complex1.exp();
      Complex complex5 = complex4.subtract(complex3);
      complex5.nthRoot(1185);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex0.divide((-278.30438326294336));
      complex0.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = new Complex((-4472.314475251596));
      Complex complex6 = complex5.add(complex1);
      complex5.hashCode();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex1.multiply(complex3);
      Complex complex9 = Complex.ONE;
      complex9.abs();
      complex5.pow(complex4);
      complex6.log();
      complex2.toString();
      Complex complex10 = complex7.sqrt1z();
      complex5.add(complex7);
      complex10.tanh();
      complex8.log();
      Complex complex11 = new Complex((-278.30438326294336), (-4152.682));
      Complex complex12 = complex11.subtract(complex3);
      Complex complex13 = Complex.valueOf(1992.8669122, 1992.8669122);
      complex13.reciprocal();
      complex12.tan();
      Complex complex14 = complex6.add(complex5);
      complex14.nthRoot(822);
      complex1.log();
      Complex complex15 = complex14.acos();
      complex15.NaN.createComplex((-4472.314475251596), 7.38905609893065);
      Complex complex16 = Complex.valueOf(1992.8669122);
      Complex.valueOf((-278.30438326294336), (-278.30438326294336));
      complex12.add(complex11);
      complex16.atan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3818.1659568), 0.009384053031276096);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow((-3818.1659568));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.multiply((-3818.1659568));
      Complex complex5 = Complex.INF;
      complex5.readResolve();
      complex3.hashCode();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.log();
      complex5.multiply(2147483381);
      Complex complex9 = complex1.subtract((double) 2147483381);
      Complex complex10 = complex3.pow(complex9);
      Complex complex11 = complex2.log();
      complex2.toString();
      complex1.sqrt1z();
      Complex complex12 = complex6.add(complex10);
      complex11.tanh();
      Complex complex13 = complex6.log();
      complex12.I.getArgument();
      Complex complex14 = complex8.subtract(complex5);
      complex14.INF.reciprocal();
      complex1.tan();
      complex11.add(complex10);
      complex12.nthRoot(2147483381);
      Complex complex15 = complex7.log();
      complex4.acos();
      Complex.valueOf((double) 1190);
      Complex complex16 = Complex.valueOf((double) 1190, 1204.89);
      complex16.add(complex3);
      complex13.atan();
      complex15.cos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex0.INF.multiply(complex4);
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = new Complex(3639.41081588014, 3639.41081588014);
      complex7.sinh();
      Complex complex8 = complex4.divide(complex6);
      complex0.acos();
      complex8.sqrt();
      Complex complex9 = Complex.NaN;
      complex9.sinh();
      Complex.valueOf(3639.41081588014);
      complex2.equals(complex0);
      Complex complex10 = Complex.ONE;
      complex10.subtract(complex8);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex0.readResolve();
      complex1.hashCode();
      complex1.cos();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.log();
      complex2.multiply(1431655765);
      Complex complex5 = Complex.INF;
      complex5.subtract((double) 1431655765);
//      try { 
        complex4.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      Complex complex1 = complex0.cos();
      complex1.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.multiply(1027);
      Complex complex4 = complex1.subtract(1046.47156984789);
      complex3.pow(complex1);
      Complex complex5 = new Complex(1.339092493057251, 1767.83);
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.sqrt1z();
      complex4.add(complex5);
      complex7.tanh();
      complex5.log();
      Complex complex8 = Complex.ONE;
      complex8.subtract(complex6);
      Complex complex9 = Complex.valueOf(1.339092493057251);
      complex9.tan();
      Complex complex10 = Complex.INF;
      complex7.nthRoot(1190);
      complex8.log();
      complex4.acos();
      complex6.tanh();
      Complex complex11 = Complex.valueOf((-4795.89657), (double) 1190);
      complex11.atan();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-132.5219419));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = new Complex(0.0, Double.NaN);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.multiply(Double.NaN);
      Complex complex5 = complex4.multiply((-1073741830));
      complex5.reciprocal();
      complex2.tan();
      complex1.asin();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      complex1.readResolve();
      complex0.hashCode();
      Complex complex2 = complex1.cos();
      complex0.tan();
      Complex complex3 = complex2.log();
      complex2.multiply((-1219));
      Complex complex4 = complex3.subtract(Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      Complex complex5 = complex0.log();
      complex5.sqrt1z();
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = Complex.NaN;
      complex7.tanh();
      complex6.log();
//      try { 
        complex3.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(1042.131077, 3925.77720051);
      Complex complex3 = complex2.tan();
      complex1.getReal();
      complex3.readResolve();
      complex3.divide((double) 1027);
      complex0.cos();
      complex3.nthRoot(1027);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      complex1.add(Double.POSITIVE_INFINITY);
      complex1.multiply((-1598));
      Complex complex2 = complex0.tanh();
      complex2.NaN.sqrt();
      complex0.readResolve();
      Complex complex3 = complex2.sinh();
      complex2.exp();
      complex2.subtract(complex1);
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.ZERO.log();
      Complex.valueOf((-1649.25305), (-1213.0));
      complex3.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex3.ONE.atan();
      complex0.INF.createComplex((-8062525.844789211), (-8062525.844789211));
      complex5.ONE.sinh();
      Complex complex6 = complex0.conjugate();
      complex3.INF.add((-1.0));
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.I.sqrt();
      complex2.I.getArgument();
      Complex complex9 = complex4.tanh();
      complex4.subtract(464.77);
      Complex complex10 = complex2.atan();
      Complex complex11 = complex0.add(Double.POSITIVE_INFINITY);
      complex11.I.sqrt1z();
      complex0.add(464.77);
      complex10.equals(complex8);
      complex9.abs();
      complex10.add(complex9);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = new Complex(0.9964068118932385);
      Complex complex4 = complex3.pow((-278.30438326294336));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.conjugate();
      complex5.NaN.sqrt1z();
      complex6.readResolve();
      complex5.sinh();
      Complex complex7 = complex3.subtract(0.9964068118932385);
      complex2.getField();
      complex1.tanh();
      Complex complex8 = new Complex((-278.30438326294336));
      Complex complex9 = complex4.cosh();
      complex2.negate();
      Complex complex10 = Complex.INF;
      complex7.sqrt();
      Complex complex11 = Complex.valueOf((-0.9999931485370221), (-0.9999931485370221));
      complex11.sinh();
      Complex complex12 = Complex.valueOf((-278.30438326294336));
      Object object0 = complex8.readResolve();
      complex11.equals(object0);
      complex4.subtract(complex2);
      Complex.valueOf(0.9964068118932385, 350.802);
      complex12.divide(501.592367483);
      complex12.acos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-537.156614), 501.592367483);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.ONE;
      complex2.abs();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.acos();
      complex3.tan();
      complex4.subtract((-1874156.0));
      complex5.tanh();
      complex1.reciprocal();
      complex2.toString();
      complex3.getArgument();
      Complex complex6 = complex1.asin();
      complex1.negate();
      Complex.valueOf(1562.5070566198, (-537.156614));
      Complex complex7 = complex6.multiply((-564.0));
      Complex complex8 = Complex.ZERO;
      complex7.multiply(complex8);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4746087689020354);
      Complex complex1 = complex0.divide(3.975449484028966E-31);
      Complex complex2 = Complex.valueOf((-3392.752783889879), 0.4746087689020354);
      complex2.hashCode();
      Complex complex3 = complex1.add(0.4746087689020354);
      complex3.multiply(1365);
      Complex complex4 = complex1.tanh();
      complex0.readResolve();
      complex0.sinh();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.subtract(complex1);
      Complex.valueOf((-3818.1659568), 6.283185307179586);
      complex4.INF.add(complex5);
      complex4.divide(0.167);
      complex3.acos();
      complex0.toString();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex0.add(2579.97725);
      complex3.NaN.divide(complex2);
      Complex complex4 = complex3.divide(complex2);
      complex4.I.readResolve();
      complex4.NaN.toString();
      Complex complex5 = complex1.pow(complex4);
      complex5.NaN.add(1606.77859866447);
      complex4.acos();
      complex4.pow(complex5);
      Complex complex6 = complex2.add(2379.9995798330456);
      Complex complex7 = complex1.divide(2579.97725);
      complex7.ZERO.subtract(complex6);
      complex2.sin();
      Complex complex8 = complex0.pow(425.0);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.conjugate();
      complex2.readResolve();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex5.getField();
      Complex complex7 = complex2.tanh();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex6.cosh();
      Complex complex9 = complex3.negate();
      complex3.acos();
      complex3.sqrt();
      Complex complex10 = complex7.sinh();
      Complex complex11 = Complex.valueOf((-1.5453111533064765E19));
      complex9.equals(complex7);
      Complex complex12 = complex4.log();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex13.divide((-4032.3226029));
      Complex complex15 = complex5.multiply(complex8);
      complex0.subtract(complex11);
      complex14.abs();
      complex0.sinh();
      complex10.cos();
      complex10.getArgument();
      complex11.getField();
      complex0.createComplex(0.6212903261184692, Double.POSITIVE_INFINITY);
      complex15.multiply(complex12);
      complex11.add(0.42608439922332764);
      complex5.cosh();
      complex15.add(complex6);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.atan();
      complex0.getArgument();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = (Complex)complex1.ZERO.readResolve();
      complex1.NaN.divide((-1603.7602));
      Complex complex6 = complex4.cos();
      complex6.exp();
      Complex.valueOf(Double.NaN, (-891.3273197550923));
      Complex complex7 = complex5.divide(Double.NaN);
      complex3.acos();
      complex7.toString();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.pow((-278.30438326294336));
      Complex complex4 = complex3.I.conjugate();
      complex4.ONE.readResolve();
      Complex complex5 = complex3.INF.sinh();
      complex5.I.subtract((-278.30438326294336));
      complex1.ZERO.getField();
      Complex complex6 = complex0.tanh();
      Complex complex7 = new Complex((-278.30438326294336));
      Complex complex8 = complex2.cosh();
      complex7.INF.negate();
      Complex complex9 = complex7.I.acos();
      complex1.sqrt();
      complex7.INF.sinh();
      Complex.valueOf((-278.30438326294336));
      complex1.equals(complex7);
      Complex complex10 = complex1.log();
      complex7.INF.divide(0.0);
      Complex complex11 = complex10.INF.multiply(complex9);
      Complex complex12 = complex11.NaN.subtract(complex2);
      complex12.NaN.abs();
      Complex complex13 = complex9.sinh();
      complex13.ONE.cos();
      complex6.acos();
      Complex.valueOf((-955.0));
      complex13.getImaginary();
      complex8.add(complex0);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.pow((-278.30438326294336));
      Complex complex4 = complex3.I.conjugate();
      complex4.ONE.readResolve();
      Complex complex5 = complex3.INF.sinh();
      complex5.I.subtract((-278.30438326294336));
      complex1.ZERO.getField();
      complex0.tanh();
      Complex complex6 = new Complex((-278.30438326294336));
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex6.INF.negate();
      complex6.I.acos();
      Complex complex9 = complex1.sqrt();
      complex6.INF.sinh();
      Complex complex10 = Complex.valueOf((-278.30438326294336));
      complex1.equals(complex6);
      complex8.subtract(complex9);
      Complex.valueOf((-297.0402156), (-1.000000011066376));
      complex8.divide((-297.0402156));
      complex7.acos();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.ZERO.add(complex2);
      complex3.ZERO.hashCode();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.I.multiply(complex5);
      Complex complex7 = Complex.ONE;
      complex7.abs();
      complex0.multiply(complex7);
      complex2.acos();
      Complex complex8 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.NaN.subtract(1213.1);
      complex0.INF.tanh();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex8.ZERO.reciprocal();
      complex9.toString();
      complex8.getArgument();
      complex4.asin();
      complex10.negate();
      Complex.valueOf(1213.1, 1213.1);
      Complex complex12 = complex11.multiply(1213.1);
      complex12.multiply(complex1);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex0.INF.multiply(complex4);
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = new Complex(3639.41081588014, 3639.41081588014);
      complex7.sinh();
      complex4.divide(complex6);
      Complex complex8 = complex4.sinh();
      complex8.ONE.multiply(0.9999999314053258);
      Complex.valueOf((-1213.0), 3639.41081588014);
      Complex complex9 = complex3.tanh();
      complex8.log();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-132.5219419));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.multiply(0.0);
      complex0.INF.readResolve();
      Complex complex4 = complex0.ONE.cos();
      Complex.valueOf((-132.5219419), 3925.77720051);
      Complex complex5 = complex1.conjugate();
      complex4.sinh();
      complex3.sinh();
      Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(3925.77720051, (-2041.34888760726));
      complex6.tanh();
      complex5.log();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.pow((-278.30438326294336));
      Complex complex4 = complex3.I.conjugate();
      complex4.ONE.readResolve();
      Complex complex5 = complex3.INF.sinh();
      complex5.I.subtract((-278.30438326294336));
      complex1.ZERO.getField();
      Complex complex6 = complex0.tanh();
      Complex complex7 = new Complex((-278.30438326294336));
      complex2.cosh();
      complex7.INF.negate();
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex1.sqrt();
      complex5.ONE.tan();
      complex7.INF.sinh();
      Complex.valueOf((-278.30438326294336));
      complex1.equals(complex7);
      Complex complex10 = complex1.log();
      complex7.INF.divide(0.0);
      Complex complex11 = complex10.INF.multiply(complex8);
      Complex complex12 = complex11.NaN.subtract(complex2);
      complex12.NaN.abs();
      Complex complex13 = complex8.sinh();
      complex13.ONE.cos();
      complex7.getArgument();
      complex6.getField();
      complex8.createComplex((-278.30438326294336), (-278.30438326294336));
      complex5.add((-1282.0));
      Complex complex14 = complex9.cosh();
      complex14.ONE.sin();
      complex8.add((-2267.159453382366));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-3661.01345926);
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.add(complex2);
      complex0.hashCode();
      Complex complex4 = Complex.NaN;
      complex0.multiply(complex1);
      Complex complex5 = Complex.ONE;
      complex3.abs();
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8407720200442806E99);
      Complex complex1 = complex0.I.atan();
      complex1.ZERO.log();
      complex1.ZERO.cosh();
      Complex complex2 = Complex.valueOf(2.8407720200442806E99, (-6.235346157112516E-4));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.ONE.pow(2.8407720200442806E99);
      complex0.I.exp();
      Complex complex5 = complex4.ONE.add(complex2);
      complex5.I.nthRoot(37);
      double double0 = (-3.411186219855533E217);
      Complex complex6 = complex2.createComplex(2.8407720200442806E99, (-3.411186219855533E217));
      complex0.ZERO.pow(2.8407720200442806E99);
      complex6.INF.cos();
      complex3.readResolve();
      complex6.ZERO.getArgument();
      complex2.multiply(complex3);
      double double1 = (-1360.0);
      complex6.divide((-1360.0));
      complex3.createComplex(2.8407720200442806E99, (-1360.0));
      int int0 = (-2146145452);
//      try { 
        complex6.nthRoot((-2146145452));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,146,145,452
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-1348.83954821788));
      Complex complex3 = complex2.NaN.createComplex(2.0, 2.0);
      complex3.ONE.negate();
      complex0.abs();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.add(complex4);
      complex5.NaN.sqrt();
      complex2.subtract(Double.NaN);
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex6.ONE.multiply(328);
      Complex complex8 = Complex.valueOf(2.0, (-2115.59));
      Complex complex9 = complex4.pow(complex8);
      complex9.ZERO.subtract(complex7);
      Complex complex10 = complex8.multiply(1096);
      Complex complex11 = complex10.tan();
      complex11.I.multiply(complex4);
      Complex complex12 = Complex.valueOf(6.235346157112516E-4);
      Complex complex13 = complex12.subtract(complex11);
      complex10.ONE.sin();
      complex2.subtract(Double.NaN);
      Complex complex14 = complex13.atan();
      complex14.I.atan();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.tan();
      Complex complex1 = complex0.I.pow(2.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(2.0);
      complex2.NaN.sin();
      Complex complex4 = (Complex)complex3.NaN.readResolve();
      complex3.hashCode();
      Complex complex5 = complex1.ONE.cos();
      complex5.ZERO.tan();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.ZERO.multiply(1190);
      complex7.ZERO.subtract(2.0);
      Complex complex8 = complex2.NaN.pow(complex0);
      Complex complex9 = complex8.INF.log();
      complex4.getReal();
      complex5.readResolve();
      complex6.divide(Double.NaN);
      complex2.cos();
      complex9.nthRoot(1190);
      complex7.add(complex9);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3818.1659568));
      complex0.readResolve();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = Complex.valueOf((-3818.1659568), (-3818.1659568));
      Complex complex4 = Complex.valueOf(1299.9934711949022);
      complex2.equals(complex4);
      Complex complex5 = complex3.log();
      complex2.divide(1299.9934711949022);
      Complex complex6 = complex0.multiply(complex5);
      complex0.subtract(complex6);
      complex2.abs();
      complex2.sinh();
      complex5.cos();
      Complex complex7 = Complex.INF;
      complex7.subtract(complex2);
      complex2.getArgument();
      complex6.getField();
      Complex complex8 = complex1.log();
      complex2.createComplex((-3818.1659568), 0.0);
      complex8.add(2673.179777672138);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.tan();
      Complex complex1 = complex0.I.pow(2.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(2.0);
      complex2.NaN.sin();
      complex3.NaN.readResolve();
      complex3.hashCode();
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.ZERO.multiply(1190);
      Complex complex8 = complex7.ZERO.subtract(2.0);
      Complex complex9 = complex2.NaN.pow(complex0);
      Complex complex10 = complex9.INF.log();
      complex9.INF.toString();
      complex0.sqrt1z();
      complex4.divide(complex9);
      complex10.sinh();
      complex5.tanh();
      complex8.log();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.atan();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.ZERO.cos();
      Complex complex4 = complex3.NaN.tan();
      complex0.getReal();
      complex3.ZERO.readResolve();
      complex3.NaN.divide((-1603.7602));
      Complex complex5 = complex4.cos();
      complex5.ONE.nthRoot(1);
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.hashCode();
      complex0.getField();
      Complex complex2 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex3.reciprocal();
      Complex complex4 = Complex.valueOf((-2894.3), (-2094.27503086));
      Complex complex5 = complex1.multiply((-2094.27503086));
      complex5.conjugate();
      Complex complex6 = Complex.valueOf((-2894.3));
      complex4.toString();
      Complex complex7 = complex6.divide((-2017.002));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf(3510.1640919451515);
      complex9.multiply(2841);
      Complex complex10 = complex5.sqrt1z();
      complex10.cosh();
      complex7.multiply(1364);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-334.917641721013));
      Complex complex1 = complex0.INF.exp();
      complex1.NaN.exp();
      Complex complex2 = complex0.INF.tanh();
      complex2.ZERO.hashCode();
      complex0.getField();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex.valueOf((-334.917641721013), (-334.917641721013));
      complex5.ZERO.multiply((-334.917641721013));
      Complex complex6 = complex0.conjugate();
      Complex complex7 = Complex.valueOf((-334.917641721013));
      complex7.toString();
      complex0.divide((-2017.002));
      complex4.divide((-334.917641721013));
      Complex complex8 = complex5.cosh();
      complex8.add(complex6);
      complex6.sqrt();
      Complex complex9 = new Complex(3897.038759);
      complex9.getField();
      Complex complex10 = Complex.valueOf((-2017.002), (-772.80009));
      complex10.exp();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.pow((-278.30438326294336));
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = (Complex)complex4.ONE.readResolve();
      complex5.asin();
      complex4.log();
      complex4.multiply(complex5);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.divide(complex6);
      Complex complex8 = complex7.sinh();
      complex8.tanh();
      complex5.log();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.asin();
      complex3.ONE.log();
      Complex complex4 = complex1.reciprocal();
      Complex.valueOf((-8.943100411221856E59), (-8.943100411221856E59));
      Complex complex5 = Complex.ZERO;
      complex5.multiply((-8.943100411221856E59));
      complex5.conjugate();
      Complex.valueOf(702.35448);
      complex4.toString();
      Complex complex6 = complex4.divide(702.35448);
      complex1.subtract((-8.943100411221856E59));
      Complex complex7 = new Complex((-9.61305040618754E-5), (-664.035773870186));
      complex7.multiply(1703);
      complex4.sqrt1z();
      complex7.cosh();
      complex0.multiply(1917);
      complex3.multiply(complex6);
      Complex.valueOf(-0.0, (-278.30438326294336));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.I.multiply(complex4);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.pow(complex2);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.log();
      complex5.toString();
      Complex complex10 = complex8.sqrt1z();
      complex1.tanh();
      Complex complex11 = complex7.log();
      complex5.subtract(complex10);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex12.add(complex4);
      complex13.nthRoot(1369);
      complex9.log();
      Complex complex14 = Complex.NaN;
      complex14.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.getImaginary();
      complex11.add(complex4);
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-5201.26269985141));
      Complex complex1 = complex0.I.cos();
      complex1.NaN.multiply((-5201.26269985141));
      complex1.reciprocal();
      complex0.I.sin();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.createComplex((-5201.26269985141), (-5201.26269985141));
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.ONE;
      complex5.multiply(1190);
      Complex complex6 = complex0.subtract((-1387.3332984510903));
      Complex complex7 = complex4.pow(complex3);
      Complex complex8 = complex2.log();
      Complex complex9 = Complex.valueOf((-176.21346), 8.98570720774568E-8);
      complex9.toString();
      complex7.sqrt1z();
      Complex complex10 = complex6.add(complex8);
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex11.log();
      Complex complex13 = new Complex((-176.21346));
      complex13.subtract(complex12);
      complex10.tan();
      complex2.add(complex6);
      complex11.nthRoot(1190);
      complex9.log();
      Complex complex14 = new Complex(0.5838727951049805);
      complex14.acos();
      Complex.valueOf(0.0);
      complex1.getImaginary();
      complex9.add(complex0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.multiply(0);
      complex3.negate();
      Complex complex4 = Complex.ZERO;
      complex4.sqrt1z();
      Complex.valueOf(0.0, 716.28553958);
      complex0.readResolve();
      Object object0 = new Object();
      complex2.equals("\"S");
      complex0.isNaN();
      complex1.acos();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-132.5219419));
      Complex complex1 = complex0.I.tan();
      complex1.NaN.reciprocal();
      Complex complex2 = complex0.sin();
      complex2.multiply(0.0);
      Complex complex3 = complex2.multiply(500);
      complex3.reciprocal();
      complex3.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-132.5219419));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.sin();
      complex2.multiply(0.0);
      complex0.INF.readResolve();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = Complex.valueOf((-132.5219419), 3925.77720051);
      complex1.conjugate();
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = complex4.sinh();
      complex6.divide(complex0);
      complex3.sinh();
      Complex complex7 = Complex.valueOf(6.283185307179586, (-2539.0486707594755));
      complex7.tanh();
      complex5.log();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.asin();
      complex3.ONE.log();
      complex3.hashCode();
      Complex complex4 = complex1.sqrt1z();
      complex0.hashCode();
      Complex complex5 = Complex.ONE;
      complex5.multiply((-3085));
      complex4.cosh();
      complex5.I.sinh();
      Complex complex6 = Complex.ZERO;
      complex6.hashCode();
      complex5.subtract(complex0);
      Complex complex7 = new Complex((-3085));
      complex7.exp();
//      try { 
        complex7.nthRoot((-3134));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,134
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex1.NaN.multiply(complex2);
      complex3.sinh();
      complex3.I.pow(1.985773325073412E-7);
      Complex complex4 = complex0.ONE.cos();
      complex4.ZERO.subtract(complex3);
      Complex complex5 = complex0.ONE.pow(complex1);
      complex0.hashCode();
      complex0.getReal();
      complex5.sin();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.I.multiply(Double.NaN);
      complex7.NaN.toString();
      complex5.acos();
      Complex complex8 = complex4.cos();
      complex8.INF.reciprocal();
      complex8.multiply(complex6);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7474.767363884));
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.INF.sinh();
      complex1.getReal();
      Complex complex4 = complex2.INF.conjugate();
      complex4.INF.sinh();
      Complex complex5 = complex0.tan();
      complex5.ZERO.nthRoot(509);
      complex2.log();
      Complex complex6 = complex1.divide((double) 1);
      Complex complex7 = complex0.conjugate();
      complex7.NaN.negate();
      Complex complex8 = complex5.divide(complex7);
      complex5.NaN.negate();
      complex8.I.add(complex2);
      complex1.ONE.tan();
      complex5.INF.multiply(1);
      complex5.cos();
      complex0.multiply(complex8);
      complex0.multiply((double) 1);
      complex3.nthRoot(1);
      complex5.sqrt1z();
      complex6.createComplex(2213.544538994927, (-1295.148484302));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.5838727951049805);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.cos();
      complex2.NaN.reciprocal();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex3.INF.pow(0.5838727951049805);
      complex6.INF.abs();
      Complex complex7 = complex0.I.pow(complex1);
      Complex complex8 = complex7.ONE.pow(3298.831421957);
      Complex complex9 = complex8.conjugate();
      complex9.divide(complex2);
      Complex complex10 = complex0.pow(0.5838727951049805);
      complex10.I.readResolve();
      complex0.getImaginary();
      Complex complex11 = complex0.divide(complex1);
      Complex complex12 = complex7.negate();
      complex12.atan();
      Complex complex13 = complex1.multiply(complex0);
      complex13.tan();
      Complex complex14 = complex13.ONE.add(complex4);
      complex14.NaN.add(complex3);
      complex14.asin();
      Complex complex15 = complex4.divide(complex5);
      complex15.INF.readResolve();
      complex11.pow(complex5);
      Complex complex16 = Complex.valueOf(0.0);
      complex12.equals(complex16);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(476.56352404163, 1366.508771659006);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.NaN.createComplex(1366.508771659006, 476.56352404163);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex0.cos();
      complex5.I.multiply(1366.508771659006);
      Complex complex7 = complex6.I.subtract(complex3);
      complex7.INF.subtract(complex2);
      complex5.equals(complex4);
      Complex complex8 = complex4.createComplex(1366.508771659006, 0.0);
      complex8.I.sqrt();
      complex1.multiply(1366.508771659006);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(62.9, 62.9);
      int int0 = (-2235);
      complex0.multiply((-2235));
      complex0.ZERO.abs();
      Complex complex1 = complex0.add((-647.26323006005));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.createComplex(62.9, 0.0);
      complex3.INF.add(complex1);
      Complex complex4 = complex2.negate();
      complex2.I.conjugate();
      complex4.I.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.tan();
      complex6.NaN.reciprocal();
      Complex complex7 = complex4.divide(complex5);
//      try { 
        complex7.NaN.nthRoot((-2235));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,235
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(716.28553958, 102.690011);
      Complex complex1 = complex0.INF.atan();
      complex1.multiply(complex0);
      Complex complex2 = complex1.NaN.subtract(716.28553958);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.valueOf(716.28553958, (-20.0));
      complex4.I.pow(complex2);
      Complex.valueOf(0.0, (-20.0));
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex2.reciprocal();
      complex7.INF.nthRoot(1);
      Complex complex8 = complex7.tan();
      Complex.valueOf((-1137.298740725), (-1270.2713));
      Complex complex9 = Complex.valueOf(716.28553958);
      complex3.pow(complex9);
      Complex complex10 = complex5.createComplex((-20.0), (-281.8882518284437));
      complex2.INF.add((-20.0));
      complex2.exp();
      Complex.valueOf(0.0, (-281.8882518284437));
      Complex complex11 = complex10.multiply(0.0);
      complex11.ZERO.pow(complex0);
      complex9.negate();
      complex7.divide(complex9);
      complex8.cos();
      complex0.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-537.156614));
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.ZERO.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(0);
      complex0.reciprocal();
      Complex complex2 = complex1.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      complex1.readResolve();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex0.add((-20.0));
      Complex complex6 = Complex.valueOf(0.0, 1504.478149733204);
      complex6.ONE.subtract(complex5);
      Complex complex7 = complex1.negate();
      complex7.I.sqrt();
      complex2.sinh();
      complex4.subtract(0.0);
      Complex complex8 = complex0.exp();
      complex3.getReal();
      complex8.cosh();
      Complex.valueOf((-1241.0));
      complex0.multiply(1360);
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex0.NaN.hashCode();
      complex1.getArgument();
      complex0.isInfinite();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.sinh();
      complex0.hashCode();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex3.tan();
      complex6.abs();
      Complex complex7 = complex6.ONE.pow(complex2);
      int int0 = (-1);
      Complex complex8 = complex7.I.multiply((-1));
      Complex complex9 = complex5.createComplex(1.0, 1266.8715765480697);
      complex8.pow((-2094.961159));
      complex0.isNaN();
      complex6.I.subtract((-182.278811019));
      complex3.multiply(5248);
      complex2.atan();
      int int1 = (-138);
      complex4.ONE.acos();
      complex9.multiply((-138));
      complex2.add((double) (-138));
      // Undeclared exception!
      complex4.nthRoot(5248);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.divide(complex1);
      complex0.I.toString();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.INF.acos();
      complex5.I.multiply(272);
      Complex complex6 = complex3.ZERO.divide(complex4);
      complex6.pow(complex0);
      complex0.isNaN();
      Complex complex7 = complex0.INF.conjugate();
      Complex complex8 = complex7.I.tan();
      complex0.readResolve();
      complex1.getField();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.cosh();
      complex0.getArgument();
      Complex complex11 = complex9.pow(0.0);
      complex9.cos();
      complex4.conjugate();
      Complex complex12 = complex9.I.cosh();
      complex12.ONE.atan();
      complex10.equals("(0.0, 1.0)");
      complex10.negate();
      complex2.multiply(0.0);
      complex8.cosh();
      complex9.getImaginary();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex6.ONE.multiply(0);
      Complex complex8 = complex4.negate();
      complex8.sqrt1z();
      Complex.valueOf(0.0, 0.0);
      complex8.readResolve();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.isNaN();
      complex3.acos();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex0.tanh();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.INF.pow(0.0);
      complex5.NaN.subtract(0.0);
      complex5.sqrt();
      Complex complex6 = complex1.add(complex3);
      complex6.I.cos();
      complex4.NaN.abs();
      complex4.NaN.getArgument();
      Complex.valueOf(0.0);
      complex4.I.exp();
      Complex complex7 = complex2.multiply(43.221);
      complex4.createComplex(0.40741634368896484, 302.673456);
      complex7.equals((Object) null);
      complex5.exp();
      complex5.subtract(0.40741634368896484);
      Complex complex8 = complex5.multiply((-408.701));
      Complex complex9 = complex8.multiply(302.673456);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex4.pow(0.0);
      complex12.INF.toString();
      complex11.createComplex(0.40741634368896484, 20.0);
      complex10.tan();
      complex8.nthRoot(1198);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-278.30438326294336));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.pow((-278.30438326294336));
      Complex complex4 = complex3.I.conjugate();
      complex4.ONE.readResolve();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex5.I.subtract((-278.30438326294336));
      complex1.ZERO.getField();
      Complex complex7 = complex0.tanh();
      Complex complex8 = new Complex((-278.30438326294336));
      complex2.cosh();
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex8.I.acos();
      Complex complex11 = complex1.sqrt();
      complex8.INF.sinh();
      Complex.valueOf((-278.30438326294336));
      complex1.equals(complex8);
      Complex complex12 = complex1.log();
      complex8.INF.divide(0.0);
      Complex complex13 = complex12.INF.multiply(complex10);
      Complex complex14 = complex13.NaN.subtract(complex2);
      complex14.NaN.abs();
      Complex complex15 = complex10.sinh();
      complex15.ONE.cos();
      complex8.subtract(complex9);
      complex8.getArgument();
      complex7.getField();
      complex6.log();
      complex10.createComplex((-278.30438326294336), (-278.30438326294336));
      complex5.add((-1282.0));
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.tan();
      Complex complex1 = complex0.I.pow(2.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(2.0);
      complex2.NaN.sin();
      complex3.NaN.readResolve();
      complex3.hashCode();
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.ZERO.multiply(1190);
      complex7.ZERO.subtract(2.0);
      Complex complex8 = complex2.NaN.pow(complex0);
      complex8.INF.log();
      complex8.INF.toString();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.INF.add(complex1);
      complex2.ZERO.tanh();
      Complex complex11 = complex2.log();
      complex11.I.subtract(complex9);
      Complex complex12 = complex7.tan();
      Complex complex13 = complex0.add(complex12);
      complex10.nthRoot(1369);
      complex1.log();
      complex1.acos();
      Complex.valueOf(916.568);
      complex13.getImaginary();
      complex5.add(complex0);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.pow(2510.9631045262363);
      Complex complex2 = new Complex(1841.6291634422116, 1841.6291634422116);
      Complex complex3 = complex0.subtract(complex2);
      complex2.toString();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.I.createComplex(2510.9631045262363, 477.0941);
      complex5.negate();
      Complex complex6 = complex3.divide(complex4);
      complex6.isNaN();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.ONE.multiply((-1.0));
      complex0.isInfinite();
      Complex complex1 = complex0.divide(0.0);
      complex1.divide((-1.0));
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-2093.65747584892), (-2093.65747584892));
      Complex complex1 = Complex.valueOf((-2093.65747584892), (-2093.65747584892));
      complex0.isInfinite();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-132.5219419));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.multiply(0.0);
      complex0.INF.readResolve();
      complex0.ONE.cos();
      Complex complex4 = Complex.valueOf((-132.5219419), 3925.77720051);
      Complex complex5 = complex1.conjugate();
      complex3.ZERO.hashCode();
      complex5.ONE.sqrt1z();
      complex5.hashCode();
      Complex complex6 = complex2.ONE.multiply((-3085));
      complex6.INF.cosh();
      complex5.INF.hashCode();
      complex3.subtract(complex5);
      complex4.exp();
//      try { 
        complex4.nthRoot((-3134));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,134
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-182.0), 0.0);
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.acos();
      complex0.isInfinite();
      complex3.abs();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(1529.85);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex0.sinh();
      complex6.ONE.subtract(complex3);
      complex6.multiply(complex5);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.INF.getArgument();
      Complex complex2 = complex0.I.multiply((-1019));
      Complex complex3 = complex1.ZERO.divide(complex0);
      complex1.getImaginary();
      complex3.I.conjugate();
      Complex complex4 = complex0.conjugate();
      complex3.isInfinite();
      complex3.equals(complex4);
      complex0.asin();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.I.atan();
      complex2.getArgument();
      Complex complex7 = complex2.createComplex(-0.0, -0.0);
      Complex complex8 = complex4.sinh();
      complex5.abs();
      complex2.I.sqrt();
      complex1.acos();
      complex6.ZERO.add(Double.POSITIVE_INFINITY);
      complex8.log();
      Complex complex9 = Complex.valueOf((-1435.0), -0.0);
      complex3.readResolve();
      complex7.hashCode();
      complex3.subtract(1019.0);
      complex6.getReal();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-5201.26269985141));
      Complex complex1 = complex0.I.cos();
      complex1.NaN.multiply((-5201.26269985141));
      complex1.reciprocal();
      complex0.I.sin();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.createComplex((-5201.26269985141), (-5201.26269985141));
      Complex complex4 = complex3.ZERO.pow(complex2);
      complex4.INF.pow(complex2);
      complex4.divide(complex1);
      complex3.INF.conjugate();
//      try { 
        complex4.NaN.nthRoot((-2639));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,639
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(453.03220322);
      complex1.I.multiply(17);
      complex0.INF.cosh();
      complex0.INF.getArgument();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.acos();
      complex3.I.sinh();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex4.I.multiply(complex3);
      complex5.NaN.tan();
      complex4.NaN.add(complex3);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.INF.pow(complex2);
      Complex complex8 = complex0.NaN.multiply(1);
      complex2.INF.hashCode();
      complex6.equals(complex0);
      Complex complex9 = complex6.sinh();
      complex0.ONE.getField();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex0.subtract(complex10);
      complex6.NaN.subtract((double) 1);
      complex11.NaN.divide(0.0);
      Complex complex12 = complex11.ZERO.sin();
      complex11.multiply(complex9);
      complex6.atan();
      complex12.getField();
      Complex complex13 = complex12.divide((-1.0));
      complex7.atan();
      Complex.valueOf((-1.0));
      complex13.sqrt1z();
      complex10.negate();
      complex8.divide(complex0);
      complex11.negate();
      complex2.cos();
      complex10.log();
      complex13.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1928.7104200206);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3818.1659568));
      complex0.readResolve();
      complex0.ONE.cosh();
      Complex complex1 = complex0.ZERO.tanh();
      Complex.valueOf((-3818.1659568), (-3818.1659568));
      Complex complex2 = complex0.ONE.sqrt();
      complex1.I.abs();
      Complex.valueOf((-3818.1659568));
      Complex complex3 = complex0.pow(1636.6084654);
      complex3.I.getField();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(3.7772500667438066E-282);
      Complex complex1 = complex0.atan();
      complex0.toString();
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.getField();
      complex1.INF.log();
      complex2.ONE.multiply(358.90204476);
      Complex complex3 = complex2.ONE.createComplex(3.7772500667438066E-282, 3.7772500667438066E-282);
      Complex complex4 = complex3.ONE.exp();
      complex4.pow(358.90204476);
      complex4.NaN.add(358.90204476);
      Complex complex5 = Complex.valueOf(3.7772500667438066E-282, (-995.3986645741));
      complex5.equals(complex1);
      complex5.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      complex0.nthRoot(720);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.atan();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf((-1603.7602));
      complex3.ZERO.cos();
      Complex complex4 = complex3.NaN.tan();
      complex0.getReal();
      complex3.ZERO.readResolve();
      complex3.NaN.divide((-1603.7602));
      Complex complex5 = complex4.cos();
      complex5.ONE.nthRoot(1);
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      Complex.valueOf((-1007.4334579276402), 561.614541);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-2167.61713157934));
      Complex complex1 = complex0.ONE.createComplex(1.0, 1.0);
      Complex complex2 = Complex.valueOf(0.0, (-690.0));
      Complex complex3 = complex0.I.pow(complex2);
      complex2.ZERO.abs();
      complex2.ZERO.toString();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.conjugate();
      complex2.ZERO.sqrt();
      complex4.INF.readResolve();
      Complex complex6 = Complex.ONE;
      complex1.add(complex6);
      Complex complex7 = complex1.tan();
      complex7.ZERO.toString();
      complex7.pow(complex6);
      Complex complex8 = complex4.ZERO.tan();
      complex6.ZERO.toString();
      Complex complex9 = Complex.valueOf((-2167.61713157934));
      complex9.INF.divide(complex3);
      complex8.NaN.toString();
      complex5.sinh();
      complex5.asin();
      complex6.INF.add((-2167.61713157934));
//      try { 
        complex2.ONE.nthRoot((-3232));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,232
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586);
      complex0.I.sin();
      Complex complex1 = complex0.ZERO.tan();
      complex0.ONE.abs();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.ZERO.divide(63.8394497953642);
      Complex complex5 = complex2.I.asin();
      Complex complex6 = Complex.NaN;
      complex4.ZERO.add(complex6);
      complex2.I.sqrt1z();
      Complex complex7 = complex5.INF.negate();
      complex7.INF.readResolve();
      complex0.toString();
      int int0 = 0;
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.hashCode();
      Complex complex1 = complex0.add((-3661.01345926));
      Complex complex2 = complex0.ONE.multiply((-1598));
      Complex complex3 = complex2.I.tanh();
      complex0.readResolve();
      complex0.ONE.sinh();
      complex1.exp();
      Complex complex4 = complex2.subtract(complex1);
      Complex.valueOf(1054.9408099, (double) (-1598));
      complex3.divide((-3661.01345926));
      complex4.acos();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.INF.divide(complex0);
      complex0.ONE.toString();
      complex2.INF.nthRoot(810);
      complex1.toString();
      complex1.hashCode();
      complex0.I.pow(4.413745413236018E-197);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.exp();
      complex5.ONE.pow((double) 810);
      Complex complex8 = complex7.I.divide(2.6102792042257208E-23);
      complex0.I.toString();
      Complex complex9 = complex3.sinh();
      complex9.INF.multiply(0.0);
      complex0.sinh();
      complex7.multiply(0);
      complex8.acos();
      complex1.pow(complex6);
      complex2.equals((Object) null);
      complex2.readResolve();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      complex0.INF.tan();
      Complex complex2 = Complex.valueOf(2654.93006850134);
      complex1.INF.pow(complex2);
      Complex complex3 = complex0.I.createComplex(3013.776845, 1196.0);
      complex0.ONE.toString();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex5.tanh();
      Complex.valueOf(0.0);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex1.cos();
      complex8.exp();
      complex1.cosh();
      complex1.getReal();
      complex0.getArgument();
      complex1.getArgument();
      complex0.getArgument();
      complex3.sqrt1z();
      complex7.sinh();
      complex5.subtract(complex4);
      Complex.valueOf(3013.776845, 0.0);
      complex4.getField();
      complex3.divide(complex6);
      complex8.add(complex4);
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-2197.28053507923));
      Complex complex1 = complex0.I.createComplex(674.7299, (-2197.28053507923));
      Complex complex2 = complex0.pow((-2197.28053507923));
      Complex complex3 = complex2.pow(complex0);
      complex3.getField();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.pow(0.0);
      complex2.NaN.getField();
      Complex complex6 = complex5.NaN.add((-2197.28053507923));
      complex6.ZERO.abs();
      String string0 = complex5.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex5.isNaN();
      complex2.exp();
      Complex complex7 = complex2.createComplex(2089.9234433050146, 674.7299);
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.NaN.multiply(complex8);
      complex9.I.createComplex(0.0, (-564.1928871142777));
      Complex complex10 = complex7.divide(0.0);
      Complex complex11 = complex8.ONE.pow(complex3);
      assertSame(complex11, complex6);
      
      Complex complex12 = complex10.NaN.multiply(1597);
      Complex complex13 = complex4.sqrt1z();
      assertTrue(complex13.equals((Object)complex11));
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getImaginary(), 0.01);
      
      double double0 = complex4.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      
      Complex complex14 = complex8.exp();
      assertEquals(0.5403023058681398, complex14.getReal(), 0.01);
      
      Complex complex15 = complex7.cosh();
      assertEquals(Double.POSITIVE_INFINITY, complex15.getImaginary(), 0.01);
      assertFalse(complex15.equals((Object)complex4));
      
      complex10.getArgument();
      complex10.hashCode();
      assertSame(complex10, complex12);
      
      boolean boolean0 = complex0.equals(complex3);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.equals((Object)complex15));
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.INF.add(complex2);
      complex3.ZERO.add(complex2);
      complex3.ZERO.hashCode();
      assertTrue(complex3.isInfinite());
      
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.I.multiply(complex4);
      Complex complex6 = Complex.ONE;
      complex6.abs();
      complex0.multiply(complex6);
      Complex complex7 = complex2.acos();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.NaN.subtract(1213.0744148);
      Complex complex10 = complex0.tanh();
      assertEquals(1.557407724654902, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex8.ZERO.reciprocal();
      String string0 = complex4.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex1.getArgument();
      Complex complex12 = complex0.asin();
      complex6.negate();
      Complex complex13 = complex8.multiply(2322.3695);
      assertTrue(complex13.equals((Object)complex1));
      
      complex5.multiply(complex2);
      assertNotSame(complex5, complex12);
      assertSame(complex4, complex11);
      assertSame(complex5, complex9);
      
      complex8.hashCode();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-334.917641721013));
      Complex complex1 = complex0.INF.exp();
      complex1.NaN.exp();
      Complex complex2 = complex0.INF.tanh();
      complex2.ZERO.hashCode();
      complex0.getField();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = Complex.valueOf((-334.917641721013), (-334.917641721013));
      assertEquals((-334.917641721013), complex6.getReal(), 0.01);
      
      Complex complex7 = complex5.ZERO.multiply((-334.917641721013));
      assertSame(complex5, complex4);
      assertEquals(-0.0, complex7.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex1));
      
      Complex complex8 = complex0.conjugate();
      Complex complex9 = Complex.valueOf((-334.917641721013));
      String string0 = complex9.toString();
      assertEquals("(-334.917641721013, 0.0)", string0);
      
      Complex complex10 = complex0.divide((-2017.002));
      Complex complex11 = complex8.subtract((-2051.0));
      assertEquals(1716.082358278987, complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      complex9.multiply(2841);
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex0.cosh();
      assertFalse(complex13.isNaN());
      
      Complex complex14 = complex12.multiply((-2348));
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertEquals((-2315.404587543421), complex14.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex0.INF.multiply(complex4);
      Complex complex6 = complex2.ONE.sinh();
      assertEquals(1.1752011936438014, complex6.getReal(), 0.01);
      
      complex0.divide(complex2);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex0.tanh();
      assertSame(complex8, complex7);
      
      complex5.log();
      Complex complex9 = complex5.atan();
      assertTrue(complex4.equals((Object)complex1));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex5, complex8);
      assertSame(complex9, complex3);
  }
}
