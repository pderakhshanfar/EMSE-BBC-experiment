/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:56:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(393.793811);
      Complex complex3 = new Complex(393.793811, 1.2471543820137223);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.cos();
      complex0.getArgument();
      Complex complex6 = complex2.tanh();
      complex6.createComplex(0.0, 8.013164089994031E46);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex0.createComplex(20.0, 20.0);
      complex5.hashCode();
      complex4.nthRoot(37);
      complex7.atan();
      Complex complex9 = complex0.divide(complex1);
      complex9.NaN.pow(complex6);
      complex8.tan();
      complex6.multiply((-978));
      complex1.toString();
      complex4.subtract(complex7);
      Complex complex10 = Complex.INF;
      complex10.nthRoot(2772);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 663.11044);
      complex2.cosh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.multiply((-1.0751021694819994E-16));
      Complex complex5 = new Complex(2400.717, Double.POSITIVE_INFINITY);
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = Complex.valueOf(1.5707963267948966);
      complex6.INF.getArgument();
      Complex complex8 = complex3.ZERO.tanh();
      complex8.INF.createComplex(1.5707963267948966, 0.8813735870195429);
      Complex complex9 = Complex.I;
      complex5.createComplex(1.5707963267948966, 0.7853981633974483);
      complex3.ONE.multiply(complex5);
      complex6.nthRoot(1297);
      complex5.I.divide(complex3);
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.multiply(1297);
      complex6.NaN.multiply(complex8);
      complex3.toString();
      complex11.subtract(complex7);
      complex4.nthRoot(585);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = new Complex(2.0110092718356274E218, (-1567.1160977388456));
      Complex complex3 = complex2.sqrt1z();
      complex3.cos();
      complex3.tan();
      complex3.multiply(2845);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(663.11044, Double.POSITIVE_INFINITY);
      complex0.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.multiply(663.11044);
      Complex complex4 = new Complex((-2118.670391703363), 1.021716833114624);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.cos();
      complex2.getArgument();
      complex2.nthRoot(21);
      complex5.divide(complex2);
      complex6.tan();
      complex3.multiply((-1698));
      Complex complex7 = complex1.subtract(complex0);
      complex7.nthRoot(21);
      Complex complex8 = complex2.negate();
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.acos();
      Complex complex1 = new Complex(2.0110092718356274E218, (-1567.1160977388456));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = new Complex(1.5707963267948966, 679.3);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      complex1.INF.divide((-289.50010022));
      Complex complex2 = new Complex(2.0110092718356274E218, (-1567.1160977388456));
      Complex complex3 = complex2.sqrt1z();
      complex0.cos();
      complex3.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = new Complex(2.0110092718356274E218, (-1567.1160977388456));
      Complex complex3 = complex2.sqrt1z();
      complex0.cos();
      complex1.nthRoot(282);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.getArgument();
      Complex.valueOf((-3147.0), 1.0000202950644068);
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-169.8566), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.cos();
      complex2.nthRoot(21);
      complex6.tan();
      complex2.multiply(21);
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.acos();
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.5707963267948966, 663.11044);
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(2400.717, Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.sqrt1z();
      complex2.cos();
      complex4.getField();
      complex5.nthRoot(21);
      Complex complex6 = complex4.tan();
      complex6.multiply(0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.divide(2.0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex0.subtract((-3165.97759666636));
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.conjugate();
      complex2.ZERO.sqrt();
      Complex complex6 = complex0.divide((-20.0));
      Complex complex7 = complex6.INF.subtract((-3165.97759666636));
      Complex complex8 = complex6.tanh();
      complex8.INF.sqrt1z();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex5.ZERO.sin();
      Complex complex11 = complex2.subtract(complex8);
      Complex complex12 = complex11.ZERO.sqrt();
      complex12.NaN.getField();
      Complex complex13 = complex9.I.conjugate();
      Complex complex14 = complex13.INF.multiply(complex5);
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex9.tan();
      complex15.multiply(687);
      Complex complex17 = complex4.sqrt();
      complex15.conjugate();
      complex2.log();
      complex10.reciprocal();
      complex7.divide(complex17);
      complex10.pow(complex5);
      complex14.nthRoot(447);
      complex16.abs();
      complex0.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9213623525983532);
      Complex complex1 = new Complex(1.9213623525983532, 2.0200552940368652);
      complex0.ZERO.subtract(complex1);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 2.1552386987482013E-181);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.ONE;
      complex3.getArgument();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.negate();
      complex0.subtract(2.1552386987482013E-181);
      complex0.conjugate();
      complex5.nthRoot(2856);
      complex1.tan();
      complex2.getField();
      Complex complex6 = complex4.divide(Double.NaN);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-75.43436287766127));
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(0.0, 1.6121782610217253E-8);
      Complex complex2 = complex0.multiply(complex1);
      complex1.getArgument();
      Complex complex3 = complex0.divide(complex2);
      complex0.cosh();
      complex3.negate();
      complex3.subtract(1.5707963267948966);
      complex0.conjugate();
      complex0.nthRoot(1002);
      complex0.nthRoot(1002);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.INF.negate();
      complex3.ZERO.negate();
      complex1.ZERO.reciprocal();
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex4.add(7.283163019991001E-164);
      complex5.ZERO.getField();
      Complex.valueOf(7.283163019991001E-164);
      complex0.multiply((-2398));
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-1882.300556034), (-1882.300556034));
      Complex complex1 = complex0.divide((-84.3141253));
      complex1.sinh();
      Complex.valueOf((-1882.300556034));
      Complex complex2 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      complex0.ONE.nthRoot(3104);
      complex0.createComplex((-425.0), (-425.0));
      complex0.add((-3.459885432869825E182));
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.600896265625552E-8, 5.600896265625552E-8);
      Complex complex1 = Complex.valueOf(5.600896265625552E-8);
      Complex complex2 = complex1.pow(5.600896265625552E-8);
      complex1.INF.nthRoot(7);
      Complex complex3 = complex0.ONE.add(complex1);
      complex3.ZERO.pow(complex2);
      Complex complex4 = complex0.I.cos();
      complex4.ZERO.sqrt();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.divide((-365.910053648653));
      Complex complex7 = complex6.INF.cos();
      complex7.NaN.getArgument();
      Complex complex8 = complex4.sinh();
      complex6.I.createComplex((-365.910053648653), 7);
      complex2.readResolve();
      complex1.sqrt();
      complex5.subtract(complex8);
      complex5.nthRoot(7);
      Complex complex9 = complex6.cosh();
      complex5.INF.cos();
      Complex complex10 = complex9.INF.subtract(3376.3);
      complex10.ZERO.conjugate();
      complex0.pow(complex5);
//      try { 
        complex0.nthRoot((-2146101217));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,146,101,217
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-969.721));
      Complex complex1 = complex0.divide((-969.721));
      Complex complex2 = complex1.add(1834.636548127);
      complex2.ONE.hashCode();
      Complex complex3 = complex1.I.pow(complex0);
      complex3.ONE.readResolve();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.NaN.add(complex0);
      Complex complex6 = complex5.I.negate();
      complex0.NaN.atan();
      complex6.atan();
      complex0.INF.negate();
      Complex complex7 = Complex.valueOf((-969.721));
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex2.cos();
      complex9.ZERO.getArgument();
      complex4.sqrt1z();
      complex3.toString();
      complex3.abs();
      complex1.isInfinite();
      complex8.asin();
      complex6.asin();
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.3662964701652527);
      complex1.getArgument();
      complex0.readResolve();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.ZERO.conjugate();
      complex0.getArgument();
      Complex complex2 = new Complex(700.178);
      complex2.add(127.6286);
      complex0.subtract(2365.523);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getField();
      Complex complex1 = complex0.log();
      complex1.ZERO.sin();
      Complex complex2 = complex0.divide(complex0);
      Complex complex3 = complex0.add(0.0);
      complex3.I.multiply(0.0);
      complex2.nthRoot(1668);
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(806.0);
      complex0.getArgument();
      complex0.readResolve();
      Complex complex2 = Complex.ZERO;
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2555.2588404557, 6.283185307179586);
      complex1.cosh();
      Complex complex2 = Complex.valueOf(20.0, 1272.7871267710022);
      complex2.tanh();
      Complex.valueOf(2555.2588404557, 1272.7871267710022);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(806.0, 666.698053);
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1882.300556034), (-1979.7990543981));
      Complex complex1 = complex0.divide((-700.923518));
      complex1.acos();
      Complex complex2 = Complex.ONE;
      complex0.equals((Object) null);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.tanh();
      Complex complex7 = new Complex((-700.923518), (-176.86219089));
      complex7.multiply(372);
      Complex.valueOf((-1979.7990543981), 610.44945);
      complex2.tanh();
      complex3.multiply(372);
//      try { 
        complex6.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1882.300556034), (-1882.300556034));
      Complex complex1 = complex0.divide((-84.3141253));
      Complex complex2 = complex0.acos();
      complex1.tan();
      complex2.reciprocal();
      Complex complex3 = Complex.NaN;
      complex1.sin();
      Complex complex4 = complex1.sin();
      Complex complex5 = Complex.NaN;
      complex4.sqrt();
      complex5.multiply(2566.540273760667);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2062.1596786), (-633.3329));
      Complex complex2 = new Complex(0.03615493282037181);
      Complex complex3 = complex1.subtract(complex2);
      complex2.getField();
      Complex complex4 = complex0.log();
      complex4.divide(complex3);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(188.20287982819542);
      complex0.tan();
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
      Complex complex2 = complex0.reciprocal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      complex2.nthRoot(2112029938);
      complex1.ONE.toString();
      Complex complex3 = Complex.valueOf(0.0);
      complex2.asin();
      Complex complex4 = complex3.divide((-2062.1596786));
      Complex complex5 = complex1.acos();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = new Complex(1616.4696339585, (-2062.1596786));
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex4);
      complex5.acos();
      complex6.sqrt1z();
      Complex complex9 = Complex.NaN;
      Complex complex10 = new Complex((-2062.1596786), Double.NaN);
      complex10.tanh();
      complex7.multiply((-2076));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(337.6044806637456, (-1191.92363));
      complex0.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(4588.5, 4588.5);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.reciprocal();
      complex0.tanh();
      complex2.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex((-593.5), 4588.5);
      complex4.sin();
      Complex complex5 = Complex.ONE;
      complex5.sin();
      complex5.createComplex((-593.5), 0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(378.82553, (-1191.92363));
      Complex complex1 = complex0.subtract((-753.786065));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.atan();
      complex2.I.acos();
      Complex complex4 = complex3.ZERO.createComplex(Double.NaN, (-753.786065));
      complex4.ONE.hashCode();
      complex4.NaN.sinh();
      Complex complex5 = complex2.createComplex(0.0, (-1191.92363));
      Complex complex6 = complex5.multiply((-799));
      complex5.ONE.multiply((-769));
      complex2.abs();
      Complex complex7 = Complex.valueOf(Double.NaN, 0.03615493282037181);
      Complex complex8 = complex2.multiply(1892);
      complex8.NaN.hashCode();
      complex8.nthRoot(1);
      complex2.acos();
      complex1.nthRoot(1892);
      Complex complex9 = complex0.divide((-1191.92363));
      complex9.add(complex7);
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.tanh();
      Complex.valueOf(Double.NaN, 1.0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.multiply(complex0);
      complex2.ONE.hashCode();
      complex0.subtract((-67.059980316277));
      Complex complex4 = complex3.subtract(complex2);
      complex3.getField();
      complex0.log();
      complex0.divide(complex1);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-75.43436287766127));
      complex0.NaN.toString();
      Complex complex1 = new Complex((-75.43436287766127));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.reciprocal();
      complex3.createComplex((-4.405966390424518E-8), (-1901.4926045048446));
      complex0.getField();
      complex1.getField();
      complex1.asin();
      Complex complex4 = complex2.exp();
      complex0.divide((-75.43436287766127));
      complex3.cosh();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex4.sqrt();
      complex3.multiply(0.19999954120254515);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      complex0.isNaN();
      Complex complex4 = Complex.NaN;
      complex4.multiply(complex3);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(4588.5, 4588.5);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.I.getField();
      complex0.getField();
      complex0.getField();
      Complex complex3 = Complex.valueOf(4588.5);
      Complex complex4 = complex3.asin();
      complex0.exp();
      Complex complex5 = complex4.divide(0.25088030099868774);
      complex5.cosh();
      complex4.divide(4588.5);
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.ZERO.exp();
      complex8.INF.sqrt1z();
      Complex complex9 = Complex.valueOf((-1232.418922));
      complex9.tanh();
      complex7.divide(0.25088030099868774);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-75.43436287766127));
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(0.0, 1.6121782610217253E-8);
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.ONE.getArgument();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.INF.subtract((-75.43436287766127));
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.INF.multiply((-75.43436287766127));
      complex6.NaN.negate();
      complex2.I.subtract((-99.57407573462046));
      Complex complex7 = complex0.multiply(848);
      complex2.ONE.conjugate();
      complex1.ZERO.conjugate();
      complex7.ONE.atan();
      complex2.nthRoot(1916);
      Complex complex8 = complex7.conjugate();
      complex1.nthRoot(1916);
      complex8.ZERO.sinh();
      Complex complex9 = Complex.valueOf(1070.4834884149907, 2.914906573537692E-8);
      Complex complex10 = complex7.tan();
      complex10.sqrt1z();
      Complex complex11 = new Complex(848);
      complex11.createComplex((-7.983752040001029), 848);
      complex8.getReal();
      complex9.hashCode();
//      try { 
        complex4.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-2198.4540566), (-1815.9386452583951));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.INF.log();
      complex0.toString();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.ONE.reciprocal();
      complex4.ZERO.sqrt1z();
      complex4.I.asin();
      Complex complex5 = complex2.I.add(0.5255602598190308);
      Complex complex6 = Complex.valueOf(0.5255602598190308, (-2198.4540566));
      Complex complex7 = complex1.I.multiply(complex6);
      complex2.I.hashCode();
      complex2.NaN.exp();
      Complex complex8 = complex5.multiply(1199);
      Complex complex9 = complex8.atan();
      Complex complex10 = complex9.ZERO.tanh();
      complex10.ZERO.getField();
      Complex complex11 = complex10.INF.atan();
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex8.I.sqrt();
      complex13.INF.toString();
      complex0.toString();
      complex13.abs();
      complex8.abs();
      complex7.sinh();
      Complex complex14 = complex10.tan();
      complex1.cosh();
      complex11.toString();
      complex12.getField();
      complex14.negate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1716.4855565019);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.divide(complex3);
      complex3.isNaN();
      Complex complex7 = new Complex(124.7548617, 0.5255602598190308);
      complex6.multiply(complex7);
      Complex complex8 = Complex.ONE;
      complex8.createComplex(0.5255602598190308, 1329.50776571722);
      complex1.getReal();
      complex5.hashCode();
      complex1.sqrt();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.5255602598190308);
      complex0.atan();
      complex1.cosh();
      Complex complex2 = Complex.INF;
//      try { 
        complex1.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.5255602598190308);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.subtract(400.635643095);
      complex2.nthRoot(1873);
      Complex complex4 = complex3.tanh();
      complex1.sqrt();
      complex4.multiply(0.8236242981515024);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-75.43436287766127));
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(0.0, 1.6121782610217253E-8);
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.ONE.getArgument();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.INF.subtract((-75.43436287766127));
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.INF.multiply((-75.43436287766127));
      complex6.NaN.negate();
      Complex complex7 = complex2.I.subtract((-99.57407573462046));
      Complex complex8 = complex0.multiply(848);
      complex2.ONE.conjugate();
      complex1.ZERO.conjugate();
      complex2.nthRoot(1916);
      complex8.conjugate();
      complex1.nthRoot(1916);
      Complex.valueOf(1070.4834884149907, 2.914906573537692E-8);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.sqrt1z();
      complex10.negate();
      complex2.createComplex((-983.753764), 0.0);
      Object object0 = complex4.readResolve();
      complex9.equals(object0);
      complex7.conjugate();
      Complex complex11 = complex0.reciprocal();
      complex10.exp();
      complex11.pow((-75.43436287766127));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.reciprocal();
      complex2.tanh();
      complex2.NaN.reciprocal();
      complex1.readResolve();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1416.973226));
      Complex complex1 = complex0.createComplex(735.55669, (-9.374695893307895E158));
      Complex complex2 = new Complex((-865.3301951));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.sqrt();
      complex3.negate();
      Complex complex6 = Complex.valueOf(0.3055872321128845);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex6.createComplex(6.283185307179586, Double.NaN);
      complex3.getField();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex7.asin();
      complex10.subtract(complex2);
      complex8.toString();
      complex5.isNaN();
      Complex.valueOf(2.0, (-1416.973226));
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, (-3679.0));
      complex11.cos();
      complex4.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(3690.4346, 3690.4346);
      Complex complex1 = complex0.createComplex((-628.3151), (-628.3151));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.createComplex(3690.4346, (-1157.5));
      complex2.getField();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.asin();
      complex1.subtract(complex9);
      complex4.toString();
      complex4.isNaN();
      Complex complex10 = Complex.valueOf(3690.4346, 0.6312094926834106);
      complex10.cos();
      complex1.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(4588.5, 4588.5);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.I.getField();
      Complex complex3 = Complex.valueOf(1001319.4356, 4588.5);
      complex3.isNaN();
      complex3.multiply(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.createComplex((-7.983752040001029), 4588.5);
      Complex complex6 = Complex.valueOf(392.003678565, 392.003678565);
      complex6.getReal();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(0.5255602598190308);
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.pow(complex2);
      complex0.divide(complex4);
      complex1.log();
      Complex complex6 = new Complex(0.5255602598190308);
      complex5.ONE.subtract(complex1);
      complex6.ONE.tan();
      Complex complex7 = complex4.divide(complex6);
      complex4.acos();
      complex7.toString();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
      complex0.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow((-1882.300556034));
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.subtract(1.260420322418213);
      Complex.valueOf((-1416.973226));
      Complex complex5 = new Complex(0.9999999999999998, 4628425.857166506);
      Complex complex6 = complex5.createComplex((-1485.986409869), (-788.5));
      complex3.getField();
      Complex complex7 = Complex.ZERO;
      complex7.getField();
      Complex complex8 = complex0.asin();
      complex3.exp();
      complex4.cosh();
      complex6.divide(1.260420322418213);
//      try { 
        complex8.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1416.973226));
      Complex complex1 = complex0.NaN.createComplex(2.0, 735.55669);
      Complex complex2 = complex1.ONE.conjugate();
      complex1.I.sin();
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.createComplex(735.55669, (-1416.973226));
      complex3.getField();
      Complex complex7 = complex6.acos();
      complex2.asin();
      Complex complex8 = complex6.subtract(complex5);
      complex8.toString();
      complex7.isNaN();
      Complex.valueOf(2.0, 2.0);
      complex0.cos();
      complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.I.reciprocal();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.sqrt();
      complex3.abs();
      Complex complex4 = new Complex((-4125.06));
      Complex complex5 = complex0.cosh();
      complex4.tan();
      Complex.valueOf((-4125.06));
      complex4.exp();
      complex4.cos();
      complex5.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(3708.79);
      Complex complex3 = complex2.ONE.tanh();
      complex3.cosh();
      Complex.valueOf(0.0);
      complex3.readResolve();
      Complex.valueOf((-1232.337525226089));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(4588.5, 4588.5);
      Complex complex1 = complex0.cosh();
      complex1.hashCode();
      complex1.cosh();
      complex0.multiply(0);
      complex0.tanh();
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(40.862, 3213.361530159928);
      complex2.toString();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.pow(406.2838599);
      Complex complex5 = Complex.valueOf(406.2838599, 2.0);
      complex5.multiply(complex0);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.subtract(1731.0);
      Complex complex8 = Complex.valueOf(1000.66);
      Complex complex9 = complex3.createComplex(856.6632838909322, 1311.896946475);
      complex4.getField();
      Complex complex10 = new Complex(856.6632838909322);
      complex10.getField();
      complex8.asin();
      complex1.exp();
      complex2.divide(1731.0);
      complex7.cosh();
      Complex complex11 = complex5.divide(12.566370614358918);
      complex4.subtract(complex9);
      complex11.acos();
      Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1416.973226), (-1416.973226));
      Complex complex2 = complex0.createComplex(2151.38707246839, 6.283185307179586);
      Complex complex3 = complex2.conjugate();
      complex3.sin();
      Complex complex4 = complex3.sqrt();
      complex1.tan();
      Complex complex5 = complex0.createComplex(6.283185307179586, 3511774.1486794944);
      complex4.getField();
      Complex complex6 = complex5.acos();
      complex3.asin();
      Complex complex7 = complex6.subtract(complex3);
      complex7.abs();
      Complex complex8 = new Complex(719.6675832018359);
      complex4.cosh();
      Complex complex9 = complex0.tan();
      Complex.valueOf((-2782.475));
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(complex0);
      Complex complex2 = complex0.I.divide(0.0);
      complex0.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex4.ONE.createComplex(0.0, 0.0);
      Complex complex6 = complex2.INF.sin();
      complex6.ONE.acos();
      complex6.createComplex((-121.750818079), (-1609.74386));
      Complex complex7 = complex6.ONE.multiply(3565);
      complex4.INF.subtract(complex3);
      complex2.abs();
      complex3.isNaN();
      complex0.getImaginary();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.I.negate();
      Complex.valueOf((double) 3565);
      Complex complex10 = complex2.asin();
      complex9.INF.sinh();
      complex0.getArgument();
      Complex complex11 = complex10.ONE.subtract(complex9);
      complex6.pow(0.0);
      Complex complex12 = Complex.valueOf((-121.750818079), (-1609.74386));
      complex11.ONE.add(complex0);
      complex10.ONE.pow((-20.0));
      complex5.subtract(complex12);
      complex11.getImaginary();
      complex7.tanh();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(4588.5, 4588.5);
      Complex complex1 = new Complex(4588.5, 1661.8678159461492);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.pow(complex1);
      complex0.hashCode();
      complex3.tanh();
      complex0.log();
      Complex complex4 = complex2.sin();
      complex4.sqrt1z();
      Complex complex5 = Complex.INF;
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.NaN;
      complex1.hashCode();
      Complex complex3 = complex0.add((-1396.27807));
      Complex complex4 = new Complex((-1396.27807), 5667.892904);
      Complex complex5 = complex4.atan();
      complex3.cosh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.pow(complex1);
      Complex complex8 = complex0.divide(complex7);
      complex3.isNaN();
      complex8.multiply(complex5);
      complex7.createComplex((-1396.27807), (-1768.3084254));
      complex7.getReal();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      complex0.acos();
      complex1.exp();
      Complex complex2 = complex0.sqrt1z();
      complex2.asin();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex(0.0, (-1199.3147137791739));
      complex5.equals(complex1);
      complex4.acos();
      Complex complex6 = Complex.ONE;
      // Undeclared exception!
      complex6.nthRoot(604282564);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.conjugate();
      complex1.toString();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.pow((-67.059980316277));
      Complex complex5 = complex3.multiply(complex0);
      complex2.subtract((-67.059980316277));
      Complex complex6 = Complex.valueOf(0.9999999999999998);
      Complex complex7 = complex5.createComplex((-1.0), Double.POSITIVE_INFINITY);
      complex4.getField();
      complex0.getField();
      complex3.asin();
      Complex complex8 = complex6.exp();
      complex6.divide((-1901.4926045048446));
      complex2.cosh();
      Complex complex9 = complex7.divide(Double.POSITIVE_INFINITY);
      complex8.subtract(complex5);
      complex9.acos();
      Complex.valueOf(0.999525181803569);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex2.hashCode();
      Complex complex3 = complex0.INF.add((-1396.27807));
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = Complex.ONE;
      complex2.I.pow(complex1);
      complex4.ONE.divide(complex1);
      complex2.isNaN();
      complex2.multiply(complex1);
      complex3.tan();
      complex4.asin();
      complex2.readResolve();
//      try { 
        complex4.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      complex0.NaN.subtract((-1.0));
      complex0.ONE.divide(1053.2846813717);
      Complex complex1 = Complex.valueOf((-20.0), 1053.2846813717);
      complex0.hashCode();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.ZERO.pow(1053.2846813717);
      Complex complex4 = complex2.pow(complex0);
      complex2.nthRoot(1884);
      Object object0 = new Object();
      complex0.equals(object0);
      complex4.ZERO.tan();
      Complex complex5 = complex0.ZERO.subtract((double) 1884);
      complex5.NaN.pow(1053.2846813717);
      Complex.valueOf(1053.2846813717, 17.010966);
      Complex complex6 = complex3.createComplex((-2802.2789859), (-1.4561530066010593E152));
      complex6.getReal();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1416.973226));
      Complex complex1 = complex0.NaN.createComplex(2.0, 735.55669);
      Complex complex2 = Complex.valueOf(2.0, 735.55669);
      complex2.hashCode();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.pow(735.55669);
      complex3.pow(complex1);
      complex4.nthRoot(1884);
      Object object0 = new Object();
      complex0.equals("");
      Complex complex5 = complex3.tan();
      Complex complex6 = new Complex((-20.0));
      complex6.subtract(735.55669);
      Complex complex7 = Complex.valueOf((double) 1884, (-20.0));
      Complex complex8 = complex7.tan();
      complex0.asin();
      complex5.nthRoot(1884);
      complex2.readResolve();
      complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex1.conjugate();
      complex2.ONE.toString();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.asin();
      complex4.divide((-2062.1596786));
      complex1.acos();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = Complex.ZERO;
      complex6.equals(complex7);
      complex1.acos();
      complex5.nthRoot(541);
      Complex complex8 = complex1.conjugate();
      complex8.asin();
      complex8.exp();
      Complex complex9 = Complex.valueOf((-1199.3147137791739), 0.0);
      complex9.add(complex4);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.sqrt1z();
      complex0.ZERO.divide(0.0);
      complex1.I.acos();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-1199.3147137791739));
      complex3.equals(complex4);
      complex3.acos();
      Complex complex5 = complex1.asin();
      complex5.ONE.sin();
      complex0.exp();
      Complex complex6 = complex3.divide((-1199.3147137791739));
      Complex complex7 = complex0.cosh();
      complex7.divide(0.0);
      complex6.subtract(complex2);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 2.748092395410593E-4);
      complex8.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0657703081219677E51, 1.0657703081219677E51);
      Complex complex2 = complex1.sqrt1z();
      complex0.NaN.pow(complex1);
      complex0.I.hashCode();
      Complex complex3 = complex0.tanh();
      complex3.INF.abs();
      Complex complex4 = complex3.log();
      complex4.NaN.sin();
      Complex complex5 = complex4.sqrt1z();
      complex2.getReal();
      Object object0 = new Object();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-1882.300556034), (-176.86219089));
      complex0.subtract((-1626.113430813341));
      complex0.add((-502.05659199623));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2621.9653101);
      complex0.readResolve();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tan();
      complex2.I.divide(5.239949786641934E249);
      Complex complex3 = complex2.NaN.divide(2621.9653101);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.sqrt1z();
      complex3.toString();
      Complex complex6 = complex4.ONE.pow(2621.9653101);
      Complex complex7 = complex1.negate();
      complex4.NaN.sqrt();
      Complex complex8 = complex4.multiply(0);
      Complex complex9 = complex8.reciprocal();
      complex9.NaN.conjugate();
      complex9.NaN.reciprocal();
      complex7.getArgument();
      complex6.sinh();
      complex2.sqrt1z();
      Complex complex10 = complex5.multiply((-2.356194490192345));
      complex10.I.readResolve();
      complex8.tanh();
      Complex.valueOf(486.933670867013);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3440.274255717957, (-826.11078823));
      complex0.getImaginary();
      Complex complex1 = complex0.ONE.sin();
      complex0.abs();
      complex0.readResolve();
      Complex complex2 = complex0.add((-826.11078823));
      Complex complex3 = complex2.INF.multiply(1);
      Complex complex4 = complex3.NaN.negate();
      complex4.NaN.tanh();
      complex3.sqrt();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.asin();
      complex6.conjugate();
      complex5.getImaginary();
      Complex complex7 = complex5.atan();
      complex1.negate();
      complex6.sinh();
      complex7.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1812.0));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.NaN.pow(complex2);
      Complex complex5 = complex0.cosh();
      complex5.I.multiply(complex4);
      Complex complex6 = complex4.add((-1812.0));
      Complex complex7 = Complex.valueOf((-241.721447573067));
      Complex complex8 = complex6.ZERO.log();
      Complex complex9 = complex6.INF.acos();
      Complex.valueOf(0.0);
      complex9.I.sinh();
      complex0.negate();
      Complex complex10 = complex9.atan();
      complex6.hashCode();
      complex7.acos();
      Complex complex11 = Complex.valueOf(0.0);
      Complex.valueOf(869.85988619632);
      complex11.abs();
      Complex complex12 = complex9.pow(1168.1785625);
      complex1.equals(complex10);
      Complex complex13 = complex0.negate();
      complex8.negate();
      complex10.isInfinite();
      complex0.conjugate();
      complex6.acos();
      complex12.multiply(0.0);
      complex3.tanh();
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1781.4639039243);
      Object object0 = new Object();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.tanh();
      complex0.equals(object0);
      complex0.getArgument();
      Complex complex3 = complex1.multiply(complex2);
      complex3.sqrt1z();
//      try { 
        complex3.nthRoot((-2762));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,762
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.I.divide(0.0);
      complex0.getField();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.ONE.createComplex(0.0, 0.0);
      Complex complex7 = complex3.INF.sin();
      complex7.ONE.acos();
      complex7.createComplex((-121.750818079), (-1609.74386));
      Complex complex8 = complex7.ONE.multiply(3565);
      complex5.INF.subtract(complex4);
      complex3.abs();
      complex4.isNaN();
      complex0.getImaginary();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.I.negate();
      Complex.valueOf((double) 3565);
      Complex complex11 = complex3.asin();
      complex0.getArgument();
      Complex complex12 = complex11.ONE.subtract(complex10);
      complex7.pow(0.0);
      Complex complex13 = Complex.valueOf((-121.750818079), (-1609.74386));
      complex12.ONE.add(complex0);
      complex6.subtract(complex13);
      complex12.getImaginary();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.ONE.sqrt();
      complex4.ZERO.divide(complex2);
      Complex complex5 = complex4.I.add((-1.0));
      complex5.NaN.toString();
      complex1.getReal();
      complex5.NaN.cos();
      complex4.INF.multiply(complex3);
      Complex complex6 = complex1.I.divide(complex0);
      Complex complex7 = complex6.INF.subtract(Double.NaN);
      complex7.I.abs();
      complex2.getField();
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex6.ONE.subtract(1269.156862210714);
      complex9.INF.tan();
      complex1.isNaN();
      complex3.divide(complex6);
      complex3.sqrt();
      complex3.getImaginary();
      complex2.subtract((-1.0));
      complex5.conjugate();
      complex5.toString();
      complex3.isInfinite();
      Complex complex10 = complex6.pow(2906.26400752);
      complex10.pow((-1534.5825542));
      complex1.abs();
      complex8.subtract(989.6556902);
      Object object0 = new Object();
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.hashCode();
      complex0.I.divide(1.0);
      Complex complex1 = Complex.ONE;
      complex0.ZERO.subtract(complex1);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.subtract(complex1);
      complex0.atan();
      Complex complex5 = Complex.valueOf(1.0, 1.0);
      Complex complex6 = complex3.add(1.0);
      complex5.I.createComplex(1411.450088655, (-20.0));
      Complex complex7 = Complex.ZERO;
      complex5.equals(complex7);
      complex7.asin();
      Complex complex8 = Complex.NaN;
      complex2.multiply(complex8);
      complex4.tanh();
      complex6.add(1.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(2628.3424);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(complex0);
      complex2.I.conjugate();
      complex1.hashCode();
      Complex complex3 = complex1.exp();
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.toString();
      complex3.ZERO.abs();
      complex3.NaN.sqrt();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ZERO.tanh();
      complex5.ZERO.atan();
      Complex complex6 = complex0.subtract(complex1);
      complex1.I.multiply(740.142775);
      Complex.valueOf(740.142775);
      Complex complex7 = complex4.divide(1138.0019290247146);
      complex7.add(0.0);
      complex1.I.acos();
      complex0.reciprocal();
      complex3.getImaginary();
      Complex complex8 = complex1.multiply(2.169306470354036E242);
      complex5.divide(complex8);
      complex1.pow((-645.689202667));
      complex0.createComplex(2.169306470354036E242, 2628.3424);
      Complex complex9 = complex6.log();
      complex9.add(complex0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1416.973226));
      Complex complex1 = complex0.NaN.createComplex(2.0, 735.55669);
      complex1.ONE.conjugate();
      complex1.I.sin();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.createComplex(481.53370663422, 735.55669);
      complex4.NaN.getField();
      complex4.ZERO.acos();
      Complex complex5 = complex3.asin();
      complex2.ONE.subtract(complex0);
      complex5.abs();
      Complex complex6 = complex2.cosh();
      complex6.ONE.tan();
      Complex.valueOf(735.55669);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.multiply(0.0);
      complex3.multiply(1309);
      Complex complex4 = complex0.NaN.multiply(0.0);
      complex4.nthRoot(190);
      Complex complex5 = complex1.NaN.atan();
      complex5.reciprocal();
      complex2.ONE.multiply(190);
      Complex complex6 = complex5.pow(0.0);
      complex5.ONE.toString();
      Complex.valueOf(0.0, (-644.91939529217));
      complex0.getReal();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex9.sqrt();
      complex10.I.divide(complex8);
      complex10.ZERO.exp();
      Complex complex11 = complex1.subtract(complex2);
      complex5.pow(complex6);
      Complex complex12 = complex5.divide(complex11);
      complex12.subtract(complex4);
      complex4.NaN.divide(0.0);
      complex12.I.subtract(0.0);
      complex12.equals(complex4);
      complex0.add((-644.91939529217));
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-398));
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = Complex.ONE;
      complex2.ONE.conjugate();
      Complex complex6 = complex3.INF.subtract(complex5);
      complex6.ZERO.toString();
      Complex complex7 = Complex.valueOf((-851.5), (-1.1487079818684332E-8));
      complex5.NaN.pow(complex1);
      Complex complex8 = Complex.valueOf(1369.20202555039, 0.0);
      complex3.ZERO.add(complex8);
      Complex complex9 = complex2.INF.pow(complex4);
      complex9.INF.sin();
      complex4.INF.atan();
      Complex complex10 = complex7.add(complex2);
      Complex complex11 = complex10.NaN.cos();
      Complex complex12 = complex5.multiply((-1.1487079818684332E-8));
      complex7.isNaN();
      complex5.atan();
      Complex complex13 = complex12.multiply((-398));
      complex12.ONE.sinh();
      complex0.add(complex9);
      complex4.add(0.0);
      complex13.INF.subtract(1490.821549);
      complex4.subtract((-1.0));
      complex13.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      complex1.NaN.tanh();
      complex0.I.hashCode();
      complex1.add(complex0);
      Complex complex2 = complex1.cos();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.I.reciprocal();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.sqrt();
      complex3.toString();
      complex0.isNaN();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex1.conjugate();
      complex2.ONE.toString();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.pow((-67.059980316277));
      Complex complex6 = complex0.I.multiply(complex2);
      complex6.ONE.subtract(0.0);
      Complex.valueOf(20.0);
      complex1.INF.createComplex(20.0, (-1901.4926045048446));
      complex4.ZERO.getField();
      complex0.getField();
      complex1.asin();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ZERO.divide(0.0);
      Complex complex9 = complex5.cosh();
      complex9.INF.divide(20.0);
      complex1.subtract(complex3);
      complex8.acos();
      Complex.valueOf((-1901.4926045048446));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.323611123886), 0.0);
      Complex complex1 = Complex.I;
      complex0.ONE.cosh();
      complex0.multiply(complex1);
      complex1.pow(complex0);
      complex0.pow(5.716453096255401E-8);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      complex2.I.readResolve();
      Complex complex3 = complex2.ZERO.conjugate();
      complex1.I.cos();
      Complex complex4 = complex3.ONE.tanh();
      complex3.ZERO.readResolve();
      complex0.hashCode();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ONE.cos();
      complex6.ONE.divide(complex3);
      Complex complex7 = complex5.INF.acos();
      complex0.ZERO.toString();
      complex2.cos();
      Complex complex8 = complex7.exp();
      complex0.sinh();
      complex2.ONE.subtract((-1827.190037062));
      complex5.getField();
      complex7.getReal();
      complex3.isInfinite();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.divide(complex0);
      Complex.valueOf((-1827.190037062));
      complex1.abs();
      complex10.negate();
      complex4.tan();
      complex10.multiply(1.0);
      Complex.valueOf(1.0, Double.NaN);
      complex8.reciprocal();
      complex7.sinh();
      Complex.valueOf(1.0, Double.NaN);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 855.18395624425;
      Complex complex0 = Complex.valueOf((-1281.16), 855.18395624425);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.multiply((-718));
      complex2.INF.acos();
      complex2.INF.toString();
//      try { 
        complex1.INF.nthRoot((-718));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -718
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      complex1.ONE.acos();
      complex1.NaN.abs();
      complex1.NaN.conjugate();
//      try { 
        complex1.I.nthRoot((-1326));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,326
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex2.hashCode();
      complex0.INF.add((-1396.27807));
      Complex complex3 = complex0.ZERO.atan();
      complex3.cosh();
      Complex complex4 = Complex.INF;
      complex2.I.pow(complex1);
      Complex complex5 = complex3.ONE.divide(complex4);
      complex2.isNaN();
      complex2.multiply(complex1);
      complex0.createComplex((-1032.9945099708104), (-1768.3084254));
      complex5.getReal();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex0.pow(complex1);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(3.221279639653057E-180, (-1943.606));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.ONE.subtract((-1943.606));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.INF.asin();
      complex0.ZERO.readResolve();
      complex0.I.getArgument();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ZERO.subtract(complex5);
      Complex complex8 = complex4.ONE.pow(complex3);
      complex2.negate();
      complex2.multiply(1.5707963267948966);
      Complex complex9 = complex7.ONE.divide(3.221279639653057E-180);
      complex9.NaN.hashCode();
      complex0.readResolve();
      Complex complex10 = complex7.multiply((-2527.1261));
      Complex complex11 = complex1.log();
      complex11.INF.subtract(complex1);
      Complex complex12 = complex8.add(complex2);
      Complex complex13 = complex12.ONE.exp();
      complex1.createComplex(2723.53, 2435.1221885697);
      Complex.valueOf(1.0);
      complex12.getReal();
      Complex complex14 = Complex.valueOf((-1943.606), (-1943.606));
      complex14.ZERO.createComplex(1945.606, 20.0);
      complex10.add(1945.606);
      complex2.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow((-1061.6376153));
      complex0.isNaN();
      complex0.abs();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.asin();
      complex3.INF.getField();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.pow(1260.171986);
      Complex complex6 = complex5.ONE.asin();
      complex2.INF.negate();
      complex2.getImaginary();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.ONE.reciprocal();
      Complex complex9 = complex5.pow(complex4);
      Complex complex10 = complex9.sqrt();
      complex10.I.subtract((-1061.6376153));
      complex6.negate();
      complex10.readResolve();
      complex4.asin();
      complex7.getImaginary();
      complex2.negate();
      Complex complex11 = complex9.subtract(complex8);
      complex6.conjugate();
      complex5.INF.tanh();
      Complex complex12 = complex5.INF.sinh();
      complex12.divide(1.5411775738825048E25);
      complex1.tan();
      complex11.tan();
      complex3.isInfinite();
      complex10.tan();
      complex1.isNaN();
      complex12.hashCode();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = complex0.pow(342.53277);
      int int0 = 0;
      Complex complex2 = complex0.multiply(0);
      complex0.abs();
      Complex complex3 = complex2.reciprocal();
      complex1.INF.atan();
      Complex complex4 = complex1.multiply(complex3);
      complex1.INF.sin();
      complex1.negate();
      complex4.I.hashCode();
//      try { 
        complex4.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.pow(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ONE.pow(0.0);
      complex3.ONE.log();
      Complex complex4 = complex0.atan();
      complex4.ZERO.hashCode();
      complex2.getReal();
      Complex complex5 = complex0.acos();
      complex5.readResolve();
      complex0.toString();
      complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      complex0.INF.add(complex1);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex1.atan();
      complex1.INF.exp();
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex5.atan();
      complex6.ZERO.add(complex4);
      Complex complex7 = complex3.cos();
      complex3.getArgument();
      complex3.ONE.divide(0.0);
      complex1.toString();
      complex7.getReal();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0657703081219677E51, 1.0657703081219677E51);
      Complex complex2 = complex1.sqrt1z();
      complex0.NaN.pow(complex1);
      complex0.I.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.log();
      complex4.NaN.sin();
      complex4.sqrt1z();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-627.87949));
      Complex complex1 = complex0.multiply((-627.87949));
      complex1.ZERO.sqrt1z();
      complex0.ZERO.abs();
      complex1.ZERO.sqrt1z();
      Complex complex2 = complex0.divide(103.8378274998181);
      Complex complex3 = complex1.add(complex0);
      complex3.divide(complex2);
      Complex complex4 = complex1.log();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.asin();
      complex4.ZERO.divide(0.0);
      complex1.I.acos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, (-1199.3147137791739));
      complex3.equals(complex5);
      Complex complex6 = complex3.acos();
      complex6.nthRoot(107);
      complex3.ZERO.conjugate();
      complex0.asin();
      complex6.exp();
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.ZERO.sin();
      complex0.abs();
      complex3.NaN.getField();
      complex0.isNaN();
      Complex complex4 = complex3.sqrt();
      complex1.getImaginary();
      Complex complex5 = complex2.multiply(1);
      complex4.log();
      complex4.atan();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex6.NaN.divide(2.0);
      complex7.ZERO.hashCode();
      Complex complex8 = new Complex(1.0);
      complex8.multiply(229.7580932);
      complex6.equals(complex8);
      complex6.isNaN();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      complex0.NaN.subtract((-1.0));
      complex0.ONE.divide(1053.2846813717);
      Complex.valueOf((-20.0), 1053.2846813717);
      complex0.hashCode();
      Complex complex1 = complex0.reciprocal();
      complex0.ZERO.pow(1053.2846813717);
      Complex complex2 = complex1.pow(complex0);
      complex1.nthRoot(1884);
      Object object0 = new Object();
      complex0.equals(object0);
      complex2.ZERO.tan();
      complex0.ZERO.subtract((double) 1884);
      Complex.valueOf(1053.2846813717, 17.010966);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.asin();
      complex4.I.nthRoot(1884);
      complex0.readResolve();
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-698);
      complex0.NaN.abs();
      Complex complex1 = complex0.I.tanh();
      complex1.ZERO.conjugate();
      complex1.ONE.multiply(complex0);
//      try { 
        complex0.nthRoot((-698));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -698
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.NaN.add(0.0);
      Complex complex4 = Complex.INF;
      complex4.ZERO.abs();
      Complex complex5 = complex0.ZERO.exp();
      complex5.getArgument();
      Complex complex6 = complex0.ZERO.add(complex4);
      complex0.isInfinite();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = Complex.valueOf((double) 1);
      Complex complex9 = complex8.add(0.0);
      complex4.getReal();
      Complex complex10 = complex8.ONE.sin();
      assertEquals(0.8414709848078965, complex10.getReal(), 0.01);
      
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex11.ZERO.pow(complex7);
      Complex complex13 = complex2.add(0.0);
      Complex complex14 = complex13.ONE.atan();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex14.getReal(), 0.01);
      
      String string0 = complex11.toString();
      assertEquals("(NaN, -Infinity)", string0);
      
      Complex complex15 = complex7.INF.multiply(865.2732475073);
      Complex complex16 = complex0.subtract(Double.POSITIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, complex16.getReal(), 0.01);
      
      complex7.abs();
      Complex complex17 = complex8.add(0.0);
      Complex complex18 = complex11.divide(complex3);
      assertSame(complex18, complex3);
      
      complex7.equals(complex2);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex19 = complex17.sqrt1z();
      Complex complex20 = complex17.ONE.multiply(complex7);
      complex20.sqrt();
      complex6.hashCode();
      Complex complex21 = complex8.NaN.atan();
      assertNotSame(complex21, complex12);
      
      Complex.valueOf(0.0);
      double double0 = complex19.getImaginary();
      assertFalse(complex19.equals((Object)complex15));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex19.equals((Object)complex20));
      assertFalse(complex19.equals((Object)complex9));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.hashCode();
      complex0.getArgument();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.multiply(3708.79);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.cosh();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.3043045862358962, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.sinh();
      assertTrue(complex6.equals((Object)complex3));
      
      complex0.getImaginary();
      Complex complex7 = Complex.valueOf(0.0);
      assertFalse(complex7.equals((Object)complex2));
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.234835147857666, 1.234835147857666);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(1.234835147857666, complex0.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.234835147857666, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(1584.0, 2212.4322468);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex0.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.ZERO.pow(complex3);
      Complex complex6 = complex5.I.subtract(214.9616526);
      complex3.isNaN();
      complex3.getReal();
      Complex complex7 = complex3.reciprocal();
      assertEquals(2.1394091779143438E-4, complex7.getImaginary(), 0.01);
      
      complex5.toString();
      Complex complex8 = complex4.divide(2692.334832695);
      List<Complex> list0 = complex3.nthRoot(1);
      assertFalse(list0.isEmpty());
      
      Complex complex9 = complex5.multiply(complex8);
      complex4.hashCode();
      complex8.cosh();
      Complex complex10 = Complex.valueOf(1535.105354311116, 0.4126010537147522);
      assertEquals(1535.105354311116, complex10.getReal(), 0.01);
      
      Complex complex11 = complex4.multiply(0.4126010537147522);
      assertNotSame(complex11, complex9);
      assertTrue(complex11.equals((Object)complex8));
      
      Complex complex12 = complex0.divide(1535.105354311116);
      complex0.log();
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex3.divide(complex0);
      assertEquals(6.392968995187069E-8, complex14.getReal(), 0.01);
      assertEquals((-1.0000000217611382), complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex13.reciprocal();
      assertSame(complex15, complex2);
      
      complex12.sqrt1z();
      double double0 = complex6.abs();
      assertEquals(214.96397858367598, double0, 0.01);
      assertNotSame(complex5, complex15);
  }
}
