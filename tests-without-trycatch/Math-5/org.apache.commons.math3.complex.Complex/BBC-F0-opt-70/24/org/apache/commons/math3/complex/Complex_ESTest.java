/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:00:46 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1956.356086580173, Double.POSITIVE_INFINITY);
      complex0.multiply(37);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.abs();
      Complex complex2 = Complex.valueOf(3196.7406, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(complex0);
      complex3.ZERO.sinh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-986.4236231101501), 2.4412328161430576E235);
      Complex complex1 = complex0.reciprocal();
      complex0.multiply(982);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.6063569876284005E-8, Double.POSITIVE_INFINITY);
      complex1.ZERO.multiply(485.2405155300048);
      complex0.multiply(complex1);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.pow((double) 490);
      complex1.INF.hashCode();
      complex0.ZERO.nthRoot(490);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sin();
      complex3.divide(Double.NaN);
      Complex complex4 = complex2.atan();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.readResolve();
      complex0.getField();
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex2);
      complex0.abs();
      Complex complex5 = complex4.cos();
      complex1.abs();
      complex1.tanh();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      complex2.subtract(complex0);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex0.ZERO.cos();
      complex0.add((double) 571);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
//      try { 
        complex2.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.readResolve();
      complex0.getField();
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex2);
      complex0.abs();
      complex1.tan();
      complex4.cos();
      complex1.abs();
      Complex complex5 = Complex.ZERO;
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-986.7429037216011), 2.4412328161430576E235);
      complex0.ONE.readResolve();
      Complex.valueOf((-986.7429037216011));
      Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.acos();
      complex2.INF.divide(complex1);
      complex0.tan();
      Complex.valueOf(1107.09653637009, 4.0191927599879235E-8);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-986.7429037216011), 2.4412328161430576E235);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex1.sinh();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(1);
//      try { 
        complex0.ONE.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2006842640093786E297), Double.NaN);
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.NaN, (double) 1960);
      Complex complex2 = complex0.log();
      complex0.getField();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.multiply((-1.2006842640093786E297));
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = Complex.INF;
      complex6.ONE.exp();
      complex4.equals(complex6);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.INF.divide((-1.2006842640093786E297));
      complex5.ZERO.sqrt();
      Complex complex9 = complex5.INF.sqrt1z();
      Complex complex10 = Complex.NaN;
      Complex.valueOf((-1.0), 4.2634204358490415E-9);
      complex10.tanh();
      Complex.valueOf(2.6683101654052734, 3.7298611779671127E-124);
      complex1.sin();
      complex9.I.multiply(222);
      complex5.add((-973.659));
      Complex complex11 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex11.atan();
      complex3.add((-1308.243196879));
      complex6.pow(complex8);
      complex9.abs();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2488.6193503559716, 2488.6193503559716);
      Complex complex1 = complex0.multiply(2488.6193503559716);
      complex0.sinh();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2.4412328161430576E235, (-386.103846));
      complex0.readResolve();
      Complex complex1 = Complex.valueOf((-386.103846));
      Complex complex2 = complex1.reciprocal();
      complex2.ZERO.getField();
      Complex complex3 = complex0.acos();
      complex3.divide(complex1);
      Complex complex4 = complex3.tan();
      complex1.cos();
      complex4.abs();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(2489.2);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.sinh();
      complex1.pow(complex2);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.pow(complex0);
      Complex complex8 = complex7.acos();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex2.acos();
      Complex complex11 = complex8.multiply(256);
      Complex complex12 = complex3.sinh();
      complex9.isInfinite();
      Complex complex13 = complex10.exp();
      complex13.multiply((double) 256);
      Complex complex14 = complex11.multiply(17);
      complex5.readResolve();
      complex11.isNaN();
      complex3.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex15 = complex12.sinh();
      Complex complex16 = complex15.log();
      complex10.subtract(complex5);
      complex16.multiply(complex14);
      complex2.readResolve();
      Complex complex17 = new Complex((-1009.993047), Double.POSITIVE_INFINITY);
      complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(474.58502281);
      complex0.readResolve();
      Complex.valueOf(37.0, 7.233790684263346E-239);
      Complex complex3 = Complex.I;
      complex3.INF.subtract(complex2);
      complex1.acos();
      Complex complex4 = new Complex(1457.119, (-20.0));
      Complex complex5 = complex4.tan();
      complex5.NaN.pow(7.233790684263346E-239);
      complex5.NaN.readResolve();
      complex5.cos();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-986.7429037216011), 2.4412328161430576E235);
      complex0.ONE.readResolve();
      Complex.valueOf((-986.7429037216011));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex0.tan();
      complex0.cos();
      complex3.abs();
      Complex complex5 = complex4.multiply(Double.NaN);
      complex5.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(2.414213562373095, 2.414213562373095);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.tan();
      complex0.I.createComplex((-3208.3465437636), 2.4871072940958925);
      complex0.ZERO.pow(0.3034266233444214);
      complex0.toString();
      Complex complex3 = complex2.multiply(complex2);
      complex3.INF.log();
      complex0.sinh();
      complex3.ZERO.multiply(complex1);
      complex3.ZERO.subtract(2.414213562373095);
      // Undeclared exception!
      complex1.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2098810.0181136257, 2098810.0181136257);
      Complex complex1 = Complex.I;
      complex0.acos();
      Complex complex2 = new Complex(2246.227779870596, 1.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.cos();
      complex4.ZERO.negate();
      complex4.abs();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex1.multiply(0.3594330038102771);
      Complex complex3 = Complex.valueOf((-1.0), (-1518.18817829256));
      Complex complex4 = complex3.multiply(17);
      complex4.isNaN();
      complex3.readResolve();
      complex0.isNaN();
      complex4.readResolve();
      complex2.I.add(complex4);
      complex2.equals((Object) null);
      Complex complex5 = complex3.sinh();
      complex3.log();
      Complex complex6 = complex4.subtract(complex2);
      complex6.multiply(complex5);
      complex3.readResolve();
      Complex complex7 = new Complex((-325.735212), 0.26296502351760864);
      complex6.tanh();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2098810.0181136257);
      Complex complex1 = new Complex(1428.7701179101614, Double.NaN);
      complex1.tan();
      complex1.cos();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-986.7429037216011), (-1021.235078438));
      complex0.ONE.readResolve();
      complex0.ZERO.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.acos();
      complex2.INF.divide(complex1);
//      try { 
        complex1.nthRoot((-397));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -397
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-986.7429037216011), (-1021.235078438));
      complex0.ONE.readResolve();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.acos();
      complex2.INF.divide(complex1);
      complex0.tan();
      complex0.cos();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1148.700858);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ONE.multiply(2296);
      complex2.sqrt1z();
      complex1.NaN.getArgument();
      complex2.ZERO.divide(complex1);
      complex2.ZERO.atan();
      complex0.I.abs();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.sqrt();
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(5572.9599993174, 376.673561614);
      Complex complex1 = complex0.multiply(5572.9599993174);
      complex1.nthRoot(1002);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = Complex.valueOf(1366.8779218984, 1366.8779218984);
      Complex complex4 = complex0.I.multiply(complex3);
      complex0.NaN.toString();
      complex0.cosh();
      Complex complex5 = complex4.tan();
      complex5.subtract((-1382.819872830715));
      complex2.getField();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.6674286127090454);
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex2.I.multiply(1966);
      complex0.isInfinite();
      complex2.ZERO.getField();
      Complex complex4 = complex2.acos();
      complex4.I.add(complex0);
      complex4.I.nthRoot(1966);
      complex4.pow(0.0);
      complex2.ZERO.tan();
      complex1.equals(complex2);
      Complex complex5 = Complex.valueOf(0.0, 1947.28364);
      complex5.divide((double) 0);
      complex4.sqrt();
      Complex complex6 = complex3.reciprocal();
      complex0.divide(complex4);
      Complex complex7 = complex1.asin();
      complex0.hashCode();
      Complex complex8 = complex7.add(0.0);
      complex8.exp();
      complex1.getImaginary();
      Complex complex9 = complex5.add((-2640.9));
      complex6.pow(complex5);
      complex9.hashCode();
      complex5.cosh();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3030.08815);
      Complex complex2 = complex1.tan();
      complex2.atan();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.acos();
      complex1.multiply(256);
      Complex complex3 = Complex.valueOf(2489.2, (-1382.819872830715));
      Complex complex4 = complex3.sinh();
      complex0.isInfinite();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.multiply(2489.2);
      Complex complex7 = complex3.multiply(256);
      complex2.isNaN();
      complex0.readResolve();
      Complex complex8 = Complex.valueOf(2489.2, (double) 256);
      complex8.isNaN();
      complex2.readResolve();
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      Complex complex9 = complex5.sinh();
      complex2.log();
      Complex complex10 = complex9.subtract(complex1);
      complex7.multiply(complex8);
      complex5.readResolve();
      complex6.multiply(complex5);
      Complex complex11 = new Complex(17, 870.021);
      complex10.tanh();
      complex10.sqrt();
      Complex.valueOf(2489.2, 870.021);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1383.819872830715);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex1.multiply(1383.819872830715);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.divide(complex1);
      complex0.I.nthRoot(242);
      Complex complex2 = complex0.sqrt();
      complex2.subtract(Double.NaN);
      Complex complex3 = Complex.INF;
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.divide(7.233790684263346E-239);
      Complex complex2 = Complex.valueOf((-962.57639624822), (-962.57639624822));
      complex2.subtract(7.233790684263346E-239);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2924.8331), (-10.11208579426937));
      complex0.getField();
      Complex complex1 = complex0.ZERO.createComplex((-1.0), (-10.11208579426937));
      Complex complex2 = complex1.I.multiply((-2078.07196977));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.multiply((-1.0));
      complex0.asin();
      complex5.divide(complex3);
      complex2.I.subtract((-1.0));
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.ZERO.multiply(2.2034826278686523);
      complex7.ZERO.createComplex(5.171047077293295E290, (-10.11208579426937));
      complex2.multiply((-2026.0));
      complex2.atan();
      complex0.divide(2.2034826278686523);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ZERO.tanh();
      complex0.INF.cosh();
      Complex complex3 = complex1.asin();
      complex3.ZERO.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex3.multiply(1966);
      complex4.isInfinite();
      Complex complex7 = Complex.NaN;
      complex7.getField();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex5.add(complex8);
      Complex complex10 = complex2.pow(Double.NaN);
      complex3.tan();
      complex6.equals(complex3);
      Complex complex11 = Complex.valueOf(1947.28364, (double) 1966);
      Complex complex12 = complex8.divide(0.0);
      complex9.sqrt();
      Complex complex13 = new Complex((-2026.0), (-15.6915));
      complex13.reciprocal();
      complex10.divide(complex1);
      complex4.asin();
      complex10.hashCode();
      complex12.add(0.0);
      complex12.exp();
      complex3.getImaginary();
      complex13.add((-2026.0));
      complex3.pow(complex2);
      complex11.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1383.819872830715);
      complex1.getImaginary();
      Complex complex2 = complex0.add(1.0232274785475506);
      Complex complex3 = complex1.pow(complex0);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-551));
      complex1.isInfinite();
      complex1.getField();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.valueOf(2664.583);
      complex5.equals(complex6);
      Complex.valueOf(2.0, (double) 1966);
      complex5.divide((-2541.72));
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.divide(complex1);
      complex9.NaN.getField();
      complex1.asin();
      complex0.hashCode();
      Complex complex10 = complex5.add(2.0);
      complex7.exp();
      complex0.getImaginary();
      complex3.add((-1499.6920872646942));
      Complex complex11 = complex8.pow(complex4);
      complex11.pow(complex2);
      complex5.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.multiply(0);
      complex0.isInfinite();
      complex0.multiply(1483);
      complex3.isInfinite();
      complex2.getField();
      Complex complex4 = complex1.acos();
      Complex complex5 = new Complex(0.0, (-3621.155039428));
      Complex complex6 = complex4.add(complex5);
      complex0.pow(0.0);
      complex5.tan();
      complex1.equals(complex6);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex5.divide((double) 1483);
      complex8.sqrt();
      Complex complex9 = Complex.NaN;
      complex9.divide(complex6);
      Complex complex10 = Complex.ONE;
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.multiply(0);
      complex0.isInfinite();
      Complex complex4 = complex0.multiply(1483);
      complex3.isInfinite();
      complex2.getField();
      Complex complex5 = complex1.acos();
      double double0 = (-3621.155039428);
      complex3.sqrt();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex4.pow(complex6);
//      try { 
        complex7.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply(256);
      complex4.ZERO.add(complex0);
      Complex complex5 = complex3.sinh();
      complex1.isInfinite();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex2.multiply(1386.721600384);
      Complex complex8 = complex0.multiply((-901));
      Complex complex9 = new Complex(256, 1.0);
      complex9.isNaN();
      complex8.readResolve();
      complex7.isNaN();
      complex7.readResolve();
      Complex complex10 = Complex.valueOf((-522.01681), (-1.0));
      Complex complex11 = new Complex((-522.01681));
      complex10.equals(complex11);
      Complex complex12 = complex5.sinh();
      complex3.log();
      complex0.subtract(complex12);
      complex11.multiply(complex6);
      complex2.readResolve();
      Complex complex13 = new Complex(0.01587718185761858);
      complex13.multiply(complex0);
      Complex complex14 = new Complex(256, 17);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      complex1.ZERO.tanh();
      Complex complex2 = complex0.INF.cosh();
      complex2.ONE.add(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2006842640093786E297), Double.NaN);
      complex0.getField();
      Complex complex1 = complex0.NaN.multiply(1960);
      Complex complex2 = complex0.log();
      complex0.getField();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.multiply((-1.2006842640093786E297));
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = Complex.INF;
      complex6.ONE.exp();
      complex4.equals(complex6);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.INF.divide((-1.2006842640093786E297));
      complex5.ZERO.sqrt();
      Complex complex9 = complex5.INF.sqrt1z();
      Complex complex10 = complex9.ONE.tan();
      Complex.valueOf((-1.0), 4.2634204358490415E-9);
      complex10.tanh();
      Complex.valueOf(2.6683101654052734, 3.7298611779671127E-124);
      complex1.sin();
      complex9.I.multiply(222);
      complex5.add((-973.659));
      Complex complex11 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex11.atan();
      complex3.add((-1308.243196879));
      complex6.pow(complex8);
      complex9.abs();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3471.8622));
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3471.8622));
      complex3.ONE.readResolve();
      complex1.sin();
      complex2.ONE.multiply(Double.POSITIVE_INFINITY);
      complex3.NaN.pow(complex0);
      Complex complex4 = complex0.add(complex1);
      complex4.abs();
      complex2.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.multiply(0.6674286127090454);
      Complex complex3 = complex2.I.multiply(0);
      complex2.isInfinite();
      Complex complex4 = complex3.I.multiply(1966);
      complex0.isInfinite();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex5 = complex3.acos();
      complex5.I.add(complex1);
      complex5.pow(0.0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.add(complex6);
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.pow((double) 1966);
      Object object0 = new Object();
      complex9.equals(object0);
      Complex complex10 = Complex.ONE;
      complex7.divide(777.780504471329);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = Complex.valueOf(0.0);
      complex12.divide(complex0);
      complex0.asin();
      complex10.hashCode();
      complex3.sqrt1z();
      complex11.equals(complexField0);
      Complex complex13 = new Complex(Double.NaN);
      complex13.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.multiply((-7.943339609172941));
      Complex complex3 = complex2.I.multiply(0);
      complex2.isInfinite();
      Complex complex4 = complex3.I.multiply(1966);
      complex0.isInfinite();
      complex3.ZERO.getField();
      Complex complex5 = complex3.acos();
      complex5.I.add(complex1);
      complex5.pow(0.0);
      Complex complex6 = complex3.ZERO.tan();
      complex2.equals(complex3);
      Complex complex7 = Complex.valueOf(0.0, 1947.28364);
      complex7.divide((double) 0);
      complex5.sqrt();
      complex4.reciprocal();
      complex0.divide(complex5);
      Complex complex8 = complex2.asin();
      complex0.hashCode();
      Complex complex9 = complex8.add(0.0);
      Complex complex10 = complex9.exp();
      complex2.getImaginary();
      complex4.equals(complex6);
      Complex complex11 = Complex.ONE;
      complex11.multiply((-2994.055797612));
      complex10.readResolve();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.divide(7.233790684263346E-239);
      Complex complex2 = Complex.valueOf(7.233790684263346E-239, 7.233790684263346E-239);
      complex1.sqrt1z();
      Complex complex3 = Complex.ZERO;
      complex2.equals(complex3);
      complex1.multiply(7.233790684263346E-239);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1305.0));
      complex1.getArgument();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.pow(2.0);
      Complex complex4 = complex2.conjugate();
      complex4.divide((-20.0));
      Complex complex5 = complex4.negate();
      complex5.sqrt1z();
      Complex complex6 = Complex.I;
      Object object0 = new Object();
      complex6.equals(object0);
      complex3.multiply((-3.141592653589793));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.4650891244084597E148));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-3.4650891244084597E148));
      int int0 = 278;
      complex2.NaN.nthRoot(278);
      complex2.exp();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex1.INF.tan();
      complex4.ZERO.conjugate();
      complex4.ONE.reciprocal();
      Complex complex5 = complex3.ONE.acos();
      complex1.ZERO.toString();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.ONE.exp();
      complex7.ONE.asin();
      complex6.toString();
      complex3.I.createComplex(278, (-3.4650891244084597E148));
      double double0 = 979.069753324;
      Complex complex8 = complex2.createComplex(278, 979.069753324);
      Complex complex9 = complex8.cos();
      complex9.readResolve();
      complex5.ZERO.hashCode();
//      try { 
        complex5.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      complex0.asin();
      complex2.hashCode();
      complex1.add((-4.107226967119929E-15));
      complex1.exp();
      complex1.getImaginary();
      Complex complex3 = complex2.add(959.93);
      complex2.pow(complex3);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex1.I.reciprocal();
      Complex complex2 = complex0.I.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.cos();
      complex0.ONE.abs();
      complex0.isInfinite();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.ZERO.createComplex(Double.POSITIVE_INFINITY, 2.3113425190436427E-92);
      complex8.NaN.getArgument();
      complex5.I.acos();
      complex2.ONE.createComplex(Double.POSITIVE_INFINITY, (-1.0));
      complex5.nthRoot(37);
      Complex complex9 = complex4.add(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex10.NaN.exp();
      complex9.sqrt1z();
      complex2.acos();
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex10.exp();
      Complex complex12 = complex4.negate();
      complex12.ONE.sqrt1z();
      complex3.tanh();
      complex9.sqrt1z();
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY, 37);
      Complex complex14 = complex11.atan();
      complex2.readResolve();
      complex13.getField();
      complex1.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, 2.3113425190436427E-92);
      complex14.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.I.nthRoot(290);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex1.ZERO.sinh();
      Complex complex8 = complex7.ZERO.tan();
      complex7.abs();
      complex7.I.multiply(complex2);
      Complex complex9 = complex7.divide(complex4);
      complex9.nthRoot(1);
      Complex complex10 = complex0.sqrt();
      complex9.asin();
      Complex complex11 = complex1.pow(complex6);
      complex11.add(complex10);
      Complex complex12 = Complex.NaN;
      complex12.sqrt1z();
      complex4.getField();
      Complex complex13 = complex11.sqrt1z();
      complex13.pow((double) 290);
      complex2.atan();
      complex9.isNaN();
      complex2.subtract(complex0);
      complex0.multiply((-170.965408267687));
      complex3.negate();
      complex12.cos();
      complex4.sqrt();
      Complex complex14 = new Complex((-2729.15516320235));
      complex2.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex1.I.reciprocal();
      Complex complex2 = complex0.I.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.cos();
      complex0.ONE.abs();
      complex0.isInfinite();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.ZERO.createComplex(Double.POSITIVE_INFINITY, 2.3113425190436427E-92);
      complex8.NaN.getArgument();
      complex5.I.acos();
      complex2.ONE.createComplex(Double.POSITIVE_INFINITY, (-1.0));
      complex5.nthRoot(37);
      Complex complex9 = complex4.add(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex10.NaN.exp();
      complex9.sqrt1z();
      Complex complex12 = complex2.acos();
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex10.exp();
      Complex complex13 = complex4.negate();
      complex13.ONE.sqrt1z();
      complex3.tanh();
      complex9.sqrt1z();
      Complex complex14 = complex12.conjugate();
      complex11.atan();
      complex2.readResolve();
      complex14.getField();
      complex1.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, 2.3113425190436427E-92);
      complex13.createComplex((-1140.548484271349), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-558.6367219));
      Complex complex1 = complex0.multiply(120);
      Complex complex2 = complex1.ONE.tanh();
      complex2.I.abs();
      complex1.NaN.pow(complex0);
      Complex complex3 = complex0.multiply(120);
      Complex complex4 = complex3.add(complex0);
      complex3.abs();
      Complex complex5 = complex0.atan();
      complex4.ONE.tanh();
      complex4.ONE.abs();
      Complex complex6 = complex5.INF.multiply(1948);
      complex5.getReal();
      complex3.getImaginary();
      Complex complex7 = Complex.valueOf(2023.8);
      complex7.getArgument();
      complex4.sinh();
      complex6.nthRoot(1948);
      complex0.NaN.reciprocal();
      Complex complex8 = complex7.exp();
      complex7.INF.conjugate();
      complex4.getImaginary();
      complex5.createComplex(2023.8, (-7.683019590615251E-133));
      complex7.divide(complex5);
      complex2.multiply(275);
      Complex complex9 = Complex.NaN;
      complex9.add(complex3);
      Complex complex10 = Complex.INF;
      complex8.multiply(complex1);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.4064263887992021), (-0.4064263887992021));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.atan();
      complex2.NaN.negate();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.INF.conjugate();
      complex1.INF.negate();
      Complex complex5 = complex0.I.createComplex(0.0, (-0.4064263887992021));
      complex3.pow((-0.4064263887992021));
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.I.acos();
      complex7.INF.pow(complex3);
      Complex complex8 = complex7.INF.conjugate();
      complex8.divide(complex1);
      complex6.isInfinite();
      complex6.negate();
      complex6.pow(0.13670018315315247);
      Complex complex9 = complex1.acos();
      complex9.acos();
      Complex complex10 = complex5.createComplex(1.0, 0.0);
      Complex complex11 = Complex.I;
      complex11.sqrt();
      complex4.isNaN();
      complex10.isNaN();
      Complex.valueOf(3918.9, 1.1730463525082348E-7);
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.NaN;
      complex5.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.multiply(0.6674286127090454);
      Complex complex3 = complex2.I.multiply(0);
      complex2.isInfinite();
      Complex complex4 = complex3.I.multiply(1966);
      complex0.isInfinite();
      complex3.ZERO.getField();
      Complex complex5 = complex3.acos();
      complex4.pow(6.283185307179586);
      complex1.equals(complex4);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex3.divide((double) 0);
      Complex complex8 = complex4.sqrt();
      complex8.reciprocal();
      complex5.divide(complex1);
      complex4.asin();
      complex3.hashCode();
      Complex complex9 = complex3.add((-20.0));
      complex1.exp();
      complex9.getImaginary();
      complex3.NaN.getField();
      complex5.add(0.0);
      Complex complex10 = complex6.pow(complex7);
      complex10.hashCode();
      complex4.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      complex1.ZERO.tanh();
      complex0.INF.cosh();
      Complex complex2 = complex1.asin();
      complex2.ZERO.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = Complex.I;
      complex4.INF.pow(complex5);
      Complex complex6 = complex0.NaN.pow(complex3);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex3.I.acos();
      complex9.INF.multiply(256);
      Complex complex10 = complex6.ONE.sinh();
      complex4.isInfinite();
      complex10.isInfinite();
      complex0.nthRoot(256);
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex0.add(95.7676861024);
      complex7.pow((-2723.5577435176));
      complex8.subtract(450.434954966171);
      complex12.pow((-2723.5577435176));
      complex5.reciprocal();
      complex11.isNaN();
      complex10.equals(complex9);
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.528773307800293);
      complex0.getReal();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.sqrt1z();
      complex1.ONE.acos();
      complex2.INF.divide(complex0);
      Complex complex3 = complex0.divide(2.528773307800293);
      complex0.isInfinite();
      complex1.getImaginary();
      complex1.getImaginary();
      complex0.NaN.subtract((-5735.65));
      Complex complex4 = complex0.reciprocal();
      complex4.ONE.multiply((-2091.02603472));
      complex3.toString();
      Complex complex5 = complex4.tan();
      complex1.readResolve();
      complex2.atan();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 290;
      Complex complex1 = complex0.ZERO.divide(complex0);
      complex0.I.nthRoot(290);
      Complex complex2 = complex0.sqrt();
      complex2.INF.subtract(complex0);
      Complex complex3 = complex0.multiply(complex2);
      complex3.INF.tanh();
      Complex complex4 = complex0.ZERO.sinh();
      complex4.ZERO.tan();
      complex4.abs();
      complex4.I.multiply(complex1);
//      try { 
        complex3.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = new Complex(1.2523630909973607E29);
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.add(0.0);
      Complex complex5 = complex0.asin();
      complex1.sqrt1z();
      complex1.getField();
      complex4.sqrt1z();
      Complex complex6 = complex5.pow((-1.0));
      complex3.atan();
      complex4.isNaN();
      complex5.subtract(complex4);
      complex5.multiply(0.5734702348709106);
      Complex complex7 = new Complex(0.0);
      complex7.negate();
      Complex complex8 = complex7.cos();
      complex6.sqrt();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = Complex.valueOf(860.41, (-1.0));
      complex10.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.multiply(0);
      complex0.isInfinite();
      Complex complex4 = complex0.multiply(19);
      complex3.isInfinite();
      complex2.getField();
      Complex complex5 = complex1.acos();
      Complex complex6 = new Complex(0.0, (-3621.155039428));
      Complex complex7 = complex5.add(complex6);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.pow(0.0);
      Complex complex10 = complex8.tan();
      complex1.equals(complex7);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex6.divide((double) 19);
      complex12.sqrt();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex13.divide(complex7);
      complex10.asin();
      complex11.hashCode();
      complex14.add(0.0);
      complex1.exp();
      complex9.getImaginary();
      complex10.add(1947.28364);
      complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.multiply(0);
      Complex complex4 = Complex.ONE;
      complex4.isInfinite();
      Complex complex5 = complex4.multiply(1966);
      complex0.isInfinite();
      complex2.getField();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex5.add(complex2);
      complex1.tan();
      complex7.equals(complex1);
      Complex.valueOf(2.0, (double) 0);
      Complex complex8 = complex5.divide((-20.0));
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex0.reciprocal();
      complex7.divide(complex0);
      complex9.asin();
      complex4.hashCode();
      Complex complex11 = complex10.add(0.6674286127090454);
      complex11.exp();
      complex4.getImaginary();
      complex1.add(1.42436589329759E250);
      complex2.pow(complex6);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-558.6367219));
      Complex complex1 = complex0.multiply(120);
      Complex complex2 = complex1.ONE.tanh();
      complex2.I.abs();
      complex1.NaN.pow(complex0);
      Complex complex3 = complex0.multiply(120);
      Complex complex4 = complex3.add(complex0);
      complex3.abs();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex4.ONE.tanh();
      complex4.ONE.abs();
      Complex complex7 = complex5.INF.multiply(1948);
      complex5.getReal();
      complex3.getImaginary();
      Complex complex8 = Complex.valueOf(2023.8);
      complex8.getArgument();
      Complex complex9 = complex4.sinh();
      complex7.nthRoot(1948);
      Complex complex10 = complex6.negate();
      Complex complex11 = complex4.tanh();
      Complex complex12 = Complex.I;
      complex12.divide(0.9999935913044163);
      Complex complex13 = Complex.valueOf(0.9999935913044163);
      complex6.nthRoot(4518);
      complex13.negate();
      complex10.cos();
      complex13.toString();
      complex9.cosh();
      complex7.multiply(complex11);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2489.2, 2489.2);
      Complex complex1 = complex0.createComplex((-1.4952401390009498), 1);
      Complex complex2 = complex1.createComplex(158.8661, 529.41665978);
      complex1.sqrt();
      complex0.isNaN();
      complex2.isNaN();
      Complex.valueOf(822.0591, 529.41665978);
      Complex complex3 = Complex.INF;
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.tan();
      complex4.asin();
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = complex3.subtract(complex0);
      complex4.getField();
      complex5.pow(complex6);
      Complex complex7 = Complex.NaN;
      complex7.getArgument();
      complex2.sqrt();
      complex3.sin();
      complex1.abs();
      Complex complex8 = complex3.exp();
      Complex complex9 = new Complex((-20.0));
      Complex complex10 = complex9.asin();
      complex6.negate();
      complex9.tanh();
      complex9.divide(Double.NaN);
      Complex.valueOf((-1435.19172));
      complex10.nthRoot(4518);
      complex8.negate();
      Complex complex11 = complex7.cos();
      complex11.toString();
      complex10.cosh();
      Complex complex12 = Complex.ZERO;
      complex12.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.0921536132159379E198, 2.592721454922832E-15);
      complex0.ZERO.toString();
      Complex complex2 = Complex.valueOf(0.0, 1151.7684098193206);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.ZERO.multiply(1.0921536132159379E198);
      complex2.reciprocal();
      Complex complex5 = complex4.ONE.tan();
      complex5.createComplex(2.592721454922832E-15, 1151.7684098193206);
      Complex complex6 = complex1.divide(0.12038381397724152);
      complex0.getArgument();
      Complex complex7 = complex6.multiply(163.40087);
      Complex complex8 = Complex.I;
      complex4.pow(complex8);
      Complex complex9 = new Complex(163.40087);
      complex9.isNaN();
      complex5.tan();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.multiply(0.6674286127090454);
      Complex complex3 = complex2.I.multiply(0);
      complex2.isInfinite();
      Complex complex4 = complex3.I.multiply(1966);
      complex0.isInfinite();
      complex3.ZERO.getField();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.I.add(complex1);
      complex5.pow(0.0);
      complex3.ZERO.tan();
      complex2.equals(complex3);
      Complex complex7 = Complex.valueOf(0.0, 1947.28364);
      complex7.divide((double) 0);
      complex5.sqrt();
      complex4.reciprocal();
      complex0.divide(complex5);
      complex2.asin();
      complex0.hashCode();
      Complex complex8 = complex5.add(2489.2);
      complex7.exp();
      Complex complex9 = Complex.NaN;
      complex9.getImaginary();
      complex9.add((-2640.9));
      complex6.pow(complex3);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.multiply(0.6674286127090454);
      Complex complex3 = complex2.I.multiply(0);
      complex2.isInfinite();
      Complex complex4 = complex3.I.multiply(1966);
      complex0.isInfinite();
      complex3.ZERO.getField();
      Complex complex5 = complex3.acos();
      complex5.I.add(complex1);
      complex5.pow(0.0);
      Complex complex6 = complex3.ZERO.tan();
      complex2.equals(complex3);
      Complex complex7 = Complex.valueOf(0.0, 1947.28364);
      Complex complex8 = complex7.divide((double) 0);
      complex5.sqrt();
      complex4.reciprocal();
      complex0.divide(complex5);
      complex2.asin();
      complex0.hashCode();
      complex6.add(0.6674286127090454);
      Complex complex9 = complex8.exp();
      complex9.getImaginary();
      Complex complex10 = complex7.add(Double.NaN);
      complex4.pow(complex10);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex.valueOf(1.0921536132159379E198, (-1.0));
      Complex complex2 = complex0.add(1.2523630909973607E29);
      Complex complex3 = complex2.multiply(0);
      complex3.add(0.0);
      complex0.asin();
      Complex complex4 = complex2.cos();
      complex1.getArgument();
      Complex complex5 = complex4.subtract((double) 0);
      Complex complex6 = complex3.exp();
      complex6.isNaN();
      complex5.exp();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.0921536132159379E198, 2.592721454922832E-15);
      complex0.ZERO.toString();
      Complex complex2 = Complex.valueOf(0.0, 1151.7684098193206);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.ZERO.multiply(1.0921536132159379E198);
      complex2.reciprocal();
      Complex complex5 = complex4.ONE.tan();
      complex5.I.subtract(complex2);
      complex4.NaN.getField();
      Complex complex6 = complex0.ZERO.pow(complex1);
      complex0.getArgument();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.ONE.sin();
      complex8.I.abs();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex0.INF.asin();
      complex9.INF.negate();
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex11.NaN.divide(0.0);
      Complex.valueOf((-275.71));
      complex0.NaN.nthRoot(4518);
      Complex complex13 = complex7.negate();
      Complex complex14 = complex5.cos();
      complex13.toString();
      complex14.cosh();
      Complex complex15 = complex10.multiply(complex6);
      complex15.INF.divide((-99.6689632212));
      complex12.toString();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1763.91622907888));
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = Complex.valueOf((-1763.91622907888), 0.0);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.ZERO;
      complex6.ZERO.exp();
      complex6.add((-1763.91622907888));
      complex5.ZERO.conjugate();
      complex3.NaN.atan();
      complex0.ONE.pow(complex6);
      complex5.ONE.exp();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.cos();
      complex8.ONE.conjugate();
      Complex complex9 = complex2.sin();
      complex5.cosh();
      complex6.tanh();
      complex7.subtract(complex9);
      Complex complex10 = complex0.divide(933.0090198);
      complex10.getField();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(162.444, (-1.0));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(162.444, 162.444);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.ONE.add(complex3);
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex4.subtract(complex5);
      Complex complex9 = complex8.INF.pow(complex4);
      Complex complex10 = complex9.multiply(162.444);
      Complex complex11 = Complex.ONE;
      complex6.NaN.subtract(complex11);
      complex9.ONE.cos();
      complex3.abs();
      complex8.exp();
      complex7.INF.sinh();
      Complex complex12 = complex6.cos();
      complex0.NaN.divide(complex9);
      complex12.ONE.acos();
      complex10.add(229.73050792613506);
      complex7.readResolve();
      complex6.tanh();
      complex2.createComplex(3223.07800609, 563.4564);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.conjugate();
      complex0.ZERO.subtract(complex1);
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex2.sqrt1z();
      complex1.I.getField();
      Complex complex4 = complex1.I.add(0.0);
      Complex complex5 = complex4.INF.reciprocal();
      Complex.valueOf(1641.736663953286);
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex5.ZERO.negate();
      complex7.ZERO.negate();
      complex4.ONE.multiply(0.0);
      complex1.isInfinite();
      Complex complex8 = complex2.tanh();
      complex0.conjugate();
      complex3.toString();
      Complex complex9 = complex1.multiply((-1813.6));
      Complex complex10 = complex1.subtract((-3728.5933));
      complex10.ONE.sqrt();
      complex10.tanh();
      complex2.getField();
      complex9.getArgument();
      complex8.equals("UFaf`GwJvKms A^:P)n");
      complex2.multiply((-367));
      complex7.isInfinite();
      complex1.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0292817180691822E123));
      Complex complex1 = Complex.valueOf((-1.0292817180691822E123), 243.740647264726);
      complex1.multiply(243.740647264726);
      complex1.ONE.getField();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.ZERO.negate();
      complex3.ONE.cos();
      complex1.I.readResolve();
      Complex complex4 = complex0.subtract(complex1);
      complex4.ONE.add(3408.9991861);
      complex2.INF.subtract((-1.0292817180691822E123));
      Complex complex5 = complex0.sqrt1z();
      complex5.NaN.subtract((-1.0292817180691822E123));
      complex0.asin();
      complex2.getImaginary();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, (-529.41665978));
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.exp();
      complex0.isNaN();
      Complex complex5 = complex2.sqrt();
      complex5.NaN.conjugate();
      Complex complex6 = complex1.multiply((-1577));
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex6.sinh();
      complex0.isInfinite();
      complex8.NaN.nthRoot(851);
      complex6.cosh();
      Complex complex9 = complex2.add((double) (-1577));
      Complex complex10 = complex8.ZERO.pow(0.0);
      complex10.I.subtract(2.0);
      Complex complex11 = complex9.pow(6.283185307179586);
      complex11.NaN.reciprocal();
      complex7.isNaN();
      complex4.equals(complex8);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-932.0), (-932.0));
      complex0.ZERO.abs();
      Complex complex1 = new Complex((-331.9889342), 1730.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex.valueOf(1730.0, (double) 0);
      complex1.ONE.pow(complex0);
//      try { 
        complex3.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.multiply(0.6674286127090454);
      Complex complex3 = complex2.I.multiply(0);
      complex2.isInfinite();
      Complex complex4 = complex3.I.multiply(1966);
      complex0.isInfinite();
      complex3.ZERO.getField();
      Complex complex5 = complex3.acos();
      complex5.I.add(complex1);
      complex5.pow(0.0);
      complex3.ZERO.tan();
      complex2.equals(complex3);
      Complex complex6 = Complex.valueOf(0.0, 1947.28364);
      complex6.divide((double) 0);
      complex5.sqrt();
      Complex complex7 = complex4.reciprocal();
      complex0.divide(complex5);
      Complex complex8 = complex2.asin();
      complex0.hashCode();
      Complex complex9 = complex8.add(0.0);
      complex9.exp();
      complex2.getImaginary();
      Complex complex10 = complex6.add((-2640.9));
      complex7.pow(complex6);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-968.1445576514188), 1387.6936005855);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.divide((-1.0));
      complex2.NaN.toString();
      complex1.NaN.add(1387.6936005855);
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex0.ZERO.pow((-968.1445576514188));
      complex0.getArgument();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.acos();
      complex4.add(complex6);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(329.262888253);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(329.262888253, 329.262888253);
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.sinh();
      complex2.ONE.sqrt();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.I.multiply(complex2);
      complex1.sqrt();
      complex3.log();
      Complex complex5 = complex4.cosh();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(125.959);
      complex0.ZERO.tan();
      Complex complex1 = complex0.atan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ZERO.tanh();
      complex0.INF.cosh();
      Complex complex3 = complex1.asin();
      complex3.ZERO.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.INF.pow(complex6);
      Complex complex8 = complex0.NaN.pow(complex4);
      Complex complex9 = complex0.acos();
      complex9.acos();
      Complex complex10 = complex4.I.acos();
      Complex complex11 = complex10.INF.multiply(256);
      Complex complex12 = complex8.ONE.sinh();
      complex5.isInfinite();
      complex0.exp();
      Complex complex13 = complex8.multiply(1.0);
      complex13.multiply(17);
      complex13.isNaN();
      complex5.isNaN();
      Object object0 = complex11.readResolve();
      complex11.equals(object0);
      complex2.sinh();
      Complex complex14 = complex9.log();
      complex14.ZERO.subtract(complex10);
      complex5.INF.multiply(complex1);
      complex12.readResolve();
      complex11.multiply(complex7);
      complex8.tanh();
      Complex.valueOf((double) 17, 2229.082294);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-383.9666216114547), (-383.9666216114547));
      Complex complex1 = Complex.NaN;
      complex0.ONE.hashCode();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.INF.divide(complex1);
      complex3.ONE.cosh();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex2.add(complex1);
      Complex complex8 = complex0.negate();
      complex7.ONE.abs();
      Complex complex9 = complex0.createComplex(2.9410015940087773E-8, (-383.9666216114547));
      complex8.I.atan();
      complex5.NaN.atan();
      Complex complex10 = complex9.ONE.subtract(complex4);
      complex4.NaN.getField();
      complex10.multiply((-2637));
      complex0.subtract(complex4);
      Complex complex11 = complex3.pow(complex1);
      complex11.reciprocal();
      complex11.ZERO.createComplex((-2005.4326265174498), 0.0);
      Complex complex12 = complex1.subtract(complex11);
      Complex complex13 = complex5.pow(complex9);
      Complex complex14 = complex9.sqrt();
      complex14.INF.readResolve();
      complex13.sin();
      complex12.sqrt();
      Complex complex15 = complex8.sin();
      complex6.log();
      complex10.tan();
      complex13.cosh();
      Complex complex16 = Complex.valueOf(1773.6587031304257, 0.0);
      complex15.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-428.79055));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.INF.acos();
      complex0.INF.hashCode();
      complex0.ONE.multiply(0.0);
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.getField();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex4.NaN.pow(complex3);
      complex5.I.hashCode();
      Complex complex6 = complex2.ZERO.exp();
      complex6.ONE.asin();
      complex3.nthRoot(587);
      complex2.sin();
      complex4.divide((-961.99225));
      complex3.subtract((-428.79055));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = (-1154);
      Complex complex1 = complex0.I.pow((double) (-1154));
      Complex complex2 = complex1.INF.tan();
      complex2.NaN.getArgument();
//      try { 
        complex0.nthRoot((-1154));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,154
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0431875573076199E-7);
      complex0.ZERO.readResolve();
      complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.INF.divide(complex1);
//      try { 
        complex3.ZERO.nthRoot((-664));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -664
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt();
//      try { 
        complex1.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.I.atan();
      complex3.sin();
      complex0.readResolve();
      Complex complex4 = complex0.multiply((-2291));
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = Complex.valueOf(0.0);
      complex0.atan();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.I.conjugate();
      complex7.getField();
      complex8.ONE.add(complex5);
      Complex complex9 = complex4.I.log();
      complex9.ZERO.readResolve();
      Complex complex10 = complex6.pow(2.0);
      Complex complex11 = complex0.sqrt1z();
      complex11.NaN.conjugate();
      complex6.getReal();
      complex4.tan();
      Complex complex12 = complex8.sqrt1z();
      complex5.getArgument();
      complex6.atan();
      Complex complex13 = complex7.sqrt();
      complex13.INF.subtract(694.82229875286);
      complex13.NaN.cosh();
      complex12.add((-5.185064518887831E-9));
      complex10.hashCode();
      complex11.reciprocal();
      complex3.acos();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.abs();
      Complex complex1 = Complex.NaN;
      complex0.ZERO.divide(complex1);
      complex0.ONE.atan();
      complex0.I.abs();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 1994.707666);
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.NaN.subtract(1.0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.divide(1994.707666);
      Complex.valueOf(0.0);
      complex5.cosh();
      complex0.readResolve();
      complex0.hashCode();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.asin();
      complex6.I.tanh();
      Complex complex8 = complex7.divide((-20.0));
      complex6.cosh();
      Complex complex9 = complex6.cosh();
      complex0.I.sqrt();
      Complex complex10 = complex8.conjugate();
      complex10.INF.toString();
      complex1.add(complex3);
      complex9.INF.multiply((-4087));
      complex7.toString();
      complex6.cosh();
      complex7.toString();
      complex2.ZERO.createComplex(1.0, 517.3255381159976);
      Complex complex11 = complex9.subtract(complex2);
      complex11.NaN.createComplex(0.0, 740.54715759);
      complex11.conjugate();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.readResolve();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.multiply((-3193));
      Complex complex4 = complex3.pow(complex2);
      complex4.abs();
      complex1.reciprocal();
      Complex complex5 = complex2.conjugate();
      complex0.toString();
      complex5.NaN.getField();
      Complex complex6 = complex5.multiply((double) (-3193));
      complex1.isInfinite();
      complex1.multiply(complex6);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(1516);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.sqrt();
      complex4.NaN.cos();
      complex1.subtract(0.0);
      complex2.sin();
      complex3.hashCode();
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.I.multiply(20.0);
      Complex complex2 = complex1.NaN.cosh();
      complex2.multiply(0.0);
      complex0.getArgument();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.ONE.pow((-20.0));
      Complex complex5 = complex4.NaN.conjugate();
      complex5.INF.divide(0.0);
      complex4.ONE.negate();
      complex4.ONE.sqrt1z();
      complex0.equals(complex3);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.add(1.2523630909973607E29);
      Complex complex3 = complex2.multiply(0);
      complex3.add(0.0);
      complex0.asin();
      Complex complex4 = complex2.cos();
      complex1.getArgument();
      Complex complex5 = complex4.subtract((double) 0);
      Complex complex6 = complex3.exp();
      complex6.isNaN();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(102.572449565, 102.572449565);
      complex0.nthRoot(1226);
      Complex complex1 = complex0.acos();
      Complex.valueOf((double) 1226, 0.0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-183.13233621370196), (-183.13233621370196));
      Complex complex4 = complex2.ZERO.pow(complex3);
      complex4.ONE.subtract(0.0);
      Complex complex5 = complex4.ZERO.sin();
      complex0.INF.nthRoot(1408);
      complex0.ZERO.log();
      Complex complex6 = complex1.subtract((-3366.67248805928));
      complex2.getField();
      complex4.sin();
      Complex complex7 = complex5.exp();
      complex6.INF.cos();
      complex7.NaN.nthRoot(1408);
      complex6.pow(2086.744243813);
      complex2.acos();
      complex1.sinh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.toString();
      complex2.ONE.add(complex0);
      complex2.INF.getArgument();
      complex0.NaN.tan();
      Complex complex3 = complex1.tan();
      complex3.ZERO.tanh();
      complex1.NaN.getField();
      Complex complex4 = complex2.tan();
      complex4.sin();
      Complex complex5 = complex4.I.sinh();
      complex1.sin();
      complex5.subtract(complex0);
      complex0.isInfinite();
      complex4.exp();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1382.0957857558));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.cos();
      complex2.NaN.divide(complex1);
      Complex complex4 = complex1.multiply(complex2);
      complex4.NaN.log();
      complex4.ZERO.subtract(complex1);
      Complex complex5 = complex0.reciprocal();
      complex0.abs();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ZERO.subtract(complex1);
      Complex complex8 = Complex.valueOf(95.18556006);
      Complex complex9 = complex8.ONE.tan();
      complex9.cos();
      complex9.ONE.readResolve();
      complex6.getImaginary();
      Complex complex10 = Complex.I;
      Complex complex11 = complex2.INF.pow(complex10);
      complex3.hashCode();
      complex10.ZERO.asin();
      Complex complex12 = complex7.log();
      complex3.conjugate();
      complex2.sqrt();
      Complex complex13 = complex5.divide(0.0);
      Complex complex14 = complex13.divide(Double.NaN);
      complex14.divide(complex5);
      complex11.abs();
      Complex complex15 = complex13.multiply(complex12);
      complex15.isNaN();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-558.6367219));
      Complex complex1 = complex0.multiply(120);
      Complex complex2 = complex1.ONE.tanh();
      complex2.I.abs();
      complex1.NaN.pow(complex0);
      Complex complex3 = complex0.multiply(120);
      Complex complex4 = complex3.add(complex0);
      complex3.abs();
      Complex complex5 = complex0.atan();
      complex4.ONE.tanh();
      complex4.ONE.abs();
      Complex complex6 = complex5.INF.multiply(1948);
      complex5.getReal();
      complex3.getImaginary();
      Complex complex7 = Complex.valueOf(2023.8);
      complex7.getArgument();
      complex4.sinh();
      complex6.nthRoot(1948);
      complex0.NaN.reciprocal();
      Complex complex8 = complex7.exp();
      complex7.INF.conjugate();
      complex4.getImaginary();
      Complex complex9 = complex5.createComplex(2023.8, (-7.683019590615251E-133));
      complex1.createComplex(1.1730463525082348E-7, 0.0);
      complex8.sqrt();
      complex6.isNaN();
      complex9.isNaN();
      Complex.valueOf(1.1730463525082348E-7, 0.0);
      Complex complex10 = Complex.INF;
      complex0.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.atan();
      complex2.NaN.negate();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.INF.conjugate();
      complex1.INF.negate();
      complex0.I.createComplex(0.0, 0.0);
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.I.acos();
      Complex complex8 = complex7.INF.pow(complex3);
      Complex complex9 = complex7.INF.conjugate();
      Complex complex10 = complex9.divide(complex1);
      complex6.isInfinite();
      complex6.negate();
      Complex complex11 = complex6.pow(0.13670018315315247);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex1.acos();
      Complex complex13 = complex12.acos();
      assertEquals(1.0232274785475506, complex13.getImaginary(), 0.01);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      Complex complex14 = complex4.divide(complex5);
      assertSame(complex14, complex10);
      
      Complex complex15 = complex8.multiply(112);
      Complex complex16 = complex15.NaN.add(complex6);
      Complex complex17 = Complex.INF;
      Complex complex18 = complex15.multiply(complex17);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertSame(complex18, complex16);
      
      double double0 = complex2.abs();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 290;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.I.nthRoot(290);
      Complex complex3 = complex0.sqrt();
      complex3.INF.subtract(complex1);
      Complex complex4 = complex0.multiply(complex3);
      complex4.INF.tanh();
      Complex complex5 = complex1.ZERO.sinh();
      complex5.ZERO.tan();
      complex5.abs();
      complex5.I.multiply(complex2);
//      try { 
        complex4.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-2167));
      complex0.I.hashCode();
      Complex complex2 = complex1.INF.multiply((-101.181480616169));
      complex2.NaN.acos();
      complex2.ONE.negate();
      Complex complex3 = complex1.I.createComplex((-2167), 1549.025555);
      Complex complex4 = complex3.ZERO.cosh();
      complex4.INF.hashCode();
      complex0.NaN.getArgument();
      complex4.I.multiply(1);
      complex0.hashCode();
//      try { 
        complex0.INF.nthRoot((-2167));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,167
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.sqrt1z();
//      try { 
        complex2.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = (-5.185064518887831E-9);
      Complex complex0 = new Complex((-5.185064518887831E-9));
      double double1 = (-2389.8577970115566);
      complex0.ONE.divide((-2389.8577970115566));
      Complex complex1 = Complex.valueOf((-2389.8577970115566), 0.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.getReal();
//      try { 
        complex0.INF.nthRoot((-219));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -219
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
