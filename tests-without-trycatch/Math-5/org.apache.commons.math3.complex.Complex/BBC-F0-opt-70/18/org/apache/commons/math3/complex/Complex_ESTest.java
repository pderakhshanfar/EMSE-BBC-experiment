/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:53:29 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3784853708457332E-206, 4.025935988464658E-16);
      complex0.I.multiply(1.3784853708457332E-206);
      complex0.nthRoot(1028);
      Complex complex1 = complex0.tan();
      complex1.nthRoot(7);
      Complex complex2 = complex1.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.pow(1291.319801611);
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.INF.add(complex0);
      complex1.NaN.cos();
      complex0.ONE.divide(1291.319801611);
      complex0.NaN.toString();
      complex1.ONE.abs();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      complex3.I.exp();
      complex1.asin();
      complex0.asin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-907.5436064193), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(10.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(2476.0, 0.40155118703842163);
      Complex complex2 = complex0.multiply((-570));
      complex2.ZERO.getArgument();
      complex2.I.negate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex1.createComplex(10.0, 10.0);
      Complex complex7 = complex0.add(complex6);
      complex7.add(-0.0);
      Complex complex8 = complex4.asin();
      complex3.conjugate();
      complex5.readResolve();
      complex0.ONE.abs();
      Complex.valueOf((-271.441497022));
      complex8.ONE.multiply((-570));
//      try { 
        complex0.nthRoot((-570));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -570
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3784853708457332E-206, 4.025935988464658E-16);
      Complex complex1 = new Complex(4.025935988464658E-16, 4.025935988464658E-16);
      Complex complex2 = complex0.pow(complex1);
      complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex3.multiply(complex0);
      complex2.tan();
      complex3.tan();
      Complex complex4 = complex2.asin();
      complex4.hashCode();
      complex2.multiply((-45));
      Complex complex5 = Complex.valueOf(1.5707963267948966);
      complex5.NaN.getField();
      complex5.ONE.getArgument();
      complex5.INF.nthRoot(1602);
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = Complex.valueOf(1.5707963267948966);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.toString();
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      complex0.nthRoot(819);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.multiply(complex2);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2957.26, 249.9214358529255);
      Complex complex1 = complex0.I.atan();
      complex1.createComplex(2957.26, Double.NaN);
      Complex complex2 = complex0.exp();
      complex0.NaN.getArgument();
      complex2.ONE.reciprocal();
      Complex complex3 = complex2.INF.multiply(2957.26);
      complex3.NaN.readResolve();
      complex0.abs();
      complex2.ONE.subtract((-1577.76614));
      complex0.toString();
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.cos();
      Complex complex3 = new Complex((-5131.5976265252));
      Complex complex4 = new Complex(6.283185307179586);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex4.subtract(2.414213562373095);
      complex6.add((-5131.5976265252));
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex7.tanh();
      complex2.pow(complex8);
      Complex.valueOf(654.2515855098144, 654.2515855098144);
      complex2.multiply(complex5);
      Complex complex9 = new Complex(6.283185307179586, 20.0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3426.0));
      Complex complex2 = new Complex((-3426.0));
      Complex complex3 = new Complex(1.3784853708457332E-206);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.subtract(1.3784853708457332E-206);
      Complex complex6 = complex3.divide(complex1);
      Complex complex7 = Complex.I;
      complex6.pow(complex1);
      complex5.tan();
      complex0.multiply(2206.853584901813);
      complex4.reciprocal();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.asin();
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex((-2101.9211));
      Complex complex3 = new Complex(2.414213562373095);
      Complex complex4 = new Complex(6.283185307179586);
      Complex complex5 = new Complex((-2101.9211), 2.414213562373095);
      complex5.asin();
      complex0.subtract(5.549693864059888E-222);
      Complex complex6 = new Complex((-4084.2085037112));
      Complex complex7 = complex6.divide(complex4);
      Complex complex8 = Complex.I;
      complex1.pow(complex8);
      complex6.tan();
      Complex complex9 = complex8.multiply((-1015.7228519));
      complex9.reciprocal();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4.025935988464658E-16, Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex complex2 = complex1.asin();
      complex0.cos();
      Complex complex3 = new Complex(4.025935988464658E-16);
      Complex complex4 = new Complex(840.7946380353617);
      Complex complex5 = new Complex(6.283185307179586);
      Complex complex6 = complex4.asin();
      complex5.subtract((-898.40026651));
      Complex complex7 = complex3.add(0.9997906444756781);
      complex2.divide(complex5);
      complex7.tanh();
      complex0.pow(complex1);
      Complex.valueOf((-2186.763442880188), 5.879314424538711);
      complex0.sinh();
      complex6.tan();
      complex7.multiply((-898.40026651));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.557407724654902, 4.025935988464658E-16);
      double double0 = (-774.89113);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      Object object0 = new Object();
      Complex complex3 = Complex.ONE;
      complex3.NaN.exp();
      Complex complex4 = complex1.subtract(4.025935988464658E-16);
      complex0.add(2.0);
      complex2.divide(complex4);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.pow(complex2);
      complex6.sinh();
//      try { 
        complex2.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = complex0.multiply((-3021));
      complex1.getField();
      complex0.I.exp();
      Complex complex3 = (Complex)complex2.readResolve();
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.multiply(Double.NaN);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex.valueOf(1.557407724654902, 4.025935988464658E-16);
      Complex complex0 = new Complex((-774.89113), 2.0);
      Complex complex1 = Complex.NaN;
      Object object0 = new Object();
      complex1.NaN.exp();
      Complex.valueOf((-4.996854125490041E297));
      Complex complex2 = new Complex((-912.6590464379016), (-774.89113));
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-238.26), 2.1487475413123092E79);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.NaN;
      complex5.nthRoot(2802);
      Complex complex6 = Complex.I;
      complex6.sinh();
      complex0.tan();
      complex3.log();
      Complex complex7 = new Complex(0.1882992847798186);
      complex7.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-1848.8613063198));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.INF.add(complex2);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.NaN.createComplex(2.2153227096187463E-9, 1856.9282308681993);
      complex0.getReal();
      Complex complex5 = complex0.acos();
      complex5.INF.subtract(complex0);
      Complex complex6 = complex0.pow((-1848.8613063198));
      Complex complex7 = complex6.INF.conjugate();
      complex7.log();
      Complex complex8 = complex1.negate();
      Complex.valueOf(2.2153227096187463E-9, 1547535.0);
      complex8.equals(complex0);
      complex0.abs();
      complex0.reciprocal();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.012947040998503E-8), (-1.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex((-964.25852), 4323.89592368);
      complex3.nthRoot(1028);
      Complex complex4 = Complex.NaN;
      Object object0 = new Object();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.valueOf((-4.012947040998503E-8));
      complex0.equals(complex6);
      Complex complex7 = complex2.sin();
      complex7.ONE.sinh();
      Complex complex8 = Complex.ZERO;
      complex0.cosh();
      Complex complex9 = new Complex((-1.0), 1.38109784554181);
      complex1.hashCode();
      Complex.valueOf(209.8099650795567, (-964.25852));
      complex9.nthRoot(1028);
      Complex complex10 = Complex.I;
      complex3.sinh();
      complex0.tan();
      complex9.multiply(209.8099650795567);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.012947040998503E-8), (-1.0));
      Complex complex1 = complex0.atan();
      complex1.I.pow((-1.0));
      complex0.toString();
      complex0.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = new Complex((-1.0));
      complex2.readResolve();
      Complex.valueOf((-4.012947040998503E-8));
      Complex complex4 = new Complex(4.4373726292703545E-243, (-1.0));
      complex2.equals(complex3);
      complex1.sin();
      Complex complex5 = Complex.ZERO;
      complex1.cosh();
      Complex complex6 = new Complex(3289.156153429, 1.0);
      complex2.hashCode();
      Complex.valueOf(3289.156153429, 7.012806239173502E291);
      int int0 = 5864;
      // Undeclared exception!
      complex3.nthRoot(5864);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = new Complex((-3021), 1182.4546);
      Complex complex2 = complex1.multiply((-3021));
      complex0.log();
      complex2.reciprocal();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.ONE.acos();
      complex1.I.readResolve();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.log();
      complex1.multiply(complex2);
      Complex complex4 = complex1.ONE.multiply(0);
      Complex complex5 = complex0.subtract(complex4);
      complex5.negate();
      Complex.valueOf(0.6280876398086548, (-0.006392659903298181));
      complex3.divide(Double.POSITIVE_INFINITY);
      complex5.acos();
      complex5.divide(4.4373726292703545E-243);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.log();
      complex1.ZERO.asin();
      Complex complex3 = complex2.divide(964.25852);
      complex0.sin();
      Complex complex4 = new Complex(964.25852, Double.NaN);
      complex3.tanh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(0.7347712439777113);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.012947040998503E-8), (-1.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add((-4.012947040998503E-8));
      Complex complex3 = complex0.tanh();
      complex3.isInfinite();
      complex1.sin();
      Complex.valueOf(1.0, 1.0);
      complex1.reciprocal();
      complex0.multiply(452.2087351);
      complex0.multiply(complex3);
      complex1.abs();
      complex0.divide(476.51895072840796);
      Complex complex4 = complex2.sin();
      Complex complex5 = Complex.valueOf((-2655.1162592748), Double.NaN);
      complex5.tanh();
      Complex complex6 = Complex.ONE;
      Complex complex7 = new Complex((-1.3548568223001414E-8));
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = complex1.sin();
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((-1812.6206));
      complex2.toString();
      complex3.asin();
      Complex complex4 = Complex.valueOf((-1812.6206));
      complex4.exp();
      Complex complex5 = complex2.tan();
      complex5.abs();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1222.3206145503127);
      Complex complex1 = complex0.I.createComplex(892.4, 1222.3206145503127);
      Complex complex2 = complex1.INF.pow(892.4);
      complex2.ONE.tan();
      Complex complex3 = complex0.reciprocal();
      complex0.exp();
      Complex complex4 = complex0.subtract(1222.3206145503127);
      Complex complex5 = complex4.exp();
      complex5.NaN.toString();
      complex5.toString();
      Complex complex6 = Complex.valueOf(1.0);
      complex6.multiply(892.4);
      complex0.getArgument();
      complex0.sinh();
      complex3.toString();
      Complex complex7 = complex6.multiply((-1.0));
      complex5.log();
      complex6.cos();
      complex7.add(1.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ZERO.asin();
      complex1.NaN.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.ONE.pow(complex3);
      complex4.pow(Double.NaN);
      complex1.readResolve();
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      complex5.ZERO.add(complex2);
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex5.tan();
      complex4.log();
      Complex.valueOf(1174.99, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex0.add(477.36098094574766);
      Complex complex2 = Complex.INF;
      complex2.INF.log();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex1.add(477.36098094574766);
      Complex complex6 = complex0.subtract(complex3);
      complex6.negate();
      Complex.valueOf(0.6280876398086548, (-0.006392659903298181));
      complex5.abs();
      complex4.add(Double.NaN);
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-238.26));
      Complex complex2 = complex1.I.tanh();
      complex0.isInfinite();
      Complex complex3 = complex0.ONE.sin();
      Complex.valueOf((-238.26), (-238.26));
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.I.multiply((-238.26));
      complex4.I.multiply(complex1);
      Complex complex6 = complex4.divide(6.283185307179586);
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = new Complex((-238.26), (-238.26));
      Complex complex9 = complex7.tanh();
      Complex complex10 = Complex.ONE;
      complex9.readResolve();
      complex3.asin();
      complex6.getArgument();
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex(Double.NaN);
      complex11.divide(complex12);
      complex5.tanh();
//      try { 
        complex8.nthRoot((-2587));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,587
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-238.26));
      Complex complex2 = complex1.I.tanh();
      complex0.isInfinite();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.valueOf((-238.26), 6.283185307179586);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex4.multiply(6.283185307179586);
      Complex complex8 = complex2.multiply(complex7);
      Complex complex9 = complex4.divide((-238.26));
      Complex complex10 = complex4.sin();
      Complex complex11 = new Complex((-5040.085867445207), Double.POSITIVE_INFINITY);
      complex5.createComplex(0.0, 6.283185307179586);
      complex5.equals(complex8);
      Complex complex12 = complex5.asin();
      complex10.sqrt1z();
      complex10.conjugate();
      Complex complex13 = complex5.cosh();
      complex9.negate();
      Complex complex14 = complex4.sin();
      complex14.readResolve();
      Complex complex15 = Complex.valueOf(3932.57615);
      complex15.toString();
      Complex complex16 = complex8.asin();
      Complex.valueOf((-238.26));
      complex0.exp();
      complex16.tan();
      complex13.abs();
      complex6.tanh();
      complex1.add(complex2);
      complex12.sqrt1z();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.ZERO.readResolve();
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(6.850529106231035E-8, 20.0);
      complex0.sin();
      Complex complex2 = Complex.valueOf(20.0, (-3.2094489483824873E-4));
      Complex complex3 = Complex.valueOf(302.2950206204398, 6.850529106231035E-8);
      Complex complex4 = complex1.tanh();
      object0.hashCode();
      Complex complex5 = Complex.ONE;
      complex4.readResolve();
      Complex complex6 = complex1.asin();
      complex4.getArgument();
      complex6.divide(complex5);
      Complex complex7 = complex2.tanh();
      complex1.nthRoot(2968);
      complex4.multiply((-471.2658440394088));
      Complex complex8 = complex3.sinh();
      Complex.valueOf(20.0, 0.0);
      complex6.equals(complex7);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-238.26);
      Complex complex1 = complex0.NaN.add((-238.26));
      complex1.I.tanh();
      Complex.valueOf((-3569.847251), (-238.26));
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = Complex.valueOf(0.0, 6.850529106231035E-8);
      complex0.add(complex2);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.multiply(complex3);
      complex1.abs();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex0.createComplex(1.557407724654902, 760.1950279);
      complex4.equals(complex6);
      complex3.reciprocal();
      complex1.equals(complex2);
      Complex complex7 = complex0.divide((-2812.024247989377));
      Complex complex8 = complex4.divide(complex7);
      complex1.getField();
      complex5.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.atan();
      complex2.I.sqrt();
      Complex complex3 = Complex.ZERO;
      complex1.readResolve();
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.createComplex(1097.6473, 1097.6473);
      Complex complex4 = complex1.divide(complex1);
      Complex complex5 = new Complex(5.1856152603337505E-8, 5.1856152603337505E-8);
      Complex complex6 = complex5.reciprocal();
      complex3.nthRoot(193);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.subtract(382.5375878644);
      complex0.readResolve();
      complex1.equals(complex6);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.sin();
      complex4.cosh();
      complex8.hashCode();
      complex4.nthRoot(193);
      Complex complex11 = Complex.I;
      complex6.tan();
      complex10.asin();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-238.26));
      Complex complex2 = complex1.I.tanh();
      complex0.isInfinite();
      Complex complex3 = Complex.valueOf((-238.26), (-238.26));
      complex3.ONE.sin();
      Complex.valueOf((-238.26), (-238.26));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.I.multiply((-238.26));
      Complex complex6 = complex4.I.multiply(complex1);
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex7 = Complex.I;
      complex7.sin();
      Complex complex8 = Complex.ZERO;
      complex8.cosh();
      Complex complex9 = new Complex(0.5403023058681398, 1.0000000716576292);
      complex0.hashCode();
      Complex complex10 = Complex.valueOf(1.0000000716576292, 0.4568560719490051);
      Complex complex11 = new Complex(0.4568560719490051, 1156.58649127243);
      complex11.nthRoot(17);
      Complex complex12 = Complex.I;
      complex9.sinh();
      complex5.tan();
      complex1.divide((-1.0));
      complex7.add(complex2);
      Complex complex13 = complex1.conjugate();
      complex10.sqrt();
      complex13.getImaginary();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.divide(976.1936339607494);
      complex5.I.tan();
      complex5.negate();
      complex5.acos();
      complex1.sqrt();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = (-4.012947040998503E-8);
      Complex complex0 = Complex.valueOf((-4.012947040998503E-8), (-1.0));
      Complex complex1 = complex0.atan();
      complex1.I.pow((-1.0));
      complex0.toString();
      complex0.asin();
      Complex complex2 = complex0.cos();
      complex2.sqrt1z();
      int int0 = (-141);
//      try { 
        complex2.INF.nthRoot((-141));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -141
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-78.2179));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-8.56103));
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.negate();
      Complex complex6 = new Complex((-8.56103), (-20.0));
      Complex complex7 = complex2.add(complex1);
      complex6.pow(complex4);
      Complex complex8 = complex0.reciprocal();
      complex2.exp();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.cos();
      Complex complex11 = complex1.pow((-2505.68754963189));
      Complex.valueOf((-2505.68754963189));
      complex2.add((-78.2179));
      complex7.pow(complex8);
      complex3.getImaginary();
      complex6.divide(complex11);
      complex8.readResolve();
      complex5.subtract(310.87008495498);
      complex10.subtract(0.8456965594664245);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.acos();
      complex1.I.readResolve();
      complex0.add(477.36098094574766);
      Complex complex3 = Complex.INF;
      complex3.INF.log();
      complex1.multiply(complex3);
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex1.ONE.multiply(0);
      Complex complex6 = complex1.add(477.36098094574766);
      Complex complex7 = complex0.subtract(complex5);
      complex7.negate();
      Complex.valueOf(0.6280876398086548, (-0.006392659903298181));
      complex6.abs();
      complex6.add((-7.81295459930537E-72));
      Complex complex8 = complex4.divide(Double.POSITIVE_INFINITY);
      complex6.negate();
      complex7.acos();
      complex7.sqrt();
      complex8.getField();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2836.4544757917447);
      Complex complex1 = Complex.INF;
      complex1.readResolve();
      Complex complex2 = complex1.add((-1810.4698421));
      Complex complex3 = Complex.INF;
      complex3.ONE.atan();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex2.asin();
      complex1.multiply(0);
      Complex complex7 = complex5.add(477.36098094574766);
      complex3.subtract(complex5);
      complex3.negate();
      Complex.valueOf(0.0010492715919951934, (-1810.4698421));
      complex7.abs();
      Complex complex8 = Complex.INF;
      complex8.add((-1.0489751005162237E-7));
      complex4.divide(0.006392659903298181);
      Complex complex9 = complex6.negate();
      Complex complex10 = complex9.acos();
      complex4.sqrt();
      complex10.cos();
//      try { 
        complex6.nthRoot((-557));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -557
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.tan();
      complex0.divide(336.613210202);
      Complex complex5 = new Complex(Double.NaN, (-1717.093488093904));
      complex5.add(complex2);
      complex2.conjugate();
      complex5.sqrt();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      complex0.add(7.635999584053557E109);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.log();
      complex0.multiply(complex2);
      Complex complex4 = Complex.ONE;
      complex4.asin();
      Complex complex5 = complex4.multiply(1972);
      complex0.add(1695.859263);
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex6.negate();
      Complex complex8 = Complex.valueOf((double) 1972, 2428.77121815078);
      complex3.abs();
      complex2.add(Double.POSITIVE_INFINITY);
      complex7.divide(0.6280876398086548);
      complex8.negate();
      complex5.acos();
      Complex complex9 = new Complex(1695.859263);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2836.4544757917447);
      Complex complex1 = Complex.INF;
      complex0.ONE.subtract(2836.4544757917447);
      Complex complex2 = Complex.valueOf(4323.89592368, 2836.4544757917447);
      complex1.nthRoot(1973);
      Complex complex3 = Complex.NaN;
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.cosh();
      complex0.hashCode();
      complex4.nthRoot(1973);
      Complex complex6 = Complex.valueOf(0.5403023058681398, (-3291.80193766));
      complex2.abs();
      complex6.add((-1946.391816506));
      complex5.divide(0.41421356237309515);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.negate();
      Complex complex8 = Complex.INF;
      complex8.acos();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3305.0893482201527, (-1784.8125424576076));
      complex1.tanh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(0.0, 0.006433526003903294);
      complex3.readResolve();
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf(0.0, (-158.03313282679488));
      complex5.getArgument();
      complex1.divide(complex3);
      complex0.tanh();
      complex4.nthRoot(507);
      complex5.multiply((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sqrt();
      complex1.ZERO.divide(complex0);
      Complex complex3 = Complex.valueOf((-0.006392659903298181), (-0.006392659903298181));
      complex3.abs();
      Complex complex4 = complex1.add(0.0);
      complex4.divide(0.0);
      complex3.negate();
      complex0.acos();
      complex2.sqrt();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2836.4544757917447);
      Complex complex1 = Complex.valueOf(2836.4544757917447, 2836.4544757917447);
      complex0.ONE.subtract(2836.4544757917447);
      Complex.valueOf(0.0, 9.442671392695732E-9);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = new Complex(2836.4544757917447, 9.442671392695732E-9);
      Complex complex5 = Complex.I;
      complex5.tan();
      complex2.I.divide(complex3);
      complex5.asin();
      complex0.log();
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-238.26));
      Complex complex2 = complex1.I.tanh();
      complex0.isInfinite();
      Complex.valueOf((-238.26), (-238.26));
      Complex complex3 = Complex.valueOf(4323.89592368, (-1.0));
      Complex complex4 = new Complex(3932.57615, 209.8099650795567);
      complex4.nthRoot(1973);
      Complex complex5 = Complex.NaN;
      Object object0 = new Object();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf(3932.57615);
      complex6.equals(complex7);
      complex4.sin();
      Complex complex8 = Complex.ZERO;
      complex8.cosh();
      Complex complex9 = new Complex(0.5403023058681398, 3932.57615);
      complex9.hashCode();
      Complex complex10 = Complex.valueOf((double) 1973, 0.4568560719490051);
      complex10.nthRoot(17);
      Complex complex11 = Complex.I;
      complex10.sinh();
      Complex complex12 = complex3.tan();
      Complex complex13 = complex12.divide((-2477.7));
      complex11.add(complex13);
      complex4.conjugate();
      Complex complex14 = complex2.sqrt();
      complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-78.2179));
      complex0.INF.toString();
      Complex complex1 = complex0.add((-78.2179));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(156.4623365);
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex3.pow(156.4623365);
      Complex.valueOf(1845.0685078);
      Complex complex6 = complex5.add((-1418.296903219986));
      complex0.pow(complex6);
      complex5.getImaginary();
      Complex complex7 = complex5.divide(complex1);
      complex4.readResolve();
      Complex complex8 = complex5.subtract((-1418.296903219986));
      Complex complex9 = complex7.divide(156.4623365);
      complex8.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.ONE.sqrt();
      complex1.ZERO.divide(complex0);
      Complex complex2 = complex1.atan();
      complex2.ZERO.tan();
      complex1.asin();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ZERO.createComplex(20.0, 20.0);
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.I.cos();
      Complex complex7 = complex6.INF.pow(20.0);
      Complex complex8 = complex4.tan();
      complex8.I.acos();
      complex3.pow(complex2);
      complex3.toString();
      complex5.getArgument();
      complex7.divide(complex5);
      complex6.multiply(complex2);
      Complex complex9 = Complex.INF;
      complex4.pow(complex9);
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-78.2179));
      complex0.INF.toString();
      Complex complex1 = complex0.add((-78.2179));
      Complex complex2 = complex0.asin();
      complex2.subtract(156.4623365);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.ZERO.acos();
      complex3.INF.add((-78.2179));
      complex0.ONE.multiply((double) 1);
      Complex complex5 = complex3.ZERO.multiply(1);
      Complex complex6 = complex5.ONE.subtract(complex1);
      complex1.negate();
      Complex complex7 = Complex.valueOf((-78.2179), 0.0);
      complex4.abs();
      complex4.add(1.5707963267948966);
      complex4.getReal();
      complex7.divide(1.5707963267948966);
      complex6.subtract(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.divide((-643.1340138275));
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 38.15225511789322);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.subtract(complex1);
      complex4.readResolve();
      complex3.asin();
      complex2.getArgument();
      Complex complex5 = complex2.divide(complex1);
      complex5.sin();
      complex3.multiply(3083.2185853427);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2836.4544757917447);
      Complex complex1 = Complex.INF;
      complex0.ONE.subtract(2836.4544757917447);
      Complex complex2 = Complex.valueOf(4323.89592368, 2836.4544757917447);
      complex1.nthRoot(1973);
      Complex complex3 = Complex.NaN;
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = complex0.sin();
      complex1.cosh();
      complex0.hashCode();
      complex4.nthRoot(1973);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex2.tan();
      complex2.divide(336.613210202);
      complex3.add(complex2);
      Complex complex8 = complex6.conjugate();
      complex7.sqrt();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-82.6));
      complex0.I.exp();
      Complex complex1 = complex0.multiply(268);
      Complex.valueOf(3366.693009388, 0.0);
      complex0.tanh();
//      try { 
        complex1.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.conjugate();
      complex2.nthRoot(1923);
      complex0.equals(complex1);
      complex1.INF.hashCode();
      complex0.isInfinite();
      complex1.toString();
      Complex complex4 = complex1.subtract((double) 1923);
      complex1.toString();
      Complex complex5 = new Complex((-2766.98987435949), (-2766.98987435949));
      complex5.NaN.sin();
      complex5.add(2.242630017261011E-174);
      Complex complex6 = complex4.pow((-4254.710818956073));
      complex1.getField();
      Complex complex7 = complex6.divide(20.0);
      complex3.conjugate();
      Complex complex8 = complex3.sqrt1z();
      complex8.multiply((-20.0));
//      try { 
        complex7.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-774.89113));
      Complex complex1 = complex0.I.acos();
      complex0.getArgument();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex4.cos();
      complex7.atan();
      Complex complex8 = complex7.asin();
      complex7.cos();
      Complex complex9 = complex4.tanh();
      complex4.multiply((-1.5707963267948966));
      Complex complex10 = complex4.sinh();
      complex10.ZERO.negate();
      complex2.nthRoot(497);
      complex8.isInfinite();
      complex0.sqrt();
      Complex complex11 = complex6.divide(2085.77);
      Complex complex12 = complex0.exp();
      complex10.equals(complex3);
      complex11.conjugate();
      complex12.multiply(1518);
      Complex complex13 = complex3.pow(complex6);
      complex5.getArgument();
      complex13.isInfinite();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(1000.34);
      complex0.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.I.multiply(complex1);
      complex1.NaN.sin();
      Complex complex4 = complex1.I.negate();
      complex4.log();
      Complex complex5 = complex2.pow(complex0);
      complex4.atan();
      Complex complex6 = Complex.valueOf((-2.841347842666459E174), 0.0);
      complex6.asin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sqrt1z();
      complex2.getField();
      complex3.subtract(1000.34);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = Complex.ZERO;
      complex10.subtract(complex9);
      complex5.log();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-82.6));
      Complex complex1 = Complex.valueOf(3366.693009388, 2.85040095144011776E17);
      complex0.equals("/vHCbEa");
      Complex complex2 = complex1.sin();
      complex0.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex((-1496.132494), 1000.34);
      complex4.cosh();
      Complex complex5 = complex0.add(complex4);
      complex2.hashCode();
      complex5.createComplex(2115.4218, 1790.27);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex.valueOf((-82.6));
      Complex complex0 = Complex.valueOf((-82.6), (-82.6));
      Complex complex1 = complex0.subtract(516.27793772);
      complex1.ONE.sqrt1z();
      Complex complex2 = Complex.valueOf(2.0, 9.442671392695732E-9);
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ONE;
      complex2.readResolve();
      complex2.asin();
      complex1.getArgument();
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex5.ZERO.tanh();
      complex6.nthRoot(507);
      complex1.multiply(9.442671392695732E-9);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2836.4544757917447);
      Complex complex1 = complex0.exp();
      complex1.multiply(268);
      Complex complex2 = Complex.valueOf((-399.0), 2.0510193986749737E-191);
      complex0.nthRoot(268);
      complex0.equals("/vHCbEa");
      complex2.sin();
      Complex complex3 = complex1.cosh();
      complex1.hashCode();
      complex3.nthRoot(268);
      Complex complex4 = complex2.sinh();
      Complex complex5 = Complex.INF;
      complex5.tan();
      complex1.divide(9.374107380693745E10);
      Complex complex6 = Complex.ZERO;
      complex4.add(complex6);
      complex1.conjugate();
      complex2.sqrt();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.divide((-643.1340138275));
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ZERO;
      complex3.equals(complex4);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.cosh();
      complex2.hashCode();
      complex1.nthRoot(1348);
      complex1.sinh();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.divide(1.4409851026316708E-8);
      complex7.add(complex2);
      complex6.conjugate();
      complex5.sqrt();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.add((-20.0));
      complex0.asin();
      Complex complex3 = complex1.subtract((-20.0));
      complex3.divide(complex2);
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf(156.4623365, (-20.0));
      Complex complex6 = complex5.add((-3147.56602));
      Complex complex7 = complex0.multiply(0.006392659903298181);
      complex4.multiply(2816);
      Complex complex8 = complex4.subtract(complex6);
      complex3.negate();
      Complex.valueOf((-3147.56602), 0.006392659903298181);
      complex8.abs();
      Complex complex9 = complex5.add(2678.987955793252);
      Complex complex10 = complex7.divide((-3147.56602));
      complex9.negate();
      complex0.acos();
      complex10.sqrt();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-78.2179));
      complex0.INF.toString();
      Complex complex1 = complex0.divide((-643.1340138275));
      Complex complex2 = complex0.sin();
      Complex complex3 = new Complex(399.0, (-359.8820052344));
      complex1.divide(complex3);
      Complex complex4 = complex3.negate();
      complex3.toString();
      complex4.getArgument();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.multiply(complex2);
      complex1.pow(complex6);
      Complex.valueOf(0.0, (-359.8820052344));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-78.2179));
      complex0.INF.toString();
      Complex complex1 = complex0.add((-78.2179));
      Complex complex2 = complex0.asin();
      complex2.subtract(156.4623365);
      complex1.ZERO.acos();
      complex0.INF.add((-78.2179));
      complex0.ONE.multiply((double) (-1));
      complex1.negate();
      complex0.multiply(complex2);
      Complex.valueOf((double) (-1), (-78.2179));
      Complex.valueOf((-78.2179), 156.4623365);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.getReal();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
      Complex complex1 = complex0.cosh();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex1.subtract(complex2);
      complex3.ONE.getField();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.divide((-643.1340138275));
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.divide(complex2);
      complex4.NaN.negate();
      complex0.toString();
      complex0.getArgument();
      complex0.divide(complex1);
      Complex complex5 = complex0.multiply(complex3);
      complex5.pow(complex2);
      Complex.valueOf(0.0, (-643.1340138275));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex3.NaN.pow((-20.0));
      complex1.ZERO.readResolve();
      complex1.pow(0.0);
      complex1.INF.getArgument();
      Complex complex5 = complex0.add(complex1);
      complex5.nthRoot(2766);
      complex5.INF.negate();
      complex5.multiply(1.0);
      complex1.negate();
      complex0.sqrt1z();
      complex1.pow((-20.0));
      complex2.multiply((-20.0));
      complex3.divide(complex4);
      complex1.getField();
      complex0.divide(478.46);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(1000.34);
      complex0.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sinh();
      complex2.I.multiply(complex1);
      complex1.NaN.sin();
      Complex complex3 = complex1.I.negate();
      complex3.INF.getArgument();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex2.cos();
      complex8.ZERO.atan();
      complex2.ZERO.asin();
      Complex complex9 = complex3.cos();
      complex9.I.tanh();
      complex5.multiply(1000.34);
      complex4.sinh();
      complex0.nthRoot(238);
      complex4.isInfinite();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex10.divide(1000.34);
      complex8.INF.exp();
      complex6.equals("");
      Complex complex12 = complex7.conjugate();
      complex12.ONE.multiply(238);
      complex11.pow(complex8);
      complex2.getArgument();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((-471.2658440394088));
      Complex complex2 = complex1.ZERO.divide(1179.7712903);
      Complex complex3 = complex1.tan();
      complex3.isInfinite();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.I.pow(complex4);
      complex5.I.multiply(complex3);
      complex4.NaN.sinh();
      Complex complex6 = complex3.sqrt();
      complex2.tan();
      complex3.ZERO.readResolve();
      Complex complex7 = complex6.add(complex1);
      Complex complex8 = complex7.divide(complex2);
      Complex complex9 = complex0.subtract(complex6);
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.ONE;
      complex6.ONE.add(complex4);
      complex1.ZERO.multiply(complex11);
      complex9.subtract(complex10);
      Complex complex12 = complex2.conjugate();
      complex8.toString();
      Complex complex13 = complex8.subtract((-471.2658440394088));
      complex13.INF.atan();
      complex10.acos();
      Complex complex14 = new Complex((-471.2658440394088));
      complex11.ZERO.divide(complex14);
//      try { 
        complex12.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = (-364.2298);
      Complex complex0 = Complex.valueOf((-364.2298), (-364.2298));
      complex0.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.atan();
      complex2.INF.createComplex((-364.2298), (-364.2298));
      complex2.INF.atan();
      complex1.ZERO.getArgument();
      Complex complex3 = complex1.sinh();
      complex3.asin();
      complex1.isInfinite();
      // Undeclared exception!
      complex3.nthRoot(5401);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.pow(Double.POSITIVE_INFINITY);
      complex0.ZERO.reciprocal();
      complex1.NaN.exp();
      Complex complex2 = complex0.reciprocal();
      complex0.cosh();
      Complex complex3 = complex2.NaN.conjugate();
      complex0.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex3.ONE.reciprocal();
      complex4.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf((-4555.03313243002), (-4555.03313243002));
      Complex complex5 = complex3.ONE.add(complex1);
      complex5.NaN.createComplex((-503.11), 1993.42187);
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(4542.6573);
      complex0.ONE.getField();
      Complex complex1 = complex0.multiply(4542.6573);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.cosh();
      complex1.NaN.toString();
      Complex complex4 = complex3.I.pow(complex1);
      complex1.isInfinite();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.multiply(complex5);
      complex6.multiply(complex1);
      Complex complex7 = complex4.I.tanh();
      Complex.valueOf(4542.6573);
      Complex complex8 = complex5.sin();
      complex6.ONE.sqrt();
      complex1.NaN.abs();
      complex3.NaN.toString();
      Complex complex9 = Complex.valueOf(1.0, 0.0);
      Complex complex10 = complex5.sin();
      Complex complex11 = complex10.tan();
      complex6.abs();
      complex4.getImaginary();
      complex1.readResolve();
      complex8.multiply((-0.8565203444334654));
      complex2.nthRoot(37);
      complex5.NaN.add(complex7);
      complex11.multiply(437.00005386);
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1339.258450581);
      complex0.NaN.toString();
      complex0.INF.hashCode();
      Complex complex1 = complex0.ONE.exp();
      complex0.readResolve();
      Complex complex2 = complex0.log();
      complex1.isNaN();
      complex0.hashCode();
      complex0.I.multiply(0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ONE.pow(complex0);
      complex4.I.abs();
      Complex complex5 = complex3.NaN.multiply(299);
      Complex complex6 = complex3.acos();
      complex6.conjugate();
      complex2.isInfinite();
      complex6.tan();
      Complex complex7 = Complex.valueOf((-1418.90091688665), (double) 0);
      complex7.I.abs();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 160.34059789232;
      Complex complex0 = new Complex(160.34059789232);
      Complex complex1 = complex0.cos();
      complex1.NaN.log();
      int int0 = 1114;
      Complex complex2 = complex0.ONE.multiply((-1616.9995559614));
      complex2.NaN.exp();
//      try { 
        complex0.NaN.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-78.2179));
      complex0.INF.toString();
      Complex complex1 = complex0.add((-78.2179));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(156.4623365);
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.ZERO.acos();
      complex4.INF.add((-78.2179));
      complex0.ONE.multiply((double) 1);
      Complex complex6 = complex4.ZERO.multiply(1);
      complex6.ONE.subtract(complex1);
      Complex complex7 = complex1.negate();
      Complex.valueOf((-78.2179), 0.0);
      complex5.abs();
      complex5.add(1.5707963267948966);
      complex3.divide((-78.2179));
      complex0.negate();
      complex7.acos();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-238.26));
      Complex complex2 = complex1.I.tanh();
      complex0.isInfinite();
      Complex complex3 = Complex.valueOf((-238.26), (-238.26));
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = Complex.valueOf((-238.26), (-238.26));
      Complex complex6 = complex3.reciprocal();
      complex3.I.multiply((-238.26));
      Complex complex7 = complex6.I.multiply(complex1);
      Complex complex8 = complex6.divide(6.283185307179586);
      Complex complex9 = complex8.NaN.sin();
      Complex.valueOf(0.5489565134048462, (-238.26));
      complex9.I.createComplex(0.0, Double.NaN);
      complex0.equals(complex3);
      Complex complex10 = complex3.asin();
      complex1.toString();
      complex8.ZERO.sqrt1z();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex11.I.cosh();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex8.sin();
      complex14.ZERO.readResolve();
      Complex.valueOf(6.283185307179586, 0.0);
      complex5.toString();
      Complex complex15 = complex7.asin();
      Complex.valueOf(0.0);
      complex1.exp();
      complex2.tan();
      complex15.abs();
      complex4.subtract(85.49139156);
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.divide((-6.284125161007433E-8));
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = Complex.valueOf((-1747.2552), (-1909.2007088));
      complex4.I.tan();
      complex4.I.hashCode();
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex0.add((-2026.982984478));
      Complex complex7 = complex6.I.conjugate();
      complex0.readResolve();
      complex3.divide(64.0343694);
      Complex complex8 = complex7.atan();
      complex8.conjugate();
      complex5.multiply(37);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-774.89113));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.INF.atan();
      complex0.INF.asin();
      Complex complex5 = complex0.sqrt1z();
      complex0.ONE.getField();
      complex5.ZERO.subtract(0.0);
      Complex complex6 = complex4.sqrt1z();
      complex6.subtract(complex3);
      complex4.log();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      complex0.ZERO.divide(complex1);
      complex1.ONE.add((-4.611893838830296E-9));
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.I.negate();
      Complex complex3 = complex1.NaN.multiply(1);
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex1.INF.sqrt();
      complex0.asin();
      complex0.tan();
      complex1.getArgument();
      Complex complex6 = complex4.sqrt1z();
      complex6.I.add(complex4);
      Complex complex7 = complex6.ONE.add(0.0);
      complex7.ONE.divide(complex0);
      Complex complex8 = complex5.multiply(1);
      complex3.getImaginary();
      complex8.negate();
      complex8.getArgument();
      Complex.valueOf(Double.NaN);
      Complex complex9 = complex4.sin();
      complex9.cosh();
      Complex.valueOf(1553.99225, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      complex1.I.cos();
      complex1.ZERO.abs();
      Complex complex2 = complex0.createComplex(1282.86581983797, 1282.86581983797);
      complex2.NaN.sqrt();
      complex2.ONE.readResolve();
      complex0.toString();
      int int0 = (-1916);
//      try { 
        complex0.nthRoot((-1916));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,916
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.ZERO;
      complex2.ZERO.cos();
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex0.multiply(complex2);
      complex4.ZERO.sqrt1z();
      Complex.valueOf((-412.91054));
      Complex complex5 = complex3.conjugate();
      complex5.add((-412.91054));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.add(211.26589670692);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(959.055177, 561.561315);
      Complex complex1 = complex0.INF.sinh();
      complex0.ZERO.createComplex(3281.0, 844.0367365);
      Complex complex2 = complex1.pow(561.561315);
      complex0.isNaN();
      complex0.tanh();
      complex2.readResolve();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1.889488909834863E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.subtract((-1.889488909834863E-8));
      complex2.I.multiply((-1.889488909834863E-8));
      Complex complex3 = complex0.I.sinh();
      complex3.ZERO.tanh();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.exp();
      complex5.I.getField();
      Complex complex6 = complex0.add(complex1);
      complex6.NaN.atan();
      complex6.INF.readResolve();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex0.multiply(0);
      Complex complex9 = complex1.multiply(2348);
      complex9.readResolve();
      Complex complex10 = complex7.asin();
      complex10.NaN.reciprocal();
      complex0.sqrt();
      complex5.nthRoot(2348);
      complex8.divide(complex4);
      complex2.multiply(2348);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2836.4544757917447);
      Complex complex1 = Complex.INF;
      complex0.ONE.subtract(2836.4544757917447);
      Complex.valueOf(0.0, 9.442671392695732E-9);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.subtract(complex1);
      complex3.ONE.readResolve();
      complex0.asin();
      complex3.getArgument();
      Complex complex4 = complex1.divide(complex2);
      complex4.multiply(1958.4003227);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.acos();
      complex1.I.readResolve();
      Complex complex3 = complex0.add(477.36098094574766);
      Complex complex4 = Complex.INF;
      complex4.INF.log();
      complex1.multiply(complex4);
      complex2.ZERO.asin();
      Complex complex5 = complex1.ONE.multiply(0);
      Complex complex6 = complex1.add(477.36098094574766);
      Complex complex7 = complex2.tanh();
      complex7.I.getArgument();
      Complex complex8 = complex1.divide(complex2);
      complex8.ONE.cosh();
      complex2.add(complex7);
      complex5.hashCode();
      complex3.createComplex(1703.0, 0);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-82.6));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.multiply(268);
      Complex complex3 = Complex.valueOf(3366.693009388, 2.85040095144011776E17);
      complex1.nthRoot(268);
      complex1.equals("/vHCbEa");
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.cosh();
      complex0.ZERO.hashCode();
      complex5.I.nthRoot(268);
      Complex complex6 = complex3.sinh();
      complex6.tan();
      Complex complex7 = complex1.divide(1.4409851026316708E-8);
      complex7.ONE.add(complex0);
      complex0.conjugate();
      complex2.sqrt();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.ONE;
      complex0.I.divide(Double.NaN);
      complex0.INF.add(complex1);
      Complex complex2 = complex1.ONE.asin();
      complex2.ONE.cosh();
      Complex complex3 = complex0.atan();
      complex3.ONE.cos();
      Complex complex4 = complex0.add(Double.NaN);
      Complex complex5 = complex4.pow(complex1);
      complex3.readResolve();
//      try { 
        complex5.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      complex1.readResolve();
      Complex complex2 = complex0.divide(complex1);
      complex2.multiply((-1462));
      Complex complex3 = Complex.ONE;
      complex3.INF.readResolve();
      Complex complex4 = complex0.INF.add(complex3);
      complex4.NaN.divide(complex3);
      Complex complex5 = complex4.ONE.pow(complex3);
      Complex complex6 = complex0.NaN.multiply(1275);
      Complex.valueOf((double) 1275);
      Complex complex7 = complex0.atan();
      complex7.NaN.conjugate();
      Complex.valueOf((double) 1275);
      Complex.valueOf((double) 1275, (-1275.98));
      Complex complex8 = complex6.sinh();
      complex8.I.atan();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.multiply((-8.663710700190489E-10));
      Complex.valueOf(2.546119213104248, (-8.663710700190489E-10));
      Complex complex1 = complex0.add(1450.8033619833);
      complex1.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.acos();
      complex2.INF.add(2.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.acos();
      complex4.NaN.getArgument();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.exp();
      complex5.getImaginary();
      Complex complex8 = complex7.divide(complex0);
      complex8.getArgument();
      complex3.log();
      complex3.hashCode();
      int int0 = (-1498);
//      try { 
        complex6.nthRoot((-1498));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,498
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      complex1.ONE.pow(0.0);
      complex0.ZERO.divide(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.sqrt();
      complex2.readResolve();
      Complex complex3 = complex0.conjugate();
      List<Complex> list0 = complex2.nthRoot(1923);
      assertEquals(1923, list0.size());
      assertTrue(list0.contains(complex0));
      
      complex0.equals(complex1);
      complex1.INF.hashCode();
      complex0.isInfinite();
      complex1.toString();
      complex1.subtract((double) 1923);
      complex1.toString();
      complex3.NaN.negate();
      Complex complex4 = complex2.multiply(1923);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex4.NaN.sin();
      Complex complex7 = complex6.NaN.asin();
      complex7.I.readResolve();
      Complex complex8 = Complex.valueOf(2703.15383);
      Complex complex9 = complex2.subtract(complex3);
      Complex complex10 = complex9.atan();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex8.add(complex3);
      Complex complex12 = (Complex)complex11.ZERO.readResolve();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      complex2.multiply(1923);
      Complex complex13 = complex4.reciprocal();
      complex13.ZERO.abs();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(5.200208008320333E-4, complex13.getReal(), 0.01);
      
      Complex complex14 = complex5.divide(complex0);
      assertSame(complex14, complex6);
      assertTrue(complex1.equals((Object)complex9));
      
      Complex complex15 = complex3.pow(complex8);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(16.2);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0617283950617284, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      complex1.ZERO.cosh();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.cos();
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1271.86886, 1271.86886);
      Complex complex1 = Complex.valueOf(1271.86886);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(1617650.3970376998, complex2.getImaginary(), 0.01);
      assertEquals(1617650.3970376998, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.createComplex(1271.86886, (-1244.0));
      Complex complex4 = complex3.pow((-1244.0));
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.sin();
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      
      Complex complex6 = complex3.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.NaN.sinh();
      assertTrue(complex8.equals((Object)complex6));
      assertEquals(0.45837389941806533, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex9 = Complex.valueOf(1.0);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.sin();
      complex1.NaN.reciprocal();
      Complex complex3 = complex0.divide(complex2);
      complex3.multiply(775);
      complex0.I.log();
      complex1.isNaN();
      Complex complex4 = complex2.cos();
//      try { 
        complex4.nthRoot((-2707));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,707
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.15610191226005554);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex4.NaN.cosh();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex6 = complex3.subtract(complex2);
      Complex complex7 = complex0.ZERO.add((-2766.98987435949));
      assertEquals((-2766.98987435949), complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.NaN.pow(0.15610191226005554);
      complex2.getField();
      Complex complex9 = complex3.divide(0.15610191226005554);
      Complex complex10 = complex9.conjugate();
      assertEquals((-6.898558576363683), complex10.getReal(), 0.01);
      assertEquals((-7.112167996863471E-16), complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex0.I.sqrt1z();
      complex11.INF.getField();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(1.4142135623730951, complex11.getReal(), 0.01);
      
      Complex complex12 = complex1.multiply((-1271.69190692));
      Complex complex13 = complex8.pow(complex12);
      assertSame(complex13, complex5);
      
      complex12.log();
      assertEquals((-1271.69190692), complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3556.63933419882, 3556.63933419882);
      Complex complex1 = complex0.add(3556.63933419882);
      assertFalse(complex1.isInfinite());
      assertEquals(7113.27866839764, complex1.getReal(), 0.01);
      assertEquals(3556.63933419882, complex1.getImaginary(), 0.01);
      assertEquals(3556.63933419882, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1048.2854925622), 0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ZERO.atan();
      complex1.ZERO.getField();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex2.ZERO.cos();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = Complex.INF;
      complex5.I.asin();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.I.multiply((-1309));
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex7.getReal(), 0.01);
      
      complex3.ONE.createComplex((-1048.2854925622), 0.0);
      Complex complex9 = complex6.ONE.asin();
      complex9.INF.sqrt();
      Complex complex10 = complex0.subtract(complex5);
      complex10.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getImaginary(), 0.01);
      
      complex3.readResolve();
      Complex complex11 = complex2.exp();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex1.readResolve();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex12.I.tan();
      complex13.NaN.createComplex(0.0, (-1048.2854925622));
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex12.multiply(754.9325844399931);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = Complex.valueOf((-1048.2854925622));
      Complex complex16 = Complex.NaN;
      Complex complex17 = complex15.INF.multiply(complex16);
      assertFalse(complex17.equals((Object)complex7));
      
      complex2.getField();
      Complex complex18 = complex9.sqrt1z();
      assertEquals(1.2113633229846195, complex18.getImaginary(), 0.01);
      
      complex6.cosh();
      Complex complex19 = complex3.multiply((-20.0));
      assertEquals((-15.231883119115297), complex19.getReal(), 0.01);
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      int int0 = (-962);
//      try { 
        complex0.ZERO.nthRoot((-962));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -962
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      assertEquals(1.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.ONE.cos();
      assertEquals(0.5403023058681398, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.reciprocal();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex3, complex6);
      assertSame(complex9, complex5);
      assertFalse(complex9.equals((Object)complex4));
      assertSame(complex9, complex2);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }
}
