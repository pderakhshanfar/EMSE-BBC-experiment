/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:59:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3502.57), 4.0430160253378594E-275);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(2.218265110516721E156);
      Complex complex3 = complex0.NaN.subtract((-1264.8441109867156));
      Complex complex4 = complex3.ONE.multiply((-987.0));
      complex4.INF.exp();
      complex0.I.toString();
      Complex complex5 = complex0.asin();
      complex1.multiply(complex0);
      Complex complex6 = complex1.pow((-3502.57));
      complex6.ONE.add((-1.0));
      complex6.ZERO.add((-2148.2432942014852));
      complex2.ONE.acos();
      complex6.abs();
      Complex complex7 = complex0.atan();
      complex0.add((-3502.57));
      complex5.add(complex7);
      complex2.sqrt1z();
      Complex complex8 = Complex.valueOf((-604.668), 1075641.7700710725);
      complex8.multiply(3184);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.9655680656433105, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.tanh();
      Complex complex2 = Complex.valueOf(20.0);
      complex2.tanh();
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.valueOf((-1417.2644062973), 1773.0);
      complex4.tan();
      complex0.multiply(complex3);
      complex2.cos();
      complex1.nthRoot(242);
      Complex complex5 = new Complex((-1417.2644062973), 5076.092845);
      complex0.nthRoot(242);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-44.999999989857976));
      complex0.nthRoot(1049);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.acos();
      complex0.divide(complex1);
      complex2.negate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1670);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.atan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.5343120819745468E95), (-1.5343120819745468E95));
      Complex complex2 = complex1.tan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(2.607863980523042E7, Double.POSITIVE_INFINITY);
      complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      complex1.abs();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(2.60786398E7, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(8.306111510463843E-162, 0.6291294097900391);
      Complex complex2 = complex1.ZERO.conjugate();
      complex0.multiply(complex1);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2.6078642E7, Double.POSITIVE_INFINITY);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-856.62592), (-856.62592));
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.ONE.toString();
      complex0.tanh();
      Complex complex3 = Complex.valueOf((-4169.812416817575), (-856.62592));
      Complex complex4 = complex0.sqrt();
      complex3.ZERO.pow(1275.0);
      complex4.ZERO.readResolve();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex4.log();
      complex6.I.subtract(Double.NaN);
      complex3.reciprocal();
      complex5.log();
      Complex complex7 = Complex.ONE;
      complex1.createComplex(1.0, 1494.7979045);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 3629);
      Complex complex1 = complex0.subtract((double) 3629);
//      try { 
        complex1.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(2.6078642E7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.multiply((-774.75982623615));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3562.5675041422646, 3562.5675041422646);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      complex1.tanh();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(2.6078642E7, Double.POSITIVE_INFINITY);
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(2.6078642E7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.tan();
      complex1.abs();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2.6078642E7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(2.6078642E7);
      Complex complex2 = complex1.pow(complex0);
      complex2.createComplex((-2647.003), 2.4200520515441895);
      complex2.multiply(1328);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(3.746454626411946E108, 3.746454626411946E108);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = Complex.ZERO;
      complex3.log();
      Complex complex4 = new Complex(0.10026945173740387, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-243.853), 3.5702693195009266E204);
      complex0.toString();
      Complex complex1 = complex0.subtract(3.5702693195009266E204);
      complex1.cosh();
      complex1.nthRoot(2929);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-254.7677743927));
      complex0.ZERO.abs();
      Complex complex1 = new Complex(6.283185307179586, 6.283185307179586);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      Complex complex1 = new Complex(1518.91, 6.791221208169753E11);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.divide(6.791221208169753E11);
      Complex complex4 = complex3.multiply(6.791221208169753E11);
      complex4.subtract(3935.566486573);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(21.343298860691082, 21.343298860691082);
      Complex complex1 = complex0.sinh();
      complex0.tan();
      Complex complex2 = complex0.ZERO.atan();
      complex1.I.cos();
      Complex complex3 = complex1.multiply((-1210.7179));
      complex3.acos();
      Complex complex4 = Complex.ZERO;
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(395.591, Double.NaN);
      complex0.abs();
      complex0.ONE.multiply(Double.NaN);
//      try { 
        complex0.nthRoot((-79));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -79
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.990650304449166E-10), (-6.990650304449166E-10));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.multiply(0.5707906976673784);
      complex2.ONE.cosh();
      complex2.NaN.readResolve();
      Complex complex3 = complex0.pow(complex1);
      complex1.atan();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.valueOf((-6.990650304449166E-10), 0.5707906976673784);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.NaN.multiply(complex0);
      Complex complex9 = complex6.ZERO.sin();
      Complex complex10 = complex6.createComplex((-1447.860365), 3630.0);
      complex10.ZERO.sin();
      complex0.reciprocal();
      complex4.readResolve();
      complex1.asin();
      Complex complex11 = new Complex((-2409.97988096));
      complex1.pow(complex8);
      complex3.pow(complex11);
      complex6.I.getField();
      Complex complex12 = complex11.I.log();
      complex12.ZERO.abs();
      complex12.getField();
      complex1.atan();
      complex6.reciprocal();
      complex6.add(complex10);
      Complex complex13 = complex11.sin();
      complex11.add(complex4);
      complex5.subtract(complex7);
      complex13.exp();
      complex8.cos();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-33.84862184124698));
      Complex complex1 = new Complex(2.0, (-1.4566110577298295E-7));
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = new Complex(1321.2, (-860.587));
      complex2.add(complex4);
      complex3.ZERO.hashCode();
      complex2.divide(complex1);
      Complex.valueOf((-730.033392));
      complex0.divide(Double.NaN);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(2085.6077888575, 2085.6077888575);
      Complex complex1 = complex0.ZERO.log();
      complex0.NaN.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex4.INF.cos();
      complex5.ZERO.sqrt1z();
      complex5.INF.pow(complex3);
      Complex complex6 = complex4.ONE.sin();
      complex6.ONE.atan();
      Complex complex7 = complex0.multiply((-2176));
      complex7.ZERO.getField();
      complex4.NaN.toString();
      complex0.tan();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.nthRoot(3611);
      Complex complex1 = complex0.ONE.exp();
      complex0.tan();
      Complex complex2 = Complex.valueOf((double) 3611, (double) 3611);
      Complex complex3 = complex2.acos();
      complex3.I.asin();
      Complex complex4 = complex0.reciprocal();
      Complex.valueOf((-2115.570984459));
      Complex complex5 = complex4.ONE.conjugate();
      complex5.I.sqrt();
      Complex complex6 = Complex.valueOf((-2405.8903782077));
      Complex.valueOf((double) 3611, (-2115.570984459));
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = Complex.valueOf((double) 3611, (-2522.9628641594));
      complex0.readResolve();
      Complex complex10 = complex2.multiply((-1512.385865440657));
      complex7.NaN.sin();
      complex10.I.sqrt();
      complex8.add(Double.NaN);
      complex10.readResolve();
      complex10.abs();
      Complex complex11 = complex9.sin();
      complex11.hashCode();
      complex10.multiply(3611);
      complex6.toString();
      complex7.asin();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.nthRoot(3638);
      complex0.I.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex2.nthRoot(3638);
      complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-3.141592653589793));
      complex0.ZERO.abs();
      complex0.nthRoot(3629);
      Complex complex1 = new Complex(Double.NaN);
      complex1.ONE.sqrt();
      complex0.add(complex1);
      complex0.multiply(3629);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply((-1157.3816));
      complex2.INF.cosh();
      complex1.ZERO.getField();
      complex2.ONE.toString();
      Complex complex3 = complex1.atan();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      complex0.I.pow(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.reciprocal();
      complex3.ZERO.add(complex0);
      complex1.multiply((-246));
      Complex complex4 = Complex.NaN;
//      try { 
        complex3.nthRoot((-246));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -246
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add(77.21609);
      Complex complex4 = complex3.log();
      complex4.INF.cos();
      complex1.reciprocal();
      Complex complex5 = Complex.valueOf(77.21609, Double.NaN);
      complex5.I.acos();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.671123308));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 2.862518609581133E-20);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.ONE.pow(1792.2420063203415);
      complex4.INF.getArgument();
      complex0.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(1792.2420063203415, 1792.2420063203415);
      complex6.cos();
      complex3.abs();
      Complex complex7 = Complex.valueOf(Double.NaN, 3.961429477016909E-107);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-254.7677743927));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.INF;
      complex0.divide(complex2);
      Complex.valueOf((-3231.37));
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.asin();
      complex4.toString();
      complex6.sqrt1z();
      complex5.isInfinite();
      complex0.sqrt();
      complex1.NaN.multiply(1083);
      complex0.tan();
      complex4.asin();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex1.add(1.0);
      Complex.valueOf((-3.24981577480893E-27));
      Complex.valueOf(1046.78, 1.2027015686035156);
      Object object0 = new Object();
      complex8.isNaN();
      complex0.exp();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.acos();
      complex3.sqrt1z();
      Complex complex4 = Complex.valueOf((-20.0), (-20.0));
      complex1.toString();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex4.tan();
      complex4.NaN.getField();
      Complex complex9 = new Complex((-1.0));
      complex8.nthRoot(1474);
      complex9.INF.pow((-20.0));
      complex2.reciprocal();
      complex9.INF.createComplex((-20.0), (-1433.63606337));
      complex9.reciprocal();
      Complex.valueOf((-20.0), (-1443.0781));
      complex8.divide(complex9);
      complex2.abs();
      complex7.asin();
      Complex.valueOf(983.0);
      Complex.valueOf(4691.0);
      complex7.multiply(1474);
      complex5.nthRoot(1474);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.INF.tanh();
      complex0.getArgument();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.NaN.exp();
      complex4.getArgument();
      complex2.getField();
      complex3.ONE.pow(0.7853981633974483);
      Complex complex5 = complex1.conjugate();
      complex2.toString();
      complex3.readResolve();
      complex4.sqrt1z();
      Complex complex6 = complex5.createComplex(Double.NaN, 0.7853981633974483);
      complex6.INF.sin();
      Complex complex7 = complex5.subtract(complex4);
      complex1.exp();
      Complex complex8 = complex2.log();
      Complex complex9 = complex8.sqrt();
      complex3.NaN.sqrt1z();
      complex9.tan();
      complex9.reciprocal();
      Complex complex10 = complex5.pow(complex1);
      complex10.sinh();
      complex4.getField();
      complex3.tanh();
      Complex complex11 = complex4.reciprocal();
      complex11.ZERO.multiply(complex8);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-856.62592), (-856.62592));
      complex1.I.subtract(complex0);
      complex1.ONE.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(50.2345, (-534.5681072642942));
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = new Complex((-4169.812416817575), 1.2295543418990473);
      Complex complex6 = complex5.createComplex((-534.5681072642942), (-4169.812416817575));
      Complex complex7 = complex3.cos();
      complex7.reciprocal();
      complex1.getField();
      complex1.sqrt();
      complex1.divide((-534.5681072642942));
      complex4.negate();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, 50.2345);
      complex8.negate();
      Object object0 = new Object();
      Object object1 = new Object();
      complex2.equals(object1);
      complex1.conjugate();
      complex6.toString();
      complex7.multiply(727);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-3.24981577480893E-27));
      Complex complex1 = Complex.valueOf(2.862518609581133E-20, 0.9999898067644369);
      Complex complex2 = complex1.subtract(complex0);
      complex0.cos();
      complex0.equals("4([-h\"OW-l");
      Complex complex3 = complex2.pow(0.0);
      complex3.getArgument();
      complex2.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.add(complex4);
      complex1.pow(0.0);
      complex0.getField();
      Complex.valueOf(1.2953605651855469);
      complex0.readResolve();
      complex4.readResolve();
      complex2.equals(complex5);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.671123308));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(3.141592653589793, Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.cos();
      complex2.equals(complex3);
      complex0.pow(1773.3009053051);
      complex1.getArgument();
      Complex complex4 = Complex.NaN;
      complex4.readResolve();
      Complex complex5 = Complex.ZERO;
      complex4.add(complex5);
      Complex complex6 = complex2.pow(1773.3009053051);
      complex0.getField();
      Complex.valueOf(3427.78909823325);
      complex1.readResolve();
      complex6.readResolve();
      Complex complex7 = Complex.INF;
      complex7.equals("");
      Complex complex8 = Complex.ONE;
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.671123308));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 2.862518609581133E-20);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.valueOf(0.8384721930338807, (-675.0));
      Complex complex4 = complex0.sqrt();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.multiply(complex4);
      complex5.sin();
      Complex complex7 = complex5.log();
      complex4.hashCode();
      complex2.readResolve();
      complex7.asin();
      complex4.abs();
      complex6.getImaginary();
      Complex complex8 = complex6.divide(0.8384721930338807);
      complex8.isInfinite();
      complex8.I.negate();
      complex0.abs();
      complex1.negate();
      complex4.log();
      Complex complex9 = complex5.conjugate();
      complex9.atan();
      complex6.multiply(complex0);
      complex8.sqrt();
      complex2.getReal();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex2.cos();
      complex4.equals(complex1);
      complex0.pow((-4504.0));
      complex4.getArgument();
      complex3.readResolve();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(5.906102862953403E-195, 2490.30391982);
      Complex complex8 = Complex.valueOf(0.011801309128026226);
      Complex complex9 = complex7.add(complex8);
      Complex complex10 = complex1.pow(0.011801309128026226);
      complex0.getField();
      Complex.valueOf(0.0);
      complex10.readResolve();
      complex9.readResolve();
      complex5.equals(complex10);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.671123308));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 2.862518609581133E-20);
      Complex complex2 = Complex.NaN;
      complex0.subtract(complex2);
      Complex complex3 = complex2.cos();
      complex0.equals((Object) null);
      Complex complex4 = complex2.pow(3.141592653589793);
      complex3.getArgument();
      complex1.readResolve();
      Complex complex5 = Complex.ZERO;
      complex2.add(complex4);
      Complex complex6 = complex5.pow((-1.638756156057952E79));
      complex0.getField();
      Complex complex7 = Complex.valueOf(1773.3009053051);
      complex2.readResolve();
      complex4.readResolve();
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.671123308));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 2.862518609581133E-20);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.valueOf(2052.384377183781, 3838.4046);
      complex0.equals(complex4);
      Complex complex5 = complex0.pow((-2418.0));
      complex5.getArgument();
      complex4.readResolve();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = complex2.pow(1.0419594359065132E-248);
      complex2.getField();
      Complex.valueOf(0.0);
      complex3.readResolve();
      complex8.readResolve();
      Object object0 = new Object();
      complex7.equals(object0);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-3.141592653589793));
      Complex complex1 = complex0.pow((-3.141592653589793));
      Complex complex2 = complex1.negate();
      complex0.acos();
      Complex complex3 = Complex.valueOf(0.9127689912020085, (-4504.0));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex2.log();
      complex0.hashCode();
      complex5.readResolve();
      Complex complex9 = complex4.asin();
      complex8.abs();
      complex7.getImaginary();
      complex6.divide(0.9127689912020085);
      complex3.isInfinite();
      complex4.abs();
      complex1.negate();
      Complex complex10 = complex4.log();
      complex9.conjugate();
      complex4.atan();
      complex1.multiply(complex8);
      complex0.sqrt();
      complex0.getReal();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      complex0.abs();
      complex0.nthRoot(3651);
      Complex complex2 = complex1.cosh();
      complex2.divide((double) 3651);
      Complex complex3 = complex1.negate();
      complex1.isNaN();
      Complex.valueOf((-2649.86319604));
      Complex complex4 = complex0.divide((-385.692554298556));
      complex3.getField();
      complex4.tanh();
      complex1.pow(0.4084761543836649);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1625.08046060292), 5.221469250951617E173);
      complex0.add(0.0);
      Complex complex1 = Complex.valueOf((-1625.08046060292));
      Complex complex2 = new Complex((-4157.813773));
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1402.0), (-0.9999999014099218));
      Complex complex1 = complex0.I.conjugate();
      complex1.INF.pow((-4.41909071122557E-8));
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.valueOf((-1402.0), (-4.41909071122557E-8));
      Complex complex5 = complex0.NaN.multiply(complex4);
      Complex complex6 = complex3.ZERO.exp();
      Complex complex7 = complex0.ZERO.cos();
      Complex complex8 = complex0.sinh();
      complex8.nthRoot(7);
      complex0.atan();
      Complex complex9 = complex1.conjugate();
      complex9.I.cosh();
      complex1.tanh();
      Complex complex10 = complex0.subtract(complex1);
      complex7.reciprocal();
      complex0.multiply((-536));
      complex6.tan();
      complex5.abs();
      Complex complex11 = complex10.add(complex5);
      complex11.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = (-3.141592653589793);
      Complex complex0 = new Complex((-3.141592653589793));
      complex0.ZERO.abs();
      complex0.nthRoot(3651);
      Complex complex1 = complex0.cosh();
      // Undeclared exception!
      complex1.ZERO.nthRoot(3651);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-856.62592), (-856.62592));
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.ONE.toString();
      complex0.tanh();
      Complex complex3 = Complex.valueOf((-4169.812416817575), 50.2345);
      Complex complex4 = complex0.sqrt();
      complex0.atan();
      Complex complex5 = (Complex)complex4.ZERO.readResolve();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.add((-4169.812416817575));
      Complex complex8 = Complex.valueOf(50.2345, 0.0);
      Complex complex9 = complex8.exp();
      complex6.tan();
      complex3.asin();
      complex5.readResolve();
      complex9.sinh();
      complex7.multiply(1);
      complex1.pow(0.0);
      complex1.add(1.6438980102539062);
      Complex.valueOf((double) 1, 0.6327667236328125);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-2052.384377183781), (-2052.384377183781));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = Complex.valueOf((-1165.547336597864));
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex4.NaN.asin();
      complex6.toString();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = Complex.valueOf((-2052.384377183781), (-1860.3621));
      complex4.pow(complex8);
      complex3.createComplex(2.0, (-2052.384377183781));
      Complex complex9 = complex4.cos();
      complex2.reciprocal();
      complex9.getField();
      Complex complex10 = complex0.sqrt();
      complex8.divide((-2647.626457935));
      complex2.negate();
      Complex complex11 = complex5.negate();
      Object object0 = new Object();
      Complex complex12 = new Complex((-2052.384377183781), 2.0);
      complex12.equals(complex7);
      Complex complex13 = complex11.conjugate();
      complex10.toString();
      complex13.multiply(1);
      complex1.pow((-1165.547336597864));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-856.62592), (-856.62592));
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.ONE.toString();
      complex0.tanh();
      Complex complex3 = Complex.valueOf((-4169.812416817575), (-856.62592));
      Complex complex4 = complex0.sqrt();
      complex3.ZERO.pow(1275.0);
      complex4.ZERO.readResolve();
      Complex complex5 = complex2.negate();
      complex4.log();
      complex3.reciprocal();
      complex5.log();
      Complex complex6 = Complex.ONE;
      complex1.createComplex(1.0, 1494.7979045);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2806275683797178E-57);
      Complex complex1 = complex0.INF.subtract(1.2806275683797178E-57);
      complex0.INF.acos();
      Complex complex2 = complex0.createComplex(3282.0096, 1100.42);
      Complex complex3 = complex1.subtract(complex2);
      complex3.toString();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.valueOf(3282.0096, (-4169.812416817575));
      complex2.sqrt();
      complex5.atan();
      complex3.readResolve();
      Complex complex6 = complex4.negate();
      complex2.add(1100.42);
      Complex complex7 = complex6.log();
      complex7.reciprocal();
      complex2.log();
      Complex.valueOf(Double.NaN, 1.3883624076843262);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.671123308));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 2.862518609581133E-20);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.cos();
      complex0.equals("");
      Complex complex3 = complex0.ONE.pow(1773.3009053051);
      complex3.INF.getArgument();
      complex0.readResolve();
      Complex complex4 = Complex.ZERO;
      complex0.add(complex4);
      Complex complex5 = complex2.pow(20.0);
      complex4.I.getField();
      Complex.valueOf((-91.0));
      complex5.readResolve();
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-20.0));
      complex0.multiply(1);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.multiply((-1088));
      Complex complex4 = complex3.pow((-20.0));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.multiply(complex5);
      complex4.sinh();
      complex0.add((-20.0));
      Complex complex7 = complex6.exp();
      complex3.tan();
      Complex complex8 = complex5.asin();
      complex2.readResolve();
      complex0.sinh();
      complex8.multiply((-1088));
      complex0.pow((-20.0));
      complex7.add(3225.0);
      complex5.abs();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2806275683797178E-57);
      Complex complex1 = complex0.INF.subtract(1.2806275683797178E-57);
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.divide((-3282.0096));
      Complex complex5 = Complex.valueOf(1.2806275683797178E-57);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex7.INF.pow((-1427.92991));
      Complex complex9 = complex8.NaN.add(complex3);
      complex8.NaN.log();
      Complex complex10 = complex3.I.tan();
      complex9.add((-1427.92991));
      complex7.ONE.toString();
      complex5.abs();
      complex6.getImaginary();
      complex5.abs();
      Complex complex11 = Complex.valueOf(206.96, (-303.1292));
      complex4.add(1.2806275683797178E-57);
      Complex complex12 = complex11.acos();
      Complex.valueOf(1.2806275683797178E-57, (-3282.0096));
      complex12.equals((Object) null);
      complex1.sinh();
      Complex complex13 = Complex.INF;
      complex13.multiply((-303.1292));
      complex10.add(complex5);
      complex1.getImaginary();
      Complex complex14 = complex3.negate();
      complex9.negate();
      Complex.valueOf(0.7071067811865476);
      complex14.pow(complex12);
      complex8.sinh();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2052.384377183781), (-254.7677743927));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ZERO.cos();
      complex2.INF.divide(complex0);
      Complex complex3 = Complex.valueOf((-1165.547336597864));
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex3.NaN.asin();
      complex5.toString();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = Complex.valueOf((-1165.547336597864));
      complex3.I.divide(complex7);
      complex6.isInfinite();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.asin();
      Complex complex11 = new Complex((-2052.384377183781), (-1165.547336597864));
      complex6.I.cos();
      complex11.readResolve();
      complex4.readResolve();
      complex10.negate();
      Complex complex12 = complex4.add(2.0);
      complex4.log();
      complex6.reciprocal();
      complex12.log();
      Complex.valueOf(2.0, (-254.7677743927));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-856.62592), (-856.62592));
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.ONE.toString();
      Complex complex3 = complex0.tanh();
      Complex.valueOf((-4169.812416817575), 50.2345);
      Complex complex4 = complex0.sqrt();
      complex0.atan();
      Complex complex5 = complex2.add((-856.62592));
      complex4.divide(2365.629);
      complex0.getArgument();
      Complex complex6 = Complex.valueOf(1568.97749617, Double.NaN);
      complex6.equals(complex1);
      Complex complex7 = complex5.sinh();
      complex6.multiply(783.73099088);
      Complex complex8 = complex4.add(complex5);
      complex7.getImaginary();
      complex8.negate();
      Complex complex9 = complex3.negate();
      Complex.valueOf((-1136.233537623));
      complex3.pow(complex2);
      Complex complex10 = new Complex(1568.97749617);
      complex10.sinh();
      complex10.getField();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.getArgument();
      Complex complex2 = new Complex(0.0, 0.0);
      complex2.isInfinite();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.tan();
      complex3.asin();
      Complex complex5 = new Complex(1.5707963267948966, 0.0);
      Complex complex6 = new Complex(7.681105810206645E-4, 0.0);
      complex6.readResolve();
      Complex complex7 = complex1.add(0.0011250367708157683);
      Complex complex8 = complex0.divide(4.56637077363333);
      complex7.getArgument();
      Object object0 = new Object();
      complex8.equals(object0);
      Complex complex9 = complex2.sinh();
      complex4.multiply(Double.NaN);
      complex9.add(complex5);
      Complex complex10 = Complex.ONE;
      complex10.getImaginary();
      complex9.negate();
      complex2.negate();
      Complex.valueOf(1705.650718500035);
      complex7.pow(complex9);
      complex9.sinh();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1924.7164832991925));
      complex0.abs();
      complex0.nthRoot(352);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.divide((-1924.7164832991925));
      complex2.negate();
      complex3.isNaN();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.divide((-20.0));
      complex4.getField();
      complex1.tanh();
      Complex complex6 = complex2.divide((-1225.945499731));
      complex5.getArgument();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(20.0, (-1598.6656));
      Complex complex2 = complex1.subtract(complex0);
      complex2.toString();
      complex0.tanh();
      Complex.valueOf((-721.97), 290.0482);
      Complex complex3 = Complex.valueOf((-4169.812416817575));
      complex3.sqrt();
      complex0.atan();
      complex2.readResolve();
      complex1.negate();
      Complex complex4 = complex2.add((-721.97));
      Complex complex5 = Complex.valueOf((-1723.4426558), 924.99);
      complex5.log();
      complex4.reciprocal();
      complex2.log();
      Complex.valueOf((-2978.88), 20.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.I.divide(complex1);
      complex2.INF.getField();
      complex0.ZERO.asin();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.INF.tanh();
      complex0.nthRoot(408);
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex2.multiply(complex1);
      complex6.NaN.asin();
      complex1.I.asin();
      complex4.readResolve();
      complex1.getArgument();
      complex3.isInfinite();
      Complex complex7 = complex5.conjugate();
//      try { 
        complex7.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1.2479464696643861E-47);
      complex2.INF.abs();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex4.ONE.acos();
      complex5.ZERO.getArgument();
      complex5.I.subtract(complex2);
      Complex complex6 = complex3.I.createComplex(1.2479464696643861E-47, Double.POSITIVE_INFINITY);
      complex6.ONE.pow(759.147098581949);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = Complex.valueOf((-1.0));
      Complex complex10 = complex9.NaN.add((-422.0));
      complex10.abs();
      complex8.I.abs();
      Complex complex11 = complex7.ZERO.tan();
      Complex complex12 = complex11.sinh();
      complex12.I.negate();
      complex12.INF.atan();
      complex11.INF.getField();
      complex1.nthRoot(358);
      complex7.getArgument();
      Complex complex13 = Complex.NaN;
      complex1.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.I.exp();
      complex0.nthRoot(144);
      complex2.INF.reciprocal();
      Complex complex3 = complex2.subtract(2.3047242164611816);
      Complex complex4 = new Complex(3002.066, 3002.066);
      Complex complex5 = complex1.negate();
      complex2.NaN.sqrt();
      Complex complex6 = complex0.ONE.subtract(complex4);
      Complex complex7 = complex6.I.sinh();
      complex7.readResolve();
      complex3.ONE.tanh();
      complex7.getField();
      complex0.getReal();
      complex2.isInfinite();
      complex6.getField();
      complex1.sqrt();
      complex1.multiply(255);
      complex3.getImaginary();
      complex0.log();
      complex5.getImaginary();
      Complex.valueOf(3002.066);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.conjugate();
      complex1.ZERO.asin();
      complex2.INF.abs();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.valueOf((-88.2568));
      complex2.getReal();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.ONE.atan();
      complex7.ZERO.toString();
      complex6.abs();
      complex3.multiply((-88.2568));
      complex4.getReal();
      complex5.isInfinite();
      Complex complex8 = Complex.NaN;
      complex4.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2806275683797178E-57);
      complex0.INF.subtract(1.2806275683797178E-57);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.divide((-3282.0096));
      Complex complex4 = Complex.valueOf(1.2806275683797178E-57);
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.INF.pow((-1427.92991));
      complex7.NaN.add(complex2);
      complex7.NaN.log();
      complex2.I.tan();
      complex6.ONE.toString();
      complex4.abs();
      complex5.getImaginary();
      complex4.abs();
      Complex complex8 = Complex.valueOf(206.96, (-303.1292));
      Complex complex9 = complex3.add(1.2806275683797178E-57);
      Complex complex10 = complex8.acos();
      Complex complex11 = Complex.valueOf(1.2806275683797178E-57, (-3282.0096));
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex10.divide(complex6);
      complex8.subtract(complex9);
      complex2.hashCode();
      complex13.multiply(complex1);
      Complex complex14 = complex4.add(complex5);
      complex14.cosh();
      Complex complex15 = complex1.createComplex((-3282.0096), 0.0);
      Complex complex16 = complex12.exp();
      complex16.createComplex(0.0, (-2114.034689));
      complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.atan();
      complex0.ZERO.acos();
      complex0.ZERO.cosh();
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(3019.801, 3019.801);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex1.I.sqrt();
      Complex.valueOf(3019.801);
      complex2.INF.add(complex0);
      complex1.INF.conjugate();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf(3772.644327993663, 3772.644327993663);
      complex4.ZERO.add(complex1);
      complex4.NaN.divide((-1310.0));
      Complex complex6 = complex4.I.exp();
      complex4.getReal();
      complex3.sqrt();
      complex6.exp();
      Complex complex7 = complex5.subtract(272.003);
      complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.817173955083142E-32, 0.0);
      complex0.I.readResolve();
      Complex complex1 = Complex.valueOf((-324.07067));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.divide(complex1);
      complex5.ZERO.multiply((-239));
      complex5.readResolve();
      complex1.createComplex((-20.0), (-1.0));
      Complex complex6 = complex4.INF.add((-2491.704327787));
      complex6.getArgument();
      Complex complex7 = complex1.multiply(588);
      complex7.conjugate();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-2052.384377183781), (-254.7677743927));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = Complex.valueOf((-1165.547336597864));
      complex4.ZERO.tan();
      Complex complex5 = complex4.NaN.asin();
      complex5.toString();
      Complex complex6 = complex0.sqrt1z();
      complex6.isInfinite();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.tan();
      complex8.asin();
      Complex complex9 = new Complex((-2052.384377183781), (-1165.547336597864));
      Object object0 = complex9.readResolve();
      complex2.NaN.add(0.0);
      complex9.divide((-2052.384377183781));
      complex7.ZERO.getArgument();
      complex3.equals(object0);
      complex7.NaN.sinh();
      Complex complex10 = complex7.multiply((-254.7677743927));
      complex3.add(complex8);
      complex2.getImaginary();
      complex10.negate();
      complex2.NaN.negate();
      Complex.valueOf((-216.0));
      Complex complex11 = complex2.pow(complex1);
      complex11.ONE.sinh();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(141);
      Complex complex2 = complex0.cos();
      complex2.I.asin();
      complex2.INF.cos();
      complex2.isNaN();
      complex0.getField();
      complex1.pow(4.8182788286170926E89);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.I.log();
      complex0.tanh();
      complex1.subtract(2.0);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-856.62592), (-856.62592));
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.ONE.toString();
      complex0.tanh();
      Complex.valueOf((-4169.812416817575), 50.2345);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.atan();
      complex3.ZERO.readResolve();
      Complex complex5 = complex2.negate();
      complex5.ONE.add(Double.NaN);
      complex3.log();
      complex4.reciprocal();
      complex5.log();
      Complex.valueOf(2306.1929773367137, (-856.62592));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(6.846440394397547E-120);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.INF.multiply(1328);
      Complex complex4 = complex1.ONE.add(complex2);
      Complex complex5 = complex1.multiply(complex3);
      complex5.divide(0.0);
      Complex complex6 = complex0.add(complex1);
      complex4.ZERO.conjugate();
      Complex complex7 = complex6.ZERO.acos();
      complex4.pow(complex3);
      complex7.I.sqrt1z();
      complex7.NaN.divide(complex5);
      complex6.isInfinite();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex3.log();
      Complex complex11 = complex10.asin();
      complex11.ZERO.sqrt();
      complex11.add(141.52190730679902);
      complex7.conjugate();
      complex11.sqrt();
      complex6.cos();
      complex9.add(0.0);
      Complex complex12 = complex0.log();
      Complex complex13 = complex12.sinh();
      complex13.getField();
      complex7.abs();
      Complex.valueOf(0.0);
      complex8.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(5.2243955659975294E-98, 6.283185307179586);
      Complex complex1 = null;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.toString();
      complex0.ONE.abs();
      Complex complex2 = complex0.pow(0.0);
      complex2.ONE.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex2.multiply(0.0);
      complex1.sinh();
      complex1.getArgument();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-48.10238));
      Complex complex1 = complex0.INF.tanh();
      complex0.readResolve();
      complex0.ONE.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex1.asin();
      complex2.abs();
      complex4.tan();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.sinh();
      complex0.toString();
      complex1.INF.add(complex6);
      Complex complex7 = complex1.multiply(0);
      Complex complex8 = complex2.I.log();
      complex8.NaN.reciprocal();
      Complex complex9 = complex7.INF.createComplex((-894.0), 1968.8817);
      complex9.I.atan();
      complex6.NaN.sin();
      complex3.toString();
      Complex complex10 = complex6.tan();
      complex10.abs();
      complex1.subtract((double) 0);
      complex6.abs();
      complex9.acos();
      complex2.pow((-894.0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-3.24981577480893E-27));
      Complex complex1 = complex0.NaN.acos();
      complex0.equals("insufficient data: only {0} rows and {1} columns.");
      Complex complex2 = complex1.I.tan();
      complex2.I.multiply(2466.0);
      complex2.I.nthRoot(17);
      Complex complex3 = complex0.INF.asin();
      Complex.valueOf((-1787.049625), (-1860.3621));
      complex3.pow(complex0);
      Complex complex4 = complex3.NaN.createComplex((-3.24981577480893E-27), (-3.24981577480893E-27));
      complex4.INF.cos();
      Complex complex5 = complex3.INF.reciprocal();
      complex3.NaN.getField();
      complex1.I.sqrt();
      complex0.divide(3567.2612614);
      complex1.negate();
      complex0.INF.negate();
      Object object0 = new Object();
      complex0.equals(object0);
      complex5.conjugate();
      complex5.toString();
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.tan();
      complex0.isInfinite();
      complex3.INF.tan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.exp();
      complex6.I.log();
      complex3.I.negate();
      Complex complex7 = complex2.subtract(complex5);
      complex4.getArgument();
      complex5.sin();
      Complex.valueOf(Double.NaN);
      complex5.NaN.asin();
      Complex.valueOf(1035.7653829467704, (-2841.721));
      complex7.nthRoot(1);
      complex1.cos();
//      try { 
        complex2.NaN.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 1.1980125904083252;
      Complex complex0 = Complex.valueOf(0.0, 1.1980125904083252);
      Complex complex1 = complex0.ZERO.add(2.3049492079013518E-7);
      Complex complex2 = complex1.I.cosh();
      complex2.I.sqrt();
      Complex complex3 = null;
      Complex complex4 = complex0.NaN.cos();
      complex4.ONE.toString();
      complex0.ZERO.sin();
//      try { 
        complex0.ONE.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.getField();
      Complex complex2 = complex1.createComplex((-3100.55), (-3100.55));
      Complex complex3 = complex2.createComplex((-3100.55), 768.8);
      Complex complex4 = complex3.INF.multiply(1.0);
      Complex complex5 = complex1.multiply(0);
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.ZERO.add(complex4);
      complex8.INF.cos();
      Complex complex9 = complex0.INF.subtract(768.8);
      Complex complex10 = Complex.valueOf((-576.0459401852388));
      complex5.ZERO.abs();
      complex10.INF.sin();
      complex1.reciprocal();
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex11.ZERO.divide((-3100.55));
      complex1.ZERO.reciprocal();
      complex11.add(complex6);
      complex5.ONE.sinh();
      complex1.abs();
      Complex complex13 = complex5.ZERO.tan();
      complex6.atan();
      complex5.toString();
      complex10.toString();
      complex13.sinh();
      complex12.getField();
      complex5.conjugate();
      complex9.divide(768.8);
      complex4.pow(1.0);
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.cos();
      complex2.I.log();
      complex2.negate();
      int int0 = 0;
      complex1.INF.getField();
//      try { 
        complex1.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 1194.5;
      Complex complex0 = Complex.valueOf(1194.5);
      double double1 = (-1590.8500527303067);
      Complex complex1 = complex0.INF.add((-1590.8500527303067));
      complex1.ZERO.exp();
      int int0 = (-1731);
//      try { 
        complex0.INF.nthRoot((-1731));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,731
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(5.283020542151163E-141, 5.283020542151163E-141);
      Complex complex1 = Complex.valueOf(5.283020542151163E-141, 5.283020542151163E-141);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.atan();
      complex2.NaN.tanh();
      complex1.ZERO.abs();
      Complex complex4 = complex3.I.divide(complex2);
      complex4.divide(5.283020542151163E-141);
      Complex complex5 = complex3.log();
      complex5.ZERO.divide(complex4);
      complex5.toString();
      Complex complex6 = complex1.asin();
      complex3.hashCode();
      complex6.add((-2662.111076760405));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-20.0));
      Complex complex2 = complex0.multiply(1);
      complex0.acos();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.tan();
      complex2.ZERO.subtract(0.0);
      complex1.sin();
      complex1.hashCode();
      complex2.pow(complex1);
      complex0.add(0.0);
      Complex complex3 = complex2.sin();
      int int0 = (-989);
      Complex complex4 = complex3.NaN.pow(complex1);
      complex4.ZERO.asin();
//      try { 
        complex3.ONE.nthRoot((-989));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -989
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.createComplex((-2396.715232266738), (-2396.715232266738));
      complex3.INF.pow(complex0);
      complex1.NaN.tanh();
      Complex complex4 = Complex.valueOf((-1886.62417302));
      Complex complex5 = complex4.I.add(complex3);
      complex5.INF.pow((-1886.62417302));
      Complex complex6 = complex0.INF.divide(complex1);
      complex6.I.negate();
      complex6.NaN.subtract((-2396.715232266738));
      Object object0 = new Object();
      complex0.equals(object0);
      complex3.subtract(0.0);
      complex5.tan();
      Complex complex7 = complex2.createComplex((-1886.62417302), 0.0);
      complex1.INF.cos();
      complex7.multiply(1.7177785285061278E-7);
      Complex.valueOf(0.0, (-1886.62417302));
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-3.141592653589793));
      complex0.ZERO.abs();
      complex0.nthRoot(3651);
      complex0.cosh();
      Complex complex1 = complex0.NaN.divide((-3.141592653589793));
      complex1.ONE.negate();
      complex0.isNaN();
      Complex.valueOf((-2649.86319604));
      complex0.divide(2087.3785);
      complex0.getField();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.divide(0.0);
      complex2.getArgument();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.conjugate();
      complex0.toString();
      complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf(1.0, 571.0);
      complex3.NaN.log();
      Complex complex4 = complex3.reciprocal();
      complex4.INF.sqrt1z();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.valueOf(571.0, 2177.0);
      complex5.ZERO.sin();
      complex2.isInfinite();
      complex0.getImaginary();
      complex5.ONE.atan();
//      try { 
        complex6.nthRoot((-2082));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,082
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex0.getArgument();
      complex2.NaN.asin();
      complex1.getReal();
      complex0.abs();
      Complex complex3 = complex2.exp();
      complex3.INF.tan();
      complex3.cos();
      Complex.valueOf(0.0, 0.5844172239303589);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.671123308));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 2.862518609581133E-20);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.cos();
      complex0.equals("");
      Complex complex4 = complex0.ONE.pow(1773.3009053051);
      complex4.INF.getArgument();
      complex0.readResolve();
      Complex complex5 = Complex.ZERO;
      complex0.add(complex5);
      Complex complex6 = complex2.pow(20.0);
      complex5.I.getField();
      Complex complex7 = complex5.multiply((-2065));
      complex0.pow(1773.3009053051);
      complex7.ZERO.multiply(complex0);
      complex0.sinh();
      Complex complex8 = complex6.add(1.0033721426962048E-8);
      complex0.exp();
      Complex complex9 = complex8.ONE.tan();
      complex9.asin();
      complex3.readResolve();
      Complex complex10 = complex8.sinh();
      complex10.NaN.multiply(1);
      complex10.pow((double) (-2065));
      complex8.add(3225.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(346.0, 1801.797255002659);
      complex1.NaN.acos();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.INF.multiply((-767));
      Complex complex4 = complex2.multiply(289.88642769);
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = complex4.multiply(1801.797255002659);
      complex0.sin();
      complex3.add(complex6);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.sqrt();
      complex9.acos();
      complex5.exp();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.I.cosh();
      Complex complex2 = complex0.reciprocal();
      complex2.ZERO.add(complex0);
      complex1.multiply((-246));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.INF.sinh();
      complex1.I.sin();
      complex1.pow(complex0);
      Complex complex2 = complex0.divide(complex1);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(42.4, 42.4);
      Complex complex1 = complex0.I.cos();
      complex0.ONE.multiply(42.4);
      Complex.valueOf((-3119.85713214416));
      Complex complex2 = complex0.ZERO.divide(42.4);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.cosh();
      complex4.NaN.abs();
      Complex complex5 = complex2.pow((-3119.85713214416));
      complex3.sqrt1z();
      complex5.INF.sqrt();
      complex3.toString();
      complex3.abs();
      complex2.multiply(42.4);
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.ZERO;
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1802.4751529323));
      complex0.INF.getField();
      Complex.valueOf((-1018.916168608901));
      complex0.sinh();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      complex1.INF.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex1.I.negate();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex2.I.acos();
      Complex complex7 = Complex.valueOf((-4504.0), 5.906102862953403E-195);
      Complex complex8 = complex6.I.sqrt();
      Complex complex9 = Complex.ONE;
      complex8.ONE.multiply(complex9);
      assertEquals(0.7071067811865475, complex8.getImaginary(), 0.01);
      
      Complex complex10 = complex2.NaN.sin();
      Complex complex11 = complex10.I.log();
      complex11.hashCode();
      complex0.readResolve();
      Complex complex12 = complex1.asin();
      double double0 = complex12.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex1.getImaginary();
      complex10.divide(0.0);
      complex5.isInfinite();
      double double1 = complex6.abs();
      assertEquals(1.8011719796199461, double1, 0.01);
      
      Complex complex13 = complex1.negate();
      assertSame(complex13, complex12);
      
      Complex complex14 = complex1.log();
      Complex complex15 = complex14.conjugate();
      Complex complex16 = complex5.atan();
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.2261911708835171, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex15.multiply(complex2);
      Complex complex18 = complex17.sqrt();
      assertSame(complex18, complex1);
      
      complex10.getReal();
      assertFalse(complex0.equals((Object)complex4));
      
      Complex complex19 = complex7.atan();
      assertEquals((-5.551115123125783E-17), complex19.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.053874899534375E209), (-9.053874899534375E209));
      Complex complex1 = complex0.multiply((-9.053874899534375E209));
      Complex complex2 = complex0.INF.reciprocal();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.ONE.reciprocal();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      
      List<Complex> list0 = complex0.NaN.nthRoot(82);
      assertFalse(list0.contains(complex3));
      
      Complex complex4 = complex1.NaN.add((-9.053874899534375E209));
      double double0 = complex1.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex5.NaN.atan();
      assertSame(complex6, complex4);
      
      double double1 = complex1.getArgument();
      assertEquals(0.7853981633974483, double1, 0.01);
      
      Complex complex7 = complex1.createComplex((-9.053874899534375E209), 1616.094074628571);
      assertTrue(complex1.equals((Object)complex5));
      assertNotSame(complex1, complex5);
      assertFalse(complex7.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.ZERO.nthRoot((-821));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -821
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
