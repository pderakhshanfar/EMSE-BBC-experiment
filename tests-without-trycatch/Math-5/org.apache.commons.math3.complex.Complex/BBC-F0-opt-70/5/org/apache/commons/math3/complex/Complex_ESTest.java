/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:06:52 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
      complex0.abs();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(73, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-16), (-20.0));
      complex0.tan();
      Complex complex1 = new Complex(186.762, (-20.0));
      complex1.INF.multiply(complex0);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.conjugate();
      complex0.cos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.9999999999999788);
      complex0.NaN.createComplex(0.9999999999999788, Double.NaN);
      Complex complex1 = complex0.add(1296.0304);
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf(2478.47588376951, 0.9999999999999788);
      complex3.ONE.acos();
      complex0.ZERO.toString();
      complex3.exp();
      Complex complex4 = complex1.tanh();
      complex1.pow(complex2);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1084.27812309, Double.POSITIVE_INFINITY);
      complex0.multiply((-1557.81501516961));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-16), (double) (-16));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      complex2.divide((double) (-16));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.ONE.cosh();
      complex3.I.sqrt1z();
      complex3.INF.abs();
      Complex complex4 = complex0.ZERO.log();
      complex4.INF.getField();
      complex1.NaN.acos();
      complex0.createComplex((-2.613626422028823E-195), (-2.613626422028823E-195));
      Complex complex5 = complex0.multiply((-2.613626422028823E-195));
      Complex complex6 = complex0.tan();
      complex6.ZERO.readResolve();
      complex4.ZERO.hashCode();
      complex6.reciprocal();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex7.I.exp();
      complex8.conjugate();
//      try { 
        complex5.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 4141.801616620707);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.asin();
      Complex complex2 = Complex.valueOf(4141.801616620707, Double.POSITIVE_INFINITY);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(11.593799536261928, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(10.593799536261928);
      Complex complex1 = Complex.valueOf((-4.117971654572494E154), 1.0);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.ZERO.tan();
      complex1.ZERO.readResolve();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = Complex.valueOf((-4.117971654572494E154));
      Complex complex7 = complex4.exp();
      complex7.getField();
      complex0.multiply(complex7);
      Complex complex8 = Complex.valueOf(1378.446257426);
      Complex complex9 = complex8.NaN.multiply(complex6);
      complex8.ZERO.tan();
      complex3.getField();
      complex2.nthRoot(356);
      Complex complex10 = Complex.valueOf((-4.117971654572494E154));
      Complex complex11 = complex9.multiply(1378.446257426);
      Complex complex12 = complex10.divide((double) 356);
      Complex complex13 = complex12.tan();
      complex3.divide(821.17484187319);
      complex1.pow((-4.117971654572494E154));
      complex13.reciprocal();
      complex5.sqrt1z();
      complex8.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-20), (double) (-20));
      complex0.asin();
      complex0.tanh();
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cosh();
      complex0.abs();
      complex2.getArgument();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex5.log();
      complex1.hashCode();
      Complex complex7 = new Complex(Double.NaN);
      complex7.add(0.0);
      Complex complex8 = complex4.sinh();
      complex8.I.acos();
      Complex complex9 = Complex.valueOf(1.0);
      Complex complex10 = Complex.valueOf(7.802219817310385E-9);
      complex10.add(complex2);
      complex9.INF.createComplex(0.0, (-2122));
      complex3.multiply((-2122));
      complex6.abs();
      Complex complex11 = complex9.atan();
      complex11.isInfinite();
      complex3.exp();
      complex5.add(complex4);
      complex0.negate();
      complex7.acos();
      complex3.subtract(Double.NaN);
      Complex complex12 = Complex.ZERO;
      complex12.cos();
      Complex.valueOf((-3021.840399292251));
      complex4.acos();
      complex0.sqrt1z();
      complex11.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
//      try { 
        complex0.I.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.asin();
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.sqrt();
      Complex complex3 = complex1.acos();
      complex3.I.cos();
      complex3.pow(Double.POSITIVE_INFINITY);
      complex0.log();
      complex0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.asin();
      complex0.asin();
      Complex complex2 = new Complex((-524.853914211), Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ZERO;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.cosh();
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.88786461139), Double.POSITIVE_INFINITY);
      complex0.multiply(1013);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.pow(Double.POSITIVE_INFINITY);
      complex3.INF.nthRoot(1486);
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      complex0.createComplex((-4695.288), (-4695.288));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.asin();
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3481.8681));
      complex0.I.nthRoot(232);
      complex0.createComplex((-3481.8681), 232);
      complex0.ONE.getField();
      complex0.exp();
      complex0.getField();
      complex0.pow((-3481.8681));
      Complex.valueOf((double) 232, (-3535.0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      complex1.I.conjugate();
      Complex complex2 = Complex.valueOf((-1291.6188836));
      complex2.asin();
      complex1.toString();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(728);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.I.sinh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(-0.0, (-20.0));
      complex3.nthRoot(4245);
      Complex.valueOf(-0.0, (-20.0));
      complex1.acos();
      Complex complex4 = complex1.asin();
      complex1.atan();
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.valueOf(2.0);
      complex6.abs();
      complex1.sqrt();
      Complex complex7 = complex4.tanh();
      complex7.add(complex5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(2547.6284223);
      Complex complex3 = complex2.sqrt();
      complex0.ONE.negate();
      Complex complex4 = complex1.pow(635.3509169895489);
      Complex complex5 = complex4.NaN.add((-689.3936753540677));
      complex5.NaN.asin();
      complex4.ONE.nthRoot(1676);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.I.acos();
      complex3.asin();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.ZERO.acos();
      complex4.abs();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = Complex.valueOf((-1960.1));
      complex0.ONE.multiply(complex11);
      complex6.sqrt1z();
      Complex complex12 = complex0.subtract(complex9);
      complex12.ZERO.negate();
      complex10.conjugate();
      complex0.nthRoot(1676);
      complex7.subtract(complex5);
      complex4.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.divide(1097.949);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.multiply(539);
      Complex complex4 = new Complex((-1185.4321), 777.026);
      complex1.tan();
      complex1.add(complex3);
      complex1.getField();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      Complex.valueOf((-742.4392134609795), 4.01780853635105E197);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(4.01780853635105E197, 4.01780853635105E197);
      Complex complex3 = Complex.I;
      complex0.multiply(complex0);
      complex3.divide((-4.399824372590328));
      Complex complex4 = complex2.reciprocal();
      complex4.NaN.conjugate();
      complex0.createComplex((-4.399824372590328), 541.4921);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.conjugate();
      complex0.divide(6.283185307179586);
      complex0.toString();
      Complex.valueOf((double) (-1), 6.283185307179586);
      Complex complex3 = Complex.ZERO;
      complex2.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = Complex.valueOf((-1291.6188836));
      Complex complex4 = complex3.asin();
      complex3.toString();
      Complex complex5 = complex4.tanh();
      complex0.tan();
      complex5.add(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.asin();
      Complex complex3 = Complex.ONE;
      complex0.toString();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex3.divide(4320.000231481469);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.01780853635105E197, (-742.4392134609795));
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ZERO.multiply(complex0);
      Complex complex3 = complex1.reciprocal();
      complex3.readResolve();
      complex3.equals((Object) null);
      Complex complex4 = new Complex((-1.287101187097E-312), 2.5430806348152437);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex1.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.cosh();
      complex1.abs();
      complex1.getArgument();
      Complex complex4 = new Complex(1.0, 0.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf(0.0, 1.0);
      Complex complex7 = complex2.log();
      complex5.hashCode();
      Complex complex8 = new Complex((-1744.2173));
      complex1.add(0.0);
      complex0.sinh();
      complex8.cosh();
      Complex.valueOf(1068.82786082142);
      Complex complex9 = complex3.add(complex6);
      complex8.reciprocal();
      Complex complex10 = complex5.reciprocal();
      Object object0 = complex10.readResolve();
      complex3.readResolve();
      complex1.equals(object0);
      complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-905.73585111515), 0.0);
      complex1.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.NaN;
      complex0.nthRoot(605);
      complex2.multiply(complex3);
      Complex complex5 = Complex.ZERO;
      complex5.subtract((-187.3));
      Complex complex6 = Complex.I;
      complex0.subtract(complex6);
      complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.sin();
      complex2.log();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.readResolve();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2503.0));
      complex0.createComplex((-1094.006049121653), (-1094.006049121653));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.01780853635105E197, (-742.4392134609795));
      complex1.log();
      complex1.hashCode();
      Complex complex2 = new Complex((-742.4392134609795));
      Complex complex3 = complex0.add(4.01780853635105E197);
      complex2.sinh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf((-2531.920014027406));
      Complex complex7 = complex4.add(complex5);
      complex4.reciprocal();
      Complex complex8 = complex7.reciprocal();
      complex6.readResolve();
      complex7.readResolve();
      complex8.equals(complex2);
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.INF;
      complex0.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex3.reciprocal();
      complex1.readResolve();
      Object object0 = complex0.readResolve();
      complex5.equals(object0);
      complex5.divide(complex2);
      Complex complex8 = Complex.INF;
      complex7.multiply(complex8);
      Complex complex9 = Complex.valueOf(0.481292188167572, (-1792.82409));
      complex6.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.01780853635105E197, 4.01780853635105E197);
      complex0.I.pow(complex1);
      Complex complex2 = new Complex(4.01780853635105E197, 4.01780853635105E197);
      Complex complex3 = Complex.I;
      complex3.reciprocal();
      complex0.createComplex(0.0, 4.01780853635105E197);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.8288623079292884E293);
      complex0.getField();
      complex0.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tanh();
      complex1.asin();
      Object object0 = new Object();
      complex1.equals(object0);
      complex0.acos();
      Complex complex3 = complex0.exp();
      complex3.NaN.conjugate();
      complex2.isInfinite();
      Complex complex4 = complex3.ONE.log();
      complex4.ZERO.sqrt();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex3.multiply(3.8288623079292884E293);
      complex6.ZERO.exp();
      Complex complex7 = Complex.ONE;
      complex1.equals(complex7);
      complex5.abs();
      complex1.isInfinite();
      complex0.divide(3.8288623079292884E293);
      complex4.conjugate();
      Complex.valueOf(1.5430806348152437, 3.8288623079292884E293);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.3418716134866884);
      complex1.sin();
      complex0.log();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.reciprocal();
      complex3.readResolve();
      complex4.equals(complex2);
      complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cosh();
      complex0.abs();
      complex2.getArgument();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex(0.0);
      complex1.hashCode();
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = Complex.I;
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex8.cosh();
      Complex complex10 = Complex.valueOf(7.802219817310385E-9);
      Complex complex11 = complex10.add(complex2);
      Complex.valueOf(0.0, (double) (-2122));
      complex3.multiply((-2122));
      complex4.abs();
      complex9.atan();
      Complex complex12 = Complex.valueOf(0.7615941559557649);
      complex4.divide(2310.0);
      Complex complex13 = Complex.valueOf(Double.NaN, 2310.0);
      complex13.asin();
      complex1.multiply(2.0466404088178596E-161);
      complex9.reciprocal();
      complex8.readResolve();
      Complex complex14 = new Complex(2310.0);
      complex14.equals("(1.0, 0.0)");
      complex12.divide(complex11);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1371.6012194213854), (-1371.6012194213854));
      complex0.ONE.add((-1371.6012194213854));
      Complex complex1 = complex0.multiply((-1371.6012194213854));
      Complex complex2 = complex1.NaN.createComplex((-1371.6012194213854), (-1371.6012194213854));
      complex1.I.sqrt();
      Complex complex3 = Complex.NaN;
      // Undeclared exception!
      complex2.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.tan();
      Complex complex1 = complex0.sin();
      complex1.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.802219817310385E-9, 0.0);
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.reciprocal();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex5 = new Complex(2.414213562373095);
      complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1169.43884));
      complex0.nthRoot(7);
      complex0.getReal();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cosh();
      complex0.abs();
      complex2.getArgument();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex5.log();
      complex1.hashCode();
      Complex complex7 = new Complex(Double.NaN);
      complex7.add(0.0);
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex8.cosh();
      Complex complex10 = Complex.valueOf(7.802219817310385E-9);
      complex10.add(complex2);
      complex9.INF.createComplex(0.0, (-2122));
      complex3.multiply((-2122));
      complex6.abs();
      Complex complex11 = complex9.atan();
      complex11.isInfinite();
      complex3.exp();
      complex5.add(complex4);
      complex0.negate();
      complex7.acos();
      complex3.subtract(Double.NaN);
      Complex complex12 = Complex.ZERO;
      complex12.cos();
      Complex.valueOf((-3021.06349792848));
      complex4.acos();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2160.0));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex3.NaN.negate();
      complex0.getArgument();
      complex0.ZERO.toString();
      Complex complex5 = complex0.cosh();
      complex0.abs();
      complex5.ZERO.getArgument();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.log();
      complex7.ONE.hashCode();
      Complex complex9 = complex0.add((-1215.093));
      Complex complex10 = complex1.sinh();
      complex5.divide((-3055.997298));
      Complex complex11 = complex10.INF.cosh();
      Complex complex12 = complex11.ONE.add(complex2);
      complex9.multiply((-2122));
      complex8.abs();
      complex10.atan();
      complex12.multiply(429);
      complex10.toString();
      complex1.atan();
      Complex complex13 = new Complex(0.9855725022997218);
      complex1.multiply(complex13);
      complex5.hashCode();
      Complex complex14 = Complex.ZERO;
      complex12.equals(complex4);
      complex10.pow((-1557.45093));
      complex7.subtract(696.32772);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(460);
      Complex complex1 = Complex.valueOf((-70.52), (-2591.170927578249));
      Complex complex2 = complex1.tanh();
      complex2.nthRoot(398);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.asin();
      Complex.valueOf((-187.3));
      complex1.asin();
      complex2.add((-187.3));
      complex1.toString();
      complex1.nthRoot(2457);
      Complex complex3 = complex1.tanh();
      complex3.ZERO.nthRoot(51);
      complex0.multiply(complex3);
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(22.9239172903836, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(22.9239172903836);
      complex1.reciprocal();
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(22.9239172903836, 206.12426930332);
      complex0.equals(complex3);
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.802219817310385E-9, 0.0);
      complex0.INF.sin();
      complex0.log();
      Complex complex1 = complex0.INF.reciprocal();
      complex1.I.reciprocal();
      Complex complex2 = Complex.NaN;
      complex2.readResolve();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex.valueOf((-742.4392134609795), (-742.4392134609795));
      Complex complex2 = Complex.INF;
      complex1.multiply(complex2);
      Complex complex3 = Complex.valueOf((-742.4392134609795), (-448.1960302475282));
      complex3.divide((-0.8686709614860095));
      Complex complex4 = Complex.INF;
      complex3.createComplex(1.7077150344848633, 1.7077150344848633);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.01780853635105E197, (-742.4392134609795));
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ZERO.multiply(complex0);
      Complex complex3 = complex0.divide(4.01780853635105E197);
      Complex complex4 = Complex.valueOf(4.01780853635105E197, (-1913.2));
      Complex complex5 = complex4.asin();
      Object object0 = new Object();
      complex3.equals(complex4);
      complex5.toString();
      Complex complex6 = complex2.cosh();
      complex6.pow(complex1);
      Complex complex7 = complex0.conjugate();
      complex1.getImaginary();
      complex1.cos();
      complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.22782009840011597, 0.22782009840011597);
      Complex complex1 = complex0.ONE.tanh();
      complex1.I.reciprocal();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex1.I.add(0.22782009840011597);
      Complex complex4 = Complex.valueOf(0.22782009840011597, 1.2953605651855469);
      complex4.divide(complex2);
      complex3.multiply(2017);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1371.6012194213854), (-1371.6012194213854));
      complex0.ONE.add((-1371.6012194213854));
      Complex complex1 = complex0.multiply((-1371.6012194213854));
      complex1.NaN.createComplex((-1371.6012194213854), (-1371.6012194213854));
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.tan();
      complex3.atan();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1256.346303699), 1907.9514127032212);
      complex0.cosh();
      Complex complex1 = complex0.pow((-1256.346303699));
      complex0.ZERO.multiply(complex1);
      complex1.abs();
      Complex complex2 = complex1.sin();
      complex2.ZERO.createComplex(2292.316, 0.0);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.INF.reciprocal();
      complex2.I.pow(0.0);
      complex1.INF.getField();
      Complex complex4 = complex1.ZERO.reciprocal();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.INF.reciprocal();
      complex5.I.toString();
      Complex complex7 = complex5.NaN.sinh();
      Complex complex8 = complex4.ONE.pow(0.0);
      complex5.ONE.multiply(1355);
      complex1.toString();
      Complex complex9 = complex5.exp();
      complex9.ONE.reciprocal();
      complex9.NaN.cos();
      Object object0 = new Object();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex10.INF.asin();
      complex11.ONE.divide(complex0);
      complex7.equals(object0);
      complex9.nthRoot(1);
      complex8.getField();
      complex8.subtract(complex1);
      complex3.nthRoot(1);
      complex2.tan();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.802219817310385E-9, 0.0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.INF.reciprocal();
      complex3.I.reciprocal();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.toString();
      complex0.INF.getArgument();
      Complex complex1 = complex0.tan();
      Object object0 = new Object();
      complex1.ONE.readResolve();
      complex0.equals(object0);
      Complex complex2 = Complex.valueOf((-2414.30813), (-1.1449998592111558E-9));
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex0.getField();
      complex4.I.getField();
      Complex complex5 = complex3.NaN.negate();
      complex4.getArgument();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex1.divide(0.0);
      complex7.ONE.add(0.0);
      complex2.isNaN();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex0.subtract(0.0);
      complex9.sqrt1z();
      Complex complex10 = complex6.sinh();
      complex10.INF.log();
      complex1.sin();
      Complex complex11 = complex3.exp();
      complex8.hashCode();
      complex8.divide(complex5);
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = 0.22782009840011597;
      Complex complex0 = new Complex(0.22782009840011597, 0.22782009840011597);
      Complex complex1 = complex0.ONE.tanh();
      complex1.I.reciprocal();
      complex0.I.asin();
      Complex complex2 = complex1.I.add(0.22782009840011597);
      Complex complex3 = complex0.ZERO.multiply(0.22782009840011597);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.ZERO.sinh();
      complex2.NaN.pow(complex4);
      complex5.acos();
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-679.9224));
      Complex complex1 = complex0.divide((-1.0));
      complex0.INF.log();
      complex1.getReal();
      complex1.tan();
      Complex complex2 = complex1.add(complex0);
      complex2.NaN.readResolve();
      Complex complex3 = Complex.valueOf((-679.9224), 892.0);
      Complex complex4 = complex3.sin();
      complex2.NaN.subtract(23.3119024404);
      complex2.INF.hashCode();
      Complex complex5 = complex3.subtract((-331.7716709762));
      complex5.subtract(Double.NaN);
      complex2.I.abs();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex7.ZERO.exp();
      complex8.ZERO.toString();
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.cos();
      complex11.ZERO.sinh();
      complex5.pow(2091.0);
      complex5.multiply(complex1);
      Complex complex12 = complex8.sin();
      complex12.INF.readResolve();
      complex12.createComplex(892.0, (-2164.134));
      complex9.log();
      complex11.getArgument();
      Complex complex13 = Complex.valueOf((-331.7716709762));
      complex4.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      complex1.NaN.getField();
      Complex complex2 = complex0.I.pow(0.0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.I.pow(complex3);
      complex4.INF.atan();
      Complex.valueOf(0.0, (-443.7969345867783));
      complex1.NaN.tanh();
      Complex complex5 = Complex.valueOf((-1577.98158), (-1577.98158));
      Complex complex6 = complex5.ONE.pow(complex0);
      Complex complex7 = complex0.I.subtract(complex1);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.ONE.divide((-443.7969345867783));
      complex9.ZERO.multiply((-1940));
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.I.negate();
      Complex complex12 = complex10.ONE.acos();
      complex12.I.toString();
      Complex complex13 = complex7.sqrt1z();
      Complex complex14 = complex12.exp();
      complex14.I.subtract(complex13);
      complex14.ONE.divide(0.0);
      complex2.I.atan();
      complex6.hashCode();
      complex5.isNaN();
      complex2.getField();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.multiply((-180));
      Complex complex4 = Complex.valueOf((-617.98397521626));
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex2.I.log();
      Complex complex8 = complex6.ONE.asin();
      Complex complex9 = complex4.add(complex3);
      complex9.ONE.divide(complex8);
      Complex complex10 = complex2.negate();
      Complex complex11 = Complex.ZERO;
      complex8.add(complex11);
      complex6.subtract(complex3);
      complex10.getField();
      Complex complex12 = complex4.add(0.0);
      Complex complex13 = complex3.subtract((double) (-180));
      complex2.negate();
      Complex complex14 = complex7.reciprocal();
      complex4.isInfinite();
      complex0.negate();
      complex1.getImaginary();
      complex14.isNaN();
      complex7.add((double) (-180));
      complex13.divide(0.0);
      complex2.equals(complex12);
      complex5.multiply(1);
      complex14.exp();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = Complex.ONE;
      complex0.INF.subtract(complex1);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.multiply(complex2);
      complex4.ZERO.asin();
      complex2.ONE.cosh();
      complex0.hashCode();
      complex3.pow(2.0);
      Complex.valueOf(0.0, 6.283185307179586);
      complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.add((-2041.0));
      complex2.INF.atan();
      Complex complex3 = complex0.INF.cosh();
      complex3.sqrt1z();
      Complex complex4 = complex0.multiply((-1466.9));
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.subtract(complex5);
      complex6.I.getField();
      Complex complex7 = complex0.NaN.subtract(complex3);
      Complex complex8 = complex0.negate();
      complex8.ONE.getField();
      complex8.pow(complex3);
      Complex complex9 = complex4.negate();
      complex9.asin();
      complex1.getField();
      Complex.valueOf(0.0, 0.0);
      complex8.negate();
      Complex.valueOf(0.0, (-1466.9));
      Complex complex10 = complex1.cosh();
      complex7.readResolve();
      complex3.multiply(2689);
      complex7.atan();
      complex10.multiply(0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.readResolve();
      Complex complex1 = complex0.tan();
      complex1.I.tanh();
      Complex complex2 = complex1.add((-5.468175655175594E-8));
      complex2.I.tanh();
      Complex complex3 = Complex.valueOf(0.0, 2.0);
      Complex complex4 = complex3.sqrt();
      complex4.INF.getArgument();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.cos();
      complex5.getField();
      Complex complex7 = complex6.I.divide(2.0);
      Complex complex8 = complex5.multiply(complex1);
      complex8.ONE.cos();
      complex8.getImaginary();
      Complex complex9 = complex6.INF.log();
      Complex complex10 = complex0.sqrt();
      complex4.multiply(complex10);
      complex5.I.createComplex((-825.680929013572), 1387.025);
      Complex complex11 = complex3.divide((-1342.78488260414));
      complex5.getField();
      Complex complex12 = complex11.exp();
      complex7.tanh();
      Complex complex13 = complex3.sinh();
      complex3.getField();
      complex12.getArgument();
      complex13.getImaginary();
      complex1.sinh();
      complex9.divide(complex12);
      complex6.add(complex7);
      complex9.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(1948.1582552516);
      complex1.NaN.hashCode();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = Complex.valueOf((-1.5843229740595697E205), (-1.5843229740595697E205));
      Complex complex4 = complex3.ONE.tan();
      complex4.NaN.subtract(1948.1582552516);
      complex4.I.atan();
      complex0.NaN.toString();
      complex1.getField();
      complex0.isNaN();
      complex3.ZERO.negate();
      complex1.getImaginary();
      complex0.add((-1.5843229740595697E205));
      Complex complex5 = complex0.cosh();
      complex3.getArgument();
      Complex complex6 = complex1.ZERO.atan();
      complex3.conjugate();
      Complex complex7 = complex2.add((-2.356194490192345));
      complex7.NaN.toString();
      complex6.ZERO.sinh();
      complex6.add(Double.NaN);
      complex6.negate();
      complex2.conjugate();
      complex3.equals((Object) null);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.28008490800857544);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply((-2071));
      Complex.valueOf((-2162.62));
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.multiply((-1058));
      complex2.isNaN();
      complex4.isNaN();
      Complex complex6 = complex5.log();
      complex6.tan();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply((-2400));
      Complex complex3 = complex2.ZERO.exp();
      complex3.I.tan();
      complex0.I.readResolve();
      complex2.ZERO.toString();
      complex2.NaN.log();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.ZERO.log();
      complex4.I.sqrt();
      complex3.sinh();
      complex6.I.multiply((-5702.0));
      complex5.ONE.getField();
      int int0 = (-2151);
//      try { 
        complex5.INF.nthRoot((-2151));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,151
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1589.33), (-1589.33));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.acos();
      complex2.cosh();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.ZERO.negate();
      complex3.ZERO.abs();
      complex0.asin();
      Complex.valueOf((-1589.33), (-3776.504660992119));
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.INF.conjugate();
      complex6.ZERO.getArgument();
      complex0.equals(complex3);
      Complex complex7 = Complex.valueOf(665.3894, 0.0);
      complex7.INF.pow(0.0);
      Complex complex8 = complex4.add((-1589.33));
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(0.0);
      complex0.INF.abs();
      Complex complex2 = complex1.multiply(complex0);
      complex1.I.readResolve();
      Complex complex3 = complex2.subtract(1.1134873918971586E-235);
      complex3.ONE.readResolve();
      Complex complex4 = complex2.NaN.sin();
      complex1.I.getArgument();
      Complex complex5 = complex1.ONE.sqrt1z();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex5.ONE.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.NaN.pow((-1.1564717694090882E-280));
      complex8.ZERO.multiply(complex7);
      complex5.ZERO.getArgument();
      complex0.toString();
      Complex complex9 = complex4.sqrt1z();
      complex8.ONE.acos();
      Complex complex10 = complex9.createComplex(0.0, 300.1573026);
      Complex complex11 = complex10.ZERO.add(0.0);
      complex1.getReal();
      complex9.asin();
      complex4.isInfinite();
      complex1.pow(complex11);
      complex0.sin();
      complex8.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      complex1.isNaN();
      Complex complex2 = complex1.add(complex0);
      complex2.INF.hashCode();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex4.NaN.exp();
      complex3.getArgument();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex0.ONE.multiply(539);
      complex4.NaN.acos();
      complex3.INF.nthRoot(539);
      complex2.subtract(complex1);
      Complex complex8 = complex3.cos();
      Complex complex9 = complex8.INF.conjugate();
      complex4.createComplex(539, 0.0);
      Complex complex10 = complex1.multiply(complex7);
      complex10.multiply(complex3);
      Complex complex11 = complex5.multiply(0);
      complex11.ONE.nthRoot(993);
      complex5.equals(complex2);
      complex4.hashCode();
      complex5.conjugate();
      Complex complex12 = complex2.add(30.3670176);
      complex12.ONE.atan();
      complex6.equals("");
      complex7.asin();
      complex9.add((-3127.8553579776));
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(5422.85908);
      Complex complex2 = complex1.INF.cosh();
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.readResolve();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(989.4784647878);
      Complex complex5 = complex0.subtract(complex2);
      complex5.NaN.getArgument();
      Complex complex6 = complex0.asin();
      complex6.atan();
      complex5.sinh();
      complex6.negate();
      complex4.getField();
      complex1.toString();
      Complex complex7 = complex3.add(1266.4213);
//      try { 
        complex7.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 6.283185307179586;
      Complex complex1 = complex0.divide(6.283185307179586);
      complex0.multiply(complex1);
      Complex complex2 = complex0.multiply((-1));
      complex2.I.acos();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.conjugate();
      complex4.ZERO.divide(complex2);
      complex3.sin();
//      try { 
        complex0.nthRoot((-680));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -680
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      complex2.multiply(539);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.01780853635105E197, (-742.4392134609795));
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ZERO.multiply(complex0);
      Complex complex3 = complex0.divide(4.01780853635105E197);
      complex3.reciprocal();
      complex0.createComplex(0.0, (-742.4392134609795));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.conjugate();
      Complex.valueOf(623.08182);
      complex0.getReal();
      complex0.getImaginary();
      complex2.abs();
      Complex complex3 = complex1.asin();
      complex0.cos();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex3.reciprocal();
      complex5.sin();
      Complex complex6 = complex2.createComplex(0.0, 0.0);
      complex6.ZERO.negate();
      complex4.ONE.hashCode();
      complex6.abs();
      complex4.pow(0.0);
      complex6.negate();
      Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex((-1024.9281), 1279.37033573361);
      complex0.readResolve();
      complex1.ONE.hashCode();
      complex1.INF.toString();
      Complex complex2 = complex0.add(1.0016001590267064E-9);
      Complex complex3 = complex2.pow(1.0016001590267064E-9);
      Complex.valueOf((-1024.9281), 1.0016001590267064E-9);
      complex3.I.atan();
      complex3.ZERO.readResolve();
      complex1.atan();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = complex4.INF.add(0.0);
      complex5.INF.atan();
      Complex complex6 = complex1.INF.sqrt1z();
      Complex complex7 = complex6.NaN.multiply(0);
      complex7.NaN.subtract(complex2);
      complex7.ONE.nthRoot(1);
      Complex complex8 = complex0.multiply(0.0);
      complex8.hashCode();
      complex3.ONE.pow(complex1);
      Complex complex9 = complex3.multiply(complex2);
      Complex complex10 = complex8.pow(complex9);
      complex2.isNaN();
      complex0.createComplex(2870.14, 0.0);
      complex6.sinh();
      Complex complex11 = complex10.sqrt();
      complex11.NaN.cos();
      complex3.createComplex(0.0, 2870.14);
      complex1.multiply(0.0);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(975.0);
      complex0.I.add(975.0);
      complex0.log();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      complex0.NaN.toString();
      Complex complex2 = complex1.NaN.createComplex(1611.84900023897, 1611.84900023897);
      complex0.tanh();
      Complex complex3 = complex2.sinh();
      Complex.valueOf(1611.84900023897);
      complex3.pow(complex2);
      complex0.createComplex(1611.84900023897, 1611.84900023897);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.INF.tanh();
      complex0.toString();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex0.multiply(6.283185307179586);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.ONE.tan();
      complex3.getReal();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex0.cos();
      complex8.INF.conjugate();
      Complex complex9 = complex4.sqrt();
      complex4.exp();
      complex9.getArgument();
      complex4.readResolve();
      complex3.multiply(complex6);
      complex6.sqrt1z();
      complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ZERO.multiply(0);
      complex0.hashCode();
      Complex complex5 = complex2.sqrt1z();
      complex1.ZERO.hashCode();
      complex2.INF.pow(complex4);
      complex0.abs();
      Complex complex6 = complex5.multiply(1.0);
      Complex complex7 = complex0.add(29.24886);
      complex7.NaN.sqrt1z();
      Complex complex8 = complex5.exp();
      complex6.abs();
      Complex complex9 = complex4.subtract(complex1);
      complex9.INF.getArgument();
      complex8.reciprocal();
      complex5.hashCode();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 915.4573554);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.subtract(9.602680736954162E-24);
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.ZERO.divide(complex0);
      complex3.asin();
      Complex complex4 = complex1.NaN.cos();
      complex1.I.toString();
      Complex complex5 = complex0.sqrt();
      complex5.isInfinite();
      complex5.ONE.tanh();
      Complex complex6 = complex5.ONE.add(0.0);
      Complex complex7 = complex0.subtract((-2534.38605));
      Complex complex8 = complex7.ZERO.tan();
      Complex.valueOf(0.0, 0.0);
      complex7.I.hashCode();
      Complex complex9 = complex5.add(complex0);
      complex2.ONE.getField();
      complex8.ONE.multiply((-30.65));
      Complex complex10 = complex2.sqrt1z();
      complex10.tanh();
      complex6.isInfinite();
      complex6.divide(1.0);
      complex10.abs();
      complex9.cos();
      complex8.sqrt1z();
      complex4.sqrt1z();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.cosh();
//      try { 
        complex0.nthRoot((-956));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -956
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-1371.6012194213854), (-1371.6012194213854));
      complex0.ONE.add((-1371.6012194213854));
      Complex complex1 = complex0.multiply((-1371.6012194213854));
      Complex complex2 = complex1.NaN.createComplex((-1371.6012194213854), (-1371.6012194213854));
      complex1.I.sqrt();
      Complex complex3 = complex0.tan();
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(685.113);
      Complex complex1 = complex0.ZERO.multiply(685.113);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.ZERO.add(complex3);
      Complex complex6 = complex5.INF.multiply(0.0);
      Complex complex7 = complex4.ONE.multiply(2409.6935900304);
      Complex complex8 = complex0.add(1.0);
      complex8.I.getArgument();
      Complex complex9 = complex3.subtract(complex2);
      complex9.readResolve();
      Complex complex10 = Complex.I;
      Complex complex11 = complex2.INF.subtract(complex10);
      List<Complex> list0 = complex1.I.nthRoot(7);
      assertEquals(7, list0.size());
      
      double double0 = complex8.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex12 = complex0.divide(complex9);
      Complex complex13 = complex1.acos();
      Complex.valueOf(1.5707963267948966);
      Complex complex14 = complex13.ZERO.acos();
      Complex complex15 = complex1.ZERO.exp();
      Complex complex16 = complex15.multiply(2201);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      complex13.sqrt();
      Complex complex17 = complex3.sinh();
      assertSame(complex17, complex5);
      assertSame(complex17, complex12);
      
      Complex complex18 = complex13.multiply(0.0);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      
      complex7.conjugate();
      assertEquals(2409.6935900304, complex7.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex8));
      
      Complex complex19 = complex14.pow(complex15);
      assertEquals(1.5707963267948966, complex19.getReal(), 0.01);
      
      complex10.pow((-6.054541568735673E105));
      Complex complex20 = complex11.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex20.getImaginary(), 0.01);
      assertNotSame(complex2, complex6);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1.530926726615185E-8));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.ZERO.asin();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      complex0.subtract(complex1);
      Complex.valueOf((-2248.683829930477));
      Complex complex4 = complex2.multiply((-1.530926726615185E-8));
      complex1.log();
      Complex complex5 = complex2.cosh();
      assertTrue(complex5.isNaN());
      
      Complex complex6 = complex0.pow(3.973222981713661E240);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex1.log();
      assertFalse(complex7.isNaN());
      
      Complex complex8 = complex2.multiply(1);
      assertSame(complex8, complex4);
      
      complex0.getArgument();
      Complex complex9 = complex1.atan();
      assertTrue(complex9.equals((Object)complex6));
      assertEquals(0.0, complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.subtract(complex1);
      complex3.abs();
      complex3.abs();
      Complex complex4 = complex0.divide((-2035.0));
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.valueOf(0.0, (-1062.375279886));
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex3.asin();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      complex5.subtract(complex4);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.ZERO.tanh();
      assertTrue(complex10.equals((Object)complex7));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.getReal(), 0.01);
      
      Complex complex11 = complex4.multiply(0.0);
      assertEquals(-0.0, complex11.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex8));
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      complex2.isNaN();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      
      double double0 = complex3.getArgument();
      assertFalse(complex3.equals((Object)complex6));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(1214.75581731704);
      Complex complex1 = complex0.INF.add((-56.32057222258));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.INF.multiply(1835);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      
      Complex complex5 = complex0.multiply(1214.75581731704);
      complex5.INF.negate();
      complex1.tan();
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      
      Complex complex6 = complex5.asin();
      assertEquals(1.5707963267948966, complex6.getReal(), 0.01);
      assertEquals((-14.89774390491018), complex6.getImaginary(), 0.01);
      
      complex0.getReal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }
}
