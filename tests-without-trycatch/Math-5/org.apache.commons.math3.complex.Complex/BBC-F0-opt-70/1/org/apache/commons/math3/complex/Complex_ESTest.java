/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:51:36 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.divide(complex3);
      Complex complex4 = complex2.conjugate();
      complex2.subtract(625.2473808);
      complex1.pow(625.2473808);
      Complex complex5 = Complex.NaN;
      complex5.nthRoot(792);
      Complex complex6 = Complex.ZERO;
      complex6.negate();
      complex4.asin();
      Complex complex7 = new Complex(792, Double.POSITIVE_INFINITY);
      complex7.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1475.50808197394), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = Complex.valueOf((-20.0), (-6066.964547));
      Complex complex3 = complex0.multiply(complex2);
      Complex.valueOf(275.5954742327);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.conjugate();
      complex1.multiply((-20.0));
      Complex complex6 = complex3.divide(complex4);
      Complex complex7 = complex5.atan();
      complex4.asin();
      Complex complex8 = Complex.valueOf((-6066.964547), (-20.0));
      complex1.subtract((-2.437796532151255E213));
      complex6.pow((-20.0));
      complex5.readResolve();
      complex7.nthRoot(1213);
      complex8.negate();
      Complex complex9 = Complex.valueOf((-2.437796532151255E213));
      complex9.asin();
      complex9.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1.0);
      Complex complex1 = complex0.tanh();
      complex1.I.readResolve();
      complex0.subtract((-704.04043009));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex1 = new Complex((-2117.14966742), 2.0845030259790466E-168);
      complex0.divide(complex1);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2194.111107275693), Double.POSITIVE_INFINITY);
      complex0.multiply(3963);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1.5464049837965422E-246);
      complex0.I.hashCode();
      complex1.ZERO.abs();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ONE.acos();
      complex3.ZERO.sin();
      Complex complex4 = complex1.acos();
      complex0.INF.nthRoot(2045222521);
      Complex complex5 = complex1.sqrt1z();
      complex5.add(complex2);
      complex5.pow(0.9999999066150053);
      complex4.sqrt();
      complex2.nthRoot(1178);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-27.19268831549735));
      complex0.nthRoot(1175);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.pow((-1402.36735));
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.log();
      complex2.getReal();
      Complex complex8 = complex5.acos();
      complex7.cosh();
      complex3.sqrt();
      complex3.isNaN();
      Complex complex9 = Complex.I;
      complex9.getArgument();
      complex3.reciprocal();
      Complex complex10 = new Complex(2.9902303707775646E-40, 1.5707963267948966);
      Complex complex11 = complex10.tanh();
      Complex.valueOf((-27.19268831549735));
      complex3.pow(complex6);
      complex0.tanh();
      complex3.conjugate();
      complex10.isInfinite();
      complex8.toString();
      complex0.negate();
      complex11.multiply(396);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 30);
      Complex complex1 = complex0.createComplex((-20.0), 1904.5437726971695);
      Complex complex2 = Complex.valueOf((-2411.04115253));
      Complex complex3 = complex2.exp();
      complex1.tanh();
      complex1.pow(complex3);
      Complex complex4 = new Complex((-20.0));
      complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(5.672812341879918E178);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(5.672812341879918E178, (-596.9262));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.divide(complex2);
      complex3.INF.tanh();
      Complex complex5 = Complex.valueOf((-2485.89));
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex1.subtract(5.672812341879918E178);
      complex7.ZERO.cosh();
      complex0.acos();
      Complex.valueOf(0.19339659970004994, 0.19339659970004994);
      complex1.ZERO.cos();
      Complex complex8 = complex5.reciprocal();
      complex6.exp();
      complex8.pow((-2485.89));
      Complex.valueOf(5.672812341879918E178, 1.3794148633283659E-8);
      complex4.tan();
      Complex.valueOf(2.2338151931762695, 5.377173488599035E239);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2094.01951529, (-18.97));
      complex0.NaN.acos();
      Complex complex1 = complex0.divide((-20.0));
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.INF.divide(complex0);
      complex3.INF.subtract(complex1);
      Complex complex4 = Complex.ZERO;
      complex3.subtract(0.6079847527395854);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.I.sqrt();
      complex4.NaN.getArgument();
      Complex complex7 = new Complex(Double.NaN);
      complex2.toString();
      complex6.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.subtract(850.2341295494001);
      Complex complex4 = Complex.valueOf((-1595.2), Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex((-1595.2));
      Complex complex6 = complex5.tan();
      complex6.divide(complex2);
      complex4.getArgument();
      complex3.cosh();
      Complex complex7 = new Complex(1.0);
      complex7.ZERO.pow(complex3);
      Complex complex8 = new Complex(494.73);
      Complex complex9 = complex6.pow(complex4);
      complex0.tanh();
      complex9.isInfinite();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 3751.91992;
      Complex complex0 = new Complex(989.8877, 2.0);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-27.19268831549735), (-27.19268831549735));
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ONE;
      complex8.ONE.multiply((-27.19268831549735));
      Complex complex9 = complex5.subtract((-1.0));
      Complex complex10 = complex5.multiply(1067);
      complex10.readResolve();
      complex4.hashCode();
      Complex complex11 = complex3.sqrt1z();
      complex6.getArgument();
      complex8.asin();
      complex11.isNaN();
      complex9.getArgument();
      complex4.readResolve();
      Complex complex12 = new Complex((-1.0), (-1569.554331));
      complex3.readResolve();
      complex3.readResolve();
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.acos();
      complex0.getImaginary();
      Complex complex3 = complex0.negate();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex complex4 = Complex.NaN;
      complex3.sin();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1769.70028542, 2.2261161215322043E232);
      Complex complex1 = Complex.ZERO;
      complex0.add(complex1);
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex(1769.70028542, 0.0);
      complex3.getImaginary();
      complex0.negate();
      complex0.divide(6.283185307179586);
      complex2.createComplex(2.2261161215322043E232, 1.0);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-27.19268831549735), (-27.19268831549735));
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ONE;
      complex8.ONE.multiply((-27.19268831549735));
      complex5.subtract((-1.0));
      Complex complex9 = Complex.valueOf((-27.19268831549735), (-1376.267600214));
      Complex complex10 = complex9.tan();
      complex1.INF.divide(complex6);
      complex10.getArgument();
      complex1.reciprocal();
      Complex complex11 = Complex.ZERO;
      complex11.tanh();
      Complex.valueOf(2.3850524689999998E7);
      Complex complex12 = Complex.NaN;
      Complex complex13 = Complex.ONE;
      complex4.tanh();
      complex13.isInfinite();
      complex2.toString();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(3751.91992, 1656.08);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.sin();
      complex3.NaN.pow(complex2);
      Complex complex4 = complex2.exp();
      complex4.NaN.asin();
      complex1.acos();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.createComplex((-3506.973), (-3506.973));
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1518.0));
      complex0.NaN.multiply(complex1);
      complex0.I.acos();
      Complex complex2 = complex0.ZERO.divide((-165.1885615));
      complex2.NaN.getField();
      complex0.NaN.readResolve();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.sin();
      complex5.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.nthRoot(42);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(347);
      complex1.readResolve();
      complex0.hashCode();
      Complex complex3 = complex0.sqrt1z();
      complex3.getArgument();
      Complex complex4 = complex1.asin();
      complex2.isNaN();
      complex0.getArgument();
      complex4.readResolve();
      Complex complex5 = new Complex(347, 347);
      complex0.readResolve();
      Complex complex6 = new Complex(0.0, 42);
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.acos();
      complex0.getImaginary();
      Complex complex4 = complex0.negate();
      complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.multiply(0);
      complex4.readResolve();
      complex5.hashCode();
      Complex complex8 = complex7.sqrt1z();
      complex4.getArgument();
      complex1.asin();
      complex2.isNaN();
      complex6.getArgument();
      complex4.readResolve();
      Complex complex9 = new Complex((-3017.2273105), Double.NaN);
      Object object0 = complex5.readResolve();
      complex8.equals(object0);
      complex6.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(3364.0694202563977);
      Complex complex1 = new Complex(3751.91992, 3364.0694202563977);
      complex0.ZERO.multiply(complex1);
      Complex complex2 = Complex.ZERO;
      complex2.multiply(679);
      complex1.cos();
      Complex complex3 = Complex.I;
      complex0.multiply(11);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(3364.0694202563977);
      Complex complex1 = new Complex(3751.91992, 3364.0694202563977);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.negate();
      complex3.sin();
      Complex complex4 = complex1.exp();
      complex2.acos();
      complex4.createComplex((-1.0), 20.0);
      complex4.toString();
      complex1.cosh();
      complex0.sqrt();
      complex3.divide(3751.91992);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      complex1.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide((-1.1505428993246996E-8));
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.divide(complex0);
      complex3.asin();
      complex4.pow(complex3);
      complex6.sqrt();
      Complex complex7 = complex3.subtract(2.8360809165501757E-5);
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.ZERO;
      Complex.valueOf(1.0);
      complex10.pow(complex7);
      complex5.tanh();
      complex9.isInfinite();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1633.9759009934);
      Complex complex1 = complex0.ONE.cos();
      complex0.acos();
      complex1.getImaginary();
      Complex complex2 = complex0.negate();
      complex1.divide(1633.9759009934);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.INF;
      complex3.divide(complex5);
      complex1.nthRoot(24);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(1633.9759009934, (-8.678466172071259E-9));
      Complex complex7 = complex6.asin();
      complex0.pow(complex4);
      complex1.sqrt();
      Complex complex8 = complex6.sinh();
      Complex complex9 = new Complex(2669876.2450271933, 24);
      complex2.subtract(1618.8456993536);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.pow(complex7);
      Complex complex10 = complex8.tanh();
//      try { 
        complex10.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.acos();
      complex0.getImaginary();
      Complex complex4 = complex0.negate();
      complex4.INF.sqrt1z();
      Complex complex5 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.divide(complex1);
      complex7.I.asin();
      complex5.INF.pow(complex3);
      complex8.INF.sqrt();
      Complex complex9 = complex2.subtract(Double.POSITIVE_INFINITY);
      complex1.getArgument();
      complex2.asin();
      complex8.toString();
      complex3.isNaN();
      complex1.getField();
      complex8.getArgument();
      complex6.readResolve();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, (-1569.554331));
      complex10.INF.sinh();
      complex10.readResolve();
      Complex complex11 = Complex.NaN;
      complex3.equals(complex11);
      complex9.getReal();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(1633.9759009934);
      Complex complex1 = complex0.ONE.cos();
      complex1.ONE.conjugate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sqrt1z();
      complex3.negate();
      complex2.divide(1633.9759009934);
      double double0 = 0.0;
      double double1 = (-950.8720577063245);
      Complex complex4 = new Complex((-950.8720577063245), (-2556.07));
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.NaN;
      complex2.divide(complex5);
      int int0 = 24;
//      try { 
        complex4.nthRoot((-2146971109));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,146,971,109
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(0.41389304399490356, 0.41389304399490356);
      complex0.INF.abs();
      Complex complex2 = complex0.tan();
      complex1.ONE.toString();
      complex2.I.hashCode();
      complex1.multiply((-850.29392525715));
      complex1.sin();
      Complex complex3 = complex1.cos();
      complex3.tanh();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-664.81877249707), (-664.81877249707));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex1.atan();
      complex2.log();
      complex1.tanh();
      Complex complex6 = Complex.NaN;
      complex6.getArgument();
      Object object0 = new Object();
      Complex complex7 = Complex.I;
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(-0.0, 618.83);
      Complex complex8 = complex5.multiply(complex4);
      Complex complex9 = Complex.valueOf(2669876.2450271933);
      complex9.tan();
      complex9.asin();
      complex8.sin();
      Complex complex10 = Complex.ONE;
      complex9.getField();
      Complex.valueOf(-0.0, 0.0);
      complex8.multiply((-1416.6089895055725));
      complex5.add(1598.9039557248548);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.acos();
      complex3.getImaginary();
      Complex complex4 = complex0.negate();
      complex0.getImaginary();
      complex0.negate();
      complex4.divide(1.0);
      complex2.tan();
      Complex complex5 = Complex.NaN;
//      try { 
        complex5.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0340436948077763E-129);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.valueOf(379.7843006427);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = Complex.valueOf(1.0340436948077763E-129, 441985.00026451086);
      Complex complex5 = complex3.pow(complex4);
      complex5.getArgument();
      complex1.reciprocal();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1656.08);
      Complex complex1 = complex0.sqrt1z();
      complex0.INF.divide(2466.0);
      complex0.toString();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.I.abs();
      Complex complex1 = Complex.NaN;
      complex1.ONE.pow(20.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex0.abs();
      Complex complex3 = complex0.I.multiply(complex1);
      complex3.ONE.reciprocal();
      Complex.valueOf((-182.11176767917556), 4883.7);
      Complex complex4 = complex0.NaN.pow(20.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf(20.0);
      Complex complex7 = complex6.I.subtract(0.16005131677194784);
      complex7.ONE.abs();
      complex6.divide((-1.0));
      Complex complex8 = complex4.conjugate();
      complex2.equals(")");
      complex1.exp();
      complex4.multiply(complex6);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex3.cos();
      complex5.atan();
      complex8.getField();
      complex7.sinh();
      complex4.NaN.multiply((-833595.6005836693));
      complex4.exp();
      complex1.acos();
      complex9.sqrt();
      complex10.createComplex(3499.5716845072457, 3499.5716845072457);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex0.INF.log();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.INF.subtract(complex1);
      complex0.tanh();
      complex1.subtract(0.0);
      Complex complex4 = Complex.INF;
      complex4.sqrt1z();
      Complex complex5 = complex0.subtract((-549.4));
      Complex complex6 = complex5.sinh();
      complex3.acos();
//      try { 
        complex6.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2939.0349364384906, 2939.0349364384906);
      Complex complex1 = Complex.valueOf(2939.0349364384906, 0.0);
      Complex complex2 = complex0.createComplex(1.6503322124481201, 1.6503322124481201);
      Complex complex3 = new Complex(2939.0349364384906);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex2.subtract(Double.POSITIVE_INFINITY);
      complex5.tan();
      complex4.getArgument();
      complex0.reciprocal();
      Complex complex6 = complex2.tanh();
      Complex.valueOf(0.0);
      Complex complex7 = Complex.ONE;
      complex6.tanh();
      complex2.isInfinite();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-664.81877249707));
      complex0.createComplex(775.0, (-664.81877249707));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(1416.6089895055725);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.subtract(Double.NaN);
      Complex complex5 = new Complex(1597.3543285);
      complex5.sinh();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex4.subtract(complex3);
      complex7.conjugate();
      complex5.cosh();
      complex7.cos();
      complex1.multiply(0.0);
      complex5.tan();
      complex0.subtract(775.0);
      complex6.getImaginary();
      complex2.multiply(0.024002488069368333);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.sqrt();
      complex6.subtract((-1.0));
      complex5.tan();
      complex5.NaN.getArgument();
      complex1.reciprocal();
      Complex complex7 = complex0.tanh();
      Complex.valueOf(1326.419362931359);
      complex7.pow(complex4);
      complex2.tanh();
      complex7.isInfinite();
      complex1.toString();
      Complex.valueOf(Double.NaN, 1880.8);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex.valueOf((-327.988301));
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(1.0);
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.pow((-913.0151152));
      Complex complex5 = complex3.log();
      complex4.getReal();
      Complex complex6 = new Complex((-913.0151152));
      complex6.acos();
      complex4.cosh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sqrt();
      complex0.isNaN();
      complex4.multiply((-913.0151152));
      complex2.nthRoot(406);
      Complex complex9 = Complex.valueOf((-327.988301));
      complex1.readResolve();
      Complex complex10 = complex2.negate();
      complex8.createComplex(142.974, (-2072.6801145));
      Complex complex11 = Complex.I;
      complex5.tanh();
      Complex complex12 = complex10.atan();
      complex5.hashCode();
      complex12.getField();
      complex9.isInfinite();
      complex0.getReal();
      complex8.pow(complex0);
      Complex complex13 = new Complex((-999.176), (-20.0));
      complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-327.988301));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply(1.0);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.pow((-913.0151152));
      complex4.log();
      complex5.getReal();
      Complex complex6 = new Complex((-913.0151152));
      Complex complex7 = complex6.acos();
      complex5.cosh();
      Complex complex8 = complex4.subtract(9.845548434372667E-33);
      complex3.tan();
      complex0.getArgument();
      Complex complex9 = Complex.NaN;
      complex0.tanh();
      Complex.valueOf((-327.988301));
      Complex complex10 = complex4.pow(complex8);
      complex7.tanh();
      complex10.isInfinite();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2939.0349364384906, 2939.0349364384906);
      Complex.valueOf(2939.0349364384906, 0.0);
      Complex complex1 = complex0.createComplex(1.6503322124481201, 1.6503322124481201);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.subtract(0.0);
      Complex complex4 = complex1.NaN.sqrt1z();
      complex3.ONE.subtract(Double.NaN);
      Complex complex5 = complex1.sinh();
      complex5.INF.acos();
      Complex complex6 = complex5.NaN.subtract(complex1);
      complex6.ONE.cosh();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex7.ZERO.multiply((-271.0));
      complex5.tan();
      complex6.subtract(2939.0349364384906);
      complex4.getImaginary();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.acos();
      complex3.getImaginary();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.divide((-2556.07));
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.NaN;
      complex3.divide(complex4);
      complex3.nthRoot(24);
      Complex complex8 = Complex.valueOf(2669876.2450271933);
      complex8.asin();
      complex6.pow(complex5);
      Complex complex9 = complex4.sqrt();
      complex3.subtract((-1885.7966937569897));
      Complex complex10 = complex8.sinh();
      Complex complex11 = new Complex(2669876.2450271933, 0.0);
      complex11.subtract(0.0);
      Complex complex12 = Complex.ZERO;
      Complex.valueOf((double) 24);
      complex9.pow(complex1);
      complex10.tanh();
      Complex complex13 = Complex.ZERO;
      complex13.isInfinite();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(1.557407724654902, (-2087.080481386006));
      Complex complex4 = complex3.ONE.exp();
      complex4.INF.reciprocal();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      Complex complex5 = Complex.valueOf((-2087.080481386006), (-313.8122986431));
      Complex complex6 = complex1.sqrt1z();
      complex1.createComplex((-2087.080481386006), (-862.0082684));
      Complex complex7 = (Complex)complex3.readResolve();
      complex2.sqrt();
      complex6.subtract((-2087.080481386006));
      Complex complex8 = Complex.ZERO;
      complex8.sinh();
      complex0.subtract(1.557407724654902);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.valueOf(1.557407724654902);
      complex5.pow(complex7);
      Complex complex11 = Complex.ZERO;
      complex11.tanh();
      complex10.isInfinite();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3288.411764978242, 3288.411764978242);
      complex0.getField();
      complex0.getField();
      complex0.INF.atan();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ONE.reciprocal();
      complex2.INF.negate();
      complex2.ONE.abs();
      Complex complex4 = Complex.valueOf((-2.5339299158309795E-8));
      Complex complex5 = Complex.valueOf(2.414213562373095);
      complex4.ZERO.multiply(complex5);
      complex4.toString();
      complex2.getArgument();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex4.multiply(3926.11367367);
      Complex complex9 = complex8.NaN.subtract(complex7);
      Complex complex10 = complex1.subtract((-2.5339299158309795E-8));
      complex6.ONE.add((-1507.19));
      complex4.abs();
      Complex complex11 = complex10.sinh();
      complex3.toString();
      complex11.sqrt();
      complex1.ZERO.readResolve();
      complex0.multiply(complex3);
      Complex complex12 = Complex.valueOf(2.0);
      complex12.INF.multiply(20.0);
      complex11.exp();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6544084224626834E220, 1.6544084224626834E220);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.negate();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.multiply(2);
      complex3.acos();
      complex2.INF.cos();
      Complex complex4 = complex0.NaN.sin();
      complex4.sqrt();
      complex4.I.sin();
      complex0.divide(1.0340436948077763E-129);
      Complex complex5 = complex0.tanh();
      Complex.valueOf(1.0340436948077763E-129);
      Complex complex6 = Complex.valueOf(388.24278034779485);
      complex6.I.reciprocal();
      Complex complex7 = Complex.INF;
      complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex3.divide(complex5);
      complex4.cosh();
      complex8.equals(complex3);
      Complex complex11 = Complex.ZERO;
      complex11.getImaginary();
      complex1.divide(complex10);
      Complex complex12 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4883.7));
      complex0.nthRoot(47);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex((-70.7228080487624));
      Complex complex3 = complex2.multiply(47);
      complex3.acos();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.sqrt();
      complex4.sin();
      complex2.divide(1.8037066459655762);
      complex6.tanh();
      Complex complex7 = Complex.valueOf((-2209.08157510726));
      Complex.valueOf((-2270.654148827));
      Complex complex8 = new Complex((-2270.654148827), (-9.892260062323546E-8));
      Complex complex9 = complex8.reciprocal();
      complex2.tan();
      Complex complex10 = complex1.sqrt();
      complex3.getArgument();
      complex7.ONE.subtract(complex6);
      complex0.subtract(complex9);
      complex1.subtract(complex7);
      complex7.abs();
      complex1.multiply((-4883.7));
      Complex complex11 = complex3.subtract(complex10);
      complex11.multiply(2146290458);
      Complex complex12 = complex10.asin();
      complex12.ZERO.tanh();
      complex8.multiply(3059);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.negate();
      Complex complex1 = complex0.I.exp();
      complex0.ONE.asin();
      Complex complex2 = complex1.NaN.multiply(2);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = Complex.NaN;
      complex6.hashCode();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.ZERO;
      complex7.add(complex8);
      Complex complex9 = complex5.sqrt();
      Complex complex10 = Complex.INF;
      complex10.getField();
      Complex complex11 = Complex.valueOf((double) 2);
      Complex complex12 = complex11.asin();
      complex0.sqrt();
      complex12.isNaN();
      complex1.divide(complex4);
      Complex.valueOf(2073.6801145, 1386.310918);
      complex3.toString();
      complex6.pow(complex10);
      complex9.pow(659.69);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2947.78201464, 2947.78201464);
      Complex complex1 = Complex.valueOf(2947.78201464, 0.0);
      Complex complex2 = complex0.createComplex(1.6503322124481201, 1.6503322124481201);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex2.ONE.add(complex0);
      complex4.exp();
      Complex complex5 = complex3.I.subtract(0.0);
      complex2.NaN.sqrt1z();
      Complex complex6 = complex5.ONE.subtract(Double.NaN);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.INF.acos();
      complex0.ZERO.nthRoot(396);
      Complex complex9 = complex7.NaN.subtract(complex2);
      complex9.ONE.cosh();
      Complex complex10 = complex9.I.cos();
      complex10.ZERO.multiply((-271.0));
      complex10.tan();
      complex6.subtract(1.6503322124481201);
      Complex complex11 = Complex.NaN;
      complex11.getImaginary();
      complex8.sin();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.acos();
      complex0.getImaginary();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex5.INF.pow(0.0);
      complex1.getReal();
      complex5.acos();
      Complex complex6 = complex3.cosh();
      complex4.sqrt();
      complex3.isNaN();
      complex5.multiply((-1612.0));
      complex3.nthRoot(32);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = new Complex(0.0);
      complex8.readResolve();
      complex4.negate();
      complex6.createComplex(Double.POSITIVE_INFINITY, 1945.0);
      Complex complex9 = complex7.tanh();
      Complex complex10 = Complex.ZERO;
      complex10.atan();
      complex7.hashCode();
      complex9.getField();
      complex2.isInfinite();
      complex7.getReal();
      Complex complex11 = complex7.reciprocal();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4883.7));
      complex0.nthRoot(47);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.ONE.sqrt();
      complex3.ONE.pow((-4883.7));
      Complex complex5 = complex1.log();
      complex1.getReal();
      Complex complex6 = complex1.NaN.acos();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex2.NaN.sqrt();
      complex7.isNaN();
      complex5.ONE.multiply((-4883.7));
      complex7.ONE.nthRoot(47);
      Complex.valueOf((double) 47);
      complex7.readResolve();
      Complex complex9 = complex5.negate();
      complex6.ONE.createComplex(1566.8251366366, 1566.8251366366);
      Complex complex10 = complex9.tanh();
      complex7.INF.atan();
      complex6.hashCode();
      complex0.getField();
      complex3.getImaginary();
      complex7.divide(complex8);
      complex4.pow(complex0);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(1633.9759009934);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.conjugate();
      complex1.tanh();
      Complex complex3 = complex0.sqrt1z();
      complex1.INF.exp();
      complex3.getReal();
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = new Complex((-1798.784303954), (-1138.8387));
      Complex complex6 = complex4.ZERO.subtract(complex5);
      Complex complex7 = complex4.subtract(0.0);
      complex4.NaN.pow(complex1);
      Complex complex8 = Complex.valueOf((-1798.784303954), 0.0);
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex8.log();
      complex9.reciprocal();
      Complex complex11 = Complex.valueOf((-1138.8387), 3.8445667684706366E98);
      Complex complex12 = complex11.multiply(0);
      complex7.readResolve();
      complex5.hashCode();
      complex1.sqrt1z();
      complex2.getArgument();
      complex10.asin();
      complex1.toString();
      complex7.isNaN();
      complex10.getField();
      complex6.getArgument();
      complex11.readResolve();
      Complex complex13 = new Complex(0.0, (-1569.554331));
      Object object0 = complex13.readResolve();
      complex13.equals(object0);
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(3174.63888332956);
      Complex complex1 = complex0.ZERO.tan();
      complex0.ONE.getArgument();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.INF.subtract(complex4);
      Complex complex6 = (Complex)complex4.I.readResolve();
      Complex complex7 = complex3.exp();
      complex4.subtract(complex7);
      Complex.valueOf(3174.63888332956);
      complex1.cos();
      complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex5.subtract(3174.63888332956);
      complex9.INF.nthRoot(4991);
      complex1.getImaginary();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 1656.08;
      Complex complex0 = Complex.valueOf(1656.08);
      complex0.isNaN();
      Complex complex1 = complex0.multiply(1656.08);
      // Undeclared exception!
      complex1.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2939.0349364384906, 2939.0349364384906);
      Complex.valueOf(2939.0349364384906, 0.0);
      Complex complex1 = complex0.createComplex(1.6503322124481201, 1.6503322124481201);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.NaN.sqrt1z();
      complex3.ONE.subtract(Double.NaN);
      Complex complex5 = complex1.sinh();
      complex5.INF.acos();
      Complex complex6 = complex5.NaN.subtract(complex1);
      complex6.ONE.cosh();
      Complex complex7 = Complex.ZERO;
      complex7.ZERO.multiply((-271.0));
      complex5.tan();
      complex6.subtract(2939.0349364384906);
      complex4.getImaginary();
      complex0.sinh();
      complex3.pow((-271.0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4883.7));
      complex0.nthRoot(47);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.ONE.sqrt();
      complex3.ONE.pow((-4883.7));
      Complex complex5 = complex1.log();
      complex1.getReal();
      Complex complex6 = complex1.NaN.acos();
      Complex complex7 = complex3.cosh();
      complex2.NaN.sqrt();
      complex7.isNaN();
      complex5.ONE.multiply((-4883.7));
      complex7.ONE.nthRoot(47);
      Complex complex8 = Complex.valueOf((double) 47);
      complex7.readResolve();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex6.ONE.createComplex(1566.8251366366, 1566.8251366366);
      complex9.tanh();
      complex7.INF.atan();
      complex6.hashCode();
      complex0.getField();
      complex7.isInfinite();
      complex10.getReal();
      complex4.reciprocal();
      complex8.ZERO.tanh();
      complex4.tanh();
      complex8.toString();
      complex1.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(1633.9759009934);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.NaN.exp();
      complex3.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex1.INF.exp();
      complex4.getReal();
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = new Complex((-1798.784303954), (-1138.8387));
      complex5.ZERO.subtract(complex6);
      complex5.subtract(0.0);
      Complex complex7 = complex5.NaN.pow(complex1);
      Complex complex8 = Complex.ONE;
      complex8.INF.sqrt1z();
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.ONE.reciprocal();
      complex9.NaN.multiply(1153);
      complex8.readResolve();
      complex2.hashCode();
      complex9.sqrt1z();
      Complex complex11 = Complex.ONE;
      complex10.getField();
      Complex.valueOf(1633.9759009934, Double.NaN);
      complex6.multiply((double) 1153);
      complex7.add((-0.5));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2.3850524689999998E7, 1563.7499873443);
      Complex complex2 = complex1.multiply((-3364));
      complex1.createComplex((-1351.54719319), (-9.029878114318277E237));
      Complex complex3 = complex0.pow(complex1);
      complex0.I.readResolve();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf((-1.0), 1563.7499873443);
      Complex complex6 = complex5.I.asin();
      complex4.getReal();
      complex5.sqrt1z();
      Complex.valueOf(Double.NaN);
      Complex complex7 = Complex.NaN;
      complex0.multiply(complex7);
      complex4.exp();
      complex0.log();
      complex6.getArgument();
      complex2.tan();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(3174.63888332956);
      Complex complex1 = complex0.ZERO.tan();
      complex0.ONE.getArgument();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.cos();
      complex3.INF.subtract(complex4);
      complex4.I.readResolve();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex2.atan();
      complex6.I.tan();
      complex6.log();
      complex1.getField();
      complex1.atan();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.exp();
      complex6.getReal();
      complex5.asin();
      Complex complex7 = new Complex(4883.7, 1.0);
      Complex complex8 = complex3.subtract(complex1);
      Complex complex9 = complex4.subtract((-1798.784303954));
      Complex complex10 = Complex.valueOf(1.0812448255518705E-301);
      complex3.pow(complex10);
      Complex.valueOf((-1798.784303954), (-4092.5150098616123));
      complex8.sqrt1z();
      complex6.log();
      complex4.reciprocal();
      Complex complex11 = complex8.multiply(32);
      Complex complex12 = Complex.ZERO;
      complex12.readResolve();
      complex5.hashCode();
      complex10.sqrt1z();
      complex11.getArgument();
      complex12.toString();
      complex11.getField();
      complex9.getArgument();
      complex6.readResolve();
      Complex complex13 = new Complex(1153);
      complex12.equals(complex13);
      complex10.multiply(7);
      Complex complex14 = new Complex(3.141592653589793);
      complex2.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-327.988301));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply(1.0);
      complex2.ONE.sinh();
      Complex complex3 = complex1.add(2.0);
      complex3.ONE.sin();
      complex3.hashCode();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ONE.sin();
      complex1.pow(complex3);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.I.divide(complex6);
      Complex complex8 = complex7.ZERO.cos();
      complex5.reciprocal();
      complex0.pow(complex2);
      complex1.sqrt();
      Complex complex9 = complex0.subtract(2186.27714120659);
      Complex complex10 = complex4.sinh();
      complex3.subtract(1715.988772599926);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.divide(complex10);
      Complex complex14 = complex8.cosh();
      complex14.equals(complex6);
      complex8.getImaginary();
      complex9.divide(complex6);
      complex12.pow(complex13);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1510.0127));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.valueOf((-1510.0127), (-1510.0127));
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      Complex complex4 = complex0.divide(complex2);
      complex1.tan();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex5.I.multiply((-1510.0127));
      complex6.NaN.sqrt();
      Complex complex7 = complex1.atan();
      complex2.add(complex0);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.ONE.sqrt();
      double double0 = 0.0;
      Complex complex11 = complex1.INF.atan();
      Complex complex12 = complex9.ZERO.divide(0.0);
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      Complex complex14 = complex2.negate();
      complex14.sin();
      complex13.pow((-20.0));
      complex12.sqrt();
      complex2.sqrt1z();
      complex8.log();
      complex11.pow((-20.0));
      complex14.isNaN();
      double double1 = 1.0;
      Complex.valueOf(3254.8, 1.0);
      complex10.cosh();
      complex3.createComplex(0.6176109313964844, 0.6176109313964844);
//      try { 
        complex5.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.cosh();
      complex2.abs();
      complex1.getImaginary();
      complex0.conjugate();
      complex4.isInfinite();
      Complex complex5 = complex3.negate();
      complex5.ZERO.abs();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex6.cosh();
      complex7.ZERO.reciprocal();
      Complex complex8 = complex0.createComplex(0.0, 0.0);
      complex2.sqrt1z();
      complex8.multiply(Double.NaN);
      Complex complex9 = complex3.subtract(complex2);
      complex9.ZERO.log();
      complex9.ONE.sqrt();
      complex9.tanh();
      complex3.log();
      complex4.hashCode();
      complex4.toString();
      Complex.valueOf(1.0, 1.0);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4883.7));
      complex0.nthRoot(47);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = new Complex(2139.27714120659);
      Complex complex5 = complex4.add((double) 47);
      Complex complex6 = complex1.sin();
      complex4.hashCode();
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = complex3.sin();
      complex5.pow(complex4);
      Complex complex9 = new Complex(47);
      Complex complex10 = complex9.cosh();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.divide(complex10);
      complex3.cos();
      complex7.reciprocal();
      complex7.add(2139.27714120659);
      complex1.sqrt();
      complex12.getField();
      complex8.getReal();
      complex11.add(624.51849504903);
      Complex complex13 = complex2.tanh();
      Complex complex14 = Complex.valueOf(1487.6300750894359, 6.283185307179586);
      complex14.acos();
      Complex complex15 = new Complex(1369.47098292547, 1696.6597265);
      complex7.multiply(complex6);
      complex8.getField();
      complex13.isNaN();
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.cosh();
      complex0.abs();
      complex4.getImaginary();
      complex0.conjugate();
      complex5.isInfinite();
      Complex complex6 = complex4.negate();
      complex6.ZERO.abs();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex7.cosh();
      complex8.ZERO.reciprocal();
      Complex complex9 = complex0.createComplex(Double.NaN, Double.NaN);
      complex4.sqrt1z();
      complex9.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.subtract(complex2);
      complex10.ZERO.log();
      Complex.valueOf(Double.NaN);
      complex10.tanh();
      complex3.log();
      complex5.hashCode();
      complex5.toString();
      Complex.valueOf(1.0, 1.0);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.cosh();
      complex4.abs();
      complex4.getImaginary();
      complex0.conjugate();
      complex0.isInfinite();
      Complex complex5 = new Complex(Double.NaN);
      complex5.ZERO.abs();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex6.cosh();
      complex7.ZERO.reciprocal();
      Complex complex8 = complex0.createComplex(Double.NaN, Double.NaN);
      complex4.sqrt1z();
      complex8.multiply(Double.NaN);
      Complex complex9 = complex4.subtract(complex2);
      complex9.ONE.sqrt();
      complex9.tanh();
      complex3.log();
      complex3.hashCode();
      complex1.toString();
      Complex.valueOf(1.0, 1.0);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex2.NaN.multiply(2);
      complex4.I.acos();
      complex3.INF.cos();
      Complex complex5 = complex0.NaN.sin();
      complex5.sqrt();
      complex5.I.sin();
      Complex complex6 = complex0.divide(1.0340436948077763E-129);
      Complex complex7 = complex0.tanh();
      Complex complex8 = Complex.valueOf(1.0340436948077763E-129);
      Complex complex9 = Complex.valueOf(379.7843006427);
      Complex complex10 = complex9.I.reciprocal();
      Complex complex11 = complex3.ONE.tan();
      complex7.sqrt();
      complex3.getArgument();
      complex0.subtract(complex2);
      complex3.subtract(complex8);
      complex5.abs();
      Complex complex12 = complex6.multiply(0.0);
      complex6.subtract(complex12);
      complex11.multiply(2);
      complex1.asin();
      complex10.multiply(3059);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1510.0127));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.valueOf((-1510.0127), (-1510.0127));
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.reciprocal();
      complex6.hashCode();
      Complex complex7 = new Complex((-1.0), 1328.08);
      Complex complex8 = complex0.add(complex7);
      complex8.sqrt();
      complex6.getField();
      Complex.valueOf(1576417.8942702808);
      Complex complex9 = complex2.asin();
      complex4.sqrt();
      complex9.isNaN();
      complex2.divide(complex7);
      Complex.valueOf((-1.0), 1576417.8942702808);
      Complex complex10 = Complex.ZERO;
      complex10.toString();
      Complex complex11 = Complex.ZERO;
      complex7.pow(complex11);
      complex1.pow(1640.4674715967346);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-327.988301));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply(1.0);
      complex2.ONE.sinh();
      Complex complex3 = complex1.add(2.0);
      Complex complex4 = complex3.ONE.sin();
      complex3.hashCode();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.ONE.sin();
      complex1.pow(complex3);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex1.I.divide(complex7);
      complex8.ZERO.cos();
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex6.NaN.add(624.51849504903);
      Complex complex11 = complex6.sqrt();
      complex5.getField();
      complex7.getReal();
      complex6.NaN.add(0.0);
      Complex complex12 = complex9.tanh();
      complex10.acos();
      Complex complex13 = new Complex(1.0, 2.0);
      complex1.multiply(complex13);
      complex11.getField();
      complex12.isNaN();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.cosh();
      complex4.abs();
      complex4.getImaginary();
      complex0.conjugate();
      complex5.isInfinite();
      Complex complex6 = complex4.negate();
      complex6.ZERO.abs();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex7.cosh();
      complex8.ZERO.reciprocal();
      Complex complex9 = complex0.createComplex(Double.NaN, Double.NaN);
      complex4.sqrt1z();
      complex9.multiply(Double.NaN);
      Complex complex10 = complex4.subtract(complex2);
      complex10.ZERO.log();
      complex10.ONE.sqrt();
      complex10.tanh();
      complex3.log();
      complex5.hashCode();
      complex5.toString();
      Complex.valueOf(1.0, 1.0);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.INF.atan();
      complex3.ONE.log();
      Complex complex4 = complex0.INF.sinh();
      complex3.INF.tanh();
      complex0.getArgument();
      Object object0 = new Object();
      complex0.equals(object0);
      complex4.multiply(complex0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.tan();
      complex4.asin();
      complex6.sin();
      complex2.getField();
      Complex complex7 = complex1.multiply(0.0);
      complex7.add((-62.778481));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.pow((-1041.008973));
      complex2.NaN.atan();
      complex1.NaN.acos();
      Complex complex3 = complex0.multiply(12);
      Complex complex4 = new Complex(12, 0.0);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = Complex.I;
      complex5.ZERO.add(complex6);
      complex3.ONE.subtract(complex4);
      Complex complex7 = Complex.valueOf((double) 12);
      complex0.ZERO.sqrt1z();
      complex7.I.add(0.0);
      complex3.reciprocal();
      Complex complex8 = complex3.reciprocal();
      complex8.add(0.0);
      complex4.acos();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      complex1.INF.multiply(2.0);
      complex1.I.readResolve();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.pow(2.0);
      complex5.I.cos();
      complex3.ZERO.log();
      complex1.INF.getArgument();
      complex0.hashCode();
      complex3.multiply(complex1);
      Complex complex6 = Complex.NaN;
      complex3.add(complex6);
      int int0 = (-1668);
//      try { 
        complex2.ONE.nthRoot((-1668));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,668
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(265.14796862, (-2864.338666147005));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.ONE.add(265.14796862);
      complex3.NaN.tanh();
      Complex complex4 = complex0.ZERO.add(complex1);
      complex0.INF.pow((-6.0370682395944045E-9));
      complex0.acos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.INF.asin();
      complex5.INF.reciprocal();
      complex0.subtract((-6.0370682395944045E-9));
      Complex complex7 = complex1.multiply(complex4);
      complex0.cos();
      complex7.divide(complex0);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.ZERO.pow(complex5);
      complex9.I.sqrt1z();
      complex5.abs();
      complex4.atan();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-403.04426326798574), (-403.04426326798574));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.asin();
      complex2.sqrt1z();
      Complex complex3 = Complex.ONE;
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.acos();
      complex0.getImaginary();
      complex0.negate();
      Complex complex3 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.pow(0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.multiply(complex1);
      complex6.divide(complex1);
      complex6.ZERO.add(complex4);
//      try { 
        complex5.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(920.82124177);
      complex0.I.log();
      complex0.ZERO.multiply(920.82124177);
      complex0.getField();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.getField();
      Complex complex1 = Complex.ONE;
      complex1.NaN.pow(0.34577590227127075);
      Complex complex2 = complex0.pow(complex1);
      complex2.acos();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(2.0734340706476473E-9);
      Complex complex2 = complex1.NaN.createComplex(1.133148431777954, 2.0734340706476473E-9);
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex3.I.add(complex1);
      complex0.I.getArgument();
      complex0.I.hashCode();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex0.multiply((-1066));
      Complex complex7 = complex6.ONE.add(1.5707963267948966);
      complex7.NaN.log();
      Complex complex8 = complex7.ONE.exp();
      complex8.INF.hashCode();
      complex7.ZERO.sqrt1z();
      complex6.INF.atan();
      Complex complex9 = complex6.NaN.acos();
      complex9.I.log();
      complex6.isInfinite();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex5.tanh();
      Complex.valueOf(2.2116799789922265E-191, (-210.10568338617));
      complex6.sinh();
      complex10.divide(76.35905484698561);
      complex2.reciprocal();
      complex5.getImaginary();
      complex5.hashCode();
      complex4.acos();
      complex6.sqrt1z();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1510.0127));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.valueOf((-1510.0127), (-1510.0127));
      complex2.ONE.readResolve();
      Complex complex3 = complex0.divide(complex2);
      complex1.tan();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.I.multiply((-1510.0127));
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex1.atan();
      complex2.add(complex0);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex3.atan();
      Complex complex10 = complex9.ONE.sqrt();
      complex1.INF.atan();
      complex9.ZERO.divide(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex1.pow(0.0);
      complex13.I.sqrt();
      Complex complex14 = complex11.sqrt1z();
      complex7.log();
      complex8.pow(0.0);
      complex8.isNaN();
      Complex.valueOf((-1510.0127), 0.0);
      complex12.cosh();
      complex10.createComplex(0.0, (-1510.0127));
      complex14.add(complex7);
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(4.367697180842916E-8, 4.367697180842916E-8);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.ZERO.nthRoot(7);
      complex1.sqrt();
      complex1.INF.getArgument();
      complex0.ONE.getArgument();
      complex0.getArgument();
      complex0.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.I.log();
      complex2.abs();
      complex4.subtract((-1.0));
      Complex complex5 = complex4.multiply(7);
      Complex complex6 = complex3.conjugate();
      complex6.toString();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.NaN.reciprocal();
      complex8.ONE.add(complex5);
      complex5.getField();
      Complex complex9 = complex6.conjugate();
      complex9.pow(0.0);
      Complex complex10 = Complex.valueOf((-1971.51230953966), 0.0);
      complex4.equals(complex10);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-758.113058476954));
      Complex complex1 = complex0.NaN.reciprocal();
      complex0.getImaginary();
      complex0.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.multiply(8.3949271977);
      Complex complex4 = Complex.valueOf(0.0);
      complex0.INF.readResolve();
      complex2.ONE.nthRoot(119);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.NaN.acos();
      complex1.INF.pow(complex2);
      complex6.ZERO.multiply((-3213.525631109458));
      Complex complex7 = complex2.divide(complex1);
      Complex complex8 = complex7.NaN.add((-758.113058476954));
      Complex complex9 = complex5.log();
      complex4.divide((-758.113058476954));
      Complex.valueOf(0.0, (-20.0));
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = complex4.sqrt1z();
      complex11.I.getField();
      complex9.subtract(0.0);
      Complex complex12 = complex9.pow(1565.79);
      complex12.NaN.pow(8.3949271977);
      complex10.equals(complex1);
      Complex complex13 = complex8.asin();
      complex13.INF.pow(1.4262712796792241E-9);
      complex3.equals(complex7);
      Complex.valueOf((-3213.525631109458));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt1z();
      complex1.NaN.cos();
      Complex complex2 = complex0.multiply(3164);
      complex2.ONE.sqrt();
      complex2.I.abs();
      Complex complex3 = complex0.atan();
      int int0 = (-2598);
//      try { 
        complex3.INF.nthRoot((-2598));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,598
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(557.829421001);
      Complex complex1 = new Complex(0.0, 2825.98557);
      Complex complex2 = complex1.conjugate();
      complex1.NaN.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.ZERO.multiply(2);
      complex8.NaN.sqrt();
      complex4.ZERO.cosh();
      Complex complex9 = complex5.INF.multiply((-1230));
      Complex.valueOf((double) (-1230));
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex3.tan();
      complex1.ONE.createComplex(0.0, (-1364.68413));
      complex11.I.multiply(complex1);
      complex11.NaN.abs();
      complex8.atan();
      complex2.readResolve();
      complex11.tan();
      complex0.conjugate();
      Complex.valueOf(0.0, 0.0);
      complex10.multiply(0.0);
      complex7.getField();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1664.6852836680002));
      Complex complex1 = complex0.NaN.multiply((-639.9));
      complex1.abs();
      complex1.ONE.reciprocal();
      complex0.INF.nthRoot(1);
      Complex complex2 = complex0.createComplex((-1664.6852836680002), 6056.0);
      complex2.I.conjugate();
      Complex.valueOf((-1664.6852836680002), (-639.9));
      Complex complex3 = Complex.valueOf(0.0);
      complex3.INF.getField();
      Complex.valueOf(2893.8455758018);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1085.8873, 2.189226237170704E-9);
      Complex complex1 = complex0.add(1085.8873);
      double double0 = 0.0;
      complex0.INF.add(complex1);
      Complex.valueOf(2.189226237170704E-9);
      Complex complex2 = complex1.ZERO.pow(0.0);
      complex2.I.log();
      Complex complex3 = Complex.valueOf(100.462456, (-1.0));
      Complex complex4 = complex3.INF.pow(complex1);
      complex4.ZERO.hashCode();
      Complex complex5 = complex2.NaN.multiply(2.189226237170704E-9);
      complex5.INF.sqrt();
      Complex complex6 = complex1.conjugate();
      complex6.NaN.tanh();
      int int0 = (-2521);
      complex0.I.tan();
//      try { 
        complex6.I.nthRoot((-2521));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,521
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1600.183767640389, 1600.183767640389);
      complex0.INF.tan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-1327.779);
      Complex complex0 = new Complex((-1327.779), (-1327.779));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.NaN.subtract(70.7818);
//      try { 
        complex3.I.nthRoot((-669));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -669
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(0.0, 1.8376017791642605E-8);
      complex0.ZERO.abs();
      int int0 = 0;
      complex0.I.add(0.0);
      Complex complex1 = complex0.multiply(0);
      int int1 = 0;
//      try { 
        complex1.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4883.7));
      complex0.nthRoot(47);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.ONE.sqrt();
      complex3.ONE.pow((-4883.7));
      Complex complex5 = complex1.log();
      complex1.getReal();
      Complex complex6 = complex1.NaN.acos();
      Complex complex7 = complex3.cosh();
      complex2.NaN.sqrt();
      complex7.isNaN();
      complex5.ONE.multiply((-4883.7));
      complex7.ONE.nthRoot(406);
      Complex.valueOf((double) 47);
      complex7.readResolve();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex6.ONE.createComplex(1566.8251366366, 1566.8251366366);
      complex0.ONE.atan();
      complex8.tanh();
      complex7.INF.atan();
      complex6.hashCode();
      complex0.getField();
      complex7.isInfinite();
      complex9.getReal();
      complex4.reciprocal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(613.0, (-5.3681978363391484E-52));
      Complex complex1 = complex0.pow(0.0);
      complex0.getImaginary();
      Complex complex2 = complex0.pow(613.0);
      Complex complex3 = complex2.add(complex0);
      complex1.I.cos();
      complex3.ONE.add(0.0);
      complex1.sin();
      complex1.multiply(4870);
      complex1.multiply(1840);
      complex0.asin();
      complex3.multiply(3059);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1368.965141968527, (-1906.387036103));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.exp();
      complex1.getReal();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      complex0.INF.abs();
      Complex complex2 = Complex.valueOf(2913.80973);
      complex2.INF.sin();
      complex2.INF.hashCode();
      Complex complex3 = complex0.multiply(1080);
      Complex complex4 = complex3.INF.asin();
      complex4.I.subtract(2913.80973);
      Complex complex5 = complex4.ZERO.add(complex3);
      complex5.NaN.tan();
      Complex complex6 = Complex.valueOf(0.0, 2913.80973);
      Complex.valueOf(2913.80973, 2913.80973);
      Complex complex7 = complex1.multiply(1080);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.I.add(complex1);
      Complex complex9 = Complex.valueOf(0.5512100458145142);
      complex9.ONE.divide(complex1);
      complex0.readResolve();
      complex9.sqrt();
      complex6.createComplex(0.0, (-1004.063715));
      complex8.negate();
      Complex complex10 = complex8.cosh();
      complex9.pow(complex4);
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2947.78201464, 2947.78201464);
      Complex.valueOf(2947.78201464, 0.0);
      Complex complex1 = complex0.createComplex(1.6503322124481201, 1.6503322124481201);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.I.subtract(0.0);
      Complex complex4 = complex1.NaN.sqrt1z();
      complex3.ONE.subtract(Double.NaN);
      Complex complex5 = complex1.sinh();
      complex5.INF.acos();
      Complex complex6 = complex5.NaN.subtract(complex1);
      complex6.ONE.cosh();
      Complex complex7 = complex6.I.cos();
      complex7.ZERO.multiply((-271.0));
      complex5.tan();
      complex6.subtract(2947.78201464);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.log();
      complex2.I.toString();
      complex2.multiply(37);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-282.4));
      Complex complex4 = complex3.sqrt1z();
      complex4.add(complex1);
      Complex complex5 = complex0.createComplex(582.79, 582.79);
      complex0.getField();
      Complex.valueOf(881.6);
      Complex complex6 = complex5.sqrt();
      complex6.NaN.nthRoot(37);
      Complex complex7 = complex6.NaN.pow(582.79);
      Complex complex8 = complex7.ONE.reciprocal();
      complex8.ONE.atan();
      Complex.valueOf(881.6, 582.79);
      Complex complex9 = complex0.pow(377.0);
      complex9.subtract(complex1);
      complex5.pow((-1013.92171588));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2336.95051));
      complex0.getArgument();
      complex0.toString();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.I.negate();
      complex0.equals("(-2336.95051, 0.0)");
      complex1.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      complex2.INF.getArgument();
      complex2.sin();
      complex1.subtract(complex0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.negate();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.NaN.multiply(1);
      complex3.I.acos();
      complex2.INF.cos();
      Complex complex4 = complex0.NaN.sin();
      complex4.sqrt();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.divide(1.0340436948077763E-129);
      Complex complex7 = complex0.tanh();
      Complex complex8 = Complex.valueOf(1.0340436948077763E-129);
      Complex complex9 = Complex.valueOf(379.7843006427);
      complex9.I.reciprocal();
      Complex complex10 = complex2.ONE.tan();
      Complex complex11 = complex7.sqrt();
      complex2.getArgument();
      complex0.subtract(complex1);
      complex2.subtract(complex8);
      complex4.abs();
      Complex complex12 = complex6.multiply(0.0);
      Complex complex13 = complex6.subtract(complex12);
      complex10.add(2.0);
      complex9.toString();
      complex13.acos();
      complex11.sqrt1z();
      complex7.createComplex(2.0, 0.0);
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4839.49897);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.divide(complex0);
      complex2.NaN.multiply(1);
      Complex complex3 = Complex.valueOf(767.14);
      complex0.toString();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ZERO.divide(4839.49897);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.ONE.pow(complex6);
      complex7.ZERO.getField();
      Complex complex8 = complex6.INF.exp();
      Complex complex9 = complex8.divide((-521.38958723017));
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex11.NaN.log();
      complex10.abs();
      Complex complex13 = complex11.INF.log();
      complex13.INF.reciprocal();
      complex10.getField();
      complex4.divide(4839.49897);
      complex1.asin();
      complex6.getArgument();
      Complex complex14 = complex4.asin();
      complex3.isNaN();
      Complex complex15 = complex14.cos();
      Complex complex16 = complex15.subtract(complex0);
      complex16.INF.add(complex15);
      complex15.multiply((-150.06));
      complex12.pow(1649.638);
      complex9.add((double) 1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(1633.9759009934);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.NaN.exp();
      complex3.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex1.INF.exp();
      complex4.getReal();
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = new Complex((-1798.784303954), (-1138.8387));
      complex5.ZERO.subtract(complex6);
      complex5.subtract(0.0);
      complex5.NaN.pow(complex1);
      Complex complex7 = Complex.valueOf((-1798.784303954), 0.0);
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex7.log();
      complex9.ONE.reciprocal();
      Complex complex10 = complex9.NaN.multiply(1153);
      complex7.readResolve();
      complex2.hashCode();
      complex9.sqrt1z();
      complex4.getArgument();
      complex7.toString();
      complex7.isNaN();
      complex7.getField();
      complex8.getArgument();
      Object object0 = complex0.readResolve();
      complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.sqrt1z();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, (-221.2));
      double double1 = 2.0;
      Complex complex1 = null;
      complex0.ZERO.exp();
//      try { 
        complex0.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3663.79203);
      complex0.NaN.log();
      Complex complex1 = Complex.valueOf(1517.9996793113344, 0.0);
      Complex complex2 = complex1.ONE.sqrt();
      complex2.NaN.pow(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      complex1.atan();
      complex3.createComplex(3063.135005525, 0.0);
      complex0.toString();
      Complex complex4 = complex0.createComplex((-1.0), 0.0);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = Complex.INF;
      complex6.ONE.subtract(complex7);
      complex2.getReal();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1093.2002374));
      Complex complex2 = complex0.add((-1093.2002374));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.exp();
      complex4.ONE.getField();
      complex3.log();
      Complex complex5 = complex0.divide(complex4);
      complex5.pow((-1093.2002374));
      complex2.sin();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.ZERO.add(complex2);
      assertEquals(1.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex2.ONE.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex7 = complex2.ZERO.multiply(complex1);
      Complex complex8 = Complex.valueOf((-2697.4886563059));
      Complex complex9 = complex8.pow((-2697.4886563059));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      
      complex0.hashCode();
      Complex complex10 = complex7.cosh();
      Complex.valueOf(6.283185307179586);
      Complex complex11 = complex7.log();
      Complex complex12 = complex2.divide(complex6);
      Complex complex13 = complex10.tanh();
      complex13.INF.subtract(6.283185307179586);
      complex0.hashCode();
      Complex complex14 = complex7.ONE.divide(0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex15 = complex13.sinh();
      assertSame(complex15, complex14);
      
      Complex complex16 = complex0.subtract(complex11);
      assertSame(complex0, complex12);
      assertFalse(complex11.equals((Object)complex5));
      assertSame(complex16, complex4);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }
}
