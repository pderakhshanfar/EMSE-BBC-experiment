/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:18:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-7.8995523468861615), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(0.7870980476116112);
      complex1.log();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.ZERO.log();
      complex0.abs();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex2.sqrt1z();
      complex1.toString();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex5.NaN.multiply(1.0);
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex4.add(complex7);
      complex8.I.multiply((-1729.3564));
      Complex complex9 = complex8.add(1.0);
      complex3.acos();
      Complex complex10 = complex0.tan();
      complex10.INF.getField();
      Complex complex11 = complex7.multiply(complex0);
      complex2.negate();
      complex9.add(complex2);
      complex2.multiply((-1675));
      complex6.exp();
      complex9.pow(complex11);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.cosh();
      complex2.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.atan();
      complex4.abs();
      Complex complex5 = new Complex(20.0, Double.NaN);
      Complex complex6 = complex0.divide(2039.06012309434);
      Complex complex7 = Complex.ONE;
      complex0.add(complex3);
      complex1.subtract(complex5);
      Complex complex8 = Complex.valueOf(20.0, (double) 17);
      complex8.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.ZERO.sin();
      complex1.INF.toString();
      complex1.subtract(20.0);
      Complex complex2 = complex1.I.negate();
      complex0.nthRoot(51);
      complex2.ONE.getField();
      complex2.ONE.sinh();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      complex3.tan();
      complex2.NaN.abs();
      complex0.getField();
      complex0.multiply(complex1);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(4620.6528199, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.multiply(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cosh();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex1.tanh();
      complex2.ONE.divide(complex0);
      complex2.pow(20.0);
      Complex complex3 = Complex.I;
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      complex1.INF.hashCode();
      Complex complex2 = complex0.log();
      double double0 = 2.0;
      Complex.valueOf(5420742.803028668, 2.0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex0.ZERO.subtract(complex4);
      double double1 = 607.5711742858774;
      complex5.INF.multiply(607.5711742858774);
      Complex complex6 = complex0.multiply(5.8787547804181824E16);
      Complex complex7 = complex6.subtract(complex4);
//      try { 
        complex7.ZERO.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1643.03061), (-20.0));
      Complex complex2 = Complex.valueOf(456.19849, 456.19849);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.add(456.19849);
      complex2.abs();
      complex6.toString();
      complex4.getImaginary();
      Complex complex7 = new Complex(Double.NaN);
      complex7.pow(complex2);
      Complex complex8 = complex1.cos();
      complex5.divide(complex8);
      complex3.toString();
      complex4.tanh();
      complex5.pow((-256.7465000017949));
      Complex complex9 = complex5.negate();
      complex9.sqrt1z();
      complex1.abs();
      complex2.tan();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 6.283185307179586);
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.ZERO.sqrt();
      complex2.INF.abs();
      complex2.toString();
      complex1.getImaginary();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex0.divide(complex4);
      complex3.toString();
      complex5.multiply((-20.0));
      Complex complex6 = complex3.createComplex(Double.POSITIVE_INFINITY, 2.0);
      complex6.divide(complex5);
      complex5.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = Complex.ZERO;
      complex1.isNaN();
      Complex complex3 = Complex.INF;
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1628.404), 1473.578);
      Complex complex1 = Complex.valueOf((-1628.404), 3.1968677404735245E92);
      complex0.equals(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1473.578, 6.283185307179586);
      complex0.nthRoot(186);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex0.toString();
      Complex complex3 = Complex.ONE;
      complex3.tanh();
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex1.abs();
      Complex complex5 = complex2.tan();
      complex1.conjugate();
      Complex.valueOf(0.45455697938674533, 1.0);
      complex4.sqrt();
      complex5.reciprocal();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-20.0));
      complex0.ONE.add(6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.I.add((-20.0));
      complex2.INF.abs();
      complex3.toString();
      complex1.getImaginary();
      complex1.pow(complex0);
      Complex complex4 = complex2.cos();
      complex4.ZERO.nthRoot(232);
      complex1.INF.hashCode();
      complex1.exp();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 6.283185307179586);
      complex0.ONE.add(6.283185307179586);
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.I.add((-20.0));
      complex2.INF.abs();
      complex3.toString();
      complex1.getImaginary();
      complex1.pow(complex0);
      Complex complex4 = complex2.cos();
      complex4.ZERO.nthRoot(232);
      complex0.divide(complex4);
      complex4.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.add((-4747.65));
      double double0 = (-1012.69622);
      Complex complex2 = Complex.valueOf(Double.NaN, (-1012.69622));
      complex1.sqrt();
      double double1 = 2217.8592;
      complex1.add(2217.8592);
      complex2.abs();
      Complex complex3 = Complex.ZERO;
      complex3.toString();
      complex2.getImaginary();
//      try { 
        complex3.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex2.acos();
      Complex complex3 = complex1.negate();
      Complex.valueOf(1.0);
      Complex complex4 = new Complex((-2.5138919966097735E122));
      complex4.reciprocal();
      Complex complex5 = complex3.atan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex1.acos();
      complex7.asin();
      Complex complex9 = Complex.valueOf((-1490.2658223312844), (-1490.2658223312844));
      complex0.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.add((-1521.0366431415366));
      complex1.abs();
      complex3.toString();
      complex1.getImaginary();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex2.cos();
      complex5.nthRoot(232);
      complex3.hashCode();
      complex3.toString();
      Complex complex6 = complex4.multiply((-7));
      complex4.tanh();
      complex6.negate();
      complex3.abs();
      Complex complex7 = complex0.add((double) 232);
      Complex complex8 = Complex.valueOf((double) 232);
      Complex complex9 = complex8.tan();
      complex7.conjugate();
      complex3.sqrt();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.cos();
      complex8.cosh();
      Complex complex12 = Complex.ZERO;
      complex9.reciprocal();
      complex11.abs();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(2.0964269638061523, 2.0964269638061523);
      Complex complex1 = complex0.sqrt1z();
      complex0.asin();
      Complex complex2 = new Complex(149.47467270814);
      complex2.hashCode();
      complex1.subtract((-1298.46));
      Complex complex3 = Complex.ZERO;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.log();
      complex2.abs();
      double double0 = 1362.15;
      complex2.toString();
      complex2.cos();
      int int0 = 232;
      int int1 = 3654956;
      // Undeclared exception!
      complex1.nthRoot(3654956);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1923.720137099), (-3.35137581974451E-8));
      Complex complex1 = complex0.I.multiply((-3.35137581974451E-8));
      complex1.abs();
      complex1.abs();
      complex0.exp();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-3.35137581974451E-8));
      Complex complex4 = complex3.tan();
      complex4.cosh();
      complex4.negate();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.divide(complex5);
      complex4.conjugate();
      complex6.nthRoot(333);
      complex0.cosh();
      Complex complex7 = complex2.asin();
      complex7.atan();
      complex0.abs();
      Complex complex8 = new Complex(1923.720137099, (-2151.7));
      complex8.divide((double) 333);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex7.add(complex8);
      complex9.subtract(complex10);
      complex6.reciprocal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(393);
      complex0.INF.abs();
      complex0.abs();
      complex1.ZERO.exp();
      Complex complex2 = complex0.subtract(complex1);
      complex0.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.negate();
      Complex complex5 = Complex.I;
      complex5.divide(complex0);
      Complex complex6 = complex1.conjugate();
      complex5.nthRoot(350);
      complex0.cosh();
      Complex complex7 = complex5.asin();
      complex6.atan();
      complex4.abs();
      Complex complex8 = complex6.divide(Double.NaN);
      Complex.valueOf((double) 393, Double.NaN);
      complex2.add(complex7);
      complex3.subtract(complex6);
      complex2.reciprocal();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(350);
      complex0.INF.abs();
      complex1.abs();
      complex1.toString();
      complex1.divide(complex0);
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.negate();
      Complex.valueOf(1362.15);
      complex3.reciprocal();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.NaN;
      complex5.INF.tanh();
      complex5.sqrt1z();
      Complex complex7 = Complex.ONE;
      complex5.createComplex(Double.POSITIVE_INFINITY, 0.7853981633974483);
      complex6.acos();
      complex4.pow(1602.9591);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-20.0));
      Complex complex1 = complex0.ONE.add(6.283185307179586);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.sqrt();
      complex1.abs();
      complex3.abs();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.subtract(complex0);
      complex4.tan();
      Complex complex6 = complex0.cosh();
      complex4.negate();
      Complex complex7 = Complex.I;
      complex7.INF.sqrt();
      Complex complex8 = complex6.divide(complex5);
      complex5.conjugate();
      complex3.nthRoot(75);
      Complex complex9 = complex4.cosh();
      complex1.asin();
      complex3.atan();
      complex3.abs();
      complex8.divide(1.3720030591783804E-23);
      Complex complex10 = Complex.ONE;
      complex1.add(complex2);
      complex0.subtract(complex9);
      complex4.reciprocal();
      Complex complex11 = new Complex(7.283185307179586);
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, (-3592.19687272));
      Complex complex2 = complex0.tanh();
      complex2.negate();
      Complex complex3 = complex1.sqrt();
      complex0.readResolve();
      Complex complex4 = complex3.cos();
      complex3.isInfinite();
      Complex complex5 = Complex.NaN;
      complex3.subtract(complex5);
      Complex complex6 = new Complex(3.35137581974451E-8, 0.0);
      Complex.valueOf((-3592.19687272), 3.35137581974451E-8);
      complex5.multiply(complex4);
      complex1.add(2.6167001724243164);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-20.0));
      Complex complex1 = complex0.ONE.add(6.283185307179586);
      complex0.acos();
      complex1.abs();
      complex0.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.exp();
      complex3.subtract(complex2);
      complex2.tan();
      complex3.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.I;
      complex0.divide(complex3);
      Complex complex7 = new Complex(1.0);
      complex7.conjugate();
      Complex complex8 = new Complex(7.283185307179586);
      complex8.nthRoot(1770);
      complex8.cosh();
      complex5.asin();
      Complex complex9 = complex1.atan();
      Complex complex10 = Complex.ZERO;
      complex10.abs();
      Complex complex11 = Complex.valueOf(1.4650188248182272, 0.0);
      Complex complex12 = complex11.divide(6.283185307179586);
      complex12.NaN.negate();
      Complex complex13 = Complex.ONE;
      complex13.add(complex6);
      complex9.subtract(complex0);
      complex4.reciprocal();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-4828.513388223253), (-945.208805));
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.multiply((-945.208805));
      complex3.ZERO.cos();
      complex1.ONE.toString();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.INF.pow(1149.0);
      complex0.NaN.getArgument();
      complex4.ZERO.subtract(279.8168);
      complex0.getField();
      complex2.tan();
      Complex complex6 = complex1.exp();
      complex6.tanh();
      complex0.nthRoot(215);
      complex5.pow(2.262354850769043);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1812.010212797138, 836.5494509998971);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(6.283185307179586, 2.799340708992666E66);
      Complex complex4 = complex1.divide(1812.010212797138);
      Complex complex5 = complex1.subtract(complex3);
      complex3.I.abs();
      Complex complex6 = complex0.ZERO.add((-1.0));
      complex6.hashCode();
      complex1.INF.conjugate();
      complex2.multiply(1);
      Complex complex7 = complex5.multiply((-1031.6666902));
      Complex complex8 = complex7.subtract(complex4);
      complex8.log();
      Complex complex9 = complex1.negate();
      complex5.createComplex(1812.010212797138, 1037.32496989);
      complex9.sin();
      Complex complex10 = Complex.valueOf(6.283185307179586, (-1031.6666902));
      complex1.nthRoot(1);
      complex4.conjugate();
      Complex complex11 = complex1.pow(1812.010212797138);
      complex10.abs();
      complex10.equals("");
      complex11.getField();
      Complex complex12 = complex7.pow(836.5494509998971);
      complex12.INF.toString();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 4164.2055393);
      complex0.subtract((-1106.93041));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-354.85), 89.76670650476);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.getField();
      complex1.atan();
      Complex complex2 = complex0.multiply(1667);
      complex1.divide((-354.85));
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.reciprocal();
      complex2.cos();
      complex1.acos();
      complex2.multiply(3376);
      Complex complex5 = Complex.valueOf(1.504339872982087);
      complex2.sinh();
      complex5.getField();
      complex4.log();
      Complex complex6 = new Complex(1.504339872982087, 3376);
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.sin();
      complex2.atan();
      complex2.INF.exp();
      complex0.reciprocal();
      Complex complex3 = complex2.sin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-20.0));
      complex0.ONE.add(6.283185307179586);
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.I.add((-20.0));
      complex2.INF.abs();
      complex3.toString();
      complex1.getImaginary();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex2.cos();
      complex5.ZERO.nthRoot(232);
      complex1.INF.hashCode();
      complex0.divide(complex5);
      complex0.toString();
      Complex complex6 = complex1.multiply((-34));
      Complex complex7 = complex1.tanh();
      complex7.ZERO.negate();
      complex4.abs();
      Complex complex8 = complex1.add((-3.8207793300052055E-8));
      Complex complex9 = complex8.tan();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex8.NaN.sqrt();
      complex6.cos();
      complex9.cosh();
      complex10.divide(250.9794);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.I;
      complex3.abs();
      complex1.toString();
      complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(1362.15, 1.0);
      complex4.acos();
      complex0.negate();
      Complex.valueOf(1.0);
      Complex complex5 = new Complex(0.4932899475097656, 0.4932899475097656);
      complex5.reciprocal();
      Complex complex6 = Complex.INF;
      complex6.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(957.980131, 0.4932899475097656);
      complex8.sqrt1z();
      Complex complex9 = Complex.ONE;
      complex9.createComplex(0.4932899475097656, 0.0);
      complex2.acos();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.098547586845664E-245);
      Complex complex1 = complex0.cos();
      complex0.isInfinite();
      Complex complex2 = complex1.subtract(complex0);
      complex2.divide(complex0);
      Complex.valueOf(3.227318516085805E244);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.NaN;
      complex4.sqrt1z();
      Complex complex6 = Complex.ONE;
      complex4.createComplex((-1.764389559496152E-8), 3.227318516085805E244);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(350);
      complex0.INF.abs();
      complex0.abs();
      complex1.ZERO.exp();
      Complex complex2 = complex0.subtract(complex1);
      complex0.tan();
      complex0.cosh();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.I;
      complex4.divide(complex0);
      Complex complex5 = complex1.conjugate();
      complex4.nthRoot(350);
      Complex complex6 = complex0.cosh();
      complex6.ZERO.add(complex1);
      complex4.asin();
      complex5.atan();
      complex3.abs();
      complex5.divide((-1797.1384221403343));
      Complex complex7 = Complex.ONE;
      complex7.hashCode();
      complex5.multiply(Double.NaN);
      complex1.nthRoot(350);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(306.535280356, (-3354975.985761163));
      complex0.INF.subtract(306.535280356);
      Complex complex1 = complex0.sin();
      complex1.ONE.atan();
      complex1.reciprocal();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1923.720137099), (-3.35137581974451E-8));
      Complex complex1 = complex0.I.multiply((-3.35137581974451E-8));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex0.sinh();
      complex2.ZERO.multiply((-2378));
      Complex complex5 = complex0.ONE.conjugate();
      Complex complex6 = complex3.INF.add(complex5);
      Complex complex7 = complex6.INF.cosh();
      complex7.ZERO.getField();
      complex3.INF.atan();
      Complex complex8 = complex0.multiply((-2378));
      complex3.divide((-1923.720137099));
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.I.reciprocal();
      complex0.cos();
      complex5.NaN.acos();
      Complex complex11 = complex8.multiply((-2378));
      Complex.valueOf((-123.3996465));
      complex11.sinh();
      complex5.getField();
      complex1.log();
      complex6.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-20.0));
      Complex complex1 = complex0.ONE.add(6.283185307179586);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.I.add((-20.0));
      complex3.INF.abs();
      complex4.toString();
      complex2.getImaginary();
      Complex complex5 = complex0.divide(0.022745953821257103);
      complex5.readResolve();
      Complex complex6 = Complex.valueOf(6.283185307179586);
      complex6.cos();
      Complex complex7 = complex0.asin();
      Complex complex8 = Complex.valueOf(1202.3524601204585);
      complex7.subtract(complex5);
      complex1.sqrt();
      Complex complex9 = Complex.ZERO;
      complex4.subtract(complex9);
      Complex.valueOf(6.283185307179586);
      complex0.asin();
      complex4.multiply(complex3);
      complex3.isInfinite();
      Complex complex10 = new Complex(1.530436781375042E19, 743.686005341285);
      complex8.pow(complex10);
      complex1.toString();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-354.85), 89.76670650476);
      complex0.ZERO.tanh();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = Complex.valueOf(89.76670650476, (-914.004278507983));
      complex1.abs();
      complex3.nthRoot(935);
      complex0.atan();
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2785.72));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      complex0.multiply((-2785.72));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.add(0.0);
      complex4.I.atan();
      complex1.sqrt1z();
      Complex complex5 = Complex.ONE;
      complex0.toString();
      complex0.sinh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2785.72));
      Complex complex1 = complex0.log();
      complex1.negate();
      complex0.multiply((-2785.72));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex1.conjugate();
      complex4.sqrt();
      complex3.cos();
      complex2.cosh();
      Complex complex5 = complex0.divide(250.9794);
      complex5.ZERO.readResolve();
      Complex.valueOf((-1219.0));
      complex1.acos();
      Complex.valueOf((-1219.0), (-1849.9945852));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2094.627419333));
      complex0.isInfinite();
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = complex2.divide(complex1);
      complex0.equals(complex2);
      complex0.nthRoot(2255);
      complex0.getReal();
      complex0.nthRoot(2255);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      complex0.ONE.add(6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.I.add(6.283185307179586);
      complex2.INF.abs();
      complex3.toString();
      complex1.getImaginary();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex2.cos();
      complex5.ZERO.nthRoot(232);
      complex5.hashCode();
      complex5.divide(complex1);
      complex2.toString();
      Complex complex6 = complex0.multiply((-1777));
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex6.negate();
      complex9.abs();
      complex4.add((double) 232);
      Complex complex10 = complex2.tan();
      complex8.conjugate();
      Complex complex11 = complex6.sqrt();
      complex3.cos();
      complex10.cosh();
      complex4.divide(1362.5);
      Complex.valueOf(4159.17);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      complex0.NaN.abs();
      Complex complex1 = complex0.ONE.add(6.283185307179586);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.I.add(6.283185307179586);
      complex3.INF.abs();
      complex4.toString();
      complex2.getImaginary();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex3.cos();
      complex6.ZERO.nthRoot(232);
      complex0.hashCode();
      complex3.divide(complex2);
      complex4.toString();
      Complex complex7 = complex6.multiply(1);
      complex5.tanh();
      Complex complex8 = complex3.negate();
      complex6.abs();
      Complex complex9 = complex1.add((-2.8776128744298384));
      complex9.tan();
      complex5.conjugate();
      complex8.sqrt();
      Complex complex10 = complex1.cos();
      complex1.cosh();
      Complex complex11 = complex10.divide((-2.8776128744298384));
      Complex.valueOf((-1615.0));
      complex11.acos();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(345);
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex1.cos();
      complex4.I.asin();
      Complex complex6 = Complex.valueOf(1.0);
      complex6.ZERO.subtract(complex5);
      complex4.I.sqrt();
      complex6.ONE.subtract(complex1);
      Complex complex7 = Complex.valueOf(0.7853981633974483);
      complex5.tan();
      complex3.conjugate();
      complex7.sqrt();
      complex3.cos();
      Complex complex8 = new Complex(345, Double.POSITIVE_INFINITY);
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(3526.68219369);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.098547586845664E-245);
      Complex complex1 = complex0.cos();
      complex0.isInfinite();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.divide(complex0);
      complex2.equals(complex1);
      complex3.sqrt1z();
      Complex complex4 = Complex.ONE;
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = new Complex(3.227318516085805E244);
      Complex complex2 = complex1.multiply(1524);
      complex2.abs();
      complex2.abs();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.divide(5424938.7225);
      complex1.readResolve();
      Complex complex5 = Complex.valueOf((-5424938.7225));
      complex5.cos();
      Complex complex6 = complex0.asin();
      Complex.valueOf(8.0);
      Complex.valueOf(4.918433418514767E247, 1764.471);
      Complex complex7 = complex1.subtract(complex5);
      complex6.sqrt();
      Complex complex8 = complex2.subtract(complex3);
      Complex.valueOf((-2254.0));
      complex2.asin();
      complex6.multiply(complex5);
      Complex complex9 = Complex.ZERO;
      complex9.isInfinite();
      complex7.pow(complex8);
      complex4.toString();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.794868171600683E-4));
      complex0.log();
      Complex complex2 = complex0.negate();
      complex2.multiply((-1.794868171600683E-4));
      complex1.asin();
      complex1.add(Double.NaN);
      Complex.valueOf((-2.8776128744298384));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2785.72));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      complex0.multiply((-2785.72));
      complex0.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.pow((-2785.72));
      complex1.subtract((-2785.72));
      complex1.abs();
      complex2.getImaginary();
      complex4.createComplex(755.52, 8.531727798869953);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      complex0.ONE.add(6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.I.add(6.283185307179586);
      complex2.INF.abs();
      complex3.toString();
      complex1.getImaginary();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex2.cos();
      complex5.ZERO.nthRoot(232);
      complex1.INF.hashCode();
      complex0.divide(complex5);
      complex0.toString();
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex1.tanh();
      complex7.ZERO.negate();
      complex4.abs();
      Complex complex8 = complex1.add((-3.8207793300052055E-8));
      Complex complex9 = complex8.tan();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex8.NaN.sqrt();
      complex6.cos();
      complex9.cosh();
      complex10.divide(250.9794);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.098547586845664E-245);
      Complex complex1 = complex0.cos();
      complex0.isInfinite();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.divide(complex0);
      complex2.equals(complex1);
      Complex complex4 = complex3.pow(-0.0);
      Complex complex5 = complex2.subtract((double) 2255);
      complex0.I.nthRoot(17);
      complex1.abs();
      complex5.getImaginary();
      complex4.I.divide(complex5);
      Complex complex6 = complex4.createComplex(Double.POSITIVE_INFINITY, 5.858546779607288E-181);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.098547586845664E-245);
      Complex complex1 = complex0.cos();
      complex0.isInfinite();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.divide(complex0);
      complex2.equals(complex1);
      complex2.createComplex(2255, 2255);
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.sin();
      complex4.getReal();
      complex0.conjugate();
      Complex complex6 = complex4.divide((-20.0));
      complex6.subtract(complex5);
      complex4.add(complex6);
      complex1.negate();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(2.5189146995544434, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.ONE.readResolve();
      Complex complex4 = complex2.I.divide(complex1);
      complex1.divide(complex0);
      Complex complex5 = complex3.NaN.log();
      complex4.INF.divide(complex0);
      Complex complex6 = complex3.acos();
      complex5.tanh();
      complex2.ZERO.subtract(complex1);
      complex3.INF.acos();
      Complex complex7 = complex5.I.reciprocal();
      Complex complex8 = complex7.INF.divide(0.0);
      Complex complex9 = complex7.ONE.multiply((-1309.206));
      Complex complex10 = complex4.add(0.0);
      Complex.valueOf((-131.1198074));
      complex3.getImaginary();
      complex4.INF.tanh();
      complex0.divide(complex4);
      complex10.getReal();
      complex9.pow((-1309.206));
      Complex complex11 = Complex.NaN;
      complex11.subtract((-967.0));
      complex7.abs();
      complex8.getImaginary();
      complex5.createComplex(0.0, 1.0);
      complex6.reciprocal();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.log();
      complex2.abs();
      complex2.toString();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex1.NaN.negate();
      Complex complex6 = Complex.valueOf(1362.15);
      Complex complex7 = complex2.reciprocal();
      complex6.equals(complex2);
      complex5.getArgument();
      complex1.multiply(345);
      complex6.NaN.toString();
      complex4.negate();
      Complex complex8 = complex6.pow(1362.15);
      Complex complex9 = complex4.log();
      complex2.subtract(complex3);
      Complex complex10 = new Complex(2.6113557852262235E15);
      complex10.cos();
      complex9.subtract(complex7);
      Complex.valueOf(0.0, 0.0);
      complex1.isInfinite();
      complex5.pow(complex10);
      complex8.pow(2.6113557852262235E15);
      Complex complex11 = complex1.conjugate();
      complex2.nthRoot(1092);
      complex4.sqrt1z();
      complex11.createComplex(20.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2785.72));
      Complex complex1 = complex0.log();
      complex1.negate();
      complex0.multiply((-2785.72));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.add(0.0);
      complex3.I.atan();
      complex1.sqrt1z();
      Complex complex4 = Complex.ONE;
      complex4.createComplex(Double.NaN, (-1219.0));
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 6.283185307179586);
      complex0.isInfinite();
      Complex complex2 = complex1.pow(complex0);
      complex2.pow(6.496772856703278E-221);
      Complex complex3 = complex2.conjugate();
      Complex.valueOf(0.0);
      complex3.ZERO.exp();
      complex3.nthRoot(1092);
      Complex complex4 = Complex.ONE;
      complex4.sqrt1z();
      complex4.createComplex((-228.4325), 6.496772856703278E-221);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(350);
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.multiply(1.2530649392922358E-242);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex5.sqrt1z();
      complex8.nthRoot(1);
      complex5.isNaN();
      complex4.subtract(complex3);
      complex1.cos();
      complex2.getField();
      Complex complex9 = Complex.I;
      complex9.pow(1.2530649392922358E-242);
      complex7.cos();
      Complex complex10 = Complex.valueOf((-1626.7684481824), Double.POSITIVE_INFINITY);
      complex10.multiply(1);
      Complex complex11 = Complex.ZERO;
      complex11.getImaginary();
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.divide((-20.0));
      Complex complex3 = complex1.I.pow(2092.3711399206704);
      Complex complex4 = complex0.I.sqrt1z();
      complex4.pow(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex.valueOf(2092.3711399206704);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf((-775.4741));
      Complex complex8 = complex0.subtract(complex5);
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex3.subtract(complex8);
      Complex complex11 = Complex.valueOf(344.1115);
      Complex complex12 = Complex.valueOf(2092.3711399206704, 6.283185307179586);
      complex12.asin();
      complex9.multiply(complex2);
      Complex complex13 = Complex.INF;
      complex13.isInfinite();
      complex11.pow(complex7);
      complex6.toString();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(2.5189146995544434, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.ONE.readResolve();
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex3.NaN.log();
      complex4.INF.divide(complex0);
      Complex complex7 = complex3.acos();
      complex6.tanh();
      complex2.ZERO.subtract(complex1);
      complex3.INF.acos();
      Complex complex8 = complex6.I.reciprocal();
      complex8.INF.divide(0.0);
      Complex complex9 = complex8.ONE.multiply((-1309.206));
      Complex complex10 = complex4.add(0.0);
      complex3.getImaginary();
      complex4.INF.tanh();
      Complex complex11 = complex0.divide(complex4);
      complex10.getReal();
      Complex complex12 = complex7.negate();
      complex4.NaN.pow(0.0);
      complex12.log();
      complex10.NaN.subtract(complex5);
      Complex complex13 = complex3.cos();
      complex11.subtract(complex6);
      Complex.valueOf(0.0, 0.0);
      Complex complex14 = Complex.I;
      complex9.multiply(complex14);
      Complex complex15 = Complex.INF;
      complex15.isInfinite();
      complex13.pow(complex7);
      complex4.toString();
      Complex complex16 = complex8.sinh();
      complex16.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(350);
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = Complex.valueOf(1.0);
      complex6.ZERO.subtract(complex4);
      complex3.I.sqrt();
      Complex complex7 = complex6.ONE.subtract(complex1);
      Complex.valueOf(0.7853981633974483);
      Complex complex8 = complex7.asin();
      complex0.isInfinite();
      complex3.pow(complex2);
      complex8.pow(5922.81789443478);
      complex5.conjugate();
      complex6.nthRoot(612);
      complex7.sqrt1z();
      complex2.createComplex(1.0, 1092);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2757.5);
//      try { 
        complex0.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow((-1927.77906684076));
      complex1.INF.add((-1927.77906684076));
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = Complex.valueOf(2216.67793031657);
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex0.ZERO.subtract(complex3);
      complex5.ONE.getField();
      complex3.abs();
      Complex complex6 = complex5.I.multiply(87);
      complex6.INF.multiply(204.911);
      complex6.ZERO.subtract((-1915.068319749));
      complex0.readResolve();
      complex3.INF.divide(11.1);
      complex0.abs();
      Complex complex7 = complex4.NaN.sqrt();
      complex3.getArgument();
      complex0.sqrt1z();
      complex5.isNaN();
      complex4.getArgument();
      complex0.getArgument();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex8.ONE.cosh();
      complex9.NaN.readResolve();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.NaN.pow(1260.0);
      complex11.I.subtract(2216.67793031657);
      complex11.multiply(0.0);
      complex5.getImaginary();
      complex0.isInfinite();
      complex2.readResolve();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.ONE.pow(complex1);
      Complex complex5 = complex4.ONE.negate();
      complex4.ZERO.exp();
      complex0.isNaN();
      Complex complex6 = complex4.add(complex2);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.multiply((-1160.06368));
      Complex complex8 = complex2.exp();
      complex0.pow(317.99031635);
      complex5.pow(complex8);
      complex1.equals(complex3);
      complex3.multiply(0.0);
      Complex complex9 = complex6.tan();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0, (-4560.64696));
      Complex complex3 = complex2.NaN.atan();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex4.ZERO.exp();
      Complex complex8 = complex7.NaN.exp();
      complex7.getField();
      complex8.I.acos();
      complex2.toString();
      complex3.atan();
      complex2.abs();
      complex3.getReal();
      complex7.ZERO.getArgument();
      complex4.NaN.negate();
      complex4.equals(object0);
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex9.INF.reciprocal();
      complex10.NaN.conjugate();
      Complex complex11 = complex0.ZERO.exp();
      complex11.NaN.readResolve();
      complex3.conjugate();
      Complex complex12 = complex8.pow(0.48008447885513306);
      complex3.atan();
      complex8.hashCode();
      complex11.pow(0.0);
      Object object1 = new Object();
      complex7.equals(object1);
      complex1.readResolve();
      complex7.multiply((-3720));
      complex6.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-518.363784506));
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.I.multiply(complex1);
      complex3.I.cosh();
      complex1.INF.hashCode();
      complex0.add(complex1);
//      try { 
        complex3.nthRoot((-1583));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,583
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.pow(1400.68694);
      Complex complex3 = complex2.NaN.tanh();
      complex3.ZERO.acos();
      Complex complex4 = complex0.NaN.createComplex(2014.978623555, 0.5116065740585327);
      Complex.valueOf(1400.68694, 2014.978623555);
      complex4.INF.pow(complex1);
      Complex complex5 = complex0.log();
      complex0.negate();
      Complex complex6 = complex0.sqrt();
      complex6.NaN.abs();
      complex6.tanh();
      Complex complex7 = Complex.valueOf((-1365.200270220195));
      complex7.pow(0.0);
      complex3.isNaN();
      complex5.divide(3065.82129747);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.INF.createComplex((-629.9441319582), (-629.9441319582));
      complex6.NaN.divide((-629.9441319582));
      complex3.I.getArgument();
      Complex complex7 = complex5.ZERO.subtract(complex1);
      complex7.NaN.tan();
      Complex complex8 = complex5.cosh();
      complex8.ONE.negate();
      complex3.divide(complex5);
      int int0 = 0;
//      try { 
        complex4.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(2879.713, 0.0);
      complex0.ZERO.nthRoot(170);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex3.I.asin();
      complex0.subtract(complex1);
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex5.negate();
      Complex.valueOf((double) 170);
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex3.ZERO.multiply(0.0);
      Complex complex9 = complex7.INF.asin();
      complex9.ZERO.abs();
      Complex complex10 = complex7.I.add(complex2);
      Complex complex11 = complex10.ONE.add(complex0);
      Complex complex12 = complex7.exp();
      complex12.ZERO.add(complex9);
      Complex complex13 = complex4.divide(complex6);
      complex1.I.reciprocal();
      Complex.valueOf(2879.713, 0.0);
      Complex complex14 = complex13.cos();
      complex0.NaN.asin();
      complex4.createComplex(0.0, 3174.117102729373);
      complex7.isNaN();
      complex2.sqrt1z();
      Complex complex15 = complex14.conjugate();
      Complex complex16 = complex15.INF.acos();
      complex6.sinh();
      complex16.add(complex8);
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2094.627419333));
      complex0.ONE.divide(complex1);
      complex0.multiply((-2094.627419333));
      complex0.INF.sin();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = Complex.NaN;
      complex2.INF.add(complex3);
      complex2.subtract(complex0);
      complex2.reciprocal();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.tan();
      double double0 = (-1116.5);
      Complex complex3 = complex0.subtract((-1116.5));
      complex3.I.sin();
      Complex complex4 = complex0.multiply(230);
      complex4.tanh();
      complex2.multiply((-1116.5));
      Complex complex5 = complex1.sqrt();
      complex1.I.tan();
      Complex complex6 = complex5.add((double) 230);
      complex6.NaN.createComplex(0.0, 230);
      Complex.valueOf((double) 230);
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(177.0746559);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.multiply(complex0);
      complex3.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 177.0746559);
      Complex complex4 = complex2.subtract((-2241.379639));
      complex4.ZERO.getField();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex3.NaN.log();
      complex7.I.atan();
      complex6.getImaginary();
      complex7.NaN.subtract(0.0);
//      try { 
        complex3.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.log();
      complex2.abs();
      complex2.toString();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.INF.acos();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = Complex.valueOf(1362.15);
      complex2.reciprocal();
      complex5.equals(complex2);
      complex4.getArgument();
      Complex complex6 = complex1.multiply(345);
      complex5.NaN.toString();
      complex5.ONE.pow(0.0);
      Complex complex7 = complex5.subtract((-967.0));
      complex7.INF.abs();
      complex6.getImaginary();
      complex4.createComplex(755.52, 5.858546779607288E-181);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.ONE.divide((-20.0));
      complex1.I.pow(2092.3711399206704);
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      complex5.INF.tan();
      Complex complex6 = complex0.sqrt();
      complex6.INF.sqrt1z();
      complex6.NaN.nthRoot(1);
      complex0.isNaN();
      complex6.subtract(complex0);
      Complex complex7 = complex3.cos();
      complex7.getField();
      complex7.NaN.pow(Double.POSITIVE_INFINITY);
      complex2.cos();
      complex2.multiply(1);
      complex0.getImaginary();
      complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1.970577274107218E-8);
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.createComplex(646.4927, 0.0);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.cos();
      complex0.ONE.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.asin();
      complex4.INF.tanh();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.conjugate();
      complex6.ONE.abs();
      complex0.subtract(Double.NaN);
      complex0.equals(complex3);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-20.0));
      complex0.ONE.add(6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.I.add((-20.0));
      complex2.INF.abs();
      complex3.toString();
      complex1.getImaginary();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex2.cos();
      complex5.ZERO.nthRoot(232);
      complex1.INF.hashCode();
      complex0.divide(complex5);
      complex0.toString();
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex1.tanh();
      complex7.ZERO.negate();
      complex4.abs();
      Complex complex8 = complex1.add((-3.8207793300052055E-8));
      Complex complex9 = complex8.tan();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex8.NaN.sqrt();
      complex6.cos();
      complex9.cosh();
      complex10.divide(250.9794);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.nthRoot(1615);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.NaN.asin();
      complex0.ZERO.toString();
      complex1.ONE.getArgument();
      Complex complex4 = complex0.createComplex(0.0, (-728.1653));
      complex1.subtract(complex4);
      Complex complex5 = complex2.pow((-728.1653));
      complex5.ONE.conjugate();
      Complex complex6 = complex5.add(complex3);
      complex6.ZERO.cosh();
//      try { 
        complex0.I.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      complex1.NaN.toString();
      complex0.isInfinite();
      complex0.getImaginary();
      Complex complex2 = complex0.exp();
      complex2.toString();
      Complex complex3 = complex0.tan();
      complex3.ZERO.abs();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.ZERO.sqrt1z();
      Complex complex6 = complex5.INF.multiply(0.0);
      Complex complex7 = complex0.NaN.subtract(complex4);
      Complex complex8 = complex7.ONE.pow(complex4);
      Complex complex9 = complex3.ZERO.multiply(279);
      complex4.I.subtract(complex8);
      complex2.toString();
      complex9.add(complex0);
      Complex complex10 = complex4.pow(0.0);
      complex10.INF.getField();
      Complex complex11 = complex0.ONE.asin();
      Complex complex12 = Complex.valueOf((-1353.404));
      complex12.ZERO.log();
      Complex complex13 = Complex.NaN;
      complex6.equals(complex13);
      complex5.conjugate();
      complex9.hashCode();
      complex11.sin();
      complex8.multiply(279);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.multiply(637);
      complex0.NaN.atan();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex1.abs();
      complex2.nthRoot(637);
      Complex complex4 = complex3.atan();
      complex1.add(complex4);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(2.5189146995544434, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.ONE.readResolve();
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex3.NaN.log();
      complex4.INF.divide(complex0);
      Complex complex7 = complex3.acos();
      complex6.tanh();
      complex2.ZERO.subtract(complex1);
      complex3.INF.acos();
      Complex complex8 = complex6.I.reciprocal();
      complex8.INF.divide(0.0);
      complex8.ONE.multiply((-1309.206));
      Complex complex9 = complex4.add(0.0);
      complex3.getImaginary();
      complex4.INF.tanh();
      Complex complex10 = complex0.divide(complex4);
      complex9.getReal();
      Complex complex11 = complex7.negate();
      complex4.NaN.pow(0.0);
      Complex complex12 = complex11.log();
      complex9.NaN.subtract(complex5);
      complex3.cos();
      Complex complex13 = complex10.subtract(complex6);
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      complex14.isInfinite();
      complex4.pow(complex12);
      complex12.pow(2.5189146995544434);
      complex0.conjugate();
      complex2.nthRoot(1092);
      complex6.sqrt1z();
      complex13.createComplex((-1219.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.INF.asin();
      complex0.hashCode();
      complex1.subtract((-1298.46));
      complex1.sin();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(1828.508674614, Double.NEGATIVE_INFINITY);
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.pow(complex0);
      Complex.valueOf(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      complex0.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(1828.508674614, 540.51406);
      Complex complex3 = complex2.ONE.createComplex((-2201.801438), 540.51406);
      complex3.NaN.readResolve();
      Complex complex4 = complex0.INF.add(540.51406);
      complex1.getField();
      complex0.getArgument();
      complex4.I.add(complex2);
      complex4.INF.multiply(325);
      complex0.sqrt1z();
      complex1.readResolve();
      complex4.conjugate();
      Complex complex5 = complex4.tan();
      complex5.ZERO.conjugate();
      complex5.log();
      complex1.multiply(2.1906094551086426);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-1533.9790711193996));
      complex0.toString();
      Complex complex1 = Complex.valueOf((-1533.9790711193996), (-1533.9790711193996));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex0.ZERO.multiply(complex2);
      Complex complex5 = Complex.valueOf((-1533.9790711193996));
      Complex complex6 = complex5.NaN.multiply(0);
      Complex complex7 = complex4.INF.pow(complex2);
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex0.subtract(6.283185307179586);
      complex9.asin();
      Complex complex10 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex3.exp();
      complex13.ZERO.conjugate();
      Complex complex14 = complex10.INF.tan();
      Complex complex15 = complex14.INF.createComplex(5612.977, 0);
      complex15.abs();
      complex13.ONE.atan();
      complex12.isNaN();
      Complex complex16 = complex8.add(6.283185307179586);
      complex16.INF.atan();
      complex5.multiply(1199);
      Complex complex17 = complex1.negate();
      Complex complex18 = complex11.add((-1533.9790711193996));
      complex18.ONE.exp();
      complex11.toString();
      complex4.tan();
      complex6.isInfinite();
      Complex complex19 = complex17.reciprocal();
      complex19.exp();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-3.920012014371067E-9));
      Complex complex2 = complex1.INF.pow(0.0);
      Complex complex3 = complex0.cosh();
      complex2.isNaN();
      complex0.readResolve();
      complex1.ONE.reciprocal();
      complex0.hashCode();
      Complex complex4 = complex3.INF.multiply(1470);
      Complex complex5 = complex4.ZERO.negate();
      complex5.NaN.abs();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = Complex.ZERO;
      complex7.INF.abs();
      complex2.equals(complex8);
      complex6.INF.sinh();
      complex7.ONE.abs();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex6.pow(0.0);
      complex7.sqrt();
      complex0.getArgument();
      complex7.I.add(complex0);
      Complex complex11 = complex9.sqrt();
      complex2.createComplex(6238.152641743896, (-1770.744569174728));
      complex7.getField();
      Complex complex12 = complex10.asin();
      complex7.isInfinite();
      complex9.cosh();
      complex2.isNaN();
      complex7.nthRoot(1470);
      complex11.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = (-1);
//      try { 
        complex0.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.divide(2191.7888);
      complex1.add(complex0);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Object object0 = complex0.readResolve();
      complex0.ZERO.toString();
      complex0.equals(object0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.divide(0.0);
      complex1.ZERO.getField();
      Complex complex3 = complex0.divide(complex1);
      complex0.ONE.abs();
      complex0.isNaN();
      complex0.reciprocal();
      complex0.getField();
      complex2.sqrt();
//      try { 
        complex3.nthRoot((-941));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -941
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex((-337.0));
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex0.INF.add(complex1);
      complex0.ONE.reciprocal();
      Complex complex3 = complex0.tanh();
      complex2.ZERO.abs();
      Complex complex4 = Complex.valueOf((-694.61383763));
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.createComplex((-1.0), 0.0);
      complex6.ZERO.abs();
      Complex complex7 = complex2.pow(complex5);
      Complex complex8 = complex7.ZERO.atan();
      complex8.I.getField();
      complex6.getReal();
      Complex complex9 = Complex.NaN;
      complex0.NaN.tan();
      Complex complex10 = complex1.add(complex9);
      complex9.hashCode();
      Complex complex11 = complex10.INF.subtract((-337.0));
      Complex complex12 = Complex.valueOf((-1203.0344), 0.0);
      complex12.ONE.toString();
      complex12.INF.negate();
      Complex complex13 = complex3.pow(0.0);
      complex11.getImaginary();
      complex6.hashCode();
      complex4.hashCode();
      complex5.getImaginary();
      complex4.asin();
      complex0.isNaN();
//      try { 
        complex13.nthRoot((-129));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -129
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      complex0.ONE.multiply(complex1);
      complex0.add(339.8702832);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double double0 = 1676.57713693763;
      Complex complex0 = new Complex(1676.57713693763);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.reciprocal();
      complex0.ZERO.toString();
      complex2.INF.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.I.asin();
      complex6.ONE.log();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.ZERO.tanh();
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex3.NaN.subtract(2196.8181220906);
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex9.ONE.subtract(complex3);
      Complex complex11 = complex2.ONE.divide(complex3);
      Complex complex12 = complex11.conjugate();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      
      Complex complex13 = complex9.INF.subtract(complex0);
      Complex complex14 = complex8.NaN.pow((-1322.986065299));
      complex14.ONE.sqrt1z();
      Complex complex15 = complex14.cos();
      complex14.NaN.getArgument();
      complex5.INF.toString();
      complex0.I.getField();
      Complex complex16 = complex0.add(complex3);
      complex16.ZERO.toString();
      Complex complex17 = complex16.INF.sin();
      complex16.ONE.abs();
      assertTrue(complex16.equals((Object)complex17));
      
      complex0.log();
      complex0.abs();
      Complex complex18 = complex3.exp();
      complex15.equals("(Infinity, Infinity)");
      assertSame(complex15, complex13);
      
      Complex complex19 = complex1.tan();
      assertEquals(0.0, complex19.getReal(), 0.01);
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      
      Complex complex20 = complex1.subtract(complex5);
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      
      complex10.negate();
      assertTrue(complex10.equals((Object)complex18));
      assertTrue(complex9.equals((Object)complex4));
      assertSame(complex8, complex12);
      assertNotSame(complex8, complex17);
      
      Object object0 = new Object();
      complex3.equals(object0);
      assertTrue(complex3.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(4164.2055393);
      Complex complex1 = complex0.ONE.sinh();
      assertEquals(1.1752011936438014, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.log();
      complex4.tan();
      Complex complex5 = complex0.asin();
      String string0 = complex2.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      complex2.createComplex(4164.2055393, 4164.2055393);
      Complex complex6 = complex5.cos();
      assertEquals(4164.2054192290725, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.tan();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5067.0));
      assertFalse(complex0.isInfinite());
      assertEquals((-5067.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.divide(Double.NaN);
      assertSame(complex6, complex1);
      
      Complex complex7 = Complex.valueOf(Double.NaN);
      assertSame(complex7, complex2);
      
      Complex complex8 = complex4.multiply(complex5);
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      assertTrue(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex8.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(350);
      complex0.INF.abs();
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex4.I.asin();
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex7.ZERO.subtract(complex5);
      Complex complex9 = complex4.I.sqrt();
      assertEquals(0.7071067811865475, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex7.ONE.subtract(complex1);
      Complex.valueOf(0.7853981633974483);
      Complex complex11 = complex10.asin();
      complex11.ZERO.multiply(complex6);
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getImaginary(), 0.01);
      assertSame(complex11, complex3);
      
      complex4.isInfinite();
      Complex complex12 = complex1.pow(complex5);
      String string0 = complex12.INF.toString();
      assertSame(complex12, complex8);
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex13 = complex6.sinh();
      assertEquals(0.7716133340725972, complex13.getImaginary(), 0.01);
      assertTrue(complex4.equals((Object)complex2));
  }
}
