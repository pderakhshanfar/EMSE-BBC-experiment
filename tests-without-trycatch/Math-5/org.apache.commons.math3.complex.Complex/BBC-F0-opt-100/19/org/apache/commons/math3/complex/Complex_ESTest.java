/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:58:05 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(2.5641927558519502E-8, 2.5641927558519502E-8);
      Complex complex1 = complex0.divide(2.5641927558519502E-8);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 7.87543443239203E-9);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = Complex.valueOf(0.2596949650262109);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.tanh();
      complex7.conjugate();
      complex2.divide(complex3);
      complex4.conjugate();
      complex3.atan();
      Complex complex8 = Complex.ZERO;
      complex0.subtract(complex8);
      complex6.nthRoot(336);
      Complex.valueOf((double) 530);
      complex3.createComplex(2.5641927558519502E-8, 7.87543443239203E-9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.add(20.0);
      complex1.tan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(331.989);
      complex0.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.divide(complex0);
      complex2.conjugate();
      Complex complex4 = complex2.atan();
      complex4.I.divide(complex3);
      complex4.subtract(complex2);
      complex1.nthRoot(530);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex.valueOf(0.567397952079773, 0.567397952079773);
      Complex complex0 = new Complex(17, Double.POSITIVE_INFINITY);
      complex0.multiply((-3439));
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3.1149346370027763E33);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(17);
      Complex complex1 = new Complex((-2.8907074856577267E-8));
      Complex complex2 = complex1.multiply((-2.8907074856577267E-8));
      complex0.divide(complex1);
      Complex complex3 = complex0.asin();
      complex3.abs();
      complex1.sin();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex((-646293.8377117977), 1523.3761724696);
      Complex complex7 = complex5.add(complex6);
      complex5.abs();
      complex0.multiply((-1700.33));
      complex4.exp();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 17);
      complex8.sqrt();
      complex2.divide((-20.0));
      complex6.nthRoot(890);
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex.valueOf(0.567397952079773, 0.567397952079773);
      Complex complex0 = new Complex(17, Double.POSITIVE_INFINITY);
      complex0.tan();
      Complex complex1 = Complex.valueOf(1279.3871998);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex(0.23402166366577148, 0.23402166366577148);
      Complex.valueOf(1983.838497838655, 1983.838497838655);
      Complex complex3 = new Complex(3504.678366, (-20.0));
      complex2.nthRoot(934);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-8.02184863463431), Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1282.07780927118, 6.206567176150202E-4);
      Complex complex2 = new Complex(474.03367715225, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.multiply(1169.385886952971);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.pow(complex3);
      complex4.tan();
      complex3.multiply(complex2);
      Complex.valueOf(524.3528985786106, 474.03367715225);
      complex6.equals("O4!=!wV/f");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(10);
      Complex complex1 = Complex.valueOf((double) 10, (-20.0));
      complex1.subtract((-1.1259527192113536E-4));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 3.149267215638608E-187);
      complex0.ONE.add(complex1);
      complex1.tanh();
//      try { 
        complex0.nthRoot((-2115));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,115
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2658.0, 2658.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.asin();
      complex4.pow(complex3);
      Complex complex5 = Complex.I;
//      try { 
        complex5.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-708.88), (-708.88));
      complex0.I.sqrt();
      Complex complex3 = new Complex(0.8136839110599453, Double.POSITIVE_INFINITY);
      complex1.divide(complex3);
      complex3.asin();
      Complex complex4 = complex3.pow(complex1);
      complex4.NaN.negate();
      Complex complex5 = Complex.ONE;
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.567397952079773);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.createComplex((-456.46187338397), 17);
      complex0.nthRoot(17);
      Complex complex4 = Complex.valueOf((-456.46187338397), 524.3528985786106);
      Complex complex5 = new Complex(524.3528985786106, Double.POSITIVE_INFINITY);
      complex3.multiply((-20.0));
      Complex complex6 = complex4.divide(complex1);
      complex6.asin();
      complex0.pow(complex5);
      complex4.divide(complex0);
      complex5.multiply((-1214.8650778));
      complex1.exp();
      Complex complex7 = Complex.valueOf(524.3528985786106, (-30.0));
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.567397952079773);
      Complex complex2 = Complex.I;
      complex2.createComplex(1.352233648300171, 17);
      complex0.nthRoot(17);
      Complex.valueOf(1.352233648300171, 524.3528985786106);
      Complex complex3 = new Complex(524.3528985786106, Double.POSITIVE_INFINITY);
      complex2.tan();
      Complex complex4 = Complex.I;
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(803);
      Complex complex2 = complex0.pow(complex1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide((-4185.10497222));
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf(1.0);
      complex4.readResolve();
      Complex complex5 = complex1.pow(7798210.442037035);
      Complex complex6 = complex5.multiply((-1317));
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex1.sinh();
      Complex complex9 = Complex.I;
      complex9.getArgument();
      complex5.nthRoot(3304);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex10.pow(complex11);
      Complex complex13 = new Complex(995.6);
      complex8.ONE.atan();
      Complex complex14 = complex4.divide(complex1);
      complex9.getField();
      complex2.abs();
      complex7.equals(complex0);
      Complex complex15 = complex6.divide(complex12);
      complex14.sqrt1z();
      Complex complex16 = Complex.ONE;
      Complex complex17 = Complex.I;
      complex17.multiply(complex15);
      Complex complex18 = Complex.valueOf(1.0, (double) (-1317));
      complex18.add(complex3);
      Complex complex19 = Complex.ZERO;
      complex8.equals(complex19);
      complex12.abs();
      // Undeclared exception!
      complex3.nthRoot(1878);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.567397952079773);
      Complex complex2 = new Complex(1440.818, 17);
      Complex complex3 = complex2.multiply((-2.8907074856577267E-8));
      complex3.divide(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.log();
      complex3.abs();
      Complex complex6 = complex5.sin();
      Complex complex7 = new Complex(4.16527327776288E-5, 4.16527327776288E-5);
      Complex complex8 = complex6.divide(complex7);
      complex4.getField();
      complex6.abs();
      complex7.isInfinite();
      Complex complex9 = complex4.divide(complex8);
      complex6.sqrt1z();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.I;
      complex0.multiply(complex2);
      Complex complex12 = Complex.valueOf(2.0, 6.637831329037169E-8);
      Complex complex13 = complex1.add(complex8);
      complex9.abs();
      complex2.asin();
      complex13.ONE.cosh();
      complex12.nthRoot(17);
      complex8.log();
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.567397952079773);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.createComplex((-456.46187338397), 17);
      complex0.nthRoot(17);
      Complex complex4 = Complex.valueOf((-456.46187338397), 524.3528985786106);
      Complex complex5 = new Complex(524.3528985786106, Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.multiply((-20.0));
      Complex complex7 = complex4.divide(complex1);
      complex7.asin();
      complex0.pow(complex5);
      complex5.tan();
      Complex.valueOf((-456.46187338397), (-1046.7120946));
      complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.ONE.log();
      complex3.tanh();
      complex1.negate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      complex4.divide(complex5);
      complex4.asin();
      Complex.valueOf(2.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.asin();
      Complex complex1 = complex0.log();
      complex0.abs();
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.add(complex0);
      complex1.abs();
      Complex complex6 = Complex.I;
      complex5.divide(complex2);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.exp();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(2732.8411793697533);
      complex0.nthRoot(3232);
      Complex complex2 = new Complex(0.0, (-2011.0));
      Complex complex3 = complex0.multiply((-1598.4078173979));
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.log();
      complex6.abs();
      Complex complex7 = complex1.sin();
      complex3.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex0.add(complex7);
      complex4.sqrt();
      complex0.abs();
      complex7.divide(complex5);
      complex0.multiply(1215.358244);
      Complex complex9 = Complex.ZERO;
      complex9.exp();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex1.log();
      complex0.abs();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf((double) 1, (double) 1);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = Complex.ZERO;
      complex5.add(complex6);
      Complex complex7 = complex1.tan();
      complex3.atan();
      complex7.multiply((-2104.5320475));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(1);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.atan();
      complex1.equals(complex0);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-400.9));
      Complex complex1 = Complex.valueOf(3812.284221125673, (-400.9));
      complex1.atan();
      complex0.pow(131.71865187);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.log();
      complex0.abs();
      Complex complex3 = complex2.sin();
      complex3.reciprocal();
      Complex complex4 = Complex.ZERO;
      complex4.ZERO.readResolve();
      complex3.add(complex0);
      complex2.abs();
      Complex complex5 = Complex.I;
      Complex complex6 = new Complex(0.0);
      complex6.add(0.0);
      complex6.atan();
      Object object0 = new Object();
      complex1.equals(object0);
      complex5.abs();
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.567397952079773);
      complex1.nthRoot(17);
      Complex complex2 = new Complex(1440.818, 17);
      Complex complex3 = complex2.multiply((-2.8907074856577267E-8));
      Complex complex4 = complex3.divide(complex0);
      complex0.asin();
      Complex complex5 = complex0.log();
      complex3.abs();
      Complex complex6 = complex5.sin();
      complex1.reciprocal();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.add(complex6);
      complex2.sqrt();
      complex5.abs();
      Complex complex9 = complex8.divide(complex4);
      complex1.multiply((-2.8907074856577267E-8));
      complex9.exp();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1074.9555);
      complex0.createComplex(3.458805921250153E-4, (-416.628274448));
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex1 = new Complex((-1948.299799153302), (-1948.299799153302));
      complex1.multiply(1074.9555);
      complex0.negate();
      Complex complex2 = Complex.valueOf(2503.01935808);
      Complex complex3 = complex0.add((-4.052679423783159E13));
      Complex complex4 = complex2.atan();
      complex4.equals(list0);
      complex2.abs();
      complex3.pow(complex0);
      Complex.valueOf(1.1752011936438014, 2503.01935808);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 3653.47137961656);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.createComplex(3653.47137961656, Double.POSITIVE_INFINITY);
      complex4.nthRoot(1312000264);
      Complex complex5 = complex2.multiply(526.140348902);
      complex2.divide(complex3);
      complex3.asin();
      complex0.log();
      Complex complex6 = complex0.sin();
      complex1.reciprocal();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.add(complex5);
      complex8.abs();
      Complex complex9 = Complex.ONE;
      complex1.divide(complex6);
      complex0.multiply((double) 2364);
      Complex complex10 = new Complex((-61.73023099779317));
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(7.160716418525417E-8, 7.160716418525417E-8);
      Complex complex1 = complex0.ZERO.multiply(491);
      Complex complex2 = complex0.ZERO.acos();
      complex0.NaN.hashCode();
      complex0.toString();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.conjugate();
      complex4.INF.add(0.9991051931473065);
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex1.createComplex(491, 3234.7319977);
      complex2.getField();
      Complex complex7 = Complex.valueOf((-1.0), (-2410.091095211284));
      complex7.INF.log();
      Complex complex8 = complex7.NaN.divide(complex2);
      complex8.subtract((-1.0));
      complex6.add(complex0);
      Complex complex9 = Complex.valueOf(7.160716418525417E-8, 4257.0572104085);
      complex1.sin();
      Complex complex10 = complex1.add((-2410.091095211284));
      complex10.cos();
      complex1.multiply((-3071.08147830221));
      complex9.conjugate();
      complex2.add((-3071.08147830221));
      complex5.exp();
      complex6.add(20.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.multiply(682.58713933);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.divide(complex5);
      complex1.asin();
      Complex complex8 = complex1.log();
      complex0.abs();
      Complex complex9 = complex6.sin();
      complex9.reciprocal();
      Complex complex10 = Complex.ZERO;
      complex9.add(complex0);
      Complex complex11 = complex10.sqrt();
      complex6.abs();
      complex8.divide(complex11);
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex7.exp();
      Complex complex12 = Complex.NaN;
      complex12.tanh();
      Complex complex13 = (Complex)complex9.readResolve();
      complex0.equals(complex13);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2792.527966205);
      Complex complex1 = Complex.NaN;
      complex0.ONE.divide((-4185.10497222));
      Complex complex2 = Complex.valueOf((-20.0), 2792.527966205);
      Complex complex3 = Complex.valueOf(526.140348902);
      complex3.INF.hashCode();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.valueOf(5.551115123125783E-17);
      complex4.add(3068.1059161654493);
      complex1.atan();
      complex5.equals("d<aAc2Z?;");
      Complex complex6 = Complex.valueOf(2998.6666845951227);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(Double.NaN, Double.NaN);
      Complex complex3 = complex2.ZERO.pow(Double.NaN);
      complex3.I.atan();
      Complex complex4 = Complex.valueOf((-3071.08147830221));
      complex4.I.cosh();
      complex4.INF.atan();
      complex0.isNaN();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex0.tan();
      complex1.NaN.add(complex3);
      Complex complex5 = complex4.divide(complex2);
      complex5.I.negate();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex4.INF.conjugate();
      Complex complex8 = complex7.ONE.sin();
      complex6.I.conjugate();
      Complex complex9 = Complex.valueOf(9.081571104550255E191);
      complex9.ONE.multiply(9.081571104550255E191);
      Complex complex10 = Complex.valueOf(1325.674100907194);
      complex6.acos();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex13.INF.divide(complex0);
      Complex.valueOf(9.081571104550255E191, 9.081571104550255E191);
      complex12.divide(complex8);
      complex10.add(complex8);
      complex14.divide((-1595.190145));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3018.2881), (-2338.8006205));
      complex0.sqrt();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide((-4185.10497222));
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf(1.0);
      complex4.readResolve();
      Complex complex5 = complex1.pow(7798210.442037035);
      Complex complex6 = complex5.multiply((-1317));
      Complex complex7 = Complex.NaN;
      complex1.sinh();
      Complex complex8 = Complex.I;
      complex8.getArgument();
      complex5.nthRoot(3304);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex9.pow(complex10);
      Complex complex12 = new Complex(995.6);
      Complex complex13 = complex4.divide(complex1);
      complex8.getField();
      complex2.abs();
      complex7.equals(complex0);
      Complex complex14 = complex6.divide(complex11);
      complex13.sqrt1z();
      Complex complex15 = Complex.ONE;
      Complex complex16 = Complex.I;
      complex16.multiply(complex14);
      Complex complex17 = Complex.valueOf(1.0, (double) (-1317));
      complex17.add(complex3);
      complex13.abs();
      complex3.asin();
      complex12.nthRoot(1284);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(Double.NaN);
      int int0 = 52;
      Complex complex1 = complex0.multiply((-3425));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.tanh();
      complex3.subtract(complex2);
      double double1 = 6.283185307179586;
      complex1.multiply(1.2940962314605713);
      Complex complex4 = complex0.createComplex((-416.628274448), Double.NaN);
//      try { 
        complex4.nthRoot((-3425));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,425
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2792.527966205);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide((-4185.10497222));
      Complex complex3 = Complex.valueOf((-20.0), 2792.527966205);
      Complex complex4 = Complex.valueOf(526.140348902);
      Complex complex5 = complex4.multiply((-20.0));
      complex0.createComplex((-416.628274448), 2792.527966205);
      complex3.nthRoot(2364);
      Complex complex6 = complex2.multiply(1.570828869263713E-7);
      Complex complex7 = complex0.divide(complex1);
      complex5.asin();
      Complex complex8 = complex5.log();
      complex0.sin();
      complex5.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex6.add(complex7);
      complex8.abs();
      Complex complex10 = Complex.ONE;
      complex10.divide(complex1);
      complex6.multiply(1.570828869263713E-7);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.I.readResolve();
      ((Complex) object0).INF.negate();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = new Complex((-1.915204563140137E-9), (-652.612));
      complex4.add(6.283185307179586);
      complex2.atan();
      Object object1 = new Object();
      complex2.equals(object1);
      complex4.abs();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1074.9555);
      Complex complex1 = complex0.createComplex(3.458805921250153E-4, (-416.628274448));
      complex0.nthRoot(17);
      Complex complex2 = new Complex((-1948.299799153302), (-1948.299799153302));
      Complex complex3 = complex2.multiply(1074.9555);
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.log();
      complex2.abs();
      complex5.sin();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.add(complex6);
      complex9.INF.sqrt();
      complex7.abs();
      Complex complex10 = complex5.divide(complex1);
      complex7.multiply(1504.853856771598);
      complex10.exp();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.multiply(1.2204032949639917E39);
      complex1.abs();
      complex3.divide(complex1);
      complex0.multiply(Double.NaN);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.tanh();
      complex1.pow(complex3);
      Complex.valueOf(6.283185307179586, (-1291.31946609));
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.valueOf(3068.1059161654493);
      Complex complex7 = Complex.valueOf((-1218.484), 3068.1059161654493);
      Complex complex8 = Complex.valueOf(3068.1059161654493);
      complex8.reciprocal();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex0.add(complex9);
      complex10.abs();
      complex7.divide(complex6);
      complex4.multiply((-1218.484));
      complex5.exp();
      Complex.valueOf((-1218.484), 1693.85);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      complex1.I.cos();
      Complex complex2 = complex0.multiply(52);
      complex2.NaN.negate();
      complex1.ONE.tanh();
      Complex complex3 = complex2.NaN.subtract(complex1);
      complex0.ONE.multiply(6.283185307179586);
      complex3.ONE.createComplex(52, (-416.628274448));
      complex3.NaN.nthRoot(52);
      Complex complex4 = new Complex(52, (-416.628274448));
      complex4.ZERO.multiply((-416.628274448));
      Complex complex5 = complex2.I.divide(complex0);
      Complex complex6 = complex1.asin();
      complex5.log();
      complex6.ZERO.abs();
      Complex complex7 = new Complex(563.9002091);
      complex7.add(1700.7262604951);
      Complex complex8 = complex6.atan();
      complex3.equals(complex8);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(204.26429240181358, 204.26429240181358);
      complex1.negate();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.INF.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.INF.pow(complex3);
      Complex complex5 = Complex.valueOf(204.26429240181358);
      complex5.exp();
      complex5.ONE.sin();
      complex0.hashCode();
      complex0.toString();
      complex0.tanh();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex4.getArgument();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      complex1.I.cos();
      Complex complex2 = complex0.multiply(52);
      complex2.NaN.negate();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex2.NaN.subtract(complex1);
      Complex complex5 = complex0.ONE.multiply(6.283185307179586);
      Complex complex6 = complex4.ONE.createComplex(52, (-416.628274448));
      complex4.NaN.nthRoot(52);
      Complex complex7 = new Complex(52, (-416.628274448));
      complex7.ZERO.multiply((-416.628274448));
      Complex complex8 = complex2.I.divide(complex0);
      Complex complex9 = complex1.asin();
      complex8.log();
      complex9.ZERO.abs();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex2.add(complex12);
      complex13.abs();
      complex3.divide(complex11);
      Complex complex14 = complex6.multiply((-3546.0882897));
      complex14.exp();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tan();
      Complex complex1 = Complex.I;
      complex1.atan();
      complex1.getReal();
      complex0.multiply((-3716));
      Complex complex2 = complex0.reciprocal();
      complex0.getImaginary();
      complex2.nthRoot(1457);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(2792.527966205);
      complex0.getArgument();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.valueOf(2792.527966205);
      Complex complex3 = complex2.INF.reciprocal();
      complex2.ONE.divide((-4185.10497222));
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.ZERO.add((-4185.10497222));
      complex2.ONE.readResolve();
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex6.multiply((-1317));
      complex7.ZERO.multiply((-1317));
      Complex complex9 = complex8.I.sinh();
      complex9.ONE.getArgument();
      complex1.ZERO.nthRoot(3304);
      Complex complex10 = complex4.sqrt1z();
      complex1.reciprocal();
      complex7.pow(complex2);
      Complex complex11 = new Complex(3304);
      complex10.ONE.divide(complex11);
      complex10.getField();
      complex10.abs();
      complex4.equals(complex0);
      Complex complex12 = complex3.divide(complex1);
      complex12.I.sqrt1z();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex9.multiply(complex13);
      Complex complex15 = complex4.add(complex14);
      complex15.NaN.abs();
      complex0.asin();
      // Undeclared exception!
      complex9.nthRoot(3304);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.tanh();
      complex1.ONE.sinh();
      Complex complex4 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ONE.negate();
      complex5.ZERO.getArgument();
      Complex complex6 = complex0.pow(0.0);
      complex6.equals(complex4);
      complex3.subtract(1872.14);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.I.createComplex(1.785277385538302E272, 1.785277385538302E272);
      complex3.atan();
      complex1.I.hashCode();
      complex0.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex4 = Complex.valueOf(1.785277385538302E272);
      ((Complex) object0).I.pow(complex4);
      complex0.equals(object0);
      Complex complex5 = complex0.add(1334.9638003815758);
      complex5.INF.multiply(1374);
      complex1.ZERO.log();
      complex5.ZERO.log();
      Complex.valueOf(1334.9638003815758);
      Complex complex6 = complex0.NaN.reciprocal();
      complex1.negate();
      complex5.getArgument();
      complex2.pow(1.785277385538302E272);
      Complex complex7 = Complex.INF;
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.createComplex(2.0394233446495043E-237, 0.0);
      Complex complex5 = complex2.negate();
      Complex complex6 = Complex.ZERO;
      complex6.getArgument();
      complex4.pow(0.0);
      complex6.divide(complex3);
      complex5.add(1207.87);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(1);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add((double) 1);
      Complex complex3 = Complex.valueOf((double) 1);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = new Complex((-11.5125557274896), 1);
      complex5.equals(complex1);
      complex5.add((double) 1);
      Complex complex6 = Complex.ONE;
      complex4.log();
      complex0.log();
      Complex.valueOf((-1725.0));
      complex6.reciprocal();
      complex2.sin();
      Complex complex7 = complex1.negate();
      complex3.getArgument();
      Complex complex8 = Complex.NaN;
      complex8.pow(0.0);
      Complex complex9 = Complex.INF;
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.createComplex(0.0, 465.338);
      complex3.atan();
      complex0.hashCode();
      complex4.getField();
      complex1.readResolve();
      Complex complex5 = Complex.valueOf(2466.51732597);
      Complex complex6 = complex0.pow(complex2);
      complex6.equals((Object) null);
      complex6.add(2466.51732597);
      complex2.multiply(1374);
      complex3.log();
      Complex complex7 = complex3.log();
      Complex.valueOf(3264.4440933268797);
      complex5.reciprocal();
      Complex complex8 = complex7.sin();
      complex8.negate();
      complex7.getArgument();
      complex3.pow(2466.51732597);
      Complex complex9 = Complex.INF;
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.ZERO.pow(Double.NaN);
      complex3.I.atan();
      Complex complex4 = Complex.valueOf((-3071.08147830221));
      complex4.I.cosh();
      complex4.INF.atan();
      complex0.isNaN();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sin();
      complex1.log();
      Complex.valueOf((-1.0));
      Complex complex2 = Complex.valueOf(2986.67361335, 3346.22687);
      complex2.ONE.conjugate();
      Complex complex3 = Complex.valueOf(2903.0);
      Complex complex4 = complex3.divide(2903.0);
      complex1.getField();
      Complex complex5 = complex2.sinh();
      Complex.valueOf(2986.67361335);
      complex4.cosh();
      Complex complex6 = Complex.NaN;
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = new Complex(2599.0478496964, 3916.124741858);
      Complex complex2 = complex1.tan();
      complex2.atan();
      complex1.sin();
      complex1.divide(Double.NaN);
      Complex complex3 = Complex.valueOf(3916.124741858, 6.283185307179586);
      complex3.getField();
      complex3.sinh();
      complex3.cosh();
      complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      complex0.I.asin();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.log();
      complex2.tanh();
      complex2.multiply(1255);
      Complex complex3 = new Complex((-1426.96046));
      complex3.tan();
      Complex.valueOf((double) 1255, (-1426.96046));
//      try { 
        complex1.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1274.48, 1160.534441);
      complex0.sin();
      Complex complex1 = Complex.valueOf(1274.48);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.sin();
      Complex.valueOf((-2023.60608324), Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(1274.48);
      complex4.conjugate();
      Complex complex5 = complex4.sqrt();
      complex2.nthRoot(37);
      complex0.nthRoot(2278);
      Complex complex6 = complex3.createComplex(37, (-2378.4));
      Complex complex7 = Complex.ZERO;
      complex7.tan();
      complex5.divide(1914.246);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-2269.587), 5.324902289537048E274);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.tanh();
      complex1.sqrt();
      Complex complex3 = complex0.asin();
      complex3.readResolve();
      complex3.conjugate();
      complex3.atan();
      complex1.multiply(complex2);
      Complex.valueOf((-4005.05));
      complex0.log();
      complex0.add((-2133.26608728));
      Complex.valueOf(5.324902289537048E274);
      Complex.valueOf(1.0624175071716309);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2469.44444209756), 0.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.createComplex((-2469.44444209756), 2956.3284473095146);
      Complex complex3 = complex0.atan();
      complex1.hashCode();
      Complex complex4 = Complex.I;
      complex4.getField();
      complex3.readResolve();
      complex1.equals(complex0);
      Complex complex5 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.multiply(564);
      complex5.log();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex5.reciprocal();
      complex5.sin();
      Complex complex9 = complex8.multiply(1335.421784);
      complex5.getImaginary();
      complex7.multiply((-428));
      complex6.multiply(564);
      complex2.toString();
      complex7.conjugate();
      Complex complex10 = new Complex((-2469.44444209756), 564);
      Complex complex11 = Complex.NaN;
      complex3.divide(complex11);
      complex10.reciprocal();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.divide((-869.3002070952828));
      Complex complex2 = complex0.negate();
      complex2.getField();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1204.5345199), (-1204.5345199));
      Complex complex1 = complex0.NaN.pow((-1204.5345199));
      complex0.ONE.getArgument();
      complex1.I.reciprocal();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.divide(complex0);
      complex3.ZERO.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex1.INF.pow(complex4);
      Complex complex8 = complex3.ZERO.divide(complex0);
      complex0.ZERO.hashCode();
      complex1.nthRoot(37);
      complex8.nthRoot(2284);
      complex7.createComplex(2284, 86);
      Complex complex9 = complex0.tan();
      complex9.ONE.getField();
      complex6.divide((-665.5218695));
      complex6.cos();
      complex0.nthRoot(2284);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = Complex.valueOf(2986.67361335, 3346.22687);
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex4.sin();
      complex3.nthRoot(988);
      complex6.add(-0.0);
      Complex complex8 = complex3.atan();
      complex5.getReal();
      complex8.atan();
      complex7.multiply(981);
      Complex complex9 = Complex.INF;
      complex9.reciprocal();
      Complex complex10 = Complex.valueOf(1.1483560326413004E-7);
      complex10.NaN.reciprocal();
      complex4.multiply(1.0);
      complex5.abs();
      Complex.valueOf((double) 981);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex1.NaN.abs();
      Complex complex2 = complex1.NaN.divide(1129.687184142);
      complex2.ONE.divide(complex1);
      complex1.I.atan();
      Complex complex3 = complex0.add(1159.534441);
      complex3.conjugate();
      Complex complex4 = complex3.sqrt();
      complex4.ONE.readResolve();
      complex1.createComplex(0.0, 1159.534441);
      Complex complex5 = Complex.NaN;
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(828.77084);
      complex0.isInfinite();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1.1980125904083252);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.multiply((-1991.1538));
      complex2.ZERO.sinh();
      complex0.acos();
      complex0.getField();
      complex1.sin();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-2269.587), 5.324902289537048E274);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(5.324902289537048E274, (-2269.587));
      Complex complex3 = complex0.log();
      complex2.getReal();
      Complex complex4 = complex2.ZERO.sqrt1z();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.NaN.hashCode();
      Complex complex8 = Complex.ONE;
      complex1.divide(complex8);
      complex4.ONE.pow(complex3);
      Complex complex9 = complex6.ZERO.add(5.324902289537048E274);
      Complex complex10 = Complex.valueOf(5.324902289537048E274);
      complex0.ONE.hashCode();
      complex5.INF.subtract(5.324902289537048E274);
      complex5.pow(81.0);
      complex4.divide(complex0);
      Complex complex11 = complex0.pow(complex1);
      Complex complex12 = complex0.conjugate();
      complex9.NaN.pow(9.79045937979623E-8);
      complex2.sqrt1z();
      complex11.getField();
      complex3.add(complex12);
      complex10.abs();
      complex4.divide(complex9);
      complex9.multiply(5.324902289537048E274);
      complex6.tanh();
      Complex complex13 = complex11.exp();
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(0.0);
      complex0.INF.reciprocal();
      Complex complex1 = complex0.INF.multiply((-2872.4008));
      complex1.sqrt();
      complex0.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.I.sinh();
      complex0.atan();
      Complex complex5 = Complex.valueOf(453.8229892534916, 0.0);
      complex2.atan();
      complex5.NaN.getField();
      complex0.atan();
      complex5.subtract(complex4);
      complex3.cosh();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.divide((-895.70889599962));
      Complex complex1 = complex0.negate();
      complex1.getField();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.atan();
      complex1.ONE.tan();
      Complex complex2 = Complex.valueOf((-3071.08147830221));
      complex2.INF.atan();
      complex0.isNaN();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-1204.5345199), (-1204.5345199));
      Complex complex1 = complex0.NaN.pow((-1204.5345199));
      complex0.ONE.getArgument();
      complex1.I.reciprocal();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.pow(complex5);
      complex6.INF.atan();
      complex1.INF.pow(complex5);
      Complex complex7 = complex3.ZERO.divide(complex0);
      complex0.ZERO.hashCode();
      complex0.sin();
      complex1.nthRoot(988);
      complex3.add((-1204.5345199));
      complex3.atan();
      complex7.getReal();
      complex7.atan();
      complex0.multiply(988);
      complex7.reciprocal();
      Complex complex8 = Complex.valueOf(0.0);
      complex4.multiply(1622.332726);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(1.352233648300171);
      complex0.ONE.cosh();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.asin();
      complex3.INF.readResolve();
      complex0.I.conjugate();
      Complex complex4 = Complex.NaN;
      complex0.atan();
      complex0.atan();
      complex2.INF.multiply(complex4);
      Complex.valueOf((-4005.05));
      complex2.ZERO.log();
      complex2.add(2.0);
      Complex.valueOf(0.0);
      Complex.valueOf(1.352233648300171);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.toString();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = new Complex(1534.857763265, 1534.857763265);
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex3.subtract(1.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex4.I.sinh();
      complex5.ONE.hashCode();
      Complex complex7 = complex1.ZERO.conjugate();
      complex7.ZERO.hashCode();
      complex4.abs();
      complex4.abs();
      Complex complex8 = complex4.cosh();
      complex8.INF.getArgument();
      complex8.ZERO.multiply(17);
      complex8.ONE.multiply(complex5);
      complex1.sqrt1z();
      Complex complex9 = complex6.exp();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 794.1;
      double double1 = 0.0;
      Complex complex0 = new Complex(794.1, 0.0);
//      try { 
        complex0.ZERO.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-634.96), (-634.96));
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.NaN.sqrt();
      complex0.acos();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.ONE.negate();
      Complex.valueOf((-1569.5094726695));
      complex2.sqrt1z();
      complex4.sqrt1z();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      complex2.INF.sin();
      Complex complex3 = Complex.valueOf(2986.67361335, 3346.22687);
      complex3.ONE.conjugate();
      Complex complex4 = complex3.sqrt();
      complex1.NaN.nthRoot(2284);
      complex4.ONE.nthRoot(86);
      Complex complex5 = complex2.createComplex(0.0, (-2302.798455));
      complex1.tan();
      complex4.divide(0.0);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.log();
      complex2.tanh();
      Complex complex3 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.negate();
      complex4.ZERO.getArgument();
      complex0.pow(0.0);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-665.5218695));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.pow((-665.5218695));
      Complex.valueOf((-665.5218695));
      Complex complex3 = new Complex(2936.499712);
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex0.divide(complex3);
      complex0.abs();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.I.multiply(complex5);
      Complex.valueOf((-665.5218695));
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex2.add(2936.499712);
      complex3.NaN.toString();
      complex9.asin();
      Complex complex10 = complex9.createComplex(1.0, 2936.499712);
      complex10.ONE.multiply(4098.4489316);
      complex10.ONE.nthRoot(7);
      complex7.atan();
      complex3.subtract(complex8);
      Complex.valueOf(665.5218695, 665.5218695);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-888.7529408197), 1542.94419557);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.411954402923584, 20.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      complex2.I.nthRoot(3335);
      complex1.NaN.abs();
      Complex complex3 = complex0.add(complex1);
      complex3.NaN.divide(complex1);
      complex3.INF.reciprocal();
      Complex complex4 = complex0.ONE.log();
      complex3.sinh();
      Complex complex5 = complex4.NaN.pow(20.0);
      complex5.ONE.readResolve();
      complex5.ZERO.negate();
      Complex complex6 = complex0.multiply(0.0);
      complex6.ONE.hashCode();
      Complex complex7 = complex1.I.subtract(complex5);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex9.I.sqrt();
      complex10.ONE.add((-880.4298987));
      complex8.INF.sin();
      complex5.NaN.tan();
      Complex complex11 = complex1.log();
      Complex complex12 = complex8.add(complex11);
      Complex complex13 = complex7.log();
      Complex complex14 = complex7.atan();
      Complex complex15 = complex14.asin();
      Complex.valueOf(Double.NaN, (double) 3335);
      complex13.add(6.283185307179586);
      complex15.sinh();
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(2.218265110516721E156);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.I.divide(complex1);
      complex2.getField();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ONE.sin();
      complex7.INF.tanh();
      complex2.ZERO.subtract(complex7);
      Complex complex8 = complex5.ONE.divide(complex1);
      complex0.getArgument();
      Complex complex9 = complex2.INF.asin();
      complex9.NaN.getField();
      complex9.ONE.sqrt();
      complex5.I.asin();
      complex6.subtract(2.9479464287605006E-8);
      Complex complex10 = complex2.INF.divide(complex6);
      complex5.equals("input array");
      complex2.tanh();
      complex1.log();
      complex0.pow(complex8);
      complex4.toString();
      complex10.sqrt1z();
      complex10.add(complex0);
      complex5.asin();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.I.createComplex(1.785277385538302E272, 1.785277385538302E272);
      Complex complex4 = complex3.atan();
      complex1.I.hashCode();
      complex0.I.getField();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex0.add(1335.421784);
      complex5.INF.multiply(1374);
      complex1.ZERO.log();
      Complex.valueOf(1335.421784);
      Complex complex6 = complex0.NaN.reciprocal();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex0.multiply((-1.168420305422519E-7));
      complex8.ONE.log();
      complex4.getImaginary();
      Complex complex9 = complex4.multiply((-644));
      Complex complex10 = complex2.multiply((-644));
      complex10.toString();
      complex9.conjugate();
      complex9.sqrt();
      complex0.divide(complex3);
      complex4.reciprocal();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.2516399025917053, 0.2516399025917053);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.atan();
      complex2.ONE.sin();
      complex0.ZERO.divide(0.2516399025917053);
      complex0.getField();
      Complex complex3 = complex1.sinh();
      complex3.NaN.cosh();
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(204.26429240181358, 204.26429240181358);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ZERO.pow(204.26429240181358);
      complex3.INF.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.INF.pow(complex4);
      Complex complex6 = Complex.valueOf(204.26429240181358);
      complex6.exp();
      complex6.ONE.sin();
      complex0.hashCode();
      complex0.toString();
      complex0.tanh();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex5.getArgument();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      complex0.getReal();
      Complex complex2 = complex0.subtract(complex1);
      complex2.multiply((-44));
      Complex complex3 = complex1.multiply((-44));
      Complex complex4 = complex3.cos();
      complex4.ZERO.negate();
      complex4.I.add((double) (-44));
      Complex.valueOf((double) (-44), Double.NaN);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.ZERO.negate();
      complex0.getImaginary();
      complex6.ONE.subtract(complex2);
      complex0.abs();
      complex6.getArgument();
      complex5.ZERO.cosh();
      Complex complex7 = complex3.createComplex(0.0, (-1.0));
      complex7.I.acos();
      complex4.subtract(complex6);
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.ONE.sqrt();
      complex0.ZERO.log();
      Complex complex3 = complex2.multiply((-383.36466079));
      complex3.I.tan();
      complex0.INF.subtract((-383.36466079));
      Complex complex4 = Complex.valueOf((-383.36466079));
      Complex complex5 = complex4.negate();
      complex5.INF.sin();
      complex4.ZERO.readResolve();
      Complex complex6 = complex0.tanh();
      complex6.subtract(1203.280477144);
      int int0 = 0;
//      try { 
        complex6.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      complex1.NaN.tanh();
      Complex complex2 = complex0.subtract(complex1);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-412.5), 0.0);
      Complex complex1 = complex0.ZERO.cosh();
      complex0.NaN.exp();
      complex0.sin();
      complex1.exp();
      Complex complex2 = complex1.reciprocal();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.add(complex0);
      complex2.ZERO.log();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex0.hashCode();
      complex3.abs();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex3.asin();
      complex6.NaN.abs();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex7.multiply(complex5);
      Complex complex9 = complex3.pow(complex0);
      Complex complex10 = complex9.divide(complex5);
      complex4.atan();
      Complex complex11 = Complex.valueOf(1.7778112039716255E-8);
      Complex complex12 = complex8.divide((-20.0));
      complex12.ZERO.cos();
      complex12.NaN.readResolve();
      Complex complex13 = complex7.negate();
      Complex complex14 = complex9.sqrt1z();
      complex10.tanh();
      complex3.subtract(Double.NaN);
      complex14.toString();
      complex13.getImaginary();
      Complex.valueOf(5.6208949382936426E-8);
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.multiply(complex1);
      Object object0 = complex3.readResolve();
      complex0.atan();
      Complex complex4 = complex1.multiply(complex0);
      complex4.NaN.tan();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.tanh();
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex3.ZERO.pow(2.0);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex5.ZERO.add(complex7);
      complex3.hashCode();
      Complex complex10 = complex2.tan();
      complex10.I.toString();
      assertSame(complex10, complex8);
      
      Complex complex11 = complex5.log();
      Complex complex12 = complex2.pow(2.0);
      Complex complex13 = complex12.ONE.asin();
      Complex complex14 = complex12.I.createComplex(2814.801795848568, 0.0);
      Complex complex15 = complex13.NaN.acos();
      Complex complex16 = complex15.ZERO.multiply(complex11);
      assertSame(complex15, complex9);
      assertTrue(complex16.equals((Object)object0));
      
      Complex complex17 = Complex.valueOf((-1251.0), 2.0);
      complex12.abs();
      Complex complex18 = complex0.ONE.cosh();
      Complex complex19 = complex12.I.cos();
      assertTrue(complex19.equals((Object)complex18));
      
      complex0.getArgument();
      Complex complex20 = complex17.atan();
      assertEquals(1.277950371949063E-6, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex14.sqrt();
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals(53.05470568996277, complex21.getReal(), 0.01);
      
      Complex complex22 = complex13.pow(complex14);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex22.getReal(), 0.01);
      
      complex3.isInfinite();
      complex5.pow(3316.0);
      assertTrue(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2690.4503164));
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.I.multiply((-2690.4503164));
      assertEquals((-2690.4503164), complex4.getImaginary(), 0.01);
      
      Complex.valueOf((-2690.4503164));
      Object object0 = complex2.readResolve();
      Complex complex5 = complex0.multiply(103);
      Complex complex6 = complex0.divide((-2690.4503164));
      List<Complex> list0 = complex0.ONE.nthRoot(103);
      assertEquals(103, list0.size());
      
      complex0.NaN.toString();
      Complex complex7 = complex0.createComplex((-2690.4503164), 2503.76);
      Complex complex8 = complex7.NaN.multiply(complex0);
      String string0 = complex8.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      complex6.getField();
      complex0.hashCode();
      Complex complex9 = complex6.pow(complex5);
      assertTrue(complex5.equals((Object)object0));
      assertNotSame(complex9, complex8);
      
      complex0.getField();
      complex7.getReal();
      Complex complex10 = complex3.atan();
      assertEquals(1.0038848218538872, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      
      Complex complex11 = Complex.valueOf(2503.76);
      assertFalse(complex11.isInfinite());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-4793.527653459533);
      Complex complex1 = new Complex((-4793.527653459533));
      Complex complex2 = complex0.subtract(complex1);
      complex1.toString();
      complex2.getImaginary();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex1.cosh();
      complex5.ZERO.multiply(0.0);
      complex5.NaN.pow((-4793.527653459533));
      Complex complex6 = complex4.add(Double.NaN);
      complex4.ONE.subtract(Double.NaN);
      complex6.exp();
      complex1.I.getArgument();
      Complex complex7 = Complex.valueOf(1.5707963267948966);
      complex7.I.tan();
//      try { 
        complex7.ONE.nthRoot((-2474));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,474
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.conjugate();
      complex1.ONE.negate();
      complex0.ONE.multiply(9.754659138599756E-213);
      Complex complex3 = complex1.INF.add(1027.027966437);
//      try { 
        complex3.ONE.nthRoot((-848));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -848
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sinh();
      complex1.INF.getArgument();
      Complex complex4 = complex1.NaN.add(complex0);
      complex0.isNaN();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.INF.tan();
      complex7.INF.exp();
      complex5.getImaginary();
      Complex complex8 = Complex.valueOf(0.0, (-3051.2639174));
      Complex complex9 = complex8.ZERO.tan();
      complex9.ONE.sinh();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      complex1.ZERO.conjugate();
      Complex complex10 = complex8.NaN.reciprocal();
      complex1.subtract(complex8);
      complex5.toString();
      complex6.divide(complex1);
      assertSame(complex5, complex10);
      
      Complex complex11 = complex8.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals((-3051.2639174), complex8.getImaginary(), 0.01);
      
      boolean boolean0 = complex4.equals(complex1);
      assertTrue(complex4.equals((Object)complex11));
      assertFalse(boolean0);
      assertSame(complex4, complex7);
      
      Complex complex12 = complex3.add(0.0);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex9));
      assertTrue(complex12.equals((Object)complex3));
      assertEquals(2.3012989023072947, complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1235.57256295);
      double double0 = complex0.getArgument();
      assertEquals(1.5707963267948966, double0, 0.01);
      
      double double1 = complex0.getReal();
      assertEquals(0.0, double1, 0.01);
      
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(1235.57256295, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((double) 1, (double) 1);
      Complex complex4 = complex3.divide(complex2);
      assertEquals(1.3130352854993315, complex4.getReal(), 0.01);
      assertEquals((-1.3130352854993315), complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.NaN.acos();
      complex2.ONE.tanh();
      complex2.I.toString();
      complex0.I.acos();
      complex1.divide((double) (-2564));
//      try { 
        complex0.nthRoot((-2564));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,564
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
