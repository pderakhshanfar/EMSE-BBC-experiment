/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:14:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.I.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.ZERO.sqrt1z();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-3.118741081244705E266), (-858.948270595));
      Complex complex1 = complex0.multiply((-1722));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-3442.397258575864), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-3442.397258575864), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3442.397258575864), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(449);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.acos();
      Complex complex1 = Complex.valueOf((-3442.397258575864), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.pow(complex0);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3442.397258575864), Double.POSITIVE_INFINITY);
      complex1.multiply(1977.89);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3442.397258575864), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      complex0.tan();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(682.99);
      Complex complex1 = complex0.NaN.add(682.99);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.INF.multiply((-600.0));
      complex0.readResolve();
      complex0.abs();
      complex1.ONE.getField();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = Complex.valueOf(682.99, 3146.6287275404);
      Complex complex6 = complex5.exp();
      complex6.add((-1322.1255007));
      Complex complex7 = complex5.tanh();
      complex7.sin();
      Complex complex8 = complex2.ZERO.add((-600.0));
      complex8.ZERO.sinh();
      complex8.INF.add(complex6);
      complex7.NaN.abs();
      complex3.nthRoot(77);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex0.acos();
      complex9.ZERO.multiply(77);
      complex10.I.abs();
      complex0.I.atan();
      Complex complex11 = complex5.pow((-1.9544361222269494E-8));
      Complex complex12 = complex11.INF.add(682.99);
      Complex complex13 = complex6.subtract(complex5);
      complex9.negate();
      complex13.add(complex4);
      Complex complex14 = complex13.acos();
      complex14.tanh();
      complex12.multiply(1941.07063);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.NaN);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3442.397258575864), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.reciprocal();
      complex1.I.exp();
      complex2.I.pow(complex0);
      complex1.tan();
      complex2.tan();
      complex1.acos();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1988.492), (-1988.492));
      Complex complex1 = complex0.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1989.3766694595176), (-1989.3766694595176));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1646.08240842444), (-1646.08240842444));
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.subtract((-1646.08240842444));
      complex1.I.toString();
      Complex.valueOf((-1646.08240842444));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(6.539175932653188E202, (-1239.0));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.tan();
      complex3.NaN.toString();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = (Complex)complex0.readResolve();
      complex2.getReal();
      Complex complex3 = Complex.ONE;
      complex1.subtract(complex3);
      complex0.getReal();
      Complex complex4 = Complex.valueOf((-2074.3044), Double.POSITIVE_INFINITY);
      complex4.getReal();
      complex4.tan();
      Complex.valueOf((-2074.3044), (-2074.3044));
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.I;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.NaN.cosh();
      Complex complex1 = new Complex(823.806);
      Complex complex2 = complex1.NaN.negate();
      complex2.ZERO.tan();
      Complex complex3 = complex1.ONE.add(0.0);
      complex3.NaN.getArgument();
      Complex.valueOf(0.0, 6483.939795853);
      Complex complex4 = new Complex(Double.NaN, 823.806);
      complex0.I.getArgument();
      complex0.readResolve();
      Complex.valueOf(823.806, Double.NaN);
      complex0.add(3.9904382022898837E-56);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3697.499064439, (-2219.3));
      complex0.ONE.abs();
      Complex complex1 = complex0.createComplex(591.388572914511, Double.POSITIVE_INFINITY);
      complex1.divide(complex0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.createComplex(3697.499064439, (-0.377371388010555));
      complex3.ZERO.conjugate();
      Complex complex4 = complex2.pow(2.0);
      Complex complex5 = complex1.INF.sinh();
      Complex complex6 = complex1.log();
      complex6.atan();
      complex6.NaN.divide(complex5);
      complex6.INF.hashCode();
      Complex complex7 = complex6.NaN.atan();
      complex7.ONE.exp();
      complex1.toString();
      complex1.log();
      Complex complex8 = complex0.multiply(complex1);
      Complex.valueOf((-3145.1941681512285));
      complex2.divide(Double.NaN);
      complex1.negate();
      Complex complex9 = complex1.cosh();
      complex9.toString();
      complex8.reciprocal();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ONE.add(2100.03633233846);
      complex3.sqrt1z();
      Complex complex4 = complex1.log();
      complex1.conjugate();
      Complex complex5 = complex3.subtract(complex2);
      complex5.I.sqrt1z();
      complex0.INF.abs();
      complex4.subtract(complex3);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.pow(complex6);
      complex7.cos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1.8627805709838867);
      Complex complex1 = complex0.ZERO.multiply(4863);
      complex0.readResolve();
      complex0.I.sqrt1z();
      Complex complex2 = complex0.createComplex(20.0, 1.8627805709838867);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex6.cos();
      complex2.tanh();
      Complex complex9 = complex1.cos();
      complex9.INF.pow((-134.47012659037307));
      complex9.INF.createComplex(4863, (-1143.6523005));
      complex9.I.divide(complex8);
      complex6.NaN.atan();
      complex5.log();
      complex1.multiply(complex8);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = (Complex)complex0.readResolve();
      complex2.getReal();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.subtract(complex3);
      complex0.getReal();
      Complex complex5 = Complex.valueOf((-2074.3044), Double.POSITIVE_INFINITY);
      complex5.pow(complex2);
      complex4.log();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.readResolve();
      complex1.getReal();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.reciprocal();
      complex4.reciprocal();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.reciprocal();
      complex3.getReal();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex(Double.NaN);
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
      complex0.equals(complex1);
      Complex complex2 = Complex.I;
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex0.abs();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex3.tan();
      complex8.log();
      complex7.add(complex6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
      Complex complex1 = new Complex((-1.8921091400297595E93), (-1.8921091400297595E93));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.NaN.cosh();
      Complex complex1 = complex0.INF.createComplex(823.806, 6483.939795853);
      complex1.NaN.negate();
      Complex complex2 = complex1.ONE.add(0.7037224058335255);
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(0.0, (-2121.2957432));
      complex0.isNaN();
      complex0.getReal();
      Complex complex4 = complex3.ZERO.add((-2121.2957432));
      complex0.I.getArgument();
      complex0.readResolve();
      complex3.isInfinite();
      complex2.getField();
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(Double.NaN, (-2121.2957432));
      Complex complex6 = complex5.I.tan();
      complex2.isInfinite();
      Complex complex7 = complex0.multiply((-1835));
      complex5.isNaN();
      Complex complex8 = complex4.atan();
      Complex complex9 = complex7.divide(2314.878706696947);
      Complex complex10 = complex0.subtract(complex9);
      complex10.getReal();
      Complex complex11 = complex5.pow(complex8);
      Complex complex12 = complex11.multiply(981);
      complex12.NaN.conjugate();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.getArgument();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex3.add(1.0);
      complex0.getReal();
      complex7.getImaginary();
      complex2.sqrt1z();
      complex3.sqrt();
      complex1.getImaginary();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex0.sin();
      complex1.subtract(1.0);
      complex8.multiply(172);
      complex1.add(0.0);
      Complex complex10 = complex0.divide(complex6);
      complex4.pow((-1.9589778310104216E-74));
      Complex complex11 = complex5.divide(1.5707963267948966);
      Complex complex12 = complex11.divide(complex9);
      complex12.log();
      Complex complex13 = complex7.conjugate();
      complex13.reciprocal();
      complex6.log();
      complex13.add(complex10);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.pow((-2.325147219074669E-10));
      Complex complex1 = complex0.log();
      complex1.INF.getArgument();
      complex1.ONE.getArgument();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.9589778310104216E-74));
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.I.exp();
      complex5.ONE.cos();
      Complex complex6 = complex0.ZERO.add(2.3684740712822874E-41);
      complex6.getReal();
      complex3.getImaginary();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex4.sqrt();
      complex2.getImaginary();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex0.subtract((-2.325147219074669E-10));
      complex10.multiply(1451);
      Complex complex12 = complex11.add((double) 172);
      Complex complex13 = complex1.divide(complex12);
      complex13.ONE.pow(0.0);
      Complex complex14 = complex7.divide((-278.3793900604));
      Complex complex15 = complex9.divide(complex4);
      Complex complex16 = complex14.log();
      complex12.conjugate();
      complex8.reciprocal();
      complex15.tan();
      complex10.log();
      complex7.add(complex16);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.multiply(2632.537305222635);
      Complex complex1 = complex0.conjugate();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.NaN.cosh();
      Complex complex1 = complex0.INF.createComplex(823.806, 6483.939795853);
      complex1.NaN.negate();
      Complex complex2 = complex1.ONE.add(0.0);
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(0.0, (-2121.2957432));
      complex0.isNaN();
      complex0.getReal();
      Complex complex4 = complex3.ZERO.add((-2121.2957432));
      complex0.I.getArgument();
      Complex complex5 = (Complex)complex0.readResolve();
      complex3.isInfinite();
      complex2.getField();
      complex4.hashCode();
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex6.I.tan();
      complex2.isInfinite();
      Complex complex8 = complex0.multiply((-1835));
      complex6.isNaN();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex8.divide(2314.878706696947);
      Complex complex11 = complex0.subtract(complex10);
      complex11.getReal();
      Complex complex12 = complex6.pow(complex9);
      complex12.multiply(981);
      complex7.log();
      complex8.pow(complex5);
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-712.751));
      Complex complex2 = complex1.subtract(complex0);
      complex2.tanh();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.createComplex(434.3, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.NaN;
      complex5.abs();
      complex4.atan();
      Complex complex6 = new Complex(434.3);
//      try { 
        complex5.nthRoot((-1768));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,768
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.equals(complex0);
      Complex complex2 = complex1.multiply(1675.9253);
      complex0.conjugate();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2.325147219074669E-10));
      Complex complex2 = complex1.log();
      complex2.INF.getArgument();
      complex2.ONE.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.7853981633974483);
      Complex complex4 = complex2.subtract(complex0);
      complex4.tanh();
      complex0.I.exp();
      Complex complex5 = complex3.createComplex(801.3, 0.7853981633974483);
      complex5.abs();
      complex4.atan();
      Complex complex6 = new Complex(0.0);
//      try { 
        complex0.nthRoot((-1768));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,768
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.getArgument();
      complex0.log();
      complex0.multiply((-3.4174925203771133E-9));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1588.460698395));
      complex1.ONE.sqrt();
      Complex.valueOf((-283.605149811979), (-283.605149811979));
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(8.340641916717027, (-20.0));
      Complex complex2 = Complex.valueOf(8.340641916717027, (-2211.33960089));
      Complex complex3 = complex1.sinh();
      complex3.toString();
      complex0.reciprocal();
      complex1.conjugate();
      complex1.abs();
      Complex complex4 = Complex.valueOf(21.6694787104558);
      Complex complex5 = complex3.subtract(8.340641916717027);
      Complex complex6 = Complex.INF;
      Object object0 = new Object();
      complex4.equals(object0);
      complex2.sqrt();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.reciprocal();
      complex8.conjugate();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(310);
      Complex complex2 = complex1.subtract((double) 310);
      Complex complex3 = complex2.atan();
      complex0.divide(complex3);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
      complex0.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4813.17064582, 2.974085126748006E-9);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.ONE.cosh();
      Complex complex2 = null;
//      try { 
        complex0.ZERO.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(181.57958445);
      Complex complex2 = complex1.ONE.asin();
      complex2.negate();
      Complex complex3 = complex1.INF.divide(1280.2693710595852);
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = Complex.valueOf(9.075181170743178);
      Complex complex6 = complex4.NaN.exp();
      Complex complex7 = complex0.sqrt1z();
      complex7.nthRoot(2);
      Complex complex8 = complex4.atan();
      complex8.divide(1280.2693710595852);
      complex6.tan();
      complex3.NaN.getArgument();
      Complex complex9 = complex5.createComplex(2, 181.57958445);
      complex7.pow(complex1);
      complex7.equals(complex3);
      complex8.equals("");
      complex8.reciprocal();
      Complex complex10 = complex9.sinh();
      complex10.subtract(3393.958122993267);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.NaN.cosh();
      Complex complex1 = complex0.INF.createComplex(823.806, 6483.939795853);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.ONE.add(0.0);
      complex3.NaN.getArgument();
      Complex complex4 = Complex.valueOf(0.0, (-2121.2957432));
      complex0.isNaN();
      complex0.getReal();
      Complex complex5 = complex4.ZERO.add((-2121.2957432));
      complex0.I.getArgument();
      Complex complex6 = (Complex)complex0.readResolve();
      complex4.isInfinite();
      complex5.hashCode();
      Complex complex7 = complex3.divide(complex1);
      complex7.I.tan();
      complex3.isInfinite();
      Complex complex8 = complex0.multiply((-1835));
      complex7.isNaN();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex7.divide(6483.939795853);
      Complex complex11 = complex9.divide(complex0);
      complex11.log();
      complex2.conjugate();
      complex10.reciprocal();
      complex6.tan();
      complex8.log();
      Complex complex12 = complex2.add(complex5);
      complex12.multiply((double) (-1835));
      complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2.325147219074669E-10));
      Complex complex2 = complex0.log();
      complex2.INF.getArgument();
      complex2.ONE.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.9589778310104216E-74));
      Complex complex3 = complex2.subtract(complex0);
      complex3.I.tanh();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.ZERO.add(2.3684740712822874E-41);
      complex1.getReal();
      complex1.getImaginary();
      Complex complex6 = complex5.sqrt1z();
      complex6.ZERO.sqrt();
      complex0.getImaginary();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex5.subtract((-2.325147219074669E-10));
      complex3.multiply(172);
      Complex complex10 = complex2.add(20.0);
      complex7.divide(complex4);
      Complex complex11 = complex10.divide(0.0);
      complex9.subtract(complex2);
      complex5.getReal();
      complex7.pow(complex11);
      complex8.multiply(172);
      Complex complex12 = Complex.ONE;
      complex12.add((-889.55));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      Complex complex3 = complex2.I.sinh();
      complex1.toString();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.INF.conjugate();
      complex4.ONE.abs();
      Complex complex6 = Complex.valueOf(1.0);
      complex5.subtract(0.4330751895904541);
      Complex complex7 = Complex.INF;
      complex5.equals(complex1);
      complex2.sqrt();
      complex5.cosh();
      complex6.reciprocal();
      Complex complex8 = complex1.conjugate();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.49030399322509766);
      complex0.INF.hashCode();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.createComplex(3205.12444683, 0.49030399322509766);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.add(0.49030399322509766);
      Complex complex6 = Complex.ONE;
      complex4.equals(complex6);
      complex3.cos();
      complex2.conjugate();
      Complex complex7 = complex5.tan();
      complex7.tanh();
      complex7.sinh();
      Complex complex8 = Complex.valueOf((-2251.8333563206497));
      complex3.multiply(complex8);
      complex1.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex0.ONE.getField();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide(complex1);
      complex2.getField();
      Complex complex4 = complex3.multiply((-1167.7515919));
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.subtract((-1167.7515919));
      Complex complex7 = Complex.NaN;
      complex1.add((-0.9983114649500422));
      Complex complex8 = complex5.tan();
      complex4.divide(complex1);
      complex6.toString();
      complex8.createComplex(3082.5352598, 0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      Complex complex3 = complex2.I.sinh();
      complex1.toString();
      Complex complex4 = complex3.reciprocal();
      complex4.INF.conjugate();
      complex4.ONE.abs();
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex1.NaN.sqrt1z();
      Complex complex8 = new Complex((-20.0));
      Complex complex9 = complex7.reciprocal();
      complex9.INF.nthRoot(1);
      complex3.conjugate();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1.7482123374938965;
      Complex complex1 = Complex.valueOf(3222.17, 1.7482123374938965);
      complex1.getImaginary();
      complex1.getField();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.conjugate();
      complex4.tan();
      Complex complex5 = complex0.tanh();
      complex5.sinh();
      complex4.multiply(complex5);
      // Undeclared exception!
      complex3.nthRoot(1040660791);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.ONE.add(complex1);
      complex0.multiply(0.20818853378295898);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2.325147219074669E-10));
      Complex complex2 = complex0.log();
      complex2.INF.getArgument();
      complex2.ONE.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.9589778310104216E-74));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex0.ZERO.add(2.3684740712822874E-41);
      complex1.getReal();
      complex1.getImaginary();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.ZERO.sqrt();
      complex0.getImaginary();
      Complex complex9 = complex7.cosh();
      complex1.sin();
      complex6.subtract((-2.325147219074669E-10));
      complex3.multiply(172);
      Complex complex10 = complex2.add(20.0);
      Complex complex11 = complex9.divide(complex5);
      Complex complex12 = complex7.divide((-2151.7258277999));
      complex4.divide(complex12);
      complex9.log();
      complex8.getReal();
      complex6.pow(complex10);
      complex7.multiply(172);
      complex11.add(2314.878706696947);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(2463.0);
      Complex complex2 = Complex.ONE;
      complex0.equals(complex1);
      complex1.conjugate();
      Complex complex3 = complex0.divide(2463.0);
      Complex.valueOf(1.7619237899780273);
      complex1.subtract((-8.925958555729115E-9));
      Complex complex4 = Complex.valueOf(2463.0, 2463.0);
      complex2.equals(complex3);
      complex2.sqrt();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.reciprocal();
      complex6.conjugate();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.49030399322509766);
      complex0.INF.hashCode();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.tan();
      complex2.ZERO.createComplex(3205.12444683, 0.49030399322509766);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.add(0.49030399322509766);
      Complex complex5 = Complex.ONE;
      complex3.equals(complex5);
      Complex complex6 = complex1.ZERO.conjugate();
      complex6.divide(8.84860731285028);
      Complex complex7 = Complex.valueOf(1.0);
      complex3.subtract(4.367697180842916E-8);
      Complex complex8 = Complex.INF;
      complex1.equals(complex8);
      complex7.sqrt();
      Complex complex9 = complex2.cosh();
      complex9.reciprocal();
      complex9.conjugate();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2.325147219074669E-10));
      Complex complex2 = complex0.log();
      complex2.INF.getArgument();
      complex2.ONE.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.9589778310104216E-74));
      Complex complex4 = complex2.subtract(complex0);
      complex4.I.tanh();
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex0.ZERO.add(2.3684740712822874E-41);
      complex1.getReal();
      complex1.getImaginary();
      Complex complex7 = complex6.sqrt1z();
      complex7.ZERO.sqrt();
      complex0.getImaginary();
      complex1.readResolve();
      complex3.isInfinite();
      complex6.add(2.3684740712822874E-41);
      complex0.tan();
      complex2.divide(complex5);
      complex1.toString();
      Complex complex8 = Complex.NaN;
      complex8.createComplex(2.0, 1291.0);
//      try { 
        complex4.nthRoot((-391));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -391
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.multiply(complex0);
      complex1.NaN.abs();
      complex0.getReal();
      Complex complex3 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex3.INF.createComplex(0.0, 0.0606246218085289);
      complex7.I.abs();
      Complex complex8 = complex0.atan();
      complex8.I.add(complex3);
      complex8.I.nthRoot(2799);
      complex4.equals("(0.0, 0.0)");
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex8.sin();
      complex10.ONE.subtract(Double.NaN);
      Complex complex11 = complex0.ZERO.multiply(204);
      complex9.add(0.0);
      complex7.divide(complex0);
      complex11.I.divide(Double.NaN);
      Complex complex12 = complex9.divide(complex7);
      complex12.INF.log();
      complex12.I.conjugate();
      Complex complex13 = complex3.reciprocal();
      complex13.I.pow(Double.NaN);
      complex13.tan();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.multiply(complex0);
      complex1.NaN.abs();
      complex0.getReal();
      Complex complex3 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex3.INF.createComplex(0.0, 0.0606246218085289);
      complex7.I.abs();
      Complex complex8 = complex0.atan();
      complex8.I.add(complex3);
      complex8.I.nthRoot(2799);
      complex4.equals("(0.0, 0.0)");
      complex0.readResolve();
      complex8.isInfinite();
      Complex complex9 = complex4.tan();
      complex4.multiply(complex2);
      complex9.log();
      complex7.toString();
      Complex.valueOf(0.0, 1930.2830869852);
      complex0.sqrt();
      complex9.getImaginary();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex6.divide(complex10);
      complex11.createComplex(0.0606246218085289, 1930.2830869852);
      Complex complex12 = Complex.ZERO;
      complex12.add(2.583586875772096E7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2.325147219074669E-10));
      Complex complex2 = complex0.log();
      complex2.INF.getArgument();
      complex2.ONE.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.9589778310104216E-74));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex0.ZERO.add(2.3684740712822874E-41);
      complex1.getReal();
      complex1.getImaginary();
      Complex complex7 = complex6.sqrt1z();
      complex7.ZERO.sqrt();
      complex0.getImaginary();
      Complex complex8 = complex7.cosh();
      complex1.sin();
      Complex complex9 = complex6.subtract((-2.325147219074669E-10));
      complex3.multiply(172);
      Complex complex10 = complex2.add(20.0);
      complex8.divide(complex5);
      Complex complex11 = complex7.divide((-2151.7258277999));
      complex4.divide(complex11);
      Complex complex12 = complex8.log();
      complex10.conjugate();
      complex9.reciprocal();
      complex8.tan();
      complex12.log();
      complex1.add(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2.325147219074669E-10));
      Complex complex2 = complex0.log();
      complex2.INF.getArgument();
      complex2.ONE.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.9589778310104216E-74));
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.I.exp();
      Complex complex7 = complex0.ZERO.add(2.3684740712822874E-41);
      complex1.getReal();
      complex1.getImaginary();
      complex4.ZERO.multiply(complex0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.ZERO.sqrt();
      complex0.getImaginary();
      complex1.readResolve();
      complex9.NaN.getArgument();
      complex3.isInfinite();
      Complex complex10 = complex3.tan();
      complex10.multiply(complex9);
      complex7.log();
      complex9.toString();
      Complex complex11 = Complex.valueOf(2.3684740712822874E-41, (-1021.5605819401774));
      complex4.sqrt();
      Complex complex12 = Complex.NaN;
      complex0.divide(complex12);
      Complex complex13 = complex6.log();
      complex12.conjugate();
      complex13.reciprocal();
      complex11.tan();
      Complex complex14 = new Complex(0.7853981633974483, 594.88);
      complex14.log();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.exp();
      complex0.abs();
      Complex complex2 = complex0.add((-20.0));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = new Complex(1786.0, 1692.9991023513585);
      Complex complex5 = complex4.tanh();
      complex1.multiply(Integer.MAX_VALUE);
      Complex complex6 = complex0.pow((double) Integer.MAX_VALUE);
      complex2.tanh();
      complex5.sin();
      complex5.add(0.0);
      complex5.multiply(complex3);
      Complex complex7 = new Complex(6.3890560989306495, 2.787906051540986E261);
      complex7.multiply(2.787906051540986E261);
      complex6.getField();
      complex5.createComplex(6.3890560989306495, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      Complex complex3 = complex2.I.sinh();
      complex1.toString();
      Complex complex4 = complex3.reciprocal();
      complex4.INF.conjugate();
      complex4.ONE.abs();
      Complex complex5 = complex1.add(complex2);
      complex5.INF.exp();
      Complex complex6 = complex1.NaN.sqrt1z();
      Complex complex7 = new Complex((-20.0));
      complex6.reciprocal();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-3594.15280405), (-3594.15280405));
      Complex complex1 = new Complex(0.0, (-3594.15280405));
      Complex complex2 = Complex.valueOf((-3594.15280405));
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.NaN.subtract(complex1);
      complex4.INF.abs();
      Complex complex5 = Complex.valueOf(328.169126277);
      complex5.NaN.add((-3594.15280405));
      Complex complex6 = complex1.ZERO.cosh();
      complex2.INF.getArgument();
      complex0.multiply(complex1);
      Complex complex7 = complex0.ONE.cos();
      Complex complex8 = complex1.NaN.conjugate();
      complex3.toString();
      complex5.readResolve();
      Complex complex9 = complex7.subtract(1.0);
      complex9.isNaN();
      complex9.subtract(complex2);
      complex8.toString();
      complex4.cos();
      complex7.tanh();
      complex0.asin();
      complex3.tanh();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.multiply(0.5557018518447876);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex6.NaN.conjugate();
      complex7.I.readResolve();
      Complex complex8 = (Complex)complex0.INF.readResolve();
      complex4.pow(0.0);
      complex8.add(392.478212);
      complex8.divide(complex1);
      Complex complex9 = Complex.ZERO;
      complex9.divide(1.1304970373249033E199);
      complex9.divide(complex1);
      complex6.log();
      Complex complex10 = new Complex((-440.458));
      complex10.conjugate();
      complex8.reciprocal();
      complex3.tan();
      complex3.log();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.multiply(0.0);
      complex1.multiply(complex0);
      complex1.NaN.abs();
      complex0.getReal();
      Complex complex2 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex2.INF.createComplex(0.0, 0.0606246218085289);
      complex6.I.abs();
      Complex complex7 = complex0.atan();
      complex7.I.add(complex2);
      complex7.I.nthRoot(2799);
      complex3.equals("(0.0, 0.0)");
      complex5.cosh();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.ONE.subtract(Double.NaN);
      complex0.ZERO.multiply(204);
      complex9.createComplex(3.323458344853057E-8, (-176.26));
      Complex complex10 = Complex.INF;
      complex10.sin();
      Complex.valueOf(523.17783);
      Complex complex11 = Complex.I;
      complex11.abs();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.multiply(complex0);
      complex1.NaN.abs();
      complex0.getReal();
      Complex complex3 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.add(Double.NaN);
      complex2.getReal();
      complex4.getImaginary();
      Complex complex8 = Complex.ONE;
      complex8.sqrt1z();
      Complex complex9 = complex7.sqrt();
      complex2.getImaginary();
      complex2.readResolve();
      complex6.isInfinite();
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.NaN;
      complex11.multiply(complex12);
      Complex complex13 = complex9.log();
      complex4.toString();
      Complex complex14 = Complex.valueOf(2314.878706696947, (-2136.1));
      complex13.sqrt();
      complex5.getImaginary();
      complex11.divide(complex8);
      complex11.createComplex(2314.878706696947, (-1790.74785));
      complex14.add(0.0);
      complex13.add(complex5);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-752.11));
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.sqrt1z();
      complex3.NaN.add(complex2);
      complex2.ONE.pow((-752.11));
      Complex complex4 = complex3.NaN.pow(complex1);
      complex1.INF.hashCode();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.NaN.pow(0.0);
      Complex complex7 = complex1.add(0.0);
      complex6.isNaN();
      complex2.divide(complex5);
      complex7.asin();
      complex1.add((-1354.62255377));
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.multiply(complex0);
      complex1.NaN.abs();
      complex0.getReal();
      Complex complex3 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex3.INF.createComplex(0.0, 0.0606246218085289);
      complex7.I.abs();
      Complex complex8 = complex0.atan();
      complex8.I.add(complex3);
      complex8.I.nthRoot(2799);
      complex4.equals("(0.0, 0.0)");
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex8.sin();
      complex10.ONE.subtract(Double.NaN);
      Complex complex11 = complex0.ZERO.multiply(204);
      complex9.add(0.0);
      complex7.divide(complex0);
      complex11.I.divide(Double.NaN);
      Complex complex12 = complex9.divide(complex7);
      complex12.INF.log();
      complex12.I.conjugate();
      Complex complex13 = complex3.reciprocal();
      complex13.tan();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4.390523815859274E124);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.INF.multiply(881);
      Complex complex4 = complex0.NaN.pow(complex3);
      complex4.INF.sin();
      complex0.tan();
      complex3.isNaN();
      Complex complex5 = complex3.NaN.conjugate();
      complex5.INF.asin();
      complex4.ONE.getField();
      Complex complex6 = complex0.multiply(3968.173);
      complex6.NaN.pow(3968.173);
      complex4.abs();
      complex2.pow(complex5);
      Complex complex7 = Complex.valueOf((-1.7959243076374794E242));
      complex7.nthRoot(585);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
      complex1.add(complex0);
      Complex complex2 = complex0.cos();
      complex0.ZERO.add(2966.894941);
      complex2.ONE.add(complex1);
      Complex complex3 = Complex.valueOf(1072.6658406);
      complex2.ZERO.hashCode();
      Complex complex4 = complex0.add((-879.96933));
      complex4.pow(complex3);
      Complex complex5 = Complex.valueOf((-3.145816653215968E-9), 2.628788218289742E129);
      complex5.ONE.createComplex(2.628788218289742E129, 0.0);
      complex2.nthRoot(811);
      Complex complex6 = complex1.sqrt1z();
      complex6.pow(1072.6658406);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.subtract((double) 1888);
      Complex complex1 = complex0.multiply(1888);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.pow((double) 1888);
      complex4.INF.conjugate();
      complex3.isNaN();
      complex3.multiply(0);
      complex0.readResolve();
      complex4.tanh();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
      complex0.I.sin();
      Complex complex1 = complex0.acos();
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-1596.36778));
      Complex complex1 = Complex.NaN;
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.atan();
      complex0.createComplex((-1596.36778), (-1596.36778));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.NaN.cosh();
      Complex complex1 = complex0.INF.createComplex(823.806, 6483.939795853);
      complex1.NaN.negate();
      Complex complex2 = complex1.ONE.add(0.0);
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(0.0, (-2121.2957432));
      complex0.isNaN();
      complex0.getReal();
      Complex complex4 = complex3.ZERO.add((-2121.2957432));
      complex0.I.getArgument();
      complex0.readResolve();
      complex3.isInfinite();
      complex0.ZERO.getField();
      complex4.hashCode();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.I.tan();
      complex2.isInfinite();
      Complex complex7 = complex0.multiply((-1835));
      complex5.isNaN();
      Complex complex8 = complex4.atan();
      Complex complex9 = complex7.divide(2314.878706696947);
      Complex complex10 = complex0.subtract(complex9);
      complex10.getReal();
      Complex complex11 = complex5.pow(complex8);
      complex11.multiply(981);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(2586.593);
      Complex complex1 = complex0.INF.divide((-1931.0599));
      Complex complex2 = complex1.ZERO.negate();
      complex1.INF.hashCode();
      complex0.INF.toString();
      complex0.cosh();
      Complex complex3 = complex0.subtract(2586.593);
      complex0.ONE.negate();
      complex3.ONE.reciprocal();
      complex3.isInfinite();
      complex1.multiply(complex0);
      complex1.acos();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex0.ZERO.divide(complex1);
      complex2.ONE.subtract(complex0);
      complex2.tanh();
      complex2.ONE.cos();
      Complex complex3 = complex1.INF.negate();
//      try { 
        complex3.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2.325147219074669E-10));
      Complex complex2 = complex0.log();
      complex2.INF.getArgument();
      complex2.ONE.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.9589778310104216E-74));
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.I.tanh();
      complex0.I.exp();
      Complex complex6 = complex0.ZERO.add(2.3684740712822874E-41);
      complex1.getReal();
      complex1.getImaginary();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.ZERO.sqrt();
      complex0.getImaginary();
      complex1.readResolve();
      complex3.isInfinite();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.multiply(complex8);
      complex6.log();
      complex8.toString();
      Complex.valueOf(2.3684740712822874E-41, (-1021.5605819401774));
      Complex complex11 = complex4.sqrt();
      complex2.getImaginary();
      complex5.divide(complex11);
      complex10.createComplex(0.0, 0.0);
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1476.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.add(1476.0);
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex1.INF.cos();
      complex5.NaN.abs();
      complex1.INF.subtract(1476.0);
      Complex complex6 = complex3.reciprocal();
      complex1.abs();
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex5.INF.asin();
      Complex complex9 = complex5.I.sinh();
      complex3.isNaN();
      complex5.isInfinite();
      Complex complex10 = complex3.negate();
      complex10.ONE.toString();
      complex5.negate();
      complex4.toString();
      complex2.hashCode();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex4.createComplex(1476.0, (-1280.776142755));
      complex11.conjugate();
      Complex complex13 = complex3.divide((-2177.10977595183));
      Complex complex14 = complex7.asin();
      complex8.tanh();
      Complex complex15 = complex14.pow(complex13);
      complex15.conjugate();
      complex1.getReal();
      complex12.pow(2184.29625991);
      complex10.readResolve();
      complex12.sinh();
      complex8.acos();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.add(complex0);
      complex2.NaN.getField();
      complex0.ONE.sqrt();
      complex2.NaN.cos();
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.NaN.conjugate();
      complex4.ONE.acos();
      complex4.ZERO.asin();
      Complex complex5 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex5.ZERO.add(1638.59645574);
      complex5.ONE.pow(complex2);
      complex5.getImaginary();
      complex1.multiply(70);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.divide(complex0);
      complex1.isInfinite();
      complex6.readResolve();
      complex7.tan();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.sinh();
      complex1.toString();
      Complex complex4 = complex3.reciprocal();
      complex4.INF.conjugate();
      complex4.ONE.abs();
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = complex5.INF.exp();
      complex1.NaN.sqrt1z();
      Complex complex7 = complex2.exp();
      complex7.abs();
      Complex complex8 = complex1.add((-20.0));
      Complex complex9 = complex0.I.add(complex1);
      Complex complex10 = complex8.I.tanh();
      complex10.I.multiply(1);
      Complex complex11 = complex7.pow((-20.0));
      complex10.tanh();
      Complex complex12 = complex6.sin();
      complex5.add(0.0);
      complex12.multiply(complex11);
      complex5.multiply(0.0);
      complex1.getField();
      complex9.createComplex(Double.POSITIVE_INFINITY, 2142.836909);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-3594.15280405), (-3594.15280405));
      Complex complex1 = new Complex(0.0, (-3594.15280405));
      Complex complex2 = Complex.valueOf((-3594.15280405));
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.NaN.subtract(complex1);
      complex4.INF.abs();
      Complex complex5 = Complex.valueOf(328.169126277);
      complex5.NaN.add((-3594.15280405));
      Complex complex6 = complex1.ZERO.cosh();
      complex2.INF.getArgument();
      Complex complex7 = complex0.multiply(complex1);
      complex0.ONE.cos();
      Complex complex8 = complex1.NaN.conjugate();
      complex7.NaN.toString();
      complex7.readResolve();
      Complex complex9 = complex8.subtract(2160.79);
      complex8.isNaN();
      complex2.subtract(complex6);
      complex9.toString();
      complex3.cos();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex10.NaN.asin();
      complex8.tanh();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.INF.hashCode();
      Complex complex2 = complex1.I.multiply(1);
      complex1.ONE.readResolve();
      complex1.INF.sinh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.I.sqrt();
      complex4.I.pow((-2600.3830173765828));
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex4.INF.multiply(complex5);
      complex8.ONE.hashCode();
      complex2.I.asin();
      complex8.INF.createComplex((-1109.416183673), (-1109.416183673));
      complex1.NaN.toString();
      Complex complex9 = complex0.sqrt1z();
      complex4.reciprocal();
      complex2.nthRoot(778);
      complex7.hashCode();
      complex7.sqrt1z();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(7);
      complex0.hashCode();
      Complex complex1 = complex0.pow(2.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.subtract(0.0);
      complex3.NaN.getArgument();
      complex0.nthRoot(7);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.divide(complex0);
      complex1.getReal();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex5.sqrt();
      complex6.reciprocal();
      complex5.getImaginary();
      Complex complex8 = complex3.sin();
      complex6.getField();
      complex7.toString();
      complex8.INF.log();
      complex0.INF.log();
      complex5.getReal();
      complex0.readResolve();
      complex0.multiply(7);
      complex7.subtract(complex6);
      complex8.getField();
      complex1.hashCode();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.valueOf((-1946.78920492));
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.ONE.pow((-1946.78920492));
      Complex complex5 = complex2.tanh();
      complex0.log();
      Complex complex6 = Complex.valueOf(1636.03);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex8.NaN.divide(complex1);
      Complex complex10 = complex6.ZERO.asin();
      complex10.ONE.sinh();
      complex10.ZERO.divide(1636.03);
      Complex complex11 = complex5.divide(20.0);
      complex11.hashCode();
      complex0.hashCode();
      Complex complex12 = complex6.add((-2400.77012));
      complex6.ZERO.log();
      Complex complex13 = complex12.atan();
      complex13.readResolve();
      complex13.readResolve();
      Complex complex14 = complex11.add(complex1);
      complex5.cosh();
      Complex.valueOf(20.0);
      complex9.isInfinite();
      complex4.getReal();
      complex2.add(0.0);
      complex5.isNaN();
      complex4.sqrt();
      Complex complex15 = Complex.valueOf(2.5139999389648438);
      complex14.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-313.5));
      complex1.ONE.cos();
      Complex complex2 = complex0.pow((-88.091));
      Complex complex3 = complex2.createComplex((-393.87648), (-88.091));
      Complex complex4 = complex3.I.log();
      complex3.ONE.exp();
      complex3.reciprocal();
//      try { 
        complex4.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      Complex complex1 = new Complex(1850.7244440655);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.multiply(620.4);
      complex3.I.add(620.4);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex4.INF.exp();
      complex0.NaN.getField();
      Complex complex7 = complex3.I.acos();
      complex7.ONE.sqrt1z();
      complex5.ZERO.add(620.4);
      complex2.ZERO.getArgument();
      Complex complex8 = complex2.ZERO.sin();
      complex1.INF.sqrt1z();
      complex8.INF.log();
      complex2.readResolve();
      Complex complex9 = complex4.subtract(complex2);
      complex1.multiply(complex0);
      complex0.multiply(2.631993083235205E-8);
      complex2.asin();
      complex5.tan();
      complex9.tan();
      Complex.valueOf(1850.7244440655);
      complex8.isNaN();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-3345.5723490378664), 942.0);
      complex0.ONE.exp();
      complex0.getImaginary();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(942.0);
      Complex complex3 = complex2.INF.multiply(complex1);
      complex3.I.multiply(591.99225296);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.subtract(complex2);
      complex5.ZERO.subtract((-1628.2637012004743));
      complex0.exp();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex6.divide(1499.31768);
      complex7.createComplex(40.720438978, 1499.31768);
      complex6.isNaN();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-466.35121), 0.0);
      Complex complex1 = complex0.multiply((-20.0));
      complex1.isNaN();
      Complex complex2 = complex1.NaN.multiply((-20.0));
      Complex.valueOf((-20.0));
      complex2.ZERO.abs();
      Complex complex3 = complex0.atan();
      complex3.I.log();
      Complex complex4 = complex1.NaN.reciprocal();
      complex4.divide(complex3);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.exp();
      complex6.cos();
      complex6.reciprocal();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.negate();
      complex1.NaN.subtract(complex5);
      Complex.valueOf(0.0, 0.0);
      complex6.isNaN();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.739696979522705, 1.739696979522705);
      complex0.toString();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.multiply(1.739696979522705);
      complex3.I.divide(complex1);
      complex0.getField();
      complex0.toString();
      complex2.NaN.sqrt();
      Complex complex4 = complex1.pow(complex0);
      complex4.INF.getArgument();
      Complex complex5 = complex2.ZERO.divide(1.739696979522705);
      complex5.INF.sinh();
      Complex.valueOf(0.7853981633974483);
      Complex complex6 = complex0.sinh();
      complex6.ONE.add(20.0);
      complex6.ZERO.asin();
      Complex complex7 = complex2.multiply(1.739696979522705);
      complex7.NaN.nthRoot(3877);
      complex7.I.negate();
      complex7.hashCode();
      complex6.ZERO.sinh();
      Complex complex8 = complex0.createComplex(2865.99, 1.739696979522705);
      complex8.INF.add(2865.99);
      complex8.cos();
      complex3.hashCode();
      int int0 = (-2428);
//      try { 
        complex3.nthRoot((-2428));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,428
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.multiply(0.5557018518447876);
      complex1.INF.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.sin();
      complex4.NaN.conjugate();
      complex0.INF.readResolve();
      Complex complex5 = complex2.pow(0.0);
      complex5.INF.createComplex(735.14652, 0.0);
      complex5.ONE.sin();
      Complex complex6 = Complex.valueOf(0.5557018518447876);
      complex6.abs();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(540.38366);
      Complex complex1 = complex0.tan();
      complex0.I.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf((-1113.4934));
      complex2.isNaN();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex4.NaN.multiply(1);
      Complex complex6 = complex5.ONE.multiply((-3511.9555705191));
      Complex complex7 = complex0.pow(complex1);
      complex0.readResolve();
      complex0.divide(complex1);
      Complex complex8 = complex1.ONE.cosh();
      Complex complex9 = complex8.NaN.negate();
      complex8.INF.pow(471.226);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex10.conjugate();
      complex7.tan();
      complex3.pow((-3511.9555705191));
      complex10.isNaN();
      complex11.pow(complex4);
      complex6.multiply((double) 1);
      complex1.getField();
      complex10.createComplex(1944.810573, 1);
      complex9.subtract(2441.20491107447);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.asin();
      complex2.acos();
      Complex complex3 = complex1.INF.sin();
      complex0.ZERO.divide(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.ONE.sqrt1z();
      complex5.I.multiply(139);
      complex5.abs();
      Complex complex7 = complex1.I.multiply(151);
      Complex complex8 = complex7.tan();
      complex8.tanh();
      complex8.exp();
      Complex complex9 = new Complex(1910.23743282019);
      complex3.subtract(complex9);
      Complex complex10 = complex5.NaN.sqrt1z();
      complex1.INF.pow(complex6);
      complex10.I.getField();
//      try { 
        complex6.nthRoot((-2534));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,534
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-2101.9773), (-2101.9773));
      Complex complex1 = new Complex((-2101.9773), (-2101.9773));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.I.divide(complex1);
      complex0.sqrt1z();
      complex0.negate();
      Complex complex4 = complex2.tan();
      complex4.multiply(complex3);
      complex4.negate();
      complex4.negate();
      Complex.valueOf(3.174358801839755E-60);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.atan();
      complex1.ONE.log();
      Complex complex2 = Complex.valueOf(3213.4540125618146);
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex0.multiply((-778));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex1.pow((double) (-778));
      Complex complex7 = complex6.cosh();
      complex5.log();
      complex1.acos();
      Complex complex8 = complex3.tan();
      complex3.INF.hashCode();
      complex3.INF.sin();
      complex8.NaN.createComplex((-2814.318853), (-2814.318853));
      complex8.I.divide((-1595.6402415384));
      complex7.subtract(6.933855730431659E-8);
      complex4.subtract(complex3);
      complex6.multiply((double) (-778));
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      complex0.getImaginary();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex1.ONE.getArgument();
      Complex complex3 = complex2.NaN.pow(0.0);
      Complex complex4 = complex0.I.multiply(1.0);
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex5.I.asin();
      complex6.I.negate();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = Complex.valueOf(2067.377, 0.0);
      Complex complex9 = complex8.ONE.multiply(complex1);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex4.ZERO.divide(2067.377);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertTrue(complex10.equals((Object)complex9));
      
      Complex complex11 = complex1.ZERO.sqrt();
      Complex complex12 = complex11.subtract(complex4);
      Complex complex13 = complex12.INF.negate();
      complex1.INF.pow(1.0);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex14 = complex4.INF.tanh();
      Complex complex15 = complex1.tanh();
      Complex complex16 = Complex.valueOf(1.0, 20.0);
      assertEquals(1.0, complex16.getReal(), 0.01);
      
      complex0.isNaN();
      complex4.getImaginary();
      Complex complex17 = complex15.subtract(0.0);
      Complex complex18 = complex0.pow(complex14);
      Complex complex19 = complex2.log();
      Object object0 = complex19.readResolve();
      Complex complex20 = complex17.sinh();
      assertEquals(0.0, complex20.getReal(), 0.01);
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex7.subtract(0.0);
      complex13.tanh();
      assertTrue(complex11.equals((Object)complex20));
      assertEquals((-1.0), complex12.getImaginary(), 0.01);
      
      complex3.getArgument();
      complex21.toString();
      assertTrue(complex21.equals((Object)object0));
      assertSame(complex21, complex18);
      assertEquals(0.8813735870195428, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.divide((-2301.259786172325));
      assertEquals((-4.3454459422996973E-4), complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.log();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.INF.add(670.094013233);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.ZERO.negate();
      assertEquals(-0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex6.INF.tanh();
      complex10.tanh();
      Complex complex11 = complex5.multiply((-1));
      Complex complex12 = complex11.atan();
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      complex0.isInfinite();
      Complex complex13 = complex7.I.acos();
      assertEquals((-0.8813735870195429), complex13.getImaginary(), 0.01);
      
      complex5.isInfinite();
      Complex complex14 = complex11.tanh();
      assertEquals(-0.0, complex14.getReal(), 0.01);
      assertTrue(complex14.equals((Object)complex12));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex7.tanh();
      complex16.ZERO.readResolve();
      assertTrue(complex7.isInfinite());
      
      complex4.isInfinite();
      assertSame(complex4, complex15);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(2936.709136, (-1999.164700015094));
      complex1.ZERO.multiply(215);
      Complex complex2 = complex0.multiply(complex1);
      Complex.valueOf(0.0);
      complex2.ONE.exp();
      Complex complex3 = complex0.log();
      complex1.NaN.exp();
      Complex complex4 = complex3.tan();
      complex4.getReal();
      complex1.multiply((-1925.052390524995));
//      try { 
        complex2.nthRoot((-437));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -437
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      double double0 = complex3.getReal();
      assertSame(complex3, complex2);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
