/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:31:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(5.356668151937413E47);
      complex0.atan();
      complex1.asin();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(846.66, (-20.0));
      Complex complex2 = complex1.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3259.272568677584, (-2948.79992292713));
      complex0.nthRoot(903);
      complex0.pow(3259.272568677584);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.I.hashCode();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-12.03277455302916), 1764.5771359364);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex2.I.add(1315.186659207);
      complex3.negate();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex5.NaN.atan();
      complex1.ZERO.cosh();
      complex7.INF.tan();
      complex5.ZERO.cos();
      complex5.ZERO.add(complex4);
      complex7.ZERO.getArgument();
      complex5.ONE.acos();
      complex6.NaN.acos();
      complex0.ZERO.add(0.0);
      complex1.getField();
      Complex complex8 = complex1.pow(complex7);
      complex6.createComplex(0.0, 3635.674);
      complex3.pow(complex2);
      complex8.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.add(complex2);
      complex4.sinh();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.multiply(complex6);
      Complex complex9 = new Complex(20.0);
      complex9.abs();
      complex6.sinh();
      complex8.abs();
      complex4.sqrt1z();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = new Complex(20.0, 1.0);
      complex11.multiply(complex3);
      complex11.tanh();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-632.9), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.ONE.multiply(complex0);
      complex0.tan();
      complex0.multiply(851);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(26.292829243987846, 26.292829243987846);
      Complex complex1 = new Complex(1.9164371031683344E7, 26.292829243987846);
      Complex complex2 = complex1.sqrt();
      complex2.tan();
      complex2.multiply(1012);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-632.9), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3249.520403652854, (-2948.79992292713));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      Complex.valueOf((-2948.79992292713));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.INF;
      complex4.multiply(complex5);
      complex2.tanh();
      complex1.atan();
      complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-632.9));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.sinh();
      complex5.acos();
      complex2.abs();
      Complex complex6 = complex5.multiply(complex3);
      complex1.abs();
      Complex complex7 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex4.atan();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex2.sinh();
      complex8.abs();
      complex9.sqrt1z();
      complex2.sqrt1z();
      complex8.multiply(complex7);
      complex6.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-632.9), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      complex1.I.pow(complex0);
      complex1.tan();
      Complex complex2 = complex0.atan();
      complex0.getField();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.createComplex(3249.0597835, (-1507.8817108049));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.sqrt();
      complex4.add(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.acos();
      complex0.abs();
      Complex complex7 = complex5.multiply(complex0);
      complex6.abs();
      Complex complex8 = new Complex(2.0, Double.NaN);
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.sinh();
      complex1.sinh();
      complex3.abs();
      complex9.sqrt1z();
      complex7.sqrt1z();
      complex10.multiply(complex5);
      complex3.tanh();
      Complex complex11 = Complex.ONE;
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-35.412419411411), (-3872.908137910615));
      Complex complex1 = new Complex((-20.0), (-3872.908137910615));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.createComplex((-20.0), (-1.4677186853480857));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.add(complex3);
      Complex complex8 = Complex.valueOf((-35.412419411411), (-1.607434968107079E-8));
      Complex complex9 = Complex.I;
      Complex complex10 = complex0.sqrt();
      complex4.acos();
      Complex complex11 = Complex.valueOf((-1.4677186853480857), 0.481292188167572);
      complex11.abs();
      complex10.multiply(complex8);
      complex0.abs();
      Complex complex12 = new Complex(1.5446165575025546, (-3872.908137910615));
      Complex complex13 = new Complex((-1059.0));
      Complex.valueOf((-1.607434968107079E-8), (-20.0));
      complex13.atan();
      Complex complex14 = Complex.valueOf(2.0, 2.0);
      Complex complex15 = complex14.sinh();
      complex5.sinh();
      complex15.abs();
      complex2.sqrt1z();
      complex12.sqrt1z();
      Complex complex16 = Complex.ZERO;
      complex7.multiply(complex15);
      complex1.tanh();
      Complex complex17 = Complex.I;
      complex17.atan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 546.45718);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.I;
      complex2.tan();
      complex1.readResolve();
      Complex complex3 = complex1.ONE.asin();
      complex3.I.exp();
      Complex complex4 = Complex.INF;
      Object object0 = new Object();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-592.23540411));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(988);
      Complex complex4 = Complex.INF;
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 22.622848736643686);
      complex1.exp();
      complex0.readResolve();
      complex1.equals(complex0);
      complex0.cosh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2.0);
      complex0.ONE.sin();
      complex1.divide(complex1);
      complex1.subtract(complex0);
      Complex.valueOf((-2028.907627461339), (-2028.907627461339));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(869);
      complex1.I.getField();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-592.23540411));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex2.sinh();
      complex1.sqrt();
      Complex.valueOf(1.3900951133580623E-5);
      Complex complex5 = complex3.acos();
      complex1.abs();
      Complex complex6 = complex0.multiply(complex5);
      Complex.valueOf((-1.8382923511801317E183));
      complex2.abs();
      Complex complex7 = new Complex((-592.23540411), (-2226.04));
      complex4.atan();
      complex0.sinh();
      Complex complex8 = complex0.sinh();
      complex7.abs();
      complex8.sqrt1z();
      Complex complex9 = Complex.ZERO;
      complex5.multiply(complex6);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-632.9), 7.97053127828682E-9);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.createComplex(7.97053127828682E-9, (-1142.96840064));
      Complex complex4 = complex2.atan();
      complex0.getField();
      complex0.cos();
      Complex complex5 = complex3.cosh();
      complex5.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.divide(34.1288986543);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(303.9, 3174.786700207);
      Complex complex1 = complex0.INF.exp();
      complex0.toString();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex2.divide(complex0);
      complex2.ONE.readResolve();
      complex2.ONE.abs();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex3.ZERO.conjugate();
      complex8.NaN.getField();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex5.sin();
      complex10.I.multiply(3174.786700207);
      Complex complex11 = complex9.sqrt1z();
      Complex complex12 = complex11.INF.cos();
      complex9.NaN.exp();
      complex6.INF.sinh();
      Complex complex13 = complex1.pow(complex5);
      complex13.add(complex12);
      complex5.NaN.getArgument();
      complex5.INF.add(complex4);
      complex13.tan();
      Complex complex14 = complex6.tan();
      complex14.subtract(complex3);
      Complex complex15 = complex7.cos();
      Complex complex16 = complex15.I.add(complex1);
      Complex complex17 = complex16.ZERO.tan();
      Complex complex18 = complex17.I.exp();
      complex18.INF.asin();
      complex17.I.sinh();
      complex17.ONE.readResolve();
      complex15.atan();
      complex9.add(303.9);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      Complex complex1 = Complex.valueOf((-35.629), 2.067959785461426);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.createComplex(2.067959785461426, 2441.618);
      Complex complex5 = Complex.I;
      complex5.atan();
      complex3.getField();
      Complex complex6 = complex4.cos();
      complex6.cosh();
      Complex complex7 = complex4.sinh();
      Complex complex8 = Complex.ONE;
      complex8.hashCode();
      Complex complex9 = Complex.ONE;
      complex9.pow(complex7);
      complex9.isNaN();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(546.45718, (-632.9));
      Complex complex1 = Complex.valueOf(1.526100002923062E263, 1.6034943816472028E-5);
      Complex complex2 = complex1.acos();
      complex0.readResolve();
      complex1.cosh();
      Complex complex3 = Complex.I;
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      complex0.INF.createComplex(0.0, (-35.629));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.equals(complex2);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.subtract(complex2);
      complex5.pow(complex0);
      Object object0 = complex0.readResolve();
      ((Complex) object0).ONE.pow(complex5);
      Complex complex6 = Complex.NaN;
      complex5.readResolve();
      Complex complex7 = complex5.negate();
      complex1.sinh();
      complex7.sinh();
      complex1.sqrt1z();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf(5263.0);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.cosh();
      Complex complex1 = new Complex(0.0);
      complex0.I.cosh();
      Complex complex2 = Complex.INF;
      complex2.sqrt1z();
      Complex complex3 = complex2.add((double) 908);
      Complex complex4 = Complex.ONE;
      complex4.divide(0.0);
      complex0.add(Double.NaN);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sinh();
      Complex complex1 = Complex.I;
      complex1.reciprocal();
      Complex complex2 = complex0.acos();
      complex2.isInfinite();
      Complex complex3 = Complex.valueOf((double) 5263, (-302.9));
      Complex complex4 = complex3.add(11.40898155);
      complex3.sqrt();
      Complex complex5 = Complex.valueOf(11.40898155);
      complex5.add(complex2);
      Complex complex6 = complex3.sinh();
      complex2.sqrt();
      complex6.acos();
      complex2.abs();
      Complex complex7 = complex5.multiply(complex4);
      complex2.abs();
      Complex complex8 = new Complex(11.40898155, (-498.4508912));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.atan();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex7.sinh();
      complex11.abs();
      complex8.sqrt1z();
      Complex complex13 = Complex.ZERO;
      complex12.multiply(complex7);
      Complex complex14 = Complex.valueOf(Double.NaN, Double.NaN);
      complex14.tanh();
      complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4557.341995034423);
      Complex complex1 = complex0.subtract((-2379.18555538));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.conjugate();
      complex1.atan();
      complex0.getField();
      complex3.cos();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.sinh();
      complex5.hashCode();
      complex2.isNaN();
      complex4.hashCode();
      complex5.pow((-3235.95214537));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(2363.102107444388);
      complex1.toString();
      Complex.valueOf((-1231.85));
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.ZERO;
      complex4.acos();
      complex0.nthRoot(2420);
      complex2.getField();
      complex0.abs();
      complex3.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 2363.102107444388);
      complex4.multiply(complex5);
      Complex complex6 = new Complex((-1231.85), (-0.21118796880951088));
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.valueOf((-6187.4579427));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.INF;
      complex4.divide(complex0);
      complex4.equals(complex3);
      Complex complex5 = complex2.cosh();
      complex4.subtract(complex5);
      Complex complex6 = complex4.pow(complex2);
      Complex complex7 = Complex.ONE;
      complex7.readResolve();
      Complex complex8 = complex4.pow(complex1);
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.ZERO;
      complex10.readResolve();
      complex6.negate();
      complex8.sinh();
      complex5.sinh();
      complex3.negate();
      Complex complex11 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex11.multiply(complex0);
      complex4.nthRoot(2402);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      Complex complex1 = complex0.INF.createComplex(0.0, (-35.629));
      Complex complex2 = Complex.valueOf((-35.629));
      complex1.toString();
      complex2.NaN.toString();
      Complex complex3 = Complex.valueOf((-35.629));
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.I.add(complex2);
      complex0.nthRoot(2420);
      complex4.abs();
      complex1.abs();
      complex2.atan();
      Complex complex7 = complex3.sinh();
      complex1.multiply((double) 2420);
      complex6.abs();
      complex7.sqrt1z();
      complex3.multiply(complex4);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-592.23540411));
      Complex complex1 = complex0.subtract((-592.23540411));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.ZERO.conjugate();
      complex1.INF.atan();
      complex3.I.getField();
      Complex complex4 = complex0.cos();
      Complex.valueOf((-592.23540411));
      Complex complex5 = complex4.add(0.42990362644195557);
      complex2.isInfinite();
      complex4.isInfinite();
      Complex complex6 = complex4.log();
      complex5.cos();
      complex6.negate();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-2363.102107444388), 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.add(complex2);
      complex0.nthRoot(820);
      complex2.abs();
      complex3.abs();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(3059.312703192, 1.5707963267948966);
      Complex complex8 = complex7.multiply(Double.NaN);
      complex6.getArgument();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.tan();
      complex4.nthRoot(820);
      complex8.hashCode();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.NaN.readResolve();
      Complex complex2 = Complex.INF;
      complex2.I.sinh();
      complex1.ZERO.reciprocal();
      Complex complex3 = complex0.acos();
      complex0.isInfinite();
      Complex complex4 = Complex.valueOf((-302.9), (-302.9));
      Complex complex5 = complex3.add(11.40898155);
      complex0.ZERO.sqrt();
      Complex complex6 = complex3.add(complex0);
      complex6.ZERO.sinh();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex4.acos();
      complex7.abs();
      Complex complex9 = complex4.multiply(complex2);
      complex1.abs();
      complex9.atan();
      complex2.sinh();
      Complex complex10 = complex7.sinh();
      Complex complex11 = Complex.valueOf(2.8510658194313976E-6);
      complex11.abs();
      complex8.sqrt1z();
      complex8.multiply(complex10);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.231700599193573);
      double double0 = 35.629;
      Complex complex1 = Complex.valueOf(35.629, 0.231700599193573);
      complex0.multiply(complex1);
      complex1.I.atan();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex2.ZERO.pow(0.231700599193573);
      Complex complex4 = complex3.log();
      complex4.ZERO.getArgument();
      complex4.I.negate();
      complex1.ZERO.hashCode();
      // Undeclared exception!
      complex0.nthRoot(1312032134);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1.0520927906036377);
      Complex complex1 = complex0.cosh();
      complex1.readResolve();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sinh();
      complex3.INF.acos();
      complex3.reciprocal();
      Complex complex4 = complex1.acos();
      complex0.isInfinite();
      Complex complex5 = Complex.valueOf((-2944.705), 0.028067024053439617);
      complex4.add(5.749565906124772E-9);
      Complex complex6 = Complex.I;
      complex6.sqrt();
      Complex complex7 = complex1.add(complex4);
      complex1.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.sqrt();
      complex9.acos();
      complex7.abs();
      complex8.multiply(complex9);
      complex7.abs();
      Complex complex10 = new Complex(0.028067024053439617, (-1.3810978455418157));
      complex10.atan();
      complex10.sinh();
      complex5.sinh();
      complex8.abs();
      complex8.sqrt1z();
//      try { 
        complex5.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1430.4, 1430.4);
      complex0.atan();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.valueOf(1318.507671);
      complex0.toString();
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.valueOf((-9.505208998169));
      complex0.equals(complex5);
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = complex0.pow(complex7);
      complex8.readResolve();
      Complex complex9 = new Complex(1318.507671);
      complex9.pow(complex4);
      Complex complex10 = Complex.NaN;
      complex9.readResolve();
      Object object0 = complex6.readResolve();
      complex6.equals(object0);
      complex9.negate();
      complex10.sinh();
      complex2.sinh();
      Complex complex11 = Complex.NaN;
      complex11.negate();
      Complex complex12 = Complex.NaN;
      complex10.multiply(complex12);
      Complex complex13 = Complex.NaN;
      complex13.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      Complex complex1 = complex0.INF.createComplex(0.0, (-35.629));
      Complex complex2 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.divide(complex1);
      complex1.isNaN();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.subtract(complex3);
      complex6.pow(complex0);
      Object object0 = complex0.readResolve();
      ((Complex) object0).ONE.pow(complex6);
      Complex complex7 = Complex.NaN;
      Complex complex8 = (Complex)complex6.readResolve();
      complex7.equals(complex8);
      Complex complex9 = complex6.negate();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex4.sinh();
      complex8.negate();
      complex1.multiply(complex11);
      complex4.nthRoot(1898);
      complex7.add(complex10);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.acos();
      complex4.isInfinite();
      Complex complex6 = Complex.valueOf((-302.9), (-1940.153933649284));
      complex1.add(0.2531573176383972);
      complex3.sqrt();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-20.0), 0.2531573176383972);
      complex7.add(complex8);
      complex1.sinh();
      complex1.acos();
      complex5.getField();
      Complex complex9 = Complex.INF;
      complex0.abs();
      Complex complex10 = Complex.INF;
      complex10.multiply(6197);
      Complex complex11 = Complex.ONE;
      complex6.reciprocal();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1430.4, 1430.4);
      Complex complex1 = complex0.atan();
      complex1.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.I.divide((-2616.0));
      complex1.NaN.divide(complex3);
      Complex complex5 = complex0.ONE.sin();
      Complex complex6 = complex5.ONE.tan();
      complex1.ONE.cos();
      Complex complex7 = complex5.NaN.exp();
      complex6.divide((-3251.77866348546));
      complex6.getArgument();
      Complex complex8 = complex0.subtract(complex2);
      complex8.negate();
      complex0.getImaginary();
      complex4.isNaN();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = Complex.valueOf((-3251.77866348546), (-3251.77866348546));
      complex10.reciprocal();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-2363.102107444388), 0.0);
      Complex complex1 = complex0.multiply(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
      complex1.nthRoot(2421);
      complex1.multiply(2421);
      complex0.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex.valueOf((-592.23540411));
      Complex complex0 = new Complex((-592.23540411));
      complex0.sin();
      Complex complex1 = new Complex((-3.206182925646474E-8), (-592.23540411));
      Complex complex2 = complex1.exp();
      complex2.INF.abs();
      Complex complex3 = complex1.multiply(2380);
      complex3.conjugate();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-2363.102107444388), 0.0);
      Complex complex1 = complex0.multiply(complex0);
      complex0.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.exp();
      complex4.readResolve();
      Complex complex5 = Complex.ONE;
      complex5.multiply(2742);
      complex3.reciprocal();
      Complex complex6 = complex0.add((-2363.102107444388));
      complex6.INF.tanh();
      complex5.getField();
      complex5.divide(0.0);
      Complex complex7 = complex5.conjugate();
      complex7.divide(complex4);
      complex0.tan();
      Complex complex8 = complex1.sqrt1z();
      complex8.I.sqrt1z();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.multiply(68);
      complex2.NaN.sqrt1z();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      complex4.ONE.add(complex2);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.valueOf((-3265.1459943));
      Complex complex7 = complex6.ZERO.sinh();
      complex5.negate();
      complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-2363.102107444388), 0.0);
      Complex complex1 = complex0.exp();
      complex1.INF.tan();
      Complex complex2 = complex0.multiply(complex0);
      complex2.nthRoot(2421);
      complex2.multiply(2421);
      complex1.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(1430.4, 1430.4);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.sinh();
      complex3.I.divide((-2616.0));
      Complex complex5 = complex1.NaN.divide(complex4);
      Complex complex6 = complex0.ONE.sin();
      complex6.ONE.tan();
      complex1.ONE.cos();
      Complex complex7 = Complex.INF;
      complex4.INF.readResolve();
      complex4.ZERO.multiply(2742);
      complex2.getField();
      complex5.abs();
      complex2.multiply((-1274));
      Complex complex8 = Complex.ONE;
      complex6.reciprocal();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-592.23540411));
      Complex complex1 = complex0.subtract((-592.23540411));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = new Complex((-2.5466223330961086E154), (-592.23540411));
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex1.acos();
      complex4.abs();
      complex0.multiply(complex9);
      Complex complex10 = Complex.NaN;
      complex10.abs();
      Complex complex11 = complex7.atan();
      complex11.sinh();
      complex6.multiply(2.0);
      complex2.getArgument();
      complex8.tan();
      complex8.nthRoot(1871);
      complex6.hashCode();
      complex3.sqrt1z();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf((-1009.5529362079387), 2.192749500274658);
      Complex complex3 = complex2.ONE.multiply(2.192749500274658);
      Complex complex4 = complex1.add(560.7);
      Complex complex5 = complex2.NaN.exp();
      complex5.ONE.cosh();
      complex1.toString();
      Complex complex6 = complex3.multiply(2.192749500274658);
      Complex complex7 = complex6.subtract(complex2);
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex6.asin();
      Complex complex10 = Complex.ZERO;
      complex4.ZERO.asin();
      complex10.I.getField();
      Complex complex11 = complex9.NaN.subtract(complex10);
      Complex complex12 = complex8.pow(6.283185307179586);
      Complex.valueOf(2.192749500274658, 560.7);
      complex6.ONE.sinh();
      complex8.subtract(1454.2);
      Complex complex13 = complex4.divide(complex12);
      Complex complex14 = complex3.multiply(6.283185307179586);
      complex12.ONE.log();
      complex9.multiply(2253);
      complex11.multiply(1454.2);
      complex12.add(2.192749500274658);
      complex14.sin();
      complex13.cos();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-3174.786700207));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-3174.786700207));
      Complex complex3 = complex2.NaN.subtract((-3174.786700207));
      complex2.NaN.getArgument();
      complex2.INF.multiply(complex0);
      Complex complex4 = complex0.I.divide((-3174.786700207));
      Complex complex5 = complex1.I.conjugate();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex4.multiply(complex6);
      complex8.negate();
      Complex complex10 = complex5.divide(0.9060367009005804);
      complex3.getField();
      Complex complex11 = Complex.INF;
      complex11.divide(complex5);
      Object object0 = new Object();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex9.equals(complex12);
      Complex complex13 = complex5.cosh();
      Complex complex14 = complex3.subtract(complex1);
      complex2.pow(complex12);
      complex4.readResolve();
      Complex complex15 = Complex.NaN;
      complex8.equals(complex14);
      Complex complex16 = complex13.negate();
      complex10.sinh();
      complex12.sinh();
      Complex complex17 = complex2.reciprocal();
      complex10.cosh();
      complex16.getReal();
      complex17.atan();
      complex10.getField();
      Complex complex18 = new Complex(-0.0);
      complex18.cos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ONE.pow((-2342.2524891189696));
      complex1.getReal();
      complex3.abs();
      Complex complex4 = complex0.I.subtract((-2342.2524891189696));
      complex4.INF.divide(0.8414709848078965);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex3.pow((-2342.2524891189696));
      complex6.ZERO.multiply((-895));
      Complex complex7 = Complex.valueOf((-2342.2524891189696), 1.0);
      complex3.equals(complex7);
      complex2.sqrt();
      Complex complex8 = complex0.asin();
      complex8.ZERO.getArgument();
      Complex complex9 = complex7.cosh();
      Complex.valueOf(1.0);
      complex3.getImaginary();
      complex9.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-3174.786700207));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-3174.786700207));
      Complex complex3 = complex2.NaN.subtract((-3174.786700207));
      complex2.NaN.getArgument();
      Complex complex4 = complex2.INF.multiply(complex0);
      Complex complex5 = complex0.I.divide((-3174.786700207));
      Complex complex6 = complex1.I.conjugate();
      Complex complex7 = complex4.ONE.multiply(749);
      complex7.ONE.getField();
      complex2.NaN.getArgument();
      complex0.abs();
      complex1.INF.readResolve();
      complex4.abs();
      Complex.valueOf((-3174.786700207), (-3174.786700207));
      Complex complex8 = complex6.INF.negate();
      Complex complex9 = complex6.pow((-2342.2524891189696));
      complex8.multiply(749);
      Complex complex10 = Complex.valueOf(786.3194099216286);
      complex3.equals(complex10);
      complex7.sqrt();
      complex4.asin();
      complex5.getArgument();
      complex9.cosh();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ONE.pow((-2342.2524891189696));
      complex1.getReal();
      complex3.abs();
      Complex complex4 = complex0.I.subtract((-2342.2524891189696));
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex2.divide((-2342.2524891189696));
      Complex complex7 = complex3.cosh();
      complex2.hashCode();
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex8.atan();
      complex10.isNaN();
      complex4.createComplex(1.0, 20.0);
      complex10.subtract(complex0);
      complex9.negate();
      complex6.hashCode();
      complex10.isNaN();
      Complex complex11 = new Complex((-2342.2524891189696), (-2385.6836872));
      complex11.getImaginary();
      complex4.divide(complex5);
      complex2.atan();
      complex11.sqrt();
      complex2.sin();
      complex11.equals(complex7);
      complex10.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.log();
      complex3.I.cos();
      Complex complex4 = Complex.valueOf(1.9426261544163577E-8, 1.9426261544163577E-8);
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex5.ZERO.subtract(complex2);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex7.I.negate();
      complex8.divide(1.9426261544163577E-8);
      complex6.INF.getField();
      complex0.ZERO.divide(complex5);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex9 = complex8.INF.subtract(complex0);
      complex9.ZERO.pow(complex6);
      complex1.ZERO.readResolve();
      Complex complex10 = Complex.NaN;
      complex1.equals(complex10);
      complex0.negate();
      Complex complex11 = complex6.sinh();
      complex11.ZERO.sinh();
      complex2.reciprocal();
      Complex complex12 = Complex.INF;
      complex12.cosh();
      Complex.valueOf(1.9426261544163577E-8);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-35.629), (-35.629));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = Complex.I;
      complex6.getArgument();
      Complex complex7 = Complex.ZERO;
      complex7.getReal();
      Complex complex8 = complex7.divide((-35.629));
      complex4.getArgument();
      Complex complex9 = complex5.subtract(complex2);
      complex9.log();
      complex7.negate();
      complex8.getImaginary();
      complex6.isNaN();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(1.279910496643312E214);
      Complex complex1 = complex0.createComplex(0.0, 375.69976105304283);
      Complex complex2 = new Complex(1.5707963267948966, 0.0);
      complex0.toString();
      Complex.valueOf(1.5707963267948966);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf((-7443917.16991764));
      complex5.add(complex3);
      complex5.nthRoot(2420);
      complex4.getField();
      Complex complex6 = Complex.INF;
      complex6.abs();
      complex1.sqrt1z();
      complex4.multiply(complex0);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.multiply(2.0);
      complex0.I.toString();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.I.pow(2.0);
      complex3.add(complex1);
      complex1.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      Complex complex1 = complex0.INF.createComplex(0.0, (-35.629));
      Complex complex2 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.divide(complex1);
      complex4.equals(complex3);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.subtract(complex3);
      complex6.pow(complex0);
      complex0.readResolve();
      Complex complex7 = Complex.NaN;
      Object object0 = complex6.readResolve();
      complex7.equals(object0);
      Complex complex8 = complex6.negate();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.ZERO.negate();
      Complex complex12 = complex1.reciprocal();
      complex9.cosh();
      complex12.getReal();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex13.atan();
      complex14.getField();
      complex7.cos();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.log();
      complex3.I.cos();
      Complex complex4 = Complex.valueOf(1.9426261544163577E-8, 1.9426261544163577E-8);
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex5.ZERO.subtract(complex2);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex8.divide(1.9426261544163577E-8);
      complex6.INF.getField();
      Complex complex10 = complex0.ZERO.divide(complex5);
      Object object0 = new Object();
      complex4.acos();
      complex7.nthRoot(2420);
      complex9.getField();
      complex10.abs();
      complex2.sqrt1z();
      Complex complex11 = new Complex((-495.92732983190706));
      Complex complex12 = Complex.I;
      complex11.multiply(complex12);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-3174.786700207));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-3174.786700207));
      complex2.NaN.subtract((-3174.786700207));
      complex2.NaN.getArgument();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex0.I.divide((-3174.786700207));
      Complex complex5 = complex1.I.conjugate();
      Complex complex6 = complex3.ONE.multiply(749);
      complex6.ONE.getField();
      complex2.NaN.getArgument();
      complex0.abs();
      complex1.INF.readResolve();
      complex3.abs();
      Complex complex7 = Complex.valueOf((-3174.786700207), (-3174.786700207));
      Complex complex8 = complex5.INF.negate();
      complex3.NaN.divide(9.597302512507479E247);
      complex7.cosh();
      complex7.I.hashCode();
      Complex complex9 = complex0.pow(complex7);
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex4.atan();
      complex6.multiply((-2045223212));
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = complex12.add((-3174.786700207));
      complex13.getField();
      Complex complex14 = new Complex((-2045223212), (-1.2631909085915044E114));
      complex14.divide(Double.NaN);
      Complex complex15 = complex11.conjugate();
      complex9.divide(complex10);
      complex15.tan();
      complex4.sqrt1z();
      Complex complex16 = Complex.ZERO;
      Complex.valueOf(9.597302512507479E247);
      complex16.getReal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(1430.4, 1430.4);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.sinh();
      complex3.I.divide((-2616.0));
      Complex complex5 = complex1.NaN.divide(complex4);
      Complex complex6 = complex0.ONE.sin();
      complex6.ONE.tan();
      Complex complex7 = complex1.ONE.cos();
      Complex complex8 = (Complex)complex4.INF.readResolve();
      Complex complex9 = complex4.ZERO.multiply(2742);
      complex9.reciprocal();
      complex5.add(0.6096806526184082);
      complex8.getField();
      complex4.divide(0.7080734182735711);
      Complex complex10 = complex2.conjugate();
      complex7.divide(complex9);
      complex10.tan();
      complex1.sqrt1z();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(1430.4, 1430.4);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.I.divide((-2616.0));
      complex1.NaN.divide(complex3);
      Complex complex5 = complex0.ONE.sin();
      complex5.ONE.tan();
      complex1.ONE.cos();
      complex5.NaN.exp();
      complex3.INF.readResolve();
      complex3.ZERO.multiply(2742);
      Complex complex6 = Complex.I;
      complex6.reciprocal();
      Complex complex7 = Complex.ONE;
      complex7.add(7.753690709912764E-96);
      complex3.getField();
      complex6.divide((-1430.4));
      complex4.conjugate();
      Complex complex8 = new Complex(273.21389072);
      complex2.divide(complex8);
      complex3.tan();
      Complex complex9 = new Complex(2742, 273.21389072);
      complex9.sqrt1z();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.log();
      complex3.I.cos();
      Complex.valueOf(1.9426261544163577E-8, 1.9426261544163577E-8);
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex4.ZERO.subtract(complex2);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex6.I.negate();
      complex7.divide(1.9426261544163577E-8);
      complex5.INF.getField();
      Complex complex8 = complex0.ZERO.divide(complex4);
      complex8.INF.getField();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.INF.subtract(complex0);
      complex10.ZERO.pow(complex5);
      complex9.ZERO.readResolve();
      Complex complex11 = Complex.NaN;
      complex1.equals(complex11);
      complex0.negate();
      Complex complex12 = complex5.sinh();
      complex12.ZERO.sinh();
      complex2.reciprocal();
      Complex complex13 = complex4.cosh();
      complex2.getReal();
      complex7.atan();
      complex13.getField();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(1430.4, 1430.4);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex3.I.divide((-2616.0));
      complex1.NaN.divide(complex4);
      Complex complex6 = complex0.ONE.sin();
      Complex complex7 = complex6.ONE.tan();
      complex1.ONE.cos();
      complex6.NaN.exp();
      complex4.INF.readResolve();
      complex4.ZERO.multiply(2742);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.add((double) 2742);
      complex3.getField();
      complex9.divide((double) 2742);
      Complex complex10 = complex2.conjugate();
      complex2.divide(complex10);
      complex9.tan();
      complex10.sin();
      Object object0 = complex7.readResolve();
      complex5.equals(object0);
      Complex complex11 = Complex.INF;
      complex2.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.reciprocal();
      complex2.acos();
      complex4.isInfinite();
      Complex complex5 = Complex.valueOf((-302.9), (-1940.153933649284));
      Complex complex6 = complex1.add(0.2531573176383972);
      complex3.sqrt();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-20.0), 0.2531573176383972);
      Complex complex9 = complex7.add(complex8);
      Complex complex10 = complex1.sinh();
      complex1.acos();
      complex8.abs();
      Complex complex11 = complex6.multiply(complex2);
      complex2.abs();
      complex1.atan();
      complex10.sinh();
      complex6.multiply(1.5430806348152437);
      complex3.getArgument();
      complex9.tan();
      complex2.nthRoot(2298);
      complex11.hashCode();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(0.0, (-35.629));
      Complex complex2 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex2.divide(complex1);
      complex0.ONE.acos();
      Complex complex5 = Complex.ONE;
      complex0.nthRoot(2420);
      complex0.getField();
      complex4.multiply(1444.416557548545);
      complex1.getArgument();
      complex3.tan();
//      try { 
        complex2.nthRoot((-2045220819));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,045,220,819
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      Complex complex1 = complex0.INF.createComplex(0.0, (-35.629));
      Complex complex2 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex.valueOf(0.0);
      complex2.divide(complex1);
      Complex complex3 = complex0.ONE.acos();
      complex0.I.add(complex2);
      complex0.nthRoot(2420);
      complex3.getField();
      Complex complex4 = complex3.divide((double) 2420);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex1.divide(complex6);
      complex4.tan();
      complex7.sqrt1z();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      complex1.sqrt1z();
      complex0.subtract((-876.96563411));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-2363.102107444388), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(complex0);
      complex2.nthRoot(2421);
      complex2.multiply(2421);
      complex1.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2.382825271750576E144), (-2.382825271750576E144));
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.atan();
      complex3.I.getArgument();
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.exp();
      complex0.getReal();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex0.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.createComplex((-2200.5733322), (-1878.6));
      complex6.INF.cos();
      complex1.subtract(complex3);
      Complex complex8 = complex4.createComplex((-2200.5733322), (-360.0));
      complex1.createComplex(0.0, 0.0);
      complex1.isInfinite();
      complex8.divide(complex6);
      complex4.exp();
      complex2.negate();
      complex5.createComplex(1087.0241946507622, (-1193.4964152006));
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-2363.0), 0.0);
      Complex complex1 = complex0.subtract(0.0);
      complex1.exp();
      complex1.multiply(complex0);
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.INF.cosh();
      complex3.NaN.tan();
      Complex complex4 = Complex.ZERO;
      complex0.ONE.acos();
      complex0.multiply(complex4);
      Complex complex5 = complex0.ONE.conjugate();
      complex1.I.cos();
      complex5.NaN.multiply(1.178204606523101E-7);
      complex1.I.multiply((-1031.0));
      complex1.hashCode();
      complex2.INF.cosh();
//      try { 
        complex1.nthRoot((-640));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -640
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.log();
      complex3.I.cos();
      Complex complex4 = Complex.valueOf(1.9426261544163577E-8, 1.9426261544163577E-8);
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex5.ZERO.subtract(complex2);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex7.I.negate();
      complex8.divide(1.9426261544163577E-8);
      complex6.INF.getField();
      complex0.ZERO.divide(complex5);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.INF.subtract(complex0);
      complex10.ZERO.pow(complex6);
      complex9.ZERO.readResolve();
      Complex complex11 = Complex.NaN;
      complex1.equals(complex11);
      complex0.negate();
      Complex complex12 = complex6.sinh();
      complex12.ZERO.sinh();
      complex2.reciprocal();
      complex5.cosh();
      complex2.getReal();
      complex6.atan();
      complex2.getField();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-35.629));
      Complex complex1 = complex0.INF.createComplex(0.0, (-35.629));
      Complex complex2 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex.valueOf(0.0);
      complex2.divide(complex1);
      complex0.ONE.acos();
      Complex complex3 = complex0.I.add(complex2);
      complex0.nthRoot(2420);
      complex0.getField();
      complex3.I.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.multiply(complex3);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.negate();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex1.I.subtract(complex3);
      complex4.NaN.subtract(complex1);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex1.INF.conjugate();
      Complex complex7 = complex0.NaN.divide(complex1);
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex8.I.sqrt1z();
      complex9.I.asin();
      Complex complex10 = complex1.multiply(complex0);
      complex10.isInfinite();
      complex0.getField();
      complex4.NaN.getArgument();
      complex3.getReal();
      complex10.multiply(0.0);
      Complex complex11 = complex5.multiply(1242.1);
      complex11.ONE.pow(complex6);
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex10.divide(complex13);
      complex14.ZERO.pow(complex3);
      complex12.createComplex((-6.447877375049486E-9), Double.NaN);
      complex1.atan();
      complex10.add(complex3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1720.435));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.multiply((-1720.435));
      complex2.ZERO.asin();
      double double0 = 0.0;
      Complex complex3 = complex0.ZERO.divide(0.0);
      complex3.INF.sqrt();
      complex3.negate();
      complex3.ZERO.pow(complex2);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.INF.conjugate();
      complex1.getField();
      complex2.getArgument();
      Complex complex4 = complex2.add(0.0);
      complex4.INF.abs();
      complex0.INF.pow(complex3);
      Complex complex5 = complex1.createComplex((-1070.956894195423), 1795.91927);
      complex5.cosh();
      complex2.multiply(298);
      Complex complex6 = complex2.acos();
      complex2.tan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex3.add((double) 298);
      complex9.subtract((-1812.35596544));
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ONE.pow((-2342.2524891189696));
      complex1.getReal();
      complex3.abs();
      complex0.I.subtract((-2342.2524891189696));
      complex3.tanh();
      Complex complex4 = complex3.pow((-2342.2524891189696));
      complex4.ZERO.multiply((-895));
      Complex complex5 = Complex.valueOf((-2342.2524891189696), 1.0);
      complex3.equals(complex5);
      complex2.sqrt();
      Complex complex6 = complex0.asin();
      complex6.ZERO.getArgument();
      complex5.cosh();
      Complex.valueOf(1.0);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      complex1.log();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.I.multiply(complex0);
      complex0.multiply((-1105.0223758412085));
      Complex complex4 = Complex.valueOf((-1105.0223758412085));
      complex0.NaN.divide(complex4);
      complex0.NaN.sqrt1z();
      complex3.getReal();
      Complex.valueOf(0.0, 736.5289359788512);
      Complex.valueOf(736.5289359788512);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getArgument();
      complex0.ONE.exp();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex1.INF.hashCode();
      Complex complex3 = complex2.NaN.subtract(1.5707963267948966);
      Complex complex4 = complex3.ONE.pow(1.5707963267948966);
      Complex complex5 = complex4.ONE.pow(1.5707963267948966);
      Complex complex6 = complex1.reciprocal();
      complex6.isNaN();
      complex3.cos();
      complex1.cos();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1399.8012);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.NaN.add(1399.8012);
      Complex complex4 = complex3.ONE.conjugate();
      complex3.ZERO.conjugate();
      complex3.NaN.readResolve();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.I.exp();
      complex6.ZERO.toString();
      Complex complex7 = complex6.subtract(2649.28324040325);
      Complex complex8 = complex7.pow(complex6);
      Complex complex9 = complex1.subtract(complex2);
      Complex complex10 = complex0.add(1399.8012);
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex9.exp();
      complex12.NaN.log();
      complex3.NaN.asin();
      complex10.sqrt();
      complex10.getReal();
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex13.ONE.add(1399.8012);
      complex4.getField();
      complex11.sqrt();
      complex8.isInfinite();
      complex5.sqrt1z();
      complex2.divide(complex10);
      complex14.readResolve();
      complex13.sinh();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(0.0);
      complex2.ZERO.pow((-560.7000630825861));
      complex0.conjugate();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getField();
      complex0.divide(Double.NaN);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex(Double.NaN);
      complex1.pow(complex3);
      complex1.getReal();
      complex2.getField();
      Complex complex4 = Complex.valueOf(3140.97282804186, Double.NaN);
      complex4.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(1.1210410594940186, 2212.256001083);
      complex0.INF.getArgument();
      Complex complex1 = complex0.exp();
      complex1.cos();
      Complex complex2 = complex0.acos();
      complex2.INF.asin();
      Complex complex3 = complex0.log();
      complex3.INF.acos();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.sqrt();
      complex5.I.createComplex(1.1210410594940186, 0.0);
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex1.INF.add(0.9315965175628662);
      complex5.ZERO.nthRoot(1);
      complex5.NaN.sinh();
      Complex complex6 = complex0.cos();
      complex6.I.sqrt1z();
      complex0.ONE.exp();
      complex4.pow((-7.796557225750673E-258));
      complex1.sin();
      Complex complex7 = Complex.valueOf(0.0);
      complex2.readResolve();
      complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-3174.786700207));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-3174.786700207));
      complex2.NaN.subtract((-3174.786700207));
      complex2.NaN.getArgument();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex0.I.divide((-3174.786700207));
      Complex complex5 = complex1.I.conjugate();
      Complex complex6 = complex3.ONE.multiply(749);
      complex6.ONE.getField();
      complex2.NaN.getArgument();
      complex0.abs();
      complex1.INF.readResolve();
      complex3.abs();
      Complex complex7 = Complex.valueOf((-3174.786700207), (-3174.786700207));
      Complex complex8 = complex5.INF.negate();
      complex3.NaN.divide(9.597302512507479E247);
      Complex complex9 = complex7.cosh();
      complex7.I.hashCode();
      Complex complex10 = complex0.pow(complex7);
      complex10.I.conjugate();
      complex4.atan();
      complex10.isNaN();
      Complex complex11 = complex5.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex11.ONE.subtract(complex4);
      complex7.ZERO.negate();
      complex11.I.hashCode();
      complex10.isNaN();
      complex0.getImaginary();
      complex10.divide(complex2);
      Complex complex12 = complex7.atan();
      complex9.sqrt();
      complex12.sin();
      complex8.equals(complex7);
//      try { 
        complex1.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.nthRoot(17);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      complex1.multiply(1);
      complex0.INF.multiply(1);
      Complex complex2 = complex0.INF.cosh();
      complex0.readResolve();
      Complex complex3 = complex0.multiply(0);
      complex3.ONE.pow((double) 0);
      complex0.subtract(0.0);
      complex0.getReal();
      complex2.subtract(complex0);
      complex2.getReal();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.reciprocal();
      complex5.NaN.hashCode();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex2.subtract(complex6);
      complex8.NaN.pow((-1249.6122957762577));
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.ONE.divide(1436.172);
      complex7.isInfinite();
      Complex complex10 = complex3.sqrt1z();
      complex10.ONE.tanh();
      complex3.multiply(2588);
      Complex.valueOf(Double.NaN, 0.0);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-592.23540411));
      Complex complex1 = complex0.subtract((-592.23540411));
      Complex complex2 = complex1.ZERO.cos();
      complex2.ZERO.conjugate();
      complex1.INF.atan();
      Complex complex3 = complex0.multiply(complex2);
      complex3.I.getField();
      Complex complex4 = complex0.cos();
      complex4.NaN.cosh();
      complex4.sinh();
      complex1.hashCode();
      complex1.isNaN();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 636.8049529;
      Complex complex1 = new Complex(636.8049529);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex3.NaN.hashCode();
      complex0.getReal();
      complex2.multiply(1);
      Complex complex4 = complex0.subtract(Double.NaN);
      complex4.I.getField();
      complex0.isInfinite();
      complex4.NaN.subtract(Double.POSITIVE_INFINITY);
      complex4.getImaginary();
//      try { 
        complex2.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-2258));
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.NaN.sin();
      complex3.ONE.conjugate();
      Complex complex4 = complex1.cosh();
      complex0.ZERO.readResolve();
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex5.NaN.pow(complex4);
      complex6.ZERO.pow(0.0);
      complex0.NaN.getField();
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      complex0.ONE.cosh();
      Complex complex4 = complex0.sinh();
      complex0.pow(complex4);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex4.log();
      complex1.cos();
      Complex complex7 = complex5.negate();
      complex7.I.log();
      Complex complex8 = complex3.multiply(1065);
      complex8.tanh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex((-1768.0), 0.0);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(1430.4, 1430.4);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex3.I.divide((-2616.0));
      complex1.NaN.divide(complex4);
      Complex complex6 = complex0.ONE.sin();
      complex6.ONE.tan();
      complex1.ONE.cos();
      complex6.NaN.exp();
      complex4.INF.readResolve();
      complex4.ZERO.multiply(2742);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.add((double) 2742);
      complex3.getField();
      complex8.divide((double) 2742);
      Complex complex9 = complex2.conjugate();
      complex2.divide(complex9);
      complex8.tan();
      complex5.sqrt1z();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      complex0.sinh();
      complex0.ZERO.cos();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 2.1525945093362843E-9;
      Complex complex1 = Complex.valueOf(2.1525945093362843E-9, 2.1525945093362843E-9);
      complex1.NaN.exp();
//      try { 
        complex0.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.multiply(2.0);
      complex0.I.toString();
      complex1.acos();
      complex1.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.tanh();
      complex0.ZERO.acos();
      Complex.valueOf(419.5607050447233, (-1284.97));
      complex0.getField();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex3.ONE.divide(complex1);
      complex1.ONE.multiply(1070);
      complex3.NaN.multiply(complex4);
      complex0.INF.sin();
      Complex.valueOf(419.5607050447233);
      Complex complex6 = complex2.I.subtract((-1284.97));
      Complex complex7 = complex0.multiply(1);
      complex7.getArgument();
      complex3.hashCode();
      Complex complex8 = complex5.divide(2.380738071335498E-8);
      complex8.NaN.cosh();
      complex7.getField();
      complex6.subtract(complex1);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.toString();
      Complex complex1 = complex0.add((-511.64046792471));
      Complex complex2 = complex1.ONE.asin();
      complex0.hashCode();
      Complex complex3 = complex2.reciprocal();
      complex3.nthRoot(1);
      complex1.multiply((-511.64046792471));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 0;
      Complex complex1 = complex0.multiply(0);
      complex1.I.add((double) 0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.atan();
      complex3.NaN.subtract((double) 0);
      complex3.abs();
      Complex complex4 = complex2.multiply((double) 0);
      complex4.conjugate();
      complex2.getReal();
      complex4.exp();
//      try { 
        complex4.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex3.ONE.pow(0.0);
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.ONE;
      complex6.add(complex7);
      Complex complex8 = complex5.NaN.sqrt1z();
      complex5.NaN.readResolve();
      complex6.hashCode();
      complex5.divide(complex1);
      complex1.isInfinite();
      complex6.NaN.hashCode();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex3.NaN.conjugate();
      Complex complex11 = complex9.ONE.divide(0.0);
      complex11.ZERO.sqrt1z();
      complex10.I.multiply(607.9856216640043);
      Complex complex12 = complex6.createComplex(1.08443021774292, 0.0);
      complex12.INF.exp();
      complex8.hashCode();
      complex3.hashCode();
      Complex complex13 = complex4.sin();
      Complex complex14 = Complex.valueOf(0.0);
      complex13.acos();
      complex10.divide(0.0);
      complex14.pow(805.0);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.pow((-842.0));
      complex2.NaN.abs();
      Complex complex5 = Complex.ONE;
      complex1.I.divide(complex5);
      Complex complex6 = complex4.NaN.multiply(complex0);
      complex0.nthRoot(1);
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex3.subtract((-28.9));
      Complex complex9 = complex8.subtract(complex7);
      Complex complex10 = complex3.INF.multiply(3779);
      complex0.cos();
      Complex complex11 = complex6.INF.multiply(complex4);
      complex11.hashCode();
      Complex complex12 = complex6.multiply(complex3);
      complex2.ONE.conjugate();
      complex9.ZERO.subtract(complex8);
      complex2.conjugate();
      complex9.createComplex((-802.289553), 84.258367742);
      complex12.log();
      Complex complex13 = complex9.cosh();
      complex13.NaN.getArgument();
      Complex complex14 = complex13.cos();
      complex14.ZERO.divide(0.0);
      Complex complex15 = complex3.multiply(complex7);
      complex15.sin();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 1613.479478823111;
      Complex complex0 = Complex.valueOf(1613.479478823111, 1613.479478823111);
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.46363574266433716);
      complex1.INF.divide(complex0);
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.ZERO.pow(complex1);
      complex0.isInfinite();
      complex2.divide(0.46363574266433716);
      complex2.divide(2898.365970946893);
      complex3.conjugate();
      complex3.nthRoot(812);
      complex0.sin();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = Complex.valueOf(1.0);
      complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.subtract(20.0);
      complex4.readResolve();
      complex0.getField();
      complex1.getField();
      complex4.reciprocal();
      complex2.createComplex(20.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.I.cosh();
      complex2.I.sinh();
      Complex complex3 = complex1.ZERO.reciprocal();
      assertTrue(complex3.equals((Object)object0));
      
      Complex complex4 = complex0.acos();
      complex0.isInfinite();
      Complex complex5 = Complex.valueOf((-302.9), (-302.9));
      assertEquals((-302.9), complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.add(11.40898155);
      complex0.ZERO.sqrt();
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex7.ZERO.sinh();
      complex7.sqrt();
      Complex complex9 = complex4.acos();
      complex9.ONE.abs();
      Complex complex10 = complex9.multiply(complex8);
      complex10.INF.abs();
      assertEquals(1.0232274785475506, complex9.getImaginary(), 0.01);
      
      Complex complex11 = complex4.atan();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex7.sinh();
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex12.ZERO.multiply(2.5887417793273926);
      complex8.getArgument();
      Complex complex14 = complex0.tan();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertTrue(complex14.equals((Object)complex13));
      
      List<Complex> list0 = complex2.nthRoot(535);
      assertEquals(535, list0.size());
      
      complex12.hashCode();
      assertEquals(12.979777876794897, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex15 = complex2.sqrt1z();
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
  }
}
