/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:14:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(4.6996E-320, 4.6996E-320);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      complex1.NaN.readResolve();
      Complex complex3 = complex2.I.divide(complex1);
      complex3.NaN.cos();
      complex3.ZERO.multiply(161);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ZERO.nthRoot(161);
      complex5.INF.nthRoot(1987);
      complex0.abs();
      complex0.subtract(complex4);
      complex4.nthRoot(1987);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-0.5403023058681398), (-20.0));
      Complex complex2 = complex1.tan();
      complex0.add(complex1);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(4.232889602759328E-304, 20.0);
      Complex complex1 = complex0.tan();
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(561.783, Double.POSITIVE_INFINITY);
      complex0.multiply(561.783);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(561.783, Double.POSITIVE_INFINITY);
      complex1.multiply(308);
      Complex complex2 = Complex.NaN;
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1.360180139541626);
      Complex complex2 = complex0.multiply(complex1);
      double double0 = 1368.941754;
      complex2.multiply(1368.941754);
      Complex complex3 = complex0.subtract(1.360180139541626);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.acos();
      complex3.add(1368.941754);
      complex1.exp();
      complex3.NaN.sinh();
      complex5.createComplex(785.0, (-5957.5946268524485));
//      try { 
        complex2.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-21.48083271889377), (-21.48083271889377));
      Complex complex1 = complex0.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
      complex1.divide(complex0);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add((-613.015));
      Complex complex2 = Complex.valueOf(2302.3012699886185, 4.6996E-320);
      Complex complex3 = complex0.add(4.6996E-320);
      complex3.ONE.getField();
      complex2.NaN.getField();
      complex2.I.multiply((-2181.3));
      Complex complex4 = complex0.ZERO.multiply(778);
      complex4.ZERO.sin();
      Complex complex5 = complex0.pow(4.6996E-320);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.ZERO.conjugate();
      complex6.NaN.divide(5.38733640215475E-8);
      Complex complex8 = complex2.cos();
      complex8.INF.exp();
      complex6.exp();
      complex0.multiply((-525.62159211));
      complex1.acos();
      complex6.divide(308.598306651);
      complex5.pow(complex1);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      complex1.ZERO.nthRoot(110);
      complex0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-428.4086070250449));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.divide(736.230292);
      Complex complex3 = complex1.NaN.add(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      complex0.hashCode();
      Complex complex5 = complex1.pow(complex2);
      complex5.ZERO.conjugate();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.multiply(complex1);
      complex7.I.multiply(1.784536881359796E-8);
      complex6.getImaginary();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex3.pow(complex6);
      complex9.ZERO.exp();
      Complex complex10 = complex1.I.reciprocal();
      Complex complex11 = complex2.subtract(complex3);
      complex8.sqrt();
      complex6.add(736.230292);
      complex10.conjugate();
      complex11.getReal();
      Complex.valueOf(0.0);
      complex4.sqrt1z();
      complex2.reciprocal();
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3919.4), (-1612.7528903739615));
      Complex complex1 = complex0.ONE.pow((-3919.4));
      Complex complex2 = complex1.INF.conjugate();
      complex1.INF.cos();
      Complex complex3 = complex0.ZERO.negate();
      complex0.ZERO.nthRoot(2325);
      Complex complex4 = complex0.INF.multiply((-1612.7528903739615));
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.INF.add((-3919.4));
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf((-1612.7528903739615));
      Complex complex8 = complex7.exp();
      complex8.INF.getArgument();
      complex7.INF.getArgument();
      complex6.INF.getField();
      complex6.I.divide(0.12556517124176025);
      complex7.negate();
      complex4.abs();
      complex6.reciprocal();
      complex2.atan();
      complex1.conjugate();
      complex7.atan();
      complex2.conjugate();
      complex3.sqrt();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-1472.7707343), (-1.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      complex1.NaN.sinh();
      Complex complex3 = complex2.pow((-111.9446));
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = complex2.subtract(complex0);
      complex5.NaN.getField();
      Complex complex6 = complex2.sinh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.ONE.divide((-1.0));
      complex8.I.nthRoot(1074);
      complex2.ONE.divide(complex7);
      Complex complex9 = complex3.exp();
      Complex complex10 = complex4.sin();
      Complex complex11 = complex9.sqrt();
      complex6.cosh();
      Complex complex12 = complex2.multiply((-128));
      complex3.pow(complex10);
      complex5.pow(complex12);
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.getArgument();
      Complex.valueOf((-2.6993478083348727E-303), (-883.18));
      Complex complex1 = complex0.multiply(Double.NaN);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.add((-648.774686069082));
      Complex complex3 = complex0.I.add((-648.774686069082));
      complex3.getField();
      Complex complex4 = Complex.valueOf(20.0, (-648.774686069082));
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.NaN;
      complex6.log();
      complex3.nthRoot(4997);
      complex4.tanh();
      complex5.isInfinite();
      complex5.tanh();
      complex5.sqrt();
      complex1.sqrt1z();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(3.8218180377739526E192);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.acos();
      complex2.NaN.createComplex(539.62872, 3.2426278369639686E-16);
      Complex complex3 = complex1.I.cos();
      Complex complex4 = Complex.valueOf(3.2426278369639686E-16);
      complex1.INF.abs();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.ONE.divide(3.2426278369639686E-16);
      complex1.ZERO.pow(0.7853981633974483);
      complex8.I.toString();
      complex5.multiply(complex0);
      complex4.I.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.log();
      Complex complex9 = complex4.ONE.tanh();
      complex9.INF.add(3.2426278369639686E-16);
      complex5.toString();
      complex0.multiply(complex5);
      complex3.abs();
      complex4.reciprocal();
      Complex complex10 = Complex.I;
      complex7.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.9757021483370203);
      complex1.divide(224.5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.atan();
      complex3.subtract((-1326.34821));
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex(494.133443854, 494.133443854);
      complex5.I.multiply(Double.POSITIVE_INFINITY);
      complex1.tan();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.add((-1750.65371538794));
      complex0.sqrt();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.hashCode();
      Complex complex1 = complex0.createComplex(102.483070181, 102.483070181);
      complex1.I.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(102.483070181);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.I.add(2263.105996);
      complex6.exp();
      Complex complex7 = complex6.NaN.exp();
      complex7.hashCode();
      complex7.ONE.tanh();
      complex0.toString();
      Complex complex8 = complex6.ZERO.reciprocal();
      Complex complex9 = Complex.valueOf(756.3924);
      complex9.INF.reciprocal();
      complex9.add(complex5);
      complex6.pow(complex1);
      complex3.INF.readResolve();
      complex1.cosh();
      complex1.sin();
      complex1.readResolve();
      complex7.I.sqrt1z();
      complex7.nthRoot(308);
      complex7.acos();
      Complex complex10 = complex3.pow((double) 308);
      complex10.I.nthRoot(7);
      complex10.I.atan();
      Complex complex11 = complex4.sinh();
      complex11.subtract(2263.105996);
      complex3.sin();
      complex5.multiply(3064789.4312438243);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1048);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      complex0.equals(complex3);
      Complex.valueOf((-6417.9634907));
      complex2.pow((-2403.9255502935766));
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex1.atan();
      complex2.subtract(374.4525);
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(1048, 2049.5);
      complex4.tan();
      Complex complex8 = complex4.sqrt1z();
      complex8.NaN.subtract((-200.92082));
      complex7.nthRoot(7);
      complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      complex0.getArgument();
      complex0.ZERO.abs();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = Complex.INF;
      complex2.equals(complex0);
      complex4.isInfinite();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.pow((-1005.889025027549));
      Complex complex8 = Complex.ONE;
      complex6.subtract(complex8);
      complex3.atan();
      complex3.subtract((-1005.889025027549));
      Complex complex9 = Complex.INF;
      Complex complex10 = new Complex(1.5707963267948966, Double.POSITIVE_INFINITY);
      complex6.tan();
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex2.NaN.abs();
      Complex complex3 = Complex.NaN;
      complex3.I.conjugate();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.I;
      Object object0 = complex0.readResolve();
      complex5.equals(object0);
      Complex.valueOf((-1.0));
      complex1.multiply(complex3);
      Complex complex6 = complex1.subtract(Double.NaN);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex2.NaN.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.I;
      Object object0 = complex0.readResolve();
      complex5.equals(object0);
      Complex complex6 = Complex.valueOf((-1.0));
      complex1.multiply(complex3);
      complex6.sinh();
      Complex complex7 = Complex.INF;
      complex4.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1998.4603990009734, 1998.4603990009734);
      Complex complex1 = complex0.cosh();
      complex1.pow(complex0);
      complex1.INF.add(complex0);
      Complex complex2 = complex1.NaN.pow((-1193.27686));
      complex2.createComplex(2530.4344943216, (-3051.82336));
      complex0.pow(1998.4603990009734);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.add((-648.774686069082));
      Complex complex3 = complex0.I.add((-648.774686069082));
      complex3.getField();
      complex3.toString();
      Complex complex4 = Complex.valueOf(20.0, (-648.774686069082));
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.NaN;
      complex6.log();
      complex3.nthRoot(4997);
      Complex complex7 = complex6.subtract(complex2);
      complex4.tanh();
      complex5.isInfinite();
      complex5.tanh();
      complex7.sqrt();
      complex1.sqrt1z();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4.56855469478351E171, 4.56855469478351E171);
      complex0.divide(complex1);
      complex0.divide(4.56855469478351E171);
      complex1.reciprocal();
      Complex complex2 = Complex.NaN;
      complex2.getArgument();
      complex1.multiply(134217729);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.add((-648.774686069082));
      complex2.ONE.cos();
      Complex complex3 = complex0.I.add((-648.774686069082));
      complex3.getField();
      Complex complex4 = complex0.multiply(1942.046605005);
      complex4.INF.sqrt1z();
      Complex complex5 = new Complex(536.464930681563, 536.464930681563);
      complex2.readResolve();
      complex0.getImaginary();
      Complex complex6 = Complex.ONE;
      complex0.negate();
      complex2.pow(822.5413973255);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.pow(4652.9833);
      Complex.valueOf(4652.9833);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.createComplex(4652.9833, 4652.9833);
      Complex complex7 = complex5.createComplex(4652.9833, (-2316.090552));
      complex3.abs();
      Complex complex8 = complex0.add(Double.NaN);
      complex8.NaN.negate();
      complex7.getField();
      Complex complex9 = complex2.multiply((-480));
      complex9.getImaginary();
      complex6.sqrt1z();
      complex2.tanh();
      Complex complex10 = Complex.valueOf(4652.9833, 2.718281828459045);
      complex1.asin();
      Complex complex11 = complex10.asin();
      complex11.INF.getArgument();
      complex0.subtract(4652.9833);
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex2.sqrt1z();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      Complex.valueOf((-1.0));
      complex1.pow((-1.0));
      complex2.getArgument();
      Complex.valueOf(1132.4788501, 1132.4788501);
      complex1.hashCode();
//      try { 
        complex2.nthRoot((-2001));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,001
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.pow(4652.9833);
      Complex.valueOf(4652.9833);
      Complex complex5 = complex4.ZERO.sqrt1z();
      complex5.createComplex(4652.9833, 4652.9833);
      Complex complex6 = complex5.createComplex(4652.9833, (-2316.090552));
      complex3.abs();
      complex0.add(Double.NaN);
      complex6.getField();
      complex4.nthRoot(4972);
      complex5.tanh();
      Complex complex7 = complex5.subtract(complex6);
      complex2.isInfinite();
      complex3.tanh();
      Complex complex8 = new Complex(20.0, Double.NaN);
      complex1.readResolve();
      complex7.getImaginary();
      Complex complex9 = Complex.ONE;
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-6.283185307179586));
      complex1.divide(complex0);
      Complex complex3 = Complex.valueOf(1.0);
      complex3.divide((-20.0));
      Complex complex4 = Complex.ZERO;
      complex4.reciprocal();
      complex2.getArgument();
      Complex complex5 = Complex.INF;
      complex5.multiply(2147);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.cos();
      complex1.I.negate();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.ZERO.toString();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.multiply(0.999995251684465);
      complex5.ONE.log();
      complex5.NaN.pow(complex2);
      complex5.NaN.toString();
      Complex complex6 = complex3.cos();
      complex6.sin();
      complex4.add(Double.POSITIVE_INFINITY);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex1.atan();
      complex1.toString();
      Complex complex3 = complex2.multiply(4.232889602759328E-304);
      complex3.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.subtract(6.283185307179586);
      complex5.toString();
      Complex complex6 = Complex.valueOf(0.0, 4.232889602759328E-304);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex1.negate();
      complex6.NaN.log();
      complex5.nthRoot(4997);
      complex5.cosh();
      Complex complex9 = complex7.tanh();
      complex8.subtract(complex6);
      complex8.isInfinite();
      complex9.tanh();
      Complex complex10 = new Complex((-20.0), 0.5215104818344116);
      complex10.readResolve();
      complex10.getImaginary();
      Complex complex11 = Complex.ONE;
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.add((-649.0));
      complex0.ONE.abs();
      complex1.sqrt1z();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.INF;
      complex1.equals("");
      Complex complex5 = Complex.valueOf((-649.0));
      double double0 = (-1326.34821);
      Complex complex6 = complex2.pow(6.283185307179586);
      complex5.subtract(complex6);
      complex5.atan();
      complex5.subtract(549.330196);
      Complex complex7 = Complex.INF;
      Complex complex8 = new Complex((-1326.34821), 313.0);
      complex2.tan();
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.subtract(919.52925185);
      complex2.toString();
      Complex.valueOf(2.0, 2.0);
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.log();
      complex2.nthRoot(4997);
      Complex complex8 = complex3.tanh();
      complex5.subtract(complex3);
      complex7.isInfinite();
      complex4.tanh();
      Complex complex9 = new Complex(9.186471222585239E-9, 0.5215104818344116);
      complex5.readResolve();
      complex8.getImaginary();
      Complex complex10 = Complex.ONE;
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.pow(4652.9833);
      Complex complex5 = Complex.valueOf(4652.9833);
      Complex complex6 = complex4.ZERO.sqrt1z();
      Complex complex7 = complex6.createComplex(4652.9833, 4652.9833);
      Complex complex8 = complex6.createComplex(4652.9833, (-2316.090552));
      complex3.abs();
      complex0.add(Double.NaN);
      complex8.getField();
      Complex complex9 = complex2.multiply((-480));
      complex9.getImaginary();
      complex7.sqrt1z();
      complex2.tanh();
      complex1.asin();
      complex5.INF.getArgument();
      Complex.valueOf(2.718281828459045, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.createComplex(3042.074338545265, (-1750.65371538794));
      Complex complex2 = complex0.createComplex((-161.53841235479), (-12.486282727368748));
      complex2.abs();
      Complex complex3 = complex0.add(1.1759889125823975);
      complex2.getField();
      Complex complex4 = complex2.multiply((-480));
      complex1.getImaginary();
      complex4.ZERO.hashCode();
      complex0.sqrt1z();
      complex4.tanh();
      Complex complex5 = Complex.I;
      complex3.ONE.divide(1.1759889125823975);
      Complex complex6 = Complex.valueOf(2373.0, 3355.926323946);
      complex6.asin();
      complex3.asin();
      complex2.getArgument();
      complex2.subtract(2590.533388);
      Complex complex7 = new Complex(2590.533388, 7.813044552050569E-215);
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex1.atan();
      complex1.toString();
      Complex complex3 = complex2.multiply(4.232889602759328E-304);
      complex3.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.subtract(6.283185307179586);
      complex5.toString();
      Complex complex6 = Complex.valueOf(0.0, 4.232889602759328E-304);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex6.NaN.log();
      complex5.nthRoot(4997);
      Complex complex10 = complex7.tanh();
      complex8.subtract(complex6);
      complex8.isInfinite();
      complex10.tanh();
      Complex complex11 = new Complex((-20.0), 0.5215104818344116);
      Complex complex12 = new Complex(8.520429835870741E-304, 4997);
      complex12.sqrt1z();
      complex11.tanh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      complex0.getArgument();
      complex0.ZERO.abs();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.INF.atan();
      complex1.NaN.sqrt1z();
      Complex complex4 = Complex.INF;
      complex2.equals(complex0);
      Complex.valueOf((-1.0));
      complex1.pow(0.0);
      complex2.subtract(complex3);
      Complex complex5 = complex4.atan();
      complex5.NaN.subtract(494.133443854);
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex((-1326.34821), (-23.58108));
      Complex complex8 = complex7.tan();
      complex4.multiply(complex1);
      complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
      Complex complex1 = complex0.ZERO.pow(5.909041310777802E-8);
      complex1.INF.getField();
      complex0.I.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.tanh();
      Complex.valueOf(1800.49, 1926.4127526422653);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.asin();
      complex0.multiply(complex2);
      complex3.tan();
      Complex complex6 = complex4.atan();
      Complex complex7 = new Complex(1173.2816000594619, 2278.238463963);
      complex3.getArgument();
      complex7.atan();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex8.sin();
      complex5.tanh();
      complex9.add(complex4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-2004.96313));
      complex1.abs();
      Complex complex2 = complex0.pow(7.12703268876);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.multiply((-313));
      Complex complex5 = complex0.subtract(7.12703268876);
      complex5.INF.add(complex4);
      complex1.subtract(complex0);
      complex3.tanh();
      Complex.valueOf(1340.5884, 2004.96313);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1775.276926230081));
      complex1.getImaginary();
      complex0.getField();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.createComplex(1.0, (-1750.65371538794));
      Complex complex4 = Complex.valueOf(2353.5, (-1775.276926230081));
      Complex complex5 = complex3.I.subtract(complex2);
      Complex complex6 = complex4.INF.sqrt();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex3.ONE.tan();
      Complex complex9 = complex0.add((-1750.65371538794));
      Complex complex10 = complex1.divide(complex9);
      Complex complex11 = new Complex(1.0);
      complex0.NaN.sinh();
      complex5.getField();
      Complex complex12 = complex2.reciprocal();
      complex7.hashCode();
      Complex.valueOf((-1775.276926230081));
      complex12.sqrt1z();
      complex5.pow(complex0);
      complex5.abs();
      complex11.log();
      complex10.exp();
      Complex.valueOf(9.054612259832416E-156);
      complex9.abs();
      complex8.pow((-332.83483));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-589.76), 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ZERO.divide((-589.76));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.multiply(complex4);
      complex2.tan();
      Complex complex6 = new Complex(0.0, 3.050320953394603E7);
      Complex complex7 = complex6.atan();
      Complex complex8 = new Complex(0.0, 3647.23918072);
      complex3.getArgument();
      Complex complex9 = complex1.atan();
      complex9.reciprocal();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex5.tanh();
      complex11.NaN.readResolve();
      complex10.add(complex7);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.pow(4652.9833);
      Complex.valueOf(4652.9833);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.createComplex(4652.9833, 4652.9833);
      Complex complex6 = complex4.createComplex(4652.9833, (-2316.090552));
      complex2.abs();
      complex6.INF.reciprocal();
      Complex complex7 = complex0.add(Double.NaN);
      complex6.getField();
      Complex complex8 = complex1.multiply((-480));
      complex8.getImaginary();
      Complex complex9 = complex5.sqrt1z();
      complex1.tanh();
      Complex.valueOf(4652.9833, 2.718281828459045);
      Complex complex10 = complex4.reciprocal();
      complex10.getArgument();
      complex9.multiply((-480));
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.add((-648.774686069082));
      Complex complex3 = complex0.I.add((-648.774686069082));
      complex3.getField();
      Complex complex4 = Complex.NaN;
      complex4.nthRoot(818);
      Complex complex5 = complex2.subtract(complex0);
      complex0.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(2.2678836091558605E8, (-648.774686069082));
      complex5.pow(complex7);
      Complex.valueOf((double) 818);
      Complex complex8 = Complex.INF;
      complex7.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      complex0.getArgument();
      complex0.ZERO.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.atan();
      complex2.sqrt1z();
      Complex complex4 = complex1.atan();
      Complex.valueOf(2427.006693817);
      complex4.log();
      Complex complex5 = complex2.reciprocal();
      complex3.getField();
      complex4.tanh();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      complex0.abs();
      Complex complex1 = Complex.valueOf(4.85437090269903E-263, 20.0);
      Complex complex2 = complex0.createComplex((-1693.15007038), (-2216.89));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.conjugate();
      complex3.multiply(0.0);
      complex0.sqrt1z();
      Complex complex5 = complex4.sqrt();
      complex5.ZERO.add(2.3201857402455062E-4);
      Complex complex6 = complex0.sqrt1z();
      complex5.pow(complex6);
      complex1.add((-1693.15007038));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1707.698178));
      Complex complex2 = complex0.log();
      complex0.multiply(complex1);
      Complex complex3 = complex2.pow(1205.84076);
      complex0.asin();
      Complex complex4 = Complex.valueOf((-1707.698178));
      complex4.readResolve();
      complex1.isInfinite();
      complex3.INF.sin();
      Complex complex5 = Complex.I;
      complex3.divide(complex5);
      complex0.pow((-1495.514));
      complex4.multiply((-1.0));
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.I;
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.7651059253677425E203), 1652.90555);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(1652.90555);
      complex2.getField();
      complex2.abs();
      complex1.nthRoot(4976);
      complex1.getReal();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.INF;
      complex1.log();
      Complex complex5 = complex3.multiply(complex1);
      complex1.pow(1652.90555);
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.INF;
      complex0.equals(complex7);
      Complex complex8 = Complex.ZERO;
      complex8.divide(complex4);
      complex6.pow(Double.NaN);
      complex6.nthRoot(950);
      complex6.multiply(1587.80532);
      complex5.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1775.276926230081));
      complex1.getImaginary();
      complex0.getField();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.createComplex(1.0, (-1750.65371538794));
      Complex.valueOf(0.0, (-1775.276926230081));
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex3.NaN.subtract(complex2);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex3.ONE.tan();
      Complex complex9 = complex0.add((-1750.65371538794));
      Complex complex10 = complex1.divide(complex9);
      complex10.ZERO.log();
      complex0.NaN.sinh();
      complex4.getField();
      complex2.reciprocal();
      complex7.hashCode();
      complex7.sqrt1z();
      complex1.getArgument();
      complex8.toString();
      Complex.valueOf((-1750.65371538794));
      complex6.hashCode();
      // Undeclared exception!
      complex7.nthRoot(1312145731);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      complex0.abs();
      Complex complex1 = Complex.valueOf(4.85437090269903E-263, 0.0);
      Complex complex2 = complex0.createComplex((-1693.15007038), (-2216.89));
      Complex complex3 = complex2.acos();
      complex1.conjugate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.log();
      complex3.reciprocal();
      Complex complex6 = Complex.valueOf((-2216.89));
      complex6.getField();
      complex0.tanh();
      complex3.reciprocal();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.7651059253677425E203));
      complex0.INF.atan();
      complex0.toString();
      Complex complex1 = complex0.I.multiply(4.232889602759328E-304);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.I.subtract(3237.43435937);
      complex0.toString();
      complex2.getImaginary();
      Complex complex4 = Complex.INF;
      complex1.equals(complex0);
      Complex.valueOf(1.0);
      Complex complex5 = complex0.pow((-1.0));
      complex3.getArgument();
      Complex.valueOf(3.141283767028031, 3237.43435937);
      complex5.hashCode();
//      try { 
        complex2.nthRoot((-171));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -171
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.pow(4652.9833);
      Complex complex4 = Complex.valueOf(4652.9833);
      complex3.ZERO.sqrt1z();
      Complex complex5 = complex2.I.exp();
      complex0.ONE.acos();
      Complex complex6 = complex5.ZERO.add(complex0);
      Complex complex7 = Complex.valueOf((-1340.6324), 161.686104);
      complex6.atan();
      complex7.negate();
      Complex.valueOf(1780.64582847);
      complex4.nthRoot(2705);
      complex0.tanh();
      complex0.subtract(complex1);
      complex6.isInfinite();
      Complex complex8 = Complex.valueOf((-445.73), 176.823751925562);
      complex8.tanh();
      complex4.getImaginary();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.exp();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, 2.194891929626465);
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.subtract(complex3);
      complex3.sqrt();
      complex2.atan();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex0.add(2.194891929626465);
      Complex complex8 = complex2.divide(complex5);
      Complex complex9 = complex1.log();
      Complex complex10 = complex8.sinh();
      complex10.getField();
      Complex complex11 = complex6.reciprocal();
      complex11.hashCode();
      Complex complex12 = new Complex((-3905.330301904439), (-3905.330301904439));
      complex12.sqrt1z();
      complex1.getArgument();
      complex7.toString();
      Complex.valueOf((-3905.330301904439));
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = new Complex(0.7853981633974483, (-2.718281828459045));
      complex14.pow(complex11);
      complex1.abs();
      Complex complex15 = complex4.log();
      complex13.exp();
      Complex.valueOf((-2.718281828459045));
      complex9.abs();
      complex15.atan();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(Double.NaN, 2573.19738);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.INF.sqrt1z();
      complex4.ZERO.multiply(952);
      Complex complex5 = complex4.I.subtract(2573.19738);
      Complex complex6 = complex0.ONE.add(complex1);
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex7.NaN.subtract(complex4);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.acos();
      Complex complex11 = complex5.add(complex8);
      complex9.getImaginary();
      Complex complex12 = Complex.INF;
      Complex complex13 = new Complex((-403.0));
      complex13.equals("");
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.pow(2573.19738);
      complex3.getArgument();
      Complex.valueOf((-1.413973321680977E27), (-1.413973321680977E27));
      complex5.hashCode();
      complex4.nthRoot(952);
      complex6.readResolve();
      complex10.hashCode();
      complex1.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.pow(4652.9833);
      Complex.valueOf(4652.9833);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.createComplex(4652.9833, 4652.9833);
      Complex complex7 = complex5.createComplex(4652.9833, (-2316.090552));
      complex3.abs();
      complex0.add(Double.NaN);
      complex7.getField();
      Complex complex8 = complex2.multiply((-480));
      complex8.getImaginary();
      complex6.sqrt1z();
      complex2.tanh();
      Complex complex9 = Complex.valueOf(4652.9833, 2.718281828459045);
      Complex complex10 = complex1.asin();
      Complex complex11 = complex9.asin();
      Complex complex12 = complex6.multiply(complex11);
      complex6.tan();
      complex12.atan();
      Complex complex13 = new Complex(509.9612141, (-934.2081859091429));
      complex13.getArgument();
      Complex complex14 = complex10.atan();
      complex5.reciprocal();
      complex13.sin();
      complex13.tanh();
      complex14.add(complex4);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.multiply(6.283185307179586);
      complex0.equals("'~s]7(C");
      Complex complex1 = Complex.INF;
      complex1.hashCode();
      complex0.divide(complex1);
      Complex complex2 = Complex.NaN;
      complex2.tanh();
      complex2.getImaginary();
      complex1.acos();
//      try { 
        complex1.nthRoot((-4955));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,955
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1775.276926230081));
      complex1.getImaginary();
      complex0.getField();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.createComplex(1.0, (-1750.65371538794));
      Complex.valueOf(0.0, (-1775.276926230081));
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex3.NaN.subtract(complex2);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex1.divide(complex2);
      Complex complex9 = complex8.ZERO.log();
      complex0.NaN.sinh();
      complex4.getField();
      complex2.reciprocal();
      Complex complex10 = Complex.valueOf(2497.3);
      complex1.equals(complex10);
      complex6.divide(complex5);
      complex0.pow(Double.NaN);
      complex6.nthRoot(1706);
      complex9.multiply((double) 1706);
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1775.276926230081));
      complex0.getField();
      Complex complex2 = complex1.ZERO.negate();
      Complex.valueOf(0.0, (-1775.276926230081));
      Complex complex3 = complex0.add((-1750.65371538794));
      Complex complex4 = complex1.divide(complex3);
      complex4.ZERO.log();
      complex0.NaN.sinh();
      complex2.reciprocal();
      complex1.getArgument();
      Complex.valueOf((-1750.65371538794));
      complex0.pow((-1750.65371538794));
      complex2.nthRoot(1706);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.pow(5.909041310777802E-8);
      complex2.INF.getField();
      complex0.I.abs();
      complex1.ONE.nthRoot(1588);
      complex1.getReal();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.ONE.log();
      Complex complex6 = complex0.multiply(complex4);
      complex6.ZERO.pow((-1.6661676835672304E143));
      complex4.asin();
      complex3.equals(complex0);
      Complex complex7 = complex4.divide(complex3);
      Complex complex8 = Complex.INF;
      complex8.sqrt1z();
      complex2.pow(complex0);
      complex2.abs();
      complex7.log();
      Complex complex9 = complex5.exp();
      Complex.valueOf(Double.NaN);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.I.getField();
      Complex complex3 = complex2.INF.conjugate();
      complex3.ZERO.cosh();
      complex0.readResolve();
      complex1.cosh();
      complex0.hashCode();
      double double0 = (-865.1517093932);
      Complex complex4 = complex0.pow((-865.1517093932));
      complex4.INF.add(0.0);
      Complex.valueOf((-865.1517093932), (-865.1517093932));
      double double1 = (-1.2268014119628852E249);
//      try { 
        complex1.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-2483.722477797602), (-2483.722477797602));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.cosh();
      complex3.NaN.sinh();
      Complex complex4 = complex0.ZERO.cos();
      complex4.ONE.tanh();
      complex0.I.multiply(897);
      Complex complex5 = complex0.divide((-2608.9377027771));
      complex0.ZERO.multiply(0.0);
      Complex complex6 = complex5.INF.multiply(2225);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex5.ZERO.log();
      complex8.ZERO.reciprocal();
      Complex complex9 = complex7.ZERO.subtract(3962.0);
      complex9.I.hashCode();
      Complex complex10 = complex0.add(984.9399633600409);
      complex9.getField();
      complex5.NaN.multiply((-552));
      Complex complex11 = complex10.atan();
      Complex complex12 = complex7.exp();
      complex6.equals(complex5);
      complex11.getReal();
      Complex complex13 = complex12.sqrt1z();
      complex13.NaN.tanh();
      complex7.add((-2363.917737701561));
      complex9.multiply(2225);
      Complex.valueOf((-8.638415150333099E-8), (-8.638415150333099E-8));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(970.535262730995);
      Complex complex1 = complex0.cosh();
      complex0.ZERO.cosh();
      Complex.valueOf((-200.664341), 970.535262730995);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sqrt();
      complex3.INF.sqrt1z();
      Complex complex4 = complex2.sin();
      complex4.getField();
      complex2.INF.divide((-200.664341));
      complex2.getArgument();
      complex4.isNaN();
      complex0.divide(0.05139094591140747);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1355.8, 1355.8);
      Complex complex1 = new Complex((-2390.6), (-2390.6));
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.ZERO.pow(1355.8);
      complex3.NaN.tanh();
      Complex.valueOf((-572.0270667347414), 1355.8);
      Complex complex4 = complex0.asin();
      Object object0 = new Object();
      complex4.ONE.abs();
      complex0.equals(object0);
      Complex complex5 = complex0.NaN.multiply(558);
      complex1.INF.getField();
      complex5.divide(complex4);
      complex5.NaN.atan();
      complex4.getImaginary();
//      try { 
        complex1.ONE.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(223.5398103581614);
      Complex complex1 = complex0.sinh();
      complex1.INF.sin();
      complex1.I.nthRoot(17);
      complex1.I.sinh();
      complex1.getField();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.multiply(17);
      Complex complex4 = complex2.INF.subtract(223.5398103581614);
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex2.cos();
      complex3.asin();
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex7.sinh();
      complex3.ZERO.atan();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex3.sqrt1z();
      complex11.add(complex3);
      complex6.asin();
      Complex complex12 = complex10.log();
      complex4.cos();
      complex5.abs();
      complex5.cos();
      complex12.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-428.4086070250449));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.divide(736.230292);
      Complex complex3 = complex1.NaN.add(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      complex0.hashCode();
      Complex complex5 = complex1.pow(complex2);
      complex5.ZERO.conjugate();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.multiply(complex1);
      complex7.I.multiply(1.784536881359796E-8);
      complex6.getImaginary();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex3.pow(complex6);
      complex9.ZERO.exp();
      Complex complex10 = complex1.I.reciprocal();
      Complex complex11 = complex2.subtract(complex3);
      complex0.sqrt();
      complex8.sqrt();
      complex6.add(736.230292);
      complex10.conjugate();
      complex11.getReal();
      Complex.valueOf(0.0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.getArgument();
      complex0.isInfinite();
//      try { 
        complex0.INF.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.ONE.multiply(0.0);
      Complex complex5 = complex3.ONE.multiply(complex4);
      complex3.ONE.hashCode();
      complex3.ZERO.divide(complex0);
      Complex complex6 = complex0.I.sqrt1z();
      Complex complex7 = complex6.I.sin();
      Complex complex8 = new Complex(0.0, 0.0);
      complex7.ONE.pow(complex8);
      complex3.ZERO.divide(0.0);
      Complex complex9 = complex2.NaN.pow(0.0);
      Complex complex10 = complex9.ONE.tanh();
      complex10.I.hashCode();
      complex10.I.exp();
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex11.ZERO.negate();
      Complex complex13 = complex3.exp();
      complex13.sqrt();
      complex6.isInfinite();
      Complex complex14 = complex5.conjugate();
      Complex complex15 = complex12.subtract(921.9052328024);
      complex15.ZERO.tan();
      complex15.ZERO.sqrt1z();
      complex12.getReal();
      complex5.sqrt();
      complex14.toString();
      Complex.valueOf(921.9052328024, 3224.28863189801);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      complex1.I.add((-648.774686069082));
      Complex complex2 = complex0.I.add((-648.774686069082));
      complex2.getField();
      Complex complex3 = complex0.multiply(1942.046605005);
      complex3.INF.sqrt1z();
      complex2.sqrt();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.I.divide(complex1);
      complex0.hashCode();
      Complex complex5 = complex2.divide(185.1638855479287);
      complex5.NaN.add(0.0);
      complex5.INF.nthRoot(1);
      Complex complex6 = complex2.multiply(complex0);
      complex6.tanh();
      Complex.valueOf(0.0);
      Complex complex7 = complex2.log();
      Complex complex8 = complex5.log();
      complex8.I.divide(0.0);
      complex2.subtract(complex5);
      complex7.equals((Object) null);
      complex4.divide(Double.NaN);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.add(complex1);
      complex1.getReal();
      Complex complex4 = complex1.atan();
      complex4.NaN.abs();
      complex3.getReal();
      Complex complex5 = complex3.NaN.cosh();
      complex5.INF.multiply(complex2);
      complex3.INF.multiply(0.0);
      Complex complex6 = complex4.subtract(complex2);
      complex6.toString();
      complex3.toString();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex0.createComplex(6.283185307179586, 1698.6085655);
      complex8.abs();
      complex8.NaN.sqrt1z();
      complex1.getField();
      complex4.hashCode();
      complex6.equals("(NaN, NaN)");
      complex7.createComplex(Double.NaN, 0.0);
      Complex complex9 = complex2.sqrt();
      complex9.NaN.hashCode();
      complex9.createComplex(7.674361647125109E-9, 7.674361647125109E-9);
      complex6.tan();
      Complex complex10 = Complex.valueOf(2565.42628, 0.0);
      complex6.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.pow(5.909041310777802E-8);
      complex2.INF.getField();
      complex0.I.abs();
      List<Complex> list0 = complex1.ONE.nthRoot(1588);
      complex1.getReal();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.INF;
      complex0.ONE.log();
      Complex complex5 = complex0.multiply(complex4);
      complex5.ZERO.pow((-1.6661676835672304E143));
      complex4.asin();
      complex3.equals(complex0);
      complex4.divide(complex3);
      Complex complex6 = complex4.pow((-1495.514));
      complex6.nthRoot(1706);
      complex4.multiply((-3164.286078641438));
      complex6.equals(list0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.exp();
      complex2.nthRoot(756);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.sqrt1z();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex0.INF.sinh();
      Complex complex9 = complex8.I.conjugate();
      complex9.INF.negate();
      complex4.createComplex(1757.9, 0.0);
      Complex complex10 = complex4.ZERO.negate();
      complex5.INF.multiply(complex1);
      Complex complex11 = complex10.NaN.atan();
      Complex complex12 = Complex.valueOf((-20.0), 4375.41784582593);
      Complex complex13 = Complex.NaN;
      complex12.ZERO.pow(complex13);
      complex6.NaN.sinh();
      Complex complex14 = complex3.sinh();
      complex14.readResolve();
      complex2.sin();
      Complex complex15 = complex11.add(complex7);
      complex15.I.acos();
      Complex.valueOf((-137.89545707), 1757.9);
      Complex complex16 = complex11.divide(complex0);
      complex16.ONE.exp();
      complex12.conjugate();
      complex15.isNaN();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(959.1, 380.30563108957);
      complex0.ZERO.abs();
      Complex complex1 = complex0.log();
      complex1.INF.sin();
      complex0.getArgument();
      complex1.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(Double.NaN, 2573.19738);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.INF.sqrt1z();
      complex4.ZERO.multiply(952);
      Complex complex5 = complex4.I.subtract(2573.19738);
      Complex complex6 = complex0.ONE.add(complex1);
      Complex complex7 = complex6.INF.exp();
      complex7.NaN.subtract(complex4);
      complex3.createComplex(2573.19738, 0.0);
      complex6.ZERO.createComplex(0.0, 0.0);
      complex0.abs();
      complex3.NaN.add(2573.19738);
      complex2.getField();
      Complex complex8 = complex5.multiply((-480));
      complex8.getImaginary();
      complex4.sqrt1z();
      Complex complex9 = complex0.tanh();
      Complex.valueOf((double) 952, (-480.0));
      complex9.INF.asin();
      Complex complex10 = complex9.NaN.asin();
      complex10.ONE.multiply(complex1);
      complex0.tan();
      Complex complex11 = complex3.atan();
      complex11.getArgument();
      Complex complex12 = complex0.atan();
      complex12.ZERO.reciprocal();
      complex12.sin();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      complex0.abs();
      Complex complex1 = Complex.valueOf(4.85437090269903E-263, 20.0);
      Complex complex2 = complex0.createComplex((-1693.15007038), (-2216.89));
      Complex complex3 = complex2.acos();
      complex1.conjugate();
//      try { 
        complex3.ZERO.nthRoot((-633));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -633
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(6.283185307179586);
      complex0.equals("'~s]7(C");
      complex1.INF.acos();
      Complex complex2 = Complex.valueOf(3052.24402070584);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.sin();
      complex2.ZERO.atan();
      complex4.I.getField();
      Complex complex5 = complex3.log();
      complex1.createComplex(3052.24402070584, 3052.24402070584);
      Complex complex6 = complex2.reciprocal();
      complex6.ZERO.multiply(complex2);
      Complex.valueOf(1121.978485);
      complex5.divide(3052.24402070584);
      complex2.getImaginary();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.7651059253677425E203));
      Complex complex1 = complex0.INF.atan();
      complex0.toString();
      Complex complex2 = complex0.I.multiply(4.232889602759328E-304);
      complex2.I.reciprocal();
      Complex complex3 = complex2.I.subtract(3237.43435937);
      complex0.toString();
      Complex.valueOf(3237.43435937, 0.0);
      Complex complex4 = complex1.atan();
      complex4.negate();
      Complex complex5 = Complex.valueOf(3237.43435937);
      complex5.nthRoot(2705);
      Complex complex6 = complex0.tanh();
      complex6.INF.subtract(complex5);
      complex3.isInfinite();
      Complex complex7 = complex6.tanh();
      complex7.getImaginary();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.pow((double) (-313));
      complex1.conjugate();
      complex0.multiply((-313));
      Complex complex2 = complex0.subtract((double) (-313));
      complex2.tanh();
      Complex.valueOf(0.0, (-2677.6));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1775.276926230081));
      complex1.getImaginary();
      complex0.getField();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.createComplex(1.0, (-1750.65371538794));
      Complex complex4 = Complex.valueOf(0.0, (-1775.276926230081));
      Complex complex5 = complex3.I.subtract(complex2);
      Complex complex6 = complex3.NaN.subtract(complex2);
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex3.ONE.tan();
      Complex complex10 = complex0.add((-1750.65371538794));
      Complex complex11 = complex1.divide(complex10);
      complex11.ZERO.log();
      complex0.NaN.sinh();
      complex5.getField();
      complex2.reciprocal();
      complex8.hashCode();
      Complex complex12 = complex8.sqrt1z();
      complex1.getArgument();
      complex9.toString();
      Complex complex13 = Complex.valueOf((-1750.65371538794));
      Complex complex14 = complex4.sqrt1z();
      complex13.pow(complex6);
      complex13.abs();
      complex10.log();
      complex14.exp();
      Complex.valueOf(0.0);
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4871.545874862);
      complex0.ONE.abs();
      Complex complex1 = Complex.INF;
      complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.INF.asin();
      Complex complex3 = complex0.sqrt();
      complex0.hashCode();
      Complex complex4 = complex3.subtract(4871.545874862);
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex3.INF.cos();
      complex6.INF.divide(4871.545874862);
      Complex complex7 = Complex.valueOf((-1624.06378835735));
      complex3.NaN.divide(4871.545874862);
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex3.NaN.asin();
      Complex complex10 = complex9.INF.divide(complex6);
      complex4.divide(complex0);
      Complex complex11 = complex3.add(4871.545874862);
      complex1.pow(complex4);
      complex8.nthRoot(475);
      complex10.toString();
      Complex complex12 = Complex.valueOf((-895.206130234), 4871.545874862);
      complex12.atan();
      complex11.subtract(complex12);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1804.89363906492);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ZERO;
      complex1.ONE.log();
      Complex complex3 = complex0.NaN.multiply(1322);
      complex3.NaN.asin();
      Complex complex4 = complex0.divide(complex2);
      complex0.equals(complex4);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex1.INF.pow((double) 1322);
      complex6.ONE.nthRoot(1);
      complex2.acos();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex1.divide((double) 1322);
      complex8.I.getArgument();
      complex3.subtract(complex7);
      complex5.readResolve();
      complex2.toString();
      complex4.createComplex(1322, (-20.0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1707.698178));
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.I.cos();
      complex0.readResolve();
      Complex complex4 = complex3.INF.subtract(0.0);
      complex3.I.getField();
      complex0.isInfinite();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.ONE.multiply((-434));
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex9.INF.add((-81.1003951547));
      Complex complex11 = complex2.asin();
      Complex complex12 = complex11.NaN.log();
      complex11.readResolve();
      complex4.getArgument();
      complex5.abs();
      complex9.ZERO.toString();
      complex7.INF.abs();
      Complex complex13 = complex4.multiply(0.0);
      complex7.ZERO.reciprocal();
      complex13.INF.subtract(1.2903103828430176);
      complex7.multiply(725.0058);
      complex3.log();
      Complex complex14 = complex10.tan();
      complex6.isNaN();
      complex12.add(complex8);
      complex14.cos();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      complex0.add(0.0);
      int int0 = 0;
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.exp();
      Complex complex1 = Complex.INF;
      complex0.ONE.reciprocal();
      complex1.INF.sinh();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.tanh();
      complex1.getImaginary();
      Complex complex4 = complex3.NaN.acos();
//      try { 
        complex4.ZERO.nthRoot((-578));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -578
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.reciprocal();
      complex2.ONE.getArgument();
      Complex complex3 = complex2.log();
      complex3.NaN.getField();
      Complex complex4 = complex2.ZERO.subtract(0.0);
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = Complex.valueOf(2213.828123018);
      complex0.getImaginary();
      complex0.getImaginary();
      complex1.readResolve();
      complex1.ZERO.readResolve();
      Complex complex7 = complex1.createComplex(982.45840102979, 0.0);
      complex1.I.cos();
      Complex complex8 = complex6.INF.acos();
      complex8.NaN.createComplex(0.0, (-1892.572459));
      complex2.readResolve();
      Complex complex9 = complex7.createComplex(0.0, 2213.828123018);
      complex9.ZERO.divide(2726.2648);
      complex4.getField();
      complex6.nthRoot(3048);
      complex6.asin();
      complex0.ONE.sqrt();
      complex5.sin();
      complex9.isNaN();
      Complex complex10 = complex0.subtract(2213.828123018);
      complex10.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1996.86018));
      Complex complex2 = Complex.valueOf((-246.009));
      Complex complex3 = complex1.ZERO.subtract(complex2);
      double double0 = 0.0;
      Complex complex4 = complex3.I.pow(0.0);
      complex4.NaN.divide(complex0);
      Complex complex5 = complex0.createComplex((-1.0), 6.283185307179586);
      complex5.ZERO.reciprocal();
      Complex complex6 = Complex.valueOf((-246.009));
      Complex complex7 = complex6.exp();
//      try { 
        complex7.I.nthRoot((-1650));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,650
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow((-1602.2));
      Complex complex2 = complex1.ZERO.multiply((-1602.2));
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex5.I.multiply(complex0);
      Complex complex8 = complex5.NaN.atan();
      Complex complex9 = complex2.asin();
      complex9.ZERO.abs();
      complex8.conjugate();
      complex7.negate();
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex10.pow((-1602.2));
      Complex complex12 = complex11.I.asin();
      complex12.ZERO.hashCode();
      complex10.hashCode();
      Complex complex13 = complex3.multiply((-1));
      complex13.createComplex((-1602.2), (-1));
      complex13.ONE.tanh();
      complex13.I.nthRoot(37);
      complex3.NaN.readResolve();
      complex2.add((-1726.5506605455));
      Object object0 = new Object();
      complex7.equals(object0);
      complex3.negate();
      Complex complex14 = complex8.tan();
      complex14.add(1.4865891933441162);
      complex4.multiply((-1726.5506605455));
      complex10.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.I.add(complex0);
      complex4.NaN.multiply(complex3);
      complex2.isInfinite();
      Complex complex5 = complex2.acos();
      complex5.ONE.asin();
      complex2.getField();
      complex5.abs();
      complex2.multiply((-222));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
//      try { 
        complex1.INF.nthRoot((-325));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -325
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = new Complex(2653.94740260257);
      complex1.INF.hashCode();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.INF.divide(4.878798101459259E-8);
      Complex complex3 = complex2.INF.multiply(4.878798101459259E-8);
      complex3.I.toString();
      complex0.isInfinite();
      Complex complex4 = complex0.multiply((-4.637025318037353E-306));
      complex4.ONE.getArgument();
      complex3.createComplex((-4.637025318037353E-306), (-4.637025318037353E-306));
      Complex complex5 = complex4.pow((-4.637025318037353E-306));
      complex5.ZERO.hashCode();
      complex1.add(complex5);
      complex4.getImaginary();
      complex3.NaN.atan();
      Complex complex6 = complex3.NaN.sinh();
      Complex complex7 = complex4.subtract(complex5);
      complex7.NaN.log();
      complex7.ONE.asin();
      complex3.abs();
      complex4.sin();
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getArgument();
      complex0.getField();
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ONE.createComplex(Double.NaN, Double.NaN);
      complex3.ONE.cosh();
      Complex complex4 = complex0.tanh();
      complex4.nthRoot(138);
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow((-5.021851606912854E-228));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.pow(4652.9833);
      Complex.valueOf(4652.9833);
      complex3.ZERO.sqrt1z();
      Complex complex4 = complex2.I.exp();
      complex0.ONE.acos();
      complex4.ZERO.add(complex0);
      complex0.getImaginary();
      Complex complex5 = Complex.INF;
      complex0.equals(complex5);
      Complex complex6 = Complex.valueOf(254.12339167);
      Complex complex7 = complex5.pow((-1326.34821));
      complex7.getArgument();
      Complex.valueOf(Double.NaN, 4652.9833);
      complex0.hashCode();
      complex7.nthRoot(1);
      complex6.readResolve();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-589.76), 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex1.ZERO.divide((-589.76));
      complex0.reciprocal();
      complex2.getArgument();
      complex1.multiply(2147);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex0.getArgument();
      complex0.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.acos();
      Object object0 = complex3.INF.readResolve();
      complex3.NaN.abs();
      complex3.I.getField();
      complex2.getField();
      complex0.INF.atan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.createComplex(Double.NaN, (-8.571477929711754E-270));
      Complex complex6 = complex1.ZERO.cos();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex2.getField();
      complex0.atan();
      complex0.acos();
      complex5.NaN.subtract(Double.NaN);
      complex2.isNaN();
      Complex complex7 = complex4.pow(Double.NaN);
      Complex complex8 = (Complex)complex7.INF.readResolve();
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      
      complex7.isNaN();
      complex7.exp();
      Complex complex9 = Complex.I;
      Complex complex10 = complex1.add(complex9);
      Complex complex11 = complex5.atan();
      List<Complex> list0 = complex4.nthRoot(1120);
      assertFalse(list0.contains(object0));
      
      complex10.pow(complex11);
      Complex complex12 = complex5.sqrt();
      complex1.abs();
      complex5.equals(complex7);
      assertFalse(complex5.isInfinite());
      
      String string0 = complex9.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      complex0.atan();
      Complex complex13 = complex1.divide(complex7);
      assertSame(complex1, complex12);
      assertTrue(complex1.equals((Object)complex5));
      assertSame(complex4, complex3);
      assertFalse(complex13.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      complex0.getArgument();
      complex0.ZERO.abs();
      Complex complex2 = complex0.NaN.asin();
      complex2.INF.atan();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf(0.0);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.I.reciprocal();
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      
      complex6.ZERO.getField();
      Complex complex8 = complex1.tanh();
      assertSame(complex8, complex2);
      
      Complex complex9 = complex6.reciprocal();
      assertSame(complex9, complex1);
      assertSame(complex9, complex3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.sinh();
      complex2.abs();
      complex1.getImaginary();
      assertFalse(complex1.isInfinite());
      
      Complex complex4 = complex3.acos();
      assertSame(complex4, complex3);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 1440.284753;
      Complex complex0 = new Complex(1440.284753, 1440.284753);
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-2690.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sinh();
      complex2.I.tanh();
      complex0.add(complex1);
//      try { 
        complex2.NaN.nthRoot((-2214));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,214
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.log();
      complex1.INF.readResolve();
      Complex complex2 = complex0.INF.multiply(3343);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.INF.sqrt();
      assertTrue(complex4.equals((Object)complex3));
      
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.exp();
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.I.sqrt1z();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(1.4142135623730951, complex8.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex9 = complex2.multiply(3343);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex10 = complex5.sin();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex10, complex3);
  }
}
