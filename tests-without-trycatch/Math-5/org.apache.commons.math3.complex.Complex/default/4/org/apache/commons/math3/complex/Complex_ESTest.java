/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:44:57 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(3469.328);
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-278.580878909245));
      Complex complex1 = Complex.I;
      complex1.INF.createComplex((-20.0), (-2706.845301554643));
      complex0.tan();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = Complex.valueOf((-423.7));
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex5.sqrt();
      complex4.INF.negate();
      Complex complex8 = complex4.INF.subtract(complex6);
      Complex complex9 = complex8.ZERO.exp();
      complex8.INF.readResolve();
      complex3.divide(299.83990200883585);
      complex7.multiply(2359.6756);
      complex6.createComplex((-20.0), 1.0);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex((-1916), (-1916));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.acos();
      complex1.getReal();
      complex5.getImaginary();
      complex3.conjugate();
      Complex.valueOf(-0.0, 673.098);
      Complex complex6 = complex0.subtract(0.0);
      complex0.multiply(complex2);
      complex6.nthRoot(253);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2242.437836));
      complex0.ZERO.sinh();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex3.NaN.atan();
      complex1.I.readResolve();
      Complex complex5 = complex0.sin();
      complex3.ZERO.getArgument();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex5.NaN.log();
      complex7.NaN.divide((-2242.437836));
      complex3.I.multiply(3818);
      complex1.conjugate();
      complex3.atan();
      Complex complex8 = complex3.pow(1.0);
      complex8.getField();
      complex4.reciprocal();
      complex2.subtract((-2242.437836));
      complex5.toString();
      Complex complex9 = complex4.createComplex(1.0, 20.0);
      complex6.asin();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      complex0.divide((-3598.681840221922));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ZERO;
      complex1.tanh();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.806792575852521E10), 472.4604158);
      complex0.nthRoot(1288);
      Complex complex1 = complex0.ZERO.multiply(102);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ZERO.subtract((-2423.3326));
      complex4.ONE.atan();
      Complex complex5 = complex0.pow((-5.806792575852521E10));
      Complex complex6 = complex5.ONE.add(complex0);
      Complex complex7 = complex6.INF.sinh();
      complex7.I.getArgument();
      Complex complex8 = complex3.I.asin();
      complex8.I.cosh();
      complex5.NaN.divide(472.4604158);
      Complex complex9 = complex0.exp();
      complex3.acos();
      complex6.readResolve();
      Complex complex10 = complex6.multiply((-5.806792575852521E10));
      Complex complex11 = complex2.createComplex(472.4604158, 472.4604158);
      complex11.cos();
      complex9.divide((-336.215002054352));
      complex11.negate();
      complex1.add((-5.806792575852521E10));
      complex7.sqrt();
      Complex complex12 = complex10.sqrt();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.negate();
      complex2.ONE.multiply(2799);
      complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.subtract((-35.8668456723));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.abs();
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.hashCode();
      Complex complex3 = complex1.INF.multiply(1);
      Complex complex4 = complex3.INF.add(complex1);
      complex4.ONE.abs();
      Complex complex5 = Complex.valueOf((-1106.76), 6.283185307179586);
      Complex complex6 = complex2.ONE.conjugate();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex1.INF.pow(complex3);
      Complex complex9 = complex6.INF.log();
      complex7.INF.nthRoot(1);
      complex7.toString();
      Complex complex10 = complex1.NaN.tan();
      complex1.abs();
      Complex complex11 = complex0.multiply(complex6);
      complex1.NaN.subtract(complex8);
      complex11.ONE.getArgument();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex5.subtract(6.283185307179586);
      complex6.readResolve();
      complex13.cosh();
      complex9.divide(6.283185307179586);
      complex7.cos();
      complex10.acos();
      complex9.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1491.0658329267), (-20.0));
      Complex complex2 = complex0.multiply(complex1);
      complex1.toString();
      complex2.acos();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.NaN;
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1357, 1357);
      complex0.INF.readResolve();
      complex0.sqrt();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.747229597770176E-177, 2979.7326048);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(335.67308140175686, 335.67308140175686);
      complex0.getArgument();
      Complex complex1 = complex0.multiply(3477);
      complex0.reciprocal();
      complex0.log();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 335.67308140175686);
      complex2.pow(complex1);
      complex0.multiply((-1916));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.valueOf(1.8521166948363666E-45, 5155.508339);
      complex0.multiply(complex1);
      complex0.toString();
      Complex complex2 = new Complex((-4255.509466), (-4255.509466));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1502.3725054443));
      Complex complex1 = Complex.valueOf(3561.198);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.pow(3561.198);
      complex0.multiply(complex3);
      complex2.toString();
      complex0.tan();
      complex3.conjugate();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1502.3725054443));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex((-341.94686607159), (-1299.91584016471));
      complex3.multiply((-1502.3725054443));
      complex1.conjugate();
      complex0.abs();
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(3.7227772804091675E-9, (-1502.3725054443));
      Complex complex5 = complex4.multiply(complex2);
      complex5.I.sin();
      complex3.pow(complex2);
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
      Complex.valueOf((-1.0), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide((-3610.226));
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.sqrt();
      complex4.conjugate();
      complex2.tanh();
      Complex complex6 = Complex.valueOf(2.165163304600171E75, (-2327.778620797173));
      complex3.isInfinite();
      Complex complex7 = complex5.asin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.NaN;
      complex6.acos();
      Complex complex10 = complex7.tan();
      complex10.nthRoot(3420);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide((-3610.226));
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex((-3610.226), Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex1.NaN.tanh();
      complex4.conjugate();
      Complex complex5 = complex2.tanh();
      complex5.acos();
      Complex complex6 = Complex.valueOf((-347.0), (-1.8613847754677912E-9));
      complex6.INF.pow(complex0);
      complex6.nthRoot(846);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-3249.6312), (-3249.6312));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.8521166948363666E-45);
      complex0.I.readResolve();
      Complex complex1 = Complex.valueOf(Double.NaN, (-2591.04038));
      complex1.getArgument();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex((-2591.04038), Double.NaN);
      complex5.log();
      Complex complex7 = complex6.acos();
      complex4.getReal();
      complex7.getImaginary();
      Complex complex8 = complex7.conjugate();
      complex3.subtract(Double.NaN);
      Complex.valueOf(0.25, 238.0);
      Complex complex9 = Complex.INF;
      complex1.equals(complex6);
      complex8.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(86.40554, Double.POSITIVE_INFINITY);
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex1.acos();
      complex1.nthRoot(654);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract((-18.080700727452385));
      Complex.valueOf((-18.080700727452385));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf((-18.080700727452385), (-18.080700727452385));
      Complex complex4 = complex3.conjugate();
      complex2.tanh();
      complex1.exp();
      complex2.negate();
      Complex complex5 = Complex.NaN;
      complex0.divide(complex5);
      Complex complex6 = new Complex((-18.080700727452385));
      Complex complex7 = complex6.sinh();
      complex4.subtract(6932288.0);
      Complex complex8 = Complex.valueOf((-3610.226), (-18.080700727452385));
      complex8.atan();
      Complex.valueOf(2060.15);
      complex2.abs();
      complex7.equals(", ");
      complex8.add(4555.97409423793);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1074.6602));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.divide((-1074.6602));
      Complex complex3 = complex2.ONE.add((-1074.6602));
      Complex complex4 = complex2.INF.log();
      complex4.ONE.divide(complex1);
      complex3.ONE.subtract(complex0);
      Complex complex5 = complex3.sinh();
      complex5.ZERO.cosh();
      complex1.asin();
      complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.ONE.add((-1074.6602));
      Complex complex7 = complex0.createComplex((-1074.6602), (-1074.6602));
      complex1.abs();
      Complex complex8 = complex7.cosh();
      complex7.NaN.log();
      Complex complex9 = complex8.NaN.multiply(1776.0);
      Complex complex10 = complex9.atan();
      complex9.NaN.getArgument();
      complex6.abs();
      Complex complex11 = complex9.divide(complex8);
      complex11.getArgument();
      Complex complex12 = complex10.NaN.multiply(Double.NaN);
      complex12.INF.getField();
      Complex complex13 = complex12.I.multiply(6.283185307179586);
      Complex complex14 = complex10.createComplex((-4678.6765654777), 1073.6602);
      complex12.ZERO.multiply(complex0);
      complex7.negate();
      complex14.multiply(2045222521);
      complex8.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.subtract(0.0);
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex0.ONE.tan();
      complex1.sinh();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex(0.0, 1161.768356475405);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.log();
      complex6.acos();
      complex3.getReal();
      Complex complex7 = Complex.valueOf((-4346.530473936691), Double.POSITIVE_INFINITY);
      complex7.getImaginary();
      complex0.conjugate();
      Complex complex8 = Complex.INF;
      complex2.reciprocal();
      complex0.sqrt();
      Complex complex9 = Complex.ZERO;
      complex6.subtract(complex1);
      Complex complex10 = Complex.NaN;
      complex10.isInfinite();
      complex8.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.8521166948363666E-45);
      complex0.getArgument();
      Complex complex1 = complex0.multiply((-1916));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex((-1916), (-1916));
      Complex complex6 = complex5.log();
      Complex complex7 = complex3.acos();
      complex2.getReal();
      complex7.getImaginary();
      complex5.conjugate();
      complex2.subtract(0.0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex5.atan();
      complex6.abs();
      complex0.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1330.638);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.tan();
      complex1.sinh();
      Complex complex3 = complex2.divide(1330.638);
      Complex complex4 = new Complex(1330.638, 2372.7764742);
      complex3.multiply(complex4);
      complex2.multiply((-2883));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      complex1.NaN.getArgument();
      complex0.ONE.multiply(1);
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex0.log();
      complex3.INF.log();
      Complex complex4 = complex0.acos();
      complex3.getReal();
      complex2.divide(complex1);
      complex1.sinh();
      complex4.subtract(Double.NaN);
      Complex complex5 = Complex.valueOf(Double.NaN, 1152.1575133684);
      Complex complex6 = Complex.ZERO;
      complex6.atan();
      complex5.abs();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-6.032174644509064E-23));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide((-3610.226));
      complex2.hashCode();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.divide((double) 1);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.createComplex(1, (-35.8668456723));
      complex5.nthRoot(291);
      Complex complex7 = complex3.divide(Double.POSITIVE_INFINITY);
      complex2.hashCode();
      Complex complex8 = Complex.ZERO;
      complex8.tanh();
      complex2.getReal();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.divide(complex0);
      Complex complex12 = Complex.NaN;
      complex12.divide(complex7);
      complex1.acos();
      complex1.hashCode();
      complex6.sqrt();
      complex9.asin();
      complex7.getImaginary();
      complex6.sqrt();
      Complex complex13 = complex11.subtract(complex8);
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      complex1.ZERO.subtract(complex2);
      Complex complex3 = complex0.negate();
      complex3.I.pow(154.344892063468);
      Complex complex4 = complex0.ONE.exp();
      complex4.INF.pow(complex2);
      Complex complex5 = complex1.I.negate();
      complex3.NaN.divide(complex0);
      complex3.getImaginary();
      complex1.conjugate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex8.subtract(complex7);
      complex9.isInfinite();
      complex3.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1319.0947700261));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = new Complex(1623.76048, (-1319.0947700261));
      Complex complex3 = complex0.multiply(complex2);
      complex3.I.hashCode();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.ZERO.divide((-3.648293887796095E-8));
      Complex complex6 = complex5.negate();
      complex6.INF.createComplex(1623.76048, (-1319.0947700261));
      complex0.nthRoot(1);
      Complex complex7 = complex2.divide((-1319.0947700261));
      complex5.hashCode();
      Complex complex8 = Complex.valueOf((-3.648293887796095E-8), 499.0);
      complex8.tanh();
      complex3.getReal();
      Complex complex9 = Complex.valueOf(499.0);
      Complex complex10 = complex9.reciprocal();
      complex10.divide(complex8);
      Complex complex11 = new Complex((-1319.0947700261), 1.0);
      Complex complex12 = complex11.divide(complex8);
      Complex complex13 = complex3.acos();
      complex12.hashCode();
      Complex complex14 = Complex.valueOf(1623.76048);
      complex14.sqrt();
      complex9.asin();
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      complex15.getImaginary();
      Complex complex16 = Complex.valueOf(6.809741127603255E225, 1623.76048);
      complex16.sqrt();
      complex4.subtract(complex7);
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.INF.add(complex1);
      complex0.abs();
      complex0.tanh();
      complex2.multiply(1.0);
      complex1.log();
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.divide((-3610.226));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex3.conjugate();
      complex4.tanh();
      Complex complex7 = Complex.valueOf((-347.0), (-1.8613847754677912E-9));
      complex7.isInfinite();
      complex3.hashCode();
      Complex complex8 = complex5.tanh();
      complex5.getReal();
      complex7.reciprocal();
      complex6.divide(complex8);
      complex8.divide(complex7);
      complex4.acos();
      Complex complex9 = Complex.NaN;
      complex9.hashCode();
      complex6.sqrt();
      complex0.asin();
      complex3.getImaginary();
      complex5.sqrt();
      complex2.subtract(complex3);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex0.pow(complex0);
      complex2.INF.tanh();
      complex2.ONE.tan();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.divide((-2663.11));
      Complex complex5 = complex0.sinh();
      complex5.INF.tanh();
      complex3.conjugate();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.cos();
      complex7.INF.log();
      complex7.ONE.multiply(complex3);
      complex4.isInfinite();
      complex6.isNaN();
      complex0.cosh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getField();
      Complex complex1 = complex0.subtract(2914.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      complex3.equals(complex2);
      Complex complex4 = complex1.pow(complex3);
      complex3.tan();
      complex0.sinh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.divide(5235.199791183);
      Complex complex7 = complex2.sinh();
      complex0.tanh();
      complex2.conjugate();
      Complex complex8 = complex4.cosh();
      complex6.sin();
      Complex complex9 = complex5.cos();
      complex7.isInfinite();
      complex8.isNaN();
      Complex complex10 = Complex.NaN;
      complex10.cosh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-2633.0), (-20.0));
      complex0.getArgument();
      Complex complex1 = complex0.multiply(973);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.log();
      complex2.acos();
      complex0.getReal();
      complex3.getImaginary();
      complex4.conjugate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.reciprocal();
      complex6.sqrt();
      complex2.subtract(complex0);
      complex0.isInfinite();
      complex7.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide((-3610.226));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex5.tanh();
      Complex complex9 = Complex.valueOf((-347.0), (-1.8613847754677912E-9));
      complex9.isInfinite();
      Complex complex10 = complex9.asin();
      complex6.ONE.reciprocal();
      Complex complex11 = complex2.multiply(1121);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      complex6.divide(1623.76048);
      complex7.getReal();
      complex11.isNaN();
      complex10.divide(1623.76048);
      Complex complex13 = complex9.multiply(3051.6766427776925);
      complex4.multiply((-2147468194));
      complex13.divide((-505.0530204534259));
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.add(Double.NaN);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.add(complex0);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.sin();
      complex3.abs();
      Complex complex4 = Complex.NaN;
      complex4.isInfinite();
      Complex complex5 = new Complex((-0.6677916441525755), 2.0619101524353027);
      Complex complex6 = complex3.asin();
      Complex complex7 = Complex.INF;
      complex0.sqrt();
      complex6.toString();
      complex5.sinh();
      complex2.exp();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-2633.0), (-20.0));
      Complex complex1 = complex0.divide((-138966.2983516304));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sqrt();
      Complex.valueOf((-20.0));
      Complex complex4 = complex0.sqrt();
      complex3.conjugate();
      complex4.tanh();
      complex2.tanh();
      complex1.add((-2633.0));
      complex0.multiply(Double.NaN);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-2631.546531009443), (-20.0));
      Complex complex1 = complex0.divide((-138966.2983516304));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.conjugate();
      complex5.tanh();
      Complex complex7 = Complex.valueOf(2.0, (-1221.927374462));
      complex4.getField();
      complex6.sin();
      complex4.exp();
      complex1.getArgument();
      complex4.sin();
      Complex.valueOf((-1.8613847754677912E-9), 0.007599947293928241);
      complex7.asin();
      complex7.readResolve();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex8.exp();
      complex8.sinh();
      complex2.getField();
      complex0.conjugate();
      Complex complex9 = Complex.INF;
      complex9.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      complex0.nthRoot(2147483476);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1848.738445);
      double double0 = (-1679.0205205242);
      Complex complex1 = complex0.ZERO.negate();
      complex1.ZERO.multiply(306);
      double double1 = (-1421.6);
      Complex complex2 = Complex.valueOf((-1679.0205205242), (-1421.6));
      complex2.ONE.cosh();
      Complex complex3 = complex0.divide(complex2);
      complex0.pow((-1421.6));
      complex2.getField();
      complex3.conjugate();
      complex3.ZERO.nthRoot(765624842);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-2633.0), (-20.0));
      Complex complex1 = complex0.divide((-138966.2983516304));
      complex0.add(complex1);
      Complex complex2 = complex1.sqrt();
      Complex.valueOf((-20.0));
      Complex complex3 = complex0.sqrt();
      complex2.conjugate();
      Complex complex4 = complex3.tanh();
      complex0.isInfinite();
      Complex complex5 = new Complex((-0.6677916441525755), (-1.8613847754677912E-9));
      Complex complex6 = complex5.asin();
      complex5.multiply(1121);
      complex1.sqrt();
      complex4.toString();
      complex4.sinh();
      complex6.exp();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      complex0.nthRoot(1773);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-438.0));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      Complex.valueOf((-438.0), 1.0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex5.ZERO.divide(749.66303278919);
      complex4.ZERO.multiply(0.0);
      complex6.INF.tan();
      complex2.divide((-1.0));
      Complex.valueOf((-438.0));
      complex1.subtract((-438.0));
      Complex complex7 = Complex.valueOf(0.0, 749.66303278919);
      complex7.ONE.sin();
      Complex.valueOf(1.0, 1921.84333417563);
      Complex complex8 = complex6.conjugate();
      complex8.ONE.reciprocal();
      complex3.sqrt();
      complex6.pow(749.66303278919);
      complex1.tan();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-2633.0), (-20.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex((-20.0), 0.0);
      complex3.multiply(complex2);
      complex2.hashCode();
      Complex complex4 = Complex.valueOf((-2633.0));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.divide(0.34231454133987427);
      Complex complex7 = new Complex((-372.78452), 1);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.createComplex(2529.0601662829, 4617.385872524165);
      complex8.nthRoot(1);
      Complex complex10 = complex6.divide(1.7966744899749756);
      complex2.hashCode();
      complex7.tanh();
      complex4.toString();
      complex10.getReal();
      Complex complex11 = complex3.reciprocal();
      complex3.divide(complex6);
      Complex complex12 = complex6.divide(complex11);
      complex2.acos();
      complex11.hashCode();
      Complex complex13 = complex12.sqrt();
      complex8.asin();
      complex8.getImaginary();
      complex13.sqrt();
      complex4.subtract(complex3);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1319.0947700261));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = new Complex(1623.76048, 0.0);
      Complex complex3 = Complex.valueOf(1623.76048);
      complex3.I.hashCode();
      complex2.cos();
      Complex complex4 = complex1.ZERO.divide((-3.648293887796095E-8));
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.INF.createComplex(1623.76048, 0.0);
      complex0.nthRoot(1);
      Complex complex7 = complex2.divide(0.0);
      complex7.I.hashCode();
      complex7.ZERO.tanh();
      complex3.toString();
      complex0.getReal();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex4.divide(complex1);
      complex9.divide(complex0);
      complex0.reciprocal();
      complex8.atan();
      complex3.asin();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.divide(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      complex1.ZERO.subtract(complex2);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.log();
      complex4.log();
      Complex complex8 = complex3.acos();
      complex8.getReal();
      complex1.getImaginary();
      complex1.reciprocal();
      complex3.atan();
      complex7.asin();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-906.1624576605));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-2406.50725844896));
      Complex complex1 = complex0.divide((-2406.50725844896));
      Complex complex2 = new Complex((-2406.50725844896), (-2406.50725844896));
      Complex complex3 = complex1.multiply(complex0);
      complex0.hashCode();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.divide(613.984818588134);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.createComplex((-2406.50725844896), 20.0);
      complex7.nthRoot(1);
      complex7.divide(7.705834203598065E-8);
      complex5.hashCode();
      Complex complex8 = complex4.tanh();
      complex8.toString();
      complex8.getReal();
      complex3.reciprocal();
      Complex complex9 = complex3.divide(complex7);
      Complex complex10 = complex4.divide(complex2);
      complex1.acos();
      complex4.hashCode();
      complex10.sqrt();
      Complex complex11 = complex2.asin();
      complex6.getImaginary();
      Complex complex12 = complex9.sqrt();
      complex12.subtract(complex11);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      complex1.cosh();
      complex1.I.createComplex((-3650.225735846), (-3650.225735846));
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = (Complex)complex4.readResolve();
      complex0.INF.tanh();
      complex4.ONE.subtract(0.0);
      Complex complex6 = complex1.log();
      Complex complex7 = complex0.acos();
      complex3.getReal();
      complex6.getImaginary();
      complex5.reciprocal();
      complex2.atan();
      complex1.asin();
      complex7.abs();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      complex1.NaN.getArgument();
      complex0.ONE.multiply(1);
      complex0.ZERO.reciprocal();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.add(105320.0);
      Complex.valueOf((double) 1);
      Complex complex4 = complex2.subtract(0.2378782033920288);
      complex1.getReal();
      complex3.divide(complex0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.subtract(1.8792247772216797);
      complex4.pow(1.233403117511217);
      complex6.tan();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1319.0947700261));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = new Complex(1623.76048, (-1319.0947700261));
      Complex complex3 = complex0.multiply(complex2);
      complex3.I.hashCode();
      complex2.cos();
      Complex complex4 = complex1.ZERO.divide((-3.648293887796095E-8));
      Complex complex5 = complex4.negate();
      complex5.INF.createComplex(1623.76048, (-1319.0947700261));
      complex0.nthRoot(1);
      Complex complex6 = complex2.divide((-1319.0947700261));
      complex6.I.hashCode();
      complex6.ZERO.tanh();
      complex0.getReal();
      complex1.reciprocal();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex7.divide(complex0);
      complex8.acos();
      complex8.ONE.hashCode();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex3.asin();
      complex10.getImaginary();
      complex9.sqrt();
      complex2.subtract(complex3);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1319.0947700261));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      complex0.sqrt();
      Complex.valueOf(1064.5170248713493);
      complex2.sqrt();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.tanh();
      complex1.isInfinite();
      complex5.asin();
      complex1.multiply((-2183));
      Complex complex6 = complex5.sqrt();
      Complex complex7 = Complex.ZERO;
      complex7.toString();
      complex4.sinh();
      Complex complex8 = Complex.valueOf(1.5600713998274404E12, 1504.6);
      complex8.exp();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide((-3610.226));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex4.conjugate();
      complex5.tanh();
      Complex complex6 = Complex.valueOf((-347.0), (-1.8613847754677912E-9));
      complex6.isInfinite();
      Complex complex7 = complex6.asin();
      complex2.multiply(1121);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex8.sqrt();
      Complex complex9 = Complex.ZERO;
      complex9.toString();
      Complex complex10 = complex7.sinh();
      complex10.exp();
      Complex complex11 = Complex.valueOf(1312.6);
      complex11.reciprocal();
      complex7.tanh();
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      complex0.getArgument();
      complex1.reciprocal();
      complex1.add(complex0);
      Complex complex2 = complex0.asin();
      complex2.sinh();
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = Complex.NaN;
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = Complex.INF;
      complex0.equals(complex2);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.sin();
      complex1.abs();
      complex3.getImaginary();
      Complex complex5 = complex4.tanh();
      complex3.add((-1611.0435));
      complex5.multiply(2372.184);
      Complex complex6 = Complex.NaN;
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-2406.50725844896));
      Complex complex1 = complex0.divide((-2406.50725844896));
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.I.sqrt();
      Complex complex3 = Complex.valueOf((-1.8613847754677912E-9));
      Complex complex4 = complex3.ZERO.sqrt();
      complex4.INF.conjugate();
      complex1.tanh();
      complex0.isInfinite();
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex0.multiply(1121);
      Complex complex7 = complex6.sqrt();
      complex2.toString();
      complex7.sinh();
      complex4.exp();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-458.587119458281), 2372.7764742);
      complex0.ONE.multiply(complex1);
      complex0.multiply((-2883));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1319.0947700261));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = new Complex(1623.76048, 0.0);
      Complex complex3 = complex0.multiply(complex2);
      complex3.I.hashCode();
      complex2.cos();
      Complex complex4 = complex1.ZERO.divide((-3.648293887796095E-8));
      Complex complex5 = complex4.negate();
      complex5.INF.createComplex(1623.76048, 0.0);
      complex0.nthRoot(1);
      Complex complex6 = complex2.divide(0.0);
      complex6.I.hashCode();
      complex6.ZERO.tanh();
      complex3.toString();
      complex0.getReal();
      complex1.reciprocal();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex7.divide(complex0);
      complex8.acos();
      complex8.ONE.hashCode();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex3.asin();
      complex10.getImaginary();
      complex9.sqrt();
      complex2.subtract(complex3);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(347.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.subtract(4786.24634761857);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = Complex.valueOf(0.0, (-578.358069));
      complex4.I.divide(complex3);
      complex0.getArgument();
      Complex complex5 = complex0.add(complex1);
      complex3.divide(complex5);
      Complex complex6 = complex2.pow(complex4);
      complex6.I.abs();
      Complex complex7 = complex6.multiply(complex3);
      Complex complex8 = complex7.ONE.createComplex((-1221.1891441), 347.0);
      complex7.INF.exp();
      Complex complex9 = Complex.valueOf(0.0, 6.283185307179586);
      complex9.ONE.atan();
      complex8.NaN.divide(complex9);
      complex2.divide((-3167.6248));
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(2138);
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex0.multiply(complex1);
      complex2.cos();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.add(complex1);
      complex7.getReal();
      complex6.getReal();
      complex2.isInfinite();
      complex4.tanh();
      Complex complex8 = new Complex((-2310.722281984));
      complex3.subtract(complex8);
      complex3.divide((-1840.977865769));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.472198486328125, 0.472198486328125);
      complex0.abs();
      Complex complex1 = Complex.valueOf(0.667789503497281, 0.667789503497281);
      Complex complex2 = complex1.multiply(1758.4285);
      complex0.hashCode();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.divide(2114.115);
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.sin();
      complex4.getField();
      Complex complex7 = complex0.INF.add(complex4);
      complex5.ZERO.negate();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex5.INF.createComplex(1758.4285, 0.0);
      complex3.subtract(2114.115);
      Complex complex11 = complex5.subtract((-3.4631935816990754E-243));
      complex11.multiply(complex10);
      complex8.add(complex6);
      Complex complex12 = complex9.divide(0.0);
      complex8.getReal();
      complex4.isNaN();
      complex12.divide(3504.6810972523845);
      complex2.multiply(0.506503285570203);
      complex7.multiply(1330);
      complex8.divide(4617.385872524165);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2659.6594760533694));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      complex2.getField();
      complex0.ONE.abs();
      complex0.cos();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-41.0));
      Complex complex1 = new Complex((-41.0));
      Complex.valueOf((-41.0));
      complex1.NaN.nthRoot(251);
      Complex complex2 = complex0.add(complex1);
      complex2.divide((double) 251);
      complex0.createComplex(Double.NaN, 251);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.equals(complex0);
      Complex complex1 = complex0.pow(complex0);
      complex1.INF.tanh();
      complex1.ONE.tan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.divide((-2663.11));
      complex0.sinh();
      complex2.conjugate();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.cos();
      complex5.INF.log();
      complex5.ONE.multiply(complex2);
      complex3.isInfinite();
      complex4.isNaN();
      complex0.cosh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      complex1.ZERO.subtract(complex2);
      Complex complex3 = complex0.negate();
      complex3.I.pow(154.344892063468);
      complex0.ONE.exp();
      Complex complex4 = complex1.I.negate();
      complex3.NaN.divide(complex0);
      Complex complex5 = complex2.sinh();
      complex5.ONE.subtract(1386.4793663498128);
      Complex.valueOf(154.344892063468, 154.344892063468);
      complex5.atan();
      complex1.abs();
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(1592.86155, 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.asin();
      complex2.INF.sqrt1z();
      Complex complex3 = complex0.cosh();
      complex3.readResolve();
      Complex complex4 = complex3.createComplex(2589.0, 1021.93722);
      Complex complex5 = complex0.conjugate();
      complex0.INF.acos();
      Complex complex6 = complex5.ONE.reciprocal();
      complex3.INF.subtract(0.0);
      complex4.isNaN();
      Complex complex7 = Complex.valueOf(0.6394867897033691, 2276.3402297);
      Complex.valueOf(2589.0);
      complex7.negate();
      complex4.log();
      Complex complex8 = Complex.valueOf(0.0, 0.6394867897033691);
      complex6.readResolve();
      complex6.isInfinite();
      complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(347, 347);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add(3.991755413823315E-226);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-2805.344682549718), (-2104.4706516964));
      Complex complex1 = complex0.divide((-2805.344682549718));
      complex1.INF.cosh();
      Complex complex2 = complex0.createComplex(2404.420254, (-2805.344682549718));
      complex2.INF.hashCode();
      complex0.isNaN();
      complex0.hashCode();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(Double.NaN);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex(3499.9, (-20.0));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.ZERO.reciprocal();
      complex2.acos();
      Complex complex3 = complex1.ONE.sinh();
//      try { 
        complex3.NaN.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      complex1.sqrt();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex0.pow((-1.0));
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex3.sinh();
      complex6.ONE.cos();
      complex4.pow(complex3);
      complex2.nthRoot(315);
      Complex complex7 = complex2.multiply((-2634));
      complex5.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-1636.2777146568835));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.ZERO.tanh();
      complex3.INF.readResolve();
      complex1.readResolve();
      Complex complex4 = complex2.ZERO.pow(0.0);
      complex4.log();
      Complex complex5 = complex0.INF.multiply((-1636.2777146568835));
      complex0.negate();
      complex5.getImaginary();
      complex5.getField();
      complex1.add(complex4);
      complex5.getField();
      Complex.valueOf(0.0);
      complex3.equals("tVzQ*v K2cV");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex0.negate();
      complex4.I.pow(154.344892063468);
      complex2.conjugate();
      complex1.ONE.toString();
      Complex complex5 = complex0.createComplex((-138966.2983516304), 2025.610502184845);
      Complex complex6 = complex4.subtract((-138966.2983516304));
      Complex complex7 = complex1.subtract(2.0);
      complex5.multiply(complex7);
      Complex complex8 = complex3.add(complex7);
      Complex complex9 = complex6.divide((-1679.0205205242));
      complex2.getReal();
      complex8.isNaN();
      complex9.divide(Double.POSITIVE_INFINITY);
      complex1.multiply(154.344892063468);
      complex9.multiply(1330);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.ONE.multiply(1);
      complex0.ZERO.reciprocal();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.acos();
      complex3.getReal();
      complex1.getImaginary();
      complex5.conjugate();
      Complex complex6 = Complex.INF;
      complex6.reciprocal();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex5.subtract(complex7);
      complex2.isInfinite();
      complex8.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.divide((-2831.9186804844));
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.reciprocal();
      complex4.isInfinite();
      Complex complex6 = complex4.NaN.atan();
      Complex complex7 = complex1.NaN.multiply((-2831.9186804844));
      Complex complex8 = complex7.divide(complex6);
      complex0.getArgument();
      Complex complex9 = complex4.NaN.cosh();
      Complex complex10 = complex0.I.exp();
      Complex complex11 = complex10.ZERO.divide(complex4);
      complex0.exp();
      complex4.getImaginary();
      complex2.INF.negate();
      complex2.negate();
      complex5.sinh();
      complex5.ZERO.getArgument();
      complex1.multiply(1);
      complex6.getReal();
      Complex complex12 = complex2.asin();
      complex12.NaN.acos();
      Object object0 = new Object();
      complex10.equals(object0);
      complex8.subtract(complex9);
      complex5.acos();
      Complex.valueOf((-1.6990896855901115E-55));
      complex11.nthRoot(886);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(1.9483680725097656);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.ONE.cosh();
      complex0.toString();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ONE.exp();
      complex4.I.abs();
      complex0.isInfinite();
      complex5.getImaginary();
      Complex complex7 = complex3.divide(complex2);
      complex7.I.divide(complex2);
      Complex complex8 = complex5.sinh();
      complex7.INF.asin();
      Complex complex9 = Complex.valueOf(0.0);
      complex5.I.subtract(complex7);
      complex9.I.multiply(243);
      complex9.cosh();
      complex4.getReal();
      complex6.getReal();
      complex8.pow(0.0);
      complex0.nthRoot(243);
      complex2.isNaN();
      Complex.valueOf(0.0);
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-438.0));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      Complex.valueOf((-438.0), 1.0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex5.ZERO.divide(749.66303278919);
      complex6.INF.tan();
      complex2.divide((-1.0));
      Complex complex7 = Complex.valueOf((-438.0));
      complex1.subtract((-438.0));
      Complex.valueOf(0.0, 749.66303278919);
      Complex complex8 = Complex.valueOf(1.0, 1921.84333417563);
      Complex complex9 = complex6.conjugate();
      complex9.ONE.reciprocal();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex8.subtract(complex10);
      complex11.isInfinite();
      complex7.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-120.457201));
      complex0.I.sinh();
      Complex complex1 = complex0.NaN.tan();
      complex1.I.createComplex(0.0, 1302.0);
      complex1.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ONE.pow((-384.64551877));
      complex0.ONE.toString();
      Complex complex4 = complex3.ZERO.reciprocal();
      complex4.NaN.negate();
      complex3.INF.readResolve();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex2.divide((-120.457201));
      Complex complex8 = Complex.valueOf((-384.64551877), 0.0);
      complex1.multiply(0.0);
      complex8.NaN.toString();
      Complex.valueOf(1302.0, (-335.947));
      complex7.conjugate();
      complex8.add(0.0);
      complex3.isNaN();
      complex1.sin();
      complex0.multiply(2.8330789837569332E-8);
      complex1.multiply(complex5);
      complex6.getImaginary();
      Complex.valueOf((-120.457201));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(71.36, 71.36);
      Complex complex2 = Complex.valueOf(0.0, 2.0);
      complex2.ZERO.acos();
      complex2.nthRoot(17);
      complex1.INF.pow(71.36);
      complex0.NaN.toString();
      Complex complex3 = complex0.add(3994.27742862911);
      complex3.ZERO.cos();
      complex3.asin();
      complex1.log();
      complex3.getImaginary();
//      try { 
        complex2.nthRoot((-2532));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,532
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-41.0));
      Complex complex1 = new Complex((-41.0));
      Complex complex2 = Complex.valueOf((-41.0));
      Complex complex3 = complex0.add(complex1);
      complex3.I.divide(Double.NaN);
      complex3.divide((double) 251);
      Complex complex4 = complex0.createComplex(Double.NaN, 251);
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(2089.0462739);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow(complex0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(775);
      complex0.subtract((double) 775);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex.valueOf((-911.3838679));
      double double0 = 1858.5;
      Complex complex0 = new Complex(2.2433348713144506E-8, 1858.5);
//      try { 
        complex0.NaN.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(203.49787);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.abs();
      Complex complex3 = complex0.log();
      complex0.divide(complex3);
      complex2.sqrt1z();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(16);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1502.3725054443));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(complex1);
      complex0.toString();
      complex2.tan();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.pow((double) (-303));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.NaN.log();
      complex1.I.sqrt1z();
      complex0.INF.nthRoot(195);
      complex0.ZERO.exp();
      Complex complex2 = complex0.I.conjugate();
      complex0.getField();
      Complex complex3 = complex0.asin();
      complex3.ONE.log();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.nthRoot((-2841));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,841
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-2633.0), (-20.0));
      Complex complex1 = Complex.INF;
      complex0.ZERO.add((-4736.32029021032));
      complex1.ZERO.pow((-2633.0));
      Complex complex2 = complex0.I.multiply(complex1);
      complex0.I.toString();
      Complex complex3 = complex0.acos();
      complex3.tan();
      complex1.NaN.nthRoot(3466);
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(769);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sinh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1960.888599372));
      complex0.NaN.subtract((-1960.888599372));
      complex0.I.sin();
      Complex complex1 = new Complex((-1960.888599372), (-1960.888599372));
      Complex complex2 = complex0.I.sin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.ONE.divide(complex3);
      complex2.INF.sinh();
      Complex complex5 = complex1.divide(complex0);
      complex5.ONE.conjugate();
      Complex complex6 = complex3.NaN.cosh();
      complex2.NaN.createComplex((-1960.888599372), (-1785.239483989945));
      complex0.multiply(complex1);
      complex0.isNaN();
      complex0.createComplex(4.455505956692757, 206.54445);
      complex2.add(4.455505956692757);
      complex5.subtract(complex3);
      complex6.getArgument();
      complex4.divide(complex5);
      Complex complex7 = new Complex(0.0, 0.0);
      Object object0 = complex7.readResolve();
      complex6.equals(object0);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-2883));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(2282.3305047);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.I.createComplex(2282.3305047, 0.0);
      Complex complex4 = complex0.divide((-887.27));
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.ONE.atan();
      complex6.add(2282.3305047);
      complex6.ONE.multiply(17);
      complex1.divide(complex0);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = complex8.I.add(0.0);
      Complex complex10 = complex9.NaN.sqrt1z();
      complex10.INF.conjugate();
      Complex complex11 = complex4.add(complex0);
      Complex complex12 = complex4.negate();
      complex4.multiply(complex12);
      complex5.readResolve();
      complex4.getImaginary();
      complex1.readResolve();
      Complex complex13 = complex3.subtract(0.0);
      Complex complex14 = new Complex(0.0, -0.0);
      complex13.I.multiply(complex14);
      Complex complex15 = complex11.tan();
      complex15.INF.log();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.cosh();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf(1648.38, 2980.9580078125);
      Complex complex4 = complex3.createComplex((-4.2365298585101096E-8), 1648.38);
      complex4.ZERO.log();
      Complex complex5 = complex1.ONE.subtract(0.0);
      complex0.getField();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex1.multiply(1648.38);
      Complex complex8 = complex7.NaN.multiply(420);
      Complex complex9 = complex8.ZERO.cos();
      complex9.ONE.asin();
      Complex complex10 = complex8.NaN.sinh();
      complex10.ONE.getArgument();
      complex6.log();
      Complex complex11 = complex7.log();
      complex11.pow((-1.0));
      Complex complex12 = complex6.tanh();
      complex12.sqrt();
      Complex complex13 = complex4.subtract(9.018025618601154E-8);
      complex12.getField();
      complex5.isInfinite();
      complex7.conjugate();
      complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      complex1.ZERO.subtract(complex2);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.exp();
      complex3.negate();
      complex2.divide(complex4);
      complex0.sinh();
      Complex complex5 = complex4.subtract(1.898865061775723E-4);
      Complex complex6 = Complex.valueOf(1.6939399242810123E299, 1.3996801755555561);
      complex6.INF.abs();
      Complex.valueOf(Double.NaN);
      complex5.abs();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = new Complex((-2659.6594760533694));
      Complex complex1 = Complex.ZERO;
      complex0.I.add(complex1);
      complex0.getField();
      complex0.cos();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-2149.7889));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.42353010177612305);
      Complex complex1 = complex0.INF.exp();
      complex1.I.sin();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.ONE.multiply(0.0);
      complex2.ONE.subtract((-2552.0));
      complex1.multiply(0.0);
      Complex complex4 = complex1.acos();
      complex0.ZERO.readResolve();
      complex3.isNaN();
      complex0.divide(complex4);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      complex1.cosh();
      complex1.I.createComplex((-3650.225735846), (-3650.225735846));
      Complex complex2 = complex1.ONE.atan();
      complex2.INF.atan();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.readResolve();
      complex0.INF.tanh();
      complex3.ONE.subtract(0.0);
      Complex complex4 = complex0.ZERO.add(979.0203864552411);
      Complex complex5 = Complex.valueOf(0.2378782033920288);
      complex4.ONE.subtract(2214.0);
      complex0.getReal();
      Complex complex6 = complex0.divide(complex4);
      complex6.subtract(0.0);
      complex5.pow(0.0);
      complex2.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1762.6, 583.390541);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.asin();
      complex2.NaN.divide(583.390541);
      complex4.ONE.getField();
      complex1.I.add(0.0);
      complex0.ONE.pow((-207.7313338));
      Complex complex5 = complex3.ZERO.sqrt();
      complex5.INF.reciprocal();
      Complex complex6 = Complex.ONE;
      complex1.ZERO.pow(complex6);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex2.I.asin();
      Complex complex8 = complex2.sqrt1z();
      complex8.I.cos();
      complex8.sinh();
      complex8.NaN.cosh();
      complex0.nthRoot(2233);
      complex0.add((double) 2233);
      Complex complex9 = complex4.multiply(2233);
      complex7.getImaginary();
      complex9.conjugate();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.pow(Double.NaN);
      Complex complex4 = complex1.negate();
      complex1.divide(complex4);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex3.subtract(7.054443447243064E-8);
      Complex complex7 = Complex.valueOf(1386.4793663498128, (-12.66917272184));
      complex0.ONE.divide(complex6);
      Complex complex8 = complex1.atan();
      complex5.abs();
      complex8.equals(complex7);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = Complex.INF;
      complex0.equals(complex2);
      complex1.multiply(0.03925827145576477);
      complex2.multiply(381);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1412);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex(760.879);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex((-15.386980007229417), (-1097.3638320048));
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex1.multiply((-1097.3638320048));
      complex5.ZERO.pow(complex4);
      Complex complex6 = complex1.conjugate();
      complex6.abs();
      complex1.readResolve();
      Complex complex7 = Complex.valueOf(20.0, Double.NaN);
      complex7.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract((-8.784622656707742E-9));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-1069.921279369));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(1363.69612629065);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      complex1.ZERO.subtract(complex2);
      Complex complex3 = complex0.negate();
      complex3.I.pow(154.344892063468);
      Complex complex4 = complex1.I.negate();
      complex3.NaN.divide(complex0);
      Complex complex5 = complex2.sinh();
      complex5.ONE.subtract(1386.4793663498128);
      Complex.valueOf(154.344892063468, 154.344892063468);
      complex5.atan();
      complex1.abs();
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.add(complex0);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.sin();
      complex3.abs();
      complex2.getImaginary();
      complex0.tanh();
      complex0.add((-1611.0435));
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex.valueOf((-2591.04038), (-2591.04038));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1237.117524), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex0.nthRoot(1300);
      Complex complex3 = complex1.sqrt1z();
      complex0.abs();
      complex3.pow(2144.6659);
      complex2.sqrt1z();
      complex3.sinh();
      Complex complex4 = new Complex(1.0);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4157.0));
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.733140900346534E-58, (-1069.921279369));
      Complex complex1 = complex0.tan();
      complex1.divide((-1069.921279369));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sqrt1z();
      complex1.ONE.getArgument();
      complex1.I.reciprocal();
      Complex complex3 = complex0.INF.add(complex1);
      complex3.I.asin();
      Complex complex4 = complex0.sinh();
      complex4.INF.subtract(complex2);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.toString();
      Complex complex4 = complex0.ZERO.sqrt1z();
      complex4.NaN.cosh();
      complex1.ZERO.cos();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.add(complex4);
      complex5.subtract(0.0);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex5.tan();
      complex1.NaN.divide(complex5);
      Complex complex10 = complex3.multiply(686);
      complex4.isNaN();
      complex4.readResolve();
      complex10.equals(complex3);
      complex4.abs();
      complex9.conjugate();
      complex2.acos();
      complex10.isNaN();
      complex5.add(complex6);
      complex8.add(2966.12986);
      Complex.valueOf((-1177.95026399035), 0.0);
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.NaN.cos();
      Complex complex3 = complex2.INF.sqrt1z();
      complex3.ONE.getField();
      Complex complex4 = complex0.createComplex((-240.535), (-240.535));
      complex4.NaN.divide(1.0);
      Complex complex5 = complex1.ZERO.add(complex0);
      complex4.ONE.getField();
      complex2.divide((-240.535));
      complex5.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.add(complex1);
      complex3.I.cosh();
      Complex complex4 = complex3.acos();
      complex0.ZERO.conjugate();
      complex2.ZERO.toString();
      Complex complex5 = complex1.createComplex((-2657.531074488521), (-2657.531074488521));
      Complex complex6 = complex1.exp();
      complex4.exp();
      complex6.atan();
      complex6.negate();
      complex5.add(complex2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      complex0.nthRoot(764);
      complex0.getImaginary();
      complex0.toString();
      double double0 = (-495.56839);
      Complex complex1 = complex0.subtract((-495.56839));
      Complex complex2 = complex0.multiply(0);
      complex2.NaN.reciprocal();
      complex2.ZERO.atan();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.I.atan();
      complex0.sinh();
      complex3.readResolve();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex6.ONE.cos();
      int int0 = (-3189);
//      try { 
        complex7.nthRoot((-3189));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,189
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.536337311795176E97);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.pow(complex0);
      complex0.ZERO.add(complex2);
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex.valueOf(7.536337311795176E97, (-1121.219113));
      complex3.I.createComplex(0.0, 0.0);
      Complex.valueOf(0.0, 7.536337311795176E97);
      complex1.divide(complex0);
      complex0.sinh();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-262));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.reciprocal();
      complex1.ZERO.subtract(complex2);
      Complex complex3 = complex0.negate();
      complex3.I.pow(154.344892063468);
      complex2.conjugate();
      complex1.ONE.toString();
      Complex complex4 = complex0.createComplex((-138966.2983516304), 2025.610502184845);
      complex3.subtract((-138966.2983516304));
      complex1.subtract(2.0);
      complex2.tanh();
      Complex complex5 = complex4.add(Double.NaN);
      complex5.multiply((-34.3012096));
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Complex.valueOf((-1647.12933));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Complex complex0 = new Complex(4.8926595743317624E162, Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex1 = complex0.multiply((-1916));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex(1.8521166948363666E-45, 4.8926595743317624E162);
      complex3.multiply((-1916));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1762.9, 1762.9);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.sin();
      complex3.ONE.subtract(1762.9);
      Complex complex4 = complex0.multiply(0.0);
      complex4.ZERO.pow(complex0);
      complex0.INF.abs();
      Complex complex5 = complex0.negate();
      complex2.sqrt();
      complex1.getField();
      complex1.multiply((-4307));
      Complex complex6 = complex0.negate();
      complex1.isNaN();
      complex1.readResolve();
      Complex complex7 = complex5.ONE.pow((double) (-4307));
      Complex.valueOf(0.0);
      complex7.ZERO.multiply(0);
      complex7.NaN.pow(complex4);
      complex6.pow(complex2);
      Complex.valueOf(1762.9, 0.0);
      Complex complex8 = complex5.exp();
      complex2.getImaginary();
      complex8.hashCode();
      Complex.valueOf(986.5074595);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.ONE.subtract(complex1);
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex0.tan();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex3.add((-1434.728854));
      Complex complex9 = Complex.valueOf((-1434.728854), (-1434.728854));
      Complex complex10 = complex8.negate();
      double double0 = complex10.abs();
      assertEquals(1433.728854, double0, 0.01);
      
      Complex complex11 = complex3.add(0.0);
      Complex complex12 = complex11.createComplex((-1852.27079216623), (-1947.3563));
      Complex complex13 = complex12.negate();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex3.ZERO.multiply((-539));
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      
      complex13.ZERO.reciprocal();
      complex7.I.subtract(complex12);
      Complex complex16 = complex3.cos();
      Complex complex17 = complex16.I.subtract((-802.6));
      assertEquals(802.6, complex17.getReal(), 0.01);
      
      Complex complex18 = complex16.NaN.multiply(0.0);
      assertSame(complex18, complex4);
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      
      Complex complex19 = complex7.multiply(complex9);
      assertEquals(0.0, complex19.getReal(), 0.01);
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      
      Complex complex20 = complex0.atan();
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertTrue(complex20.equals((Object)complex14));
      
      complex0.equals(complex9);
      Complex complex21 = complex10.subtract(complex9);
      assertEquals(1434.728854, complex21.getImaginary(), 0.01);
      
      Complex complex22 = complex2.sin();
      assertEquals(2.2679097686563057, complex22.getImaginary(), 0.01);
      assertSame(complex1, complex5);
      
      complex0.sin();
      complex13.conjugate();
      assertTrue(complex0.equals((Object)complex20));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3157.36698), 1566.0468724677899);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.NaN.atan();
      complex1.INF.subtract(Double.NaN);
      Complex complex5 = complex3.ZERO.cos();
      complex2.NaN.getArgument();
      Complex complex6 = complex3.NaN.multiply(1727);
      Complex complex7 = (Complex)complex5.ZERO.readResolve();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex0.sin();
      Complex complex9 = complex6.add(complex1);
      Complex complex10 = complex9.INF.conjugate();
      complex10.ONE.conjugate();
      assertTrue(complex10.isInfinite());
      assertTrue(complex10.equals((Object)complex8));
      
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex9.pow(complex6);
      assertSame(complex12, complex9);
      assertSame(complex12, complex4);
      
      Complex complex13 = complex11.exp();
      assertEquals((-1565.0468724677899), complex3.getImaginary(), 0.01);
      assertEquals(3157.36698, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(2.14168768474935, complex13.getReal(), 0.01);
      
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }
}
