/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:51:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.ONE;
      complex3.ONE.conjugate();
      Complex complex5 = new Complex(0.0, 0.0);
      complex5.readResolve();
      Complex complex6 = complex3.tan();
      complex6.ONE.atan();
      Complex complex7 = complex0.multiply(complex4);
      complex3.multiply(complex1);
      complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(485.74, 485.74);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(complex1);
      complex0.NaN.getField();
      Complex complex3 = complex2.multiply((-1098.700848));
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(913.45966164427, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-1947.65090890116));
      complex1.sqrt();
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      Complex complex3 = Complex.ZERO;
      complex0.readResolve();
      complex0.tan();
      Complex complex4 = complex2.tanh();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex0.NaN.reciprocal();
      complex2.readResolve();
      complex2.tan();
      complex2.multiply(524);
      complex2.pow((double) 524);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.sqrt();
      complex3.readResolve();
      complex3.toString();
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      complex3.multiply((-9.426738082024829E8));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      complex0.divide(0.0);
      Complex complex2 = complex1.sqrt();
      complex2.readResolve();
      Complex complex3 = Complex.ZERO;
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.ZERO.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2782.5852807678), (-2782.5852807678));
      Complex complex1 = complex0.exp();
      complex1.INF.getArgument();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.I.log();
      complex2.getArgument();
      Complex complex4 = complex2.ONE.pow(complex1);
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.conjugate();
      Complex complex6 = complex1.multiply((-1655.1));
      Complex complex7 = complex5.multiply(complex4);
      complex7.NaN.nthRoot(3700);
      complex7.INF.asin();
      complex6.getField();
      complex2.tan();
      complex0.sqrt1z();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.I.multiply(9);
      Complex.valueOf((-2782.5852807678));
      Complex complex10 = complex3.log();
      complex10.INF.sqrt1z();
      Complex complex11 = complex3.sinh();
      complex2.ONE.conjugate();
      complex9.INF.cosh();
      complex11.INF.divide(Double.NaN);
      complex4.divide((-1655.1));
//      try { 
        complex9.nthRoot((-1491));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,491
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.log();
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.NaN.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(complex0);
      complex2.pow(complex0);
      complex2.NaN.pow((-1.0));
      Complex complex3 = complex1.divide(2.0);
      complex3.sqrt();
      complex1.readResolve();
      complex0.toString();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      complex4.equals(complex5);
      complex5.tan();
      Complex.valueOf(3869.617907572864);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      complex1.readResolve();
      complex1.equals(complex0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.tan();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex0.toString();
      complex1.asin();
      complex2.multiply(1323.0975749422885);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.65254482809078, 485.74);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.log();
      complex1.asin();
      Complex complex5 = new Complex((-270.148471664), (-270.148471664));
      Complex complex6 = complex4.tan();
      complex0.pow(complex6);
      Complex.valueOf((-2031.9317535271634), (-270.148471664));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1368.9594133873), (-1429.20148));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.subtract((-20.0));
      Complex.valueOf((-1368.9594133873));
      Complex complex4 = new Complex((-20.0), (-1825.5732788773182));
      complex4.tanh();
      Complex complex5 = Complex.valueOf(40.650709601050856);
      Complex complex6 = complex5.tan();
      complex3.toString();
      complex0.tan();
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1989.08562), (-1989.08562));
      Complex complex1 = Complex.valueOf((-785.24402838), (-20.0));
      complex0.divide(complex1);
      Complex.valueOf((-785.24402838), (-20.0));
      Complex complex2 = Complex.valueOf(3375.2);
      complex1.divide(complex2);
      complex2.readResolve();
      complex0.cosh();
      Complex complex3 = Complex.NaN;
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex1.tan();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.nthRoot(1728);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-1429.20148));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = Complex.I;
      complex4.I.log();
      Complex complex5 = complex1.INF.pow(Double.POSITIVE_INFINITY);
      complex5.I.multiply(complex2);
      Complex complex6 = complex1.I.multiply(complex4);
      Complex complex7 = complex2.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.cos();
      complex1.readResolve();
      Complex complex9 = complex1.divide((-1429.20148));
      Complex complex10 = complex9.ONE.tanh();
      complex10.ONE.cos();
      complex10.divide(complex3);
      Complex complex11 = complex6.exp();
      complex11.ZERO.createComplex((-1429.20148), (-1429.20148));
      complex0.atan();
      complex0.NaN.tan();
      complex2.INF.divide(complex3);
      Complex complex12 = complex6.cosh();
      complex2.sin();
      complex2.ZERO.tan();
      Complex.valueOf((-243872.83460194644), (-243872.83460194644));
      Complex complex13 = complex1.divide((-1429.20148));
      complex13.add(complex2);
      Complex complex14 = complex12.divide(complex8);
      complex3.tanh();
      complex13.sin();
      complex14.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf((-3749.186915411));
      Complex complex6 = new Complex((-1336.521));
      Complex complex7 = complex1.divide(complex3);
      Complex complex8 = complex4.multiply(complex7);
      complex5.conjugate();
      Complex complex9 = new Complex(9.027136846700389, (-5453434.8031863915));
      complex9.divide(complex1);
      complex8.abs();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      complex0.ONE.hashCode();
      complex0.sin();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tanh();
      complex1.log();
      Complex complex4 = Complex.I;
      complex0.hashCode();
      Complex complex5 = Complex.valueOf(1.1795268640216787E-8, (-20.0));
      Complex complex6 = complex5.sinh();
      Object object0 = new Object();
      complex2.equals(complex3);
      complex6.negate();
      complex1.divide(1.1795268640216787E-8);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.readResolve();
      complex0.equals(complex1);
      complex0.tan();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.divide(complex0);
      complex2.toString();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.tanh();
      complex3.subtract((-2377.644135));
      complex1.tan();
      complex5.subtract(complex3);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.reciprocal();
      complex2.divide(complex0);
      complex2.toString();
      complex1.asin();
      Complex complex3 = Complex.I;
      complex3.equals(complex1);
      complex2.negate();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex1.tan();
      Complex.valueOf(0.07612881064414978);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.divide(complex1);
      complex2.toString();
      Complex complex3 = complex2.asin();
      complex0.tanh();
      complex3.subtract(6.07014616741277E-8);
      Complex complex4 = Complex.ZERO;
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.tanh();
      complex2.subtract((-1.0088898215431471E52));
      Complex complex5 = Complex.I;
      complex1.tan();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      Complex.valueOf(2.2868466674913266E-7, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow(complex0);
      complex3.tan();
      complex1.tan();
      complex1.asin();
      complex1.conjugate();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-2440.913), (-3.8207793300052055E-8));
      Complex complex3 = complex2.divide(complex1);
      complex1.toString();
      Complex complex4 = complex1.asin();
      complex2.acos();
      complex4.getArgument();
      Complex complex5 = Complex.I;
      complex2.pow(488.0);
      complex0.readResolve();
      complex0.toString();
      Complex complex6 = complex0.pow(1.637852737426943E-248);
      complex4.tanh();
      Complex complex7 = Complex.ONE;
      complex6.sin();
      complex4.getReal();
      Complex complex8 = Complex.ZERO;
      complex3.reciprocal();
      Complex complex9 = complex4.reciprocal();
      complex6.reciprocal();
      Complex.valueOf(3681.75, (-2440.913));
      Complex complex10 = complex9.add(488.0);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-3903.08588), (-3903.08588));
      Complex complex1 = complex0.sinh();
      complex0.ONE.sqrt1z();
      Complex complex2 = complex0.subtract(2.0);
      complex0.toString();
      Complex complex3 = complex1.multiply((-2036954998));
      Complex complex4 = Complex.I;
      complex1.equals(complex4);
      complex3.cos();
      Complex complex5 = Complex.valueOf((-3903.08588), 5.027435893355318E-4);
      Complex complex6 = complex5.reciprocal();
      complex4.nthRoot(1528);
      complex6.getField();
      complex4.sqrt1z();
      Complex complex7 = complex2.subtract((double) 0);
      complex7.cosh();
      complex5.log();
      Complex complex8 = complex5.cos();
      complex1.add(complex8);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 251.03227508744024;
      double double1 = 485.74;
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.cosh();
      complex0.getArgument();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.multiply(485.74);
      complex5.tanh();
      complex3.subtract(69.173436846);
      complex6.toString();
      complex6.multiply((-2036954998));
      Complex complex7 = complex3.acos();
      complex5.equals((Object) null);
      complex6.cos();
      complex7.reciprocal();
//      try { 
        complex4.nthRoot((-2036954998));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,036,954,998
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1989.08562), (-1989.08562));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(3622.765995);
      complex2.reciprocal();
      Complex complex3 = complex1.add((-2381.101));
      Complex complex4 = complex0.log();
      complex4.I.cosh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1495.0119948, (-3048.01779));
      Complex complex1 = complex0.cos();
      complex1.getField();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.conjugate();
      complex1.NaN.multiply(1495.0119948);
      Complex complex4 = complex2.reciprocal();
      complex4.I.subtract(complex1);
      double double0 = 449.46571709;
      Complex.valueOf((-2560.907196086), 449.46571709);
      complex3.ZERO.readResolve();
      Complex complex5 = complex2.tanh();
      complex5.multiply(1495.0119948);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.subtract(1495.0119948);
      complex7.I.toString();
      complex2.ONE.multiply((-2036954998));
      Complex complex8 = complex0.acos();
      complex6.equals("");
      Complex complex9 = complex8.cos();
      complex9.reciprocal();
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex1.toString();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.acos();
      complex4.getArgument();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.pow((-0.5113252103366475));
      Complex complex7 = Complex.INF;
      complex7.readResolve();
      complex3.toString();
      complex3.pow((-0.5113252103366475));
      complex4.tanh();
      Complex complex8 = Complex.ONE;
      complex8.ZERO.sin();
      complex4.getReal();
      Complex complex9 = Complex.ZERO;
      complex6.reciprocal();
      complex3.reciprocal();
      complex5.reciprocal();
      Complex.valueOf(3681.750375215892);
      Complex complex10 = complex7.add(3681.750375215892);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-938.18), (-1970.571989097107));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex((-1970.571989097107));
      complex2.pow(complex3);
      Complex complex4 = complex3.reciprocal();
      complex1.cosh();
      complex3.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.subtract(449.46571709);
      complex2.add((-34.57685292349174));
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex2.reciprocal();
      Complex.valueOf(1640.789);
      complex3.exp();
      complex3.sinh();
      complex6.pow(complex0);
      complex9.isInfinite();
      Complex complex11 = complex10.sqrt();
      complex9.getArgument();
      complex11.getReal();
      complex3.sin();
      complex5.getImaginary();
      complex8.multiply(1640.789);
      Complex complex12 = complex1.asin();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.I.toString();
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      complex3.hashCode();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = Complex.ZERO;
      complex6.subtract(complex5);
      Complex complex7 = Complex.I;
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-938.18), (-938.18));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      complex2.getArgument();
      Complex complex3 = complex0.pow((-1318.0075707885126));
      Complex complex4 = Complex.valueOf((-1318.0075707885126));
      complex4.toString();
      Complex complex5 = new Complex(6.283185307179586, (-20.0));
      Complex complex6 = complex5.pow(6.283185307179586);
      complex6.tanh();
      Complex complex7 = Complex.ONE;
      complex3.getReal();
      Complex complex8 = Complex.ZERO;
      complex2.reciprocal();
      complex6.reciprocal();
      complex3.reciprocal();
      Complex.valueOf(1460.3835469319856);
      complex6.add(563.623);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.pow(complex1);
      complex2.reciprocal();
      Complex complex3 = complex0.cosh();
      complex0.getArgument();
      complex2.subtract(187.8002876032);
      Complex complex4 = complex0.add(3.1149346370027763E33);
      Complex complex5 = complex3.conjugate();
      complex3.reciprocal();
      complex2.cosh();
      complex2.reciprocal();
      Complex complex6 = Complex.valueOf(187.8002876032);
      Complex complex7 = complex0.exp();
      complex3.getArgument();
      complex0.sinh();
      Complex complex8 = complex4.pow(complex5);
      complex7.isInfinite();
      complex2.sqrt();
      complex8.getArgument();
      complex4.getReal();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(485.74, 485.74);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.pow(complex1);
      complex2.reciprocal();
      Complex complex3 = complex0.cosh();
      complex0.getArgument();
      Complex complex4 = complex2.subtract(187.8002876032);
      complex0.add(3.1149346370027763E33);
      complex3.conjugate();
      complex3.reciprocal();
      Complex complex5 = complex2.cosh();
      complex1.reciprocal();
      Complex.valueOf(7.316033240396569E150);
      complex4.subtract(1.1005142643914475E79);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.exp();
      complex3.getArgument();
      Complex complex4 = complex0.sinh();
      complex2.pow(complex3);
      complex3.isInfinite();
      complex2.sqrt();
      complex4.getArgument();
      complex0.getReal();
      complex1.sin();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1713.1575689455635);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex2.sinh();
      Complex complex3 = new Complex(1.436124698987184E-17, 251.03227508744024);
      complex3.atan();
      complex3.exp();
      complex0.add((-944.316497646));
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex0.add(complex1);
      complex0.I.hashCode();
      Complex complex3 = complex2.NaN.reciprocal();
      complex2.INF.acos();
      complex2.I.asin();
      Complex complex4 = complex1.INF.subtract(1.7768193998956956);
      Complex complex5 = complex2.multiply((-2.8786263916116364E-10));
      Complex complex6 = complex5.ONE.asin();
      complex6.ONE.add((-2.8786263916116364E-10));
      Complex complex7 = complex0.cos();
      complex7.abs();
      Complex complex8 = complex1.createComplex(20.0, (-0.07678714574470348));
      complex7.ZERO.negate();
      Complex complex9 = complex8.ONE.multiply(0.40808206181339196);
      Complex.valueOf(0.34577590227127075);
      complex9.ZERO.cos();
      Complex complex10 = complex3.INF.sinh();
      complex5.add(complex4);
      complex3.log();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex11.ONE.pow(complex10);
      complex12.ZERO.conjugate();
      complex4.readResolve();
      complex12.sqrt();
      complex7.subtract(283.9700629097);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      complex0.I.sqrt();
      complex0.toString();
      complex0.subtract(251.03227508744024);
      Complex complex1 = Complex.I;
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.pow(complex1);
      complex2.reciprocal();
      Complex complex3 = complex0.cosh();
      complex0.getArgument();
      Complex complex4 = complex2.subtract(187.8002876032);
      Complex complex5 = complex0.add(3.1149346370027763E33);
      Complex complex6 = complex3.conjugate();
      complex3.reciprocal();
      complex2.cosh();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = Complex.valueOf(7.316033240396569E150);
      complex5.exp();
      complex4.getArgument();
      Complex complex9 = complex7.sinh();
      complex8.ZERO.pow(complex2);
      complex9.isInfinite();
      complex6.sqrt();
      complex7.getArgument();
      complex8.getReal();
      complex3.sin();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(995.62);
      complex0.tanh();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract((-2234.5401134031936));
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex0.ZERO.divide((-2234.5401134031936));
      complex0.nthRoot(1379);
      Complex complex5 = complex0.NaN.add(complex3);
      complex5.ZERO.tan();
      complex5.I.cos();
      complex4.isNaN();
      Complex complex6 = complex1.sinh();
      complex0.add(complex4);
      Complex complex7 = complex6.sinh();
      complex2.atan();
      complex7.exp();
      complex4.add((-2234.5401134031936));
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.add((-231.773064));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sinh();
      complex1.atan();
      Complex complex3 = new Complex(11929.324772435888, 11929.324772435888);
      complex3.exp();
      complex2.add((-1356.7010461585028));
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      complex0.I.sqrt();
      complex0.toString();
      Complex complex1 = Complex.valueOf(251.03227508744024, 69.173436846);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.negate();
      complex3.nthRoot(1215);
      complex2.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-3903.08588), (-3903.08588));
      Complex complex1 = new Complex(5964.6624271, 947.42891969);
      complex1.hashCode();
      Complex complex2 = complex0.subtract(5964.6624271);
      complex0.subtract(complex2);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.pow(complex2);
      complex1.acos();
      Complex complex5 = complex4.acos();
      complex4.negate();
      complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.I.toString();
      Complex complex3 = complex2.reciprocal();
      complex1.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, 1.2408792972564697);
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex4.atan();
      Complex complex7 = Complex.INF;
      complex7.toString();
      Complex complex8 = complex4.negate();
      complex7.pow(complex3);
      Complex complex9 = new Complex(0.0, 0.0);
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = Complex.valueOf(1.2408792972564697, 1.2408792972564697);
      complex8.multiply(complex11);
      Complex complex12 = complex4.cosh();
      complex5.getArgument();
      complex5.subtract(Double.NaN);
      complex9.add(0.40089738368988037);
      complex8.conjugate();
      Complex complex13 = complex5.reciprocal();
      complex9.I.readResolve();
      complex10.cosh();
      complex2.reciprocal();
      Complex.valueOf(840.347429074);
      complex1.exp();
      complex12.getArgument();
      complex1.sinh();
      complex6.isInfinite();
      complex9.sqrt();
      complex10.getArgument();
      complex13.getReal();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1.43695591408832E-9);
      Complex complex2 = Complex.valueOf(6.283185307179586, 0.34577590227127075);
      complex0.pow(complex2);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.cosh();
      complex4.getArgument();
      Complex complex5 = Complex.NaN;
      complex0.add(0.34577590227127075);
      complex3.conjugate();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.cosh();
      complex2.reciprocal();
      Complex.valueOf(2920.541696406381);
      Complex.valueOf(1.43695591408832E-9);
      complex2.getArgument();
      complex3.sinh();
      complex7.isInfinite();
      Complex complex8 = complex1.sqrt();
      complex5.getArgument();
      complex8.getReal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.NaN.subtract((-2234.5401134031936));
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex2.ZERO.subtract(complex0);
      Complex complex5 = complex0.ZERO.divide((-2234.5401134031936));
      Complex complex6 = complex1.cosh();
      complex6.getArgument();
      Complex complex7 = complex4.divide(complex2);
      complex7.getArgument();
      complex3.isNaN();
      Complex complex8 = complex7.sinh();
      complex8.ZERO.atan();
      Complex complex9 = complex1.add(complex5);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex10.atan();
      complex11.exp();
      Complex complex12 = Complex.valueOf(1.0487601931965087E175, (-2674.132));
      Complex complex13 = complex12.add(Double.NaN);
      complex6.toString();
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(8.98570720774568E-8, 8.98570720774568E-8);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(6.07014616741277E-8);
      Complex complex4 = complex3.add(complex0);
      complex0.sinh();
      complex2.atan();
      complex4.exp();
      complex1.add(5309.728);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.subtract(122.6597414);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.NaN.sinh();
      complex3.NaN.nthRoot(541);
      complex3.I.pow(complex2);
      complex2.ONE.subtract(complex0);
      Complex complex4 = complex1.ONE.cosh();
      complex0.I.getArgument();
      Complex complex5 = complex1.divide(complex0);
      complex5.INF.getArgument();
      complex0.isNaN();
      Complex complex6 = complex4.NaN.sinh();
      complex6.subtract(1.5707963267948966);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      Complex.valueOf(2.66473346755447E-4, 251.03227508744024);
      Complex complex1 = complex0.I.sqrt();
      complex0.toString();
      Complex complex2 = Complex.I;
      complex0.ONE.divide(complex2);
      Complex complex3 = complex0.negate();
      complex2.getReal();
      Complex complex4 = complex3.reciprocal();
      complex4.reciprocal();
      Complex complex5 = Complex.NaN;
      complex1.add(1.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.I.pow(1379.139);
      Complex complex2 = Complex.valueOf(1379.139, 1379.139);
      Complex complex3 = Complex.valueOf(0.0, 1379.139);
      Complex complex4 = complex3.ZERO.subtract(1379.139);
      complex4.NaN.sin();
      Complex complex5 = complex0.ZERO.exp();
      Complex.valueOf(1379.139, 1379.139);
      Complex complex6 = complex0.log();
      complex6.abs();
      complex5.isNaN();
      complex6.getField();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex6.exp();
      complex8.NaN.negate();
      complex1.ONE.asin();
      complex8.sqrt1z();
      complex1.sqrt1z();
      complex2.isNaN();
      Complex complex9 = complex2.cosh();
      complex6.sqrt();
      Complex.valueOf(1.5707963267948966);
      complex7.nthRoot(1);
      complex9.cos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.ONE.divide((-870.8));
      Complex complex3 = complex0.ONE.pow((double) (-541));
      complex2.I.log();
      Complex complex4 = complex0.multiply((-541));
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex2.subtract((-870.8));
      complex6.pow(2.380207061767578);
      complex0.ZERO.multiply(complex4);
      complex3.NaN.subtract(0.0);
      Complex complex7 = complex0.ZERO.asin();
      complex7.INF.subtract((-870.8));
      complex5.acos();
      complex0.readResolve();
      complex5.pow((-870.8));
      complex0.subtract(complex3);
      complex0.toString();
      complex5.cos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      complex0.nthRoot(17);
      complex1.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = Complex.valueOf((double) 17);
      Complex complex5 = complex1.createComplex((-570.28701570929), (-570.28701570929));
      Complex complex6 = complex5.add(complex1);
      complex6.sqrt();
      Complex complex7 = complex3.createComplex(17, Double.NaN);
      complex7.I.sin();
      Complex complex8 = complex5.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.ONE.conjugate();
      Complex complex10 = complex0.add(complex7);
      complex10.INF.cosh();
      complex5.ZERO.multiply(complex8);
      complex5.ZERO.negate();
      complex4.cosh();
      complex9.ZERO.log();
      complex6.subtract(0.0);
      complex2.nthRoot(17);
      complex2.subtract(complex6);
      Complex complex11 = complex4.exp();
      Complex complex12 = complex11.subtract(Double.NaN);
      complex9.multiply(1875.8710919079422);
      complex1.getReal();
      complex7.NaN.subtract(complex12);
      complex7.multiply(2388.719705);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(710.5622712302, 1472.088952827068);
      complex0.INF.tan();
      Complex complex1 = complex0.sinh();
      complex1.tanh();
      Complex complex2 = complex1.INF.createComplex(2705.08658052, 3233.460905641);
      complex2.ONE.pow(complex0);
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.getArgument();
      Complex complex4 = Complex.valueOf(1472.088952827068, (-20.0));
      complex4.hashCode();
      complex3.NaN.subtract(474.2955491);
      complex4.I.toString();
      complex0.subtract(complex4);
      complex2.ONE.negate();
      Complex complex5 = complex3.multiply(710.5622712302);
      complex5.ONE.sqrt();
      Complex complex6 = complex2.sin();
      complex6.ZERO.abs();
      Complex complex7 = complex6.ZERO.subtract(complex2);
      complex7.INF.pow((-372.067877256891));
      complex7.I.reciprocal();
//      try { 
        complex1.nthRoot((-267));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -267
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.ONE.sinh();
      complex0.I.toString();
      Complex complex5 = complex4.NaN.cosh();
      complex5.I.asin();
      complex5.ZERO.readResolve();
      Complex complex6 = complex0.I.subtract(complex1);
      Complex complex7 = complex5.INF.sin();
      complex7.ZERO.toString();
      complex7.ZERO.getArgument();
      Complex complex8 = complex0.I.acos();
      complex4.INF.add((-1636.2));
      complex0.subtract(complex2);
      Complex complex9 = complex0.multiply(1147.9);
      Complex complex10 = complex9.NaN.reciprocal();
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex9.NaN.tan();
      complex10.nthRoot(1);
      Complex complex13 = complex11.I.createComplex(1147.9, 1492.1926252626051);
      complex11.pow(775.2);
      complex2.I.exp();
      complex8.getReal();
      complex13.getReal();
      complex6.sinh();
      complex4.readResolve();
      complex1.multiply(1492.1926252626051);
      complex3.subtract(3372.241374);
      complex4.getArgument();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(508.9, (-1.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.readResolve();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex1.INF.pow(508.9);
      Complex complex6 = complex5.acos();
      complex6.nthRoot(1);
      Complex complex7 = complex3.ONE.cos();
      complex7.ZERO.multiply(complex1);
      Object object0 = new Object();
      complex1.equals(object0);
      complex4.tan();
      complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-938.18), (-938.18));
      complex0.hashCode();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.pow(complex3);
      complex4.acos();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.NaN.subtract((-2234.5401134031936));
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex2.ZERO.subtract(complex0);
      complex0.ZERO.divide((-2234.5401134031936));
      complex1.nthRoot(1379);
      Complex complex5 = complex0.NaN.add(complex4);
      complex5.I.cos();
      Complex complex6 = complex1.I.tanh();
      complex0.getReal();
      Complex complex7 = complex6.reciprocal();
      complex7.ONE.reciprocal();
      Complex.valueOf(574.63271870088);
      complex3.add((-2234.5401134031936));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-1989.08562), (-1989.08562));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4138.36437745471, 4138.36437745471);
      Complex complex1 = complex0.createComplex((-1033.42478347522), 4138.36437745471);
      complex1.INF.nthRoot(1091);
      complex1.I.add((-4.996854125490041E297));
      Complex complex2 = complex0.conjugate();
      complex0.atan();
      Complex complex3 = complex0.createComplex((-2226.934319579924), 565.8125);
      complex3.pow(0.0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(complex0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.atan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(1629);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt1z();
      complex1.NaN.pow(0.0);
      complex2.NaN.hashCode();
      Complex complex3 = complex2.NaN.createComplex(1.505582332611084, 1.505582332611084);
      Complex.valueOf(1143.08418705, 1.505582332611084);
      Complex complex4 = complex2.NaN.negate();
      complex4.ZERO.multiply(complex1);
      complex3.readResolve();
      complex2.hashCode();
      complex1.isNaN();
      complex0.add(0.0);
      Complex complex5 = complex1.sqrt();
      complex5.ZERO.getArgument();
      complex0.sqrt();
      Complex complex6 = complex1.sin();
//      try { 
        complex6.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cos();
      complex1.NaN.sinh();
      complex0.I.nthRoot(37);
      Complex complex2 = complex0.INF.pow(complex1);
//      try { 
        complex2.I.nthRoot((-1085));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,085
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-3903.08588), (-3903.08588));
      Complex complex1 = complex0.sinh();
      complex0.ONE.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex0.multiply(984);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.ONE.negate();
      complex7.I.multiply(984);
      complex6.multiply(complex1);
      complex5.sqrt1z();
      complex3.isInfinite();
      complex4.getArgument();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-2727.2488848906));
      double double0 = (-1.0);
      Complex complex1 = complex0.I.subtract((-1.0));
      Complex complex2 = complex1.cosh();
      complex1.ONE.subtract((-2727.2488848906));
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex.valueOf((-888.5900368724432), (-888.5900368724432));
      complex0.getReal();
      Complex complex4 = complex0.reciprocal();
      complex2.ZERO.multiply(complex0);
      complex4.ZERO.toString();
      complex3.INF.subtract(complex2);
//      try { 
        complex1.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.I.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.acos();
      complex3.INF.getArgument();
      complex3.ONE.pow(0.7853981633974483);
      complex3.readResolve();
      complex0.toString();
      complex0.pow(0.7853981633974483);
      Complex complex5 = complex0.sin();
      complex3.NaN.exp();
      complex5.I.subtract(0.7853981633974483);
      complex5.ONE.divide(complex0);
      complex3.subtract(complex4);
      complex0.multiply((-65));
      complex5.divide((double) (-65));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-524.17), (-524.17));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-605.02705));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.toString();
      Complex complex3 = complex0.pow((-605.02705));
      Complex complex4 = complex0.ONE.reciprocal();
      complex4.NaN.reciprocal();
      complex4.INF.subtract(complex0);
      complex3.INF.atan();
      complex1.toString();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex3.reciprocal();
      complex6.cosh();
      complex6.getArgument();
      Complex complex8 = complex2.subtract(2920.541696406381);
      Complex complex9 = complex8.INF.add((-605.02705));
      Complex complex10 = complex8.INF.conjugate();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex11.ONE.cosh();
      complex2.reciprocal();
      Complex.valueOf(1.4198782892306878E-112);
      complex1.exp();
      complex9.getArgument();
      Complex complex13 = complex10.sinh();
      complex13.isInfinite();
      Complex complex14 = complex7.sqrt();
      complex7.getArgument();
      complex14.getReal();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex1 = complex0.ZERO.tan();
      complex0.nthRoot(2305);
      Complex complex2 = complex0.createComplex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.ZERO.acos();
      complex2.ONE.getField();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.ZERO.add(6.283185307179586);
      complex5.ONE.divide(complex0);
      complex6.INF.multiply((-1445));
      complex5.ZERO.getField();
      Complex complex7 = complex5.tan();
      complex7.add(0.0);
      Complex complex8 = complex5.sinh();
      complex8.divide(6.283185307179586);
      complex6.sqrt1z();
      complex7.I.asin();
      complex8.multiply(0.0);
      complex7.cos();
      complex2.isNaN();
      complex3.sqrt1z();
      complex0.subtract((-1.0));
      complex4.getArgument();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.436867892742157;
      Complex complex0 = new Complex(0.436867892742157);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.log();
      complex0.getArgument();
      complex3.NaN.multiply(0.0);
      Complex complex4 = complex2.ONE.tanh();
      complex4.multiply(complex1);
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.abs();
      complex6.ONE.subtract(1.0);
//      try { 
        complex7.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.subtract((-2946.431109131526));
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.multiply(4990);
      Complex complex4 = complex3.subtract(complex2);
      complex4.atan();
      Complex complex5 = Complex.valueOf((double) 4990, (-2946.431109131526));
      Complex complex6 = Complex.NaN;
      complex2.tan();
      complex5.ONE.reciprocal();
      complex5.subtract(Double.NaN);
      complex5.getField();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2218, Double.NaN);
      Complex complex1 = complex0.log();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(536.8626707566882, (-1743.2));
      Complex.valueOf(536.8626707566882, 2024.616);
      Complex complex1 = Complex.ZERO;
      complex1.ONE.sqrt();
      complex0.add(complex1);
      complex0.ZERO.getField();
      complex0.isInfinite();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.I.exp();
      complex0.hashCode();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.I.reciprocal();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.INF.divide(complex2);
      Complex complex6 = complex5.INF.tan();
      complex4.ONE.getArgument();
      complex6.ONE.asin();
      Complex complex7 = complex6.NaN.createComplex(0.0, (-2499.940695670679));
      complex7.NaN.atan();
      Complex.valueOf((-2645.0));
      complex0.ZERO.cosh();
      complex0.I.getArgument();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      Complex complex8 = complex2.multiply((-1));
      complex0.add((-817.895685112234));
      complex0.readResolve();
      Complex complex9 = complex8.multiply((-2803));
      complex9.toString();
      complex1.multiply(1);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.subtract(122.6597414);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.NaN.sinh();
      complex3.I.pow(complex2);
      complex2.ONE.subtract(complex0);
      Complex complex4 = complex1.ONE.cosh();
      complex0.I.getArgument();
      Complex complex5 = complex1.divide(complex0);
      complex5.INF.getArgument();
      complex0.isNaN();
      complex4.NaN.sinh();
      complex2.add(complex5);
      Complex complex6 = complex0.sinh();
      complex4.atan();
      complex1.exp();
      complex6.add(0.7853981633974483);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = (Complex)complex2.readResolve();
      complex3.isNaN();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.tan();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(1.0500397682189941);
      complex1.NaN.getArgument();
      complex0.ZERO.cosh();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.I.cosh();
      complex0.getArgument();
      Complex complex3 = complex0.tan();
      complex3.NaN.getArgument();
      complex2.I.subtract(1176.12524722598);
      complex3.readResolve();
      Complex complex4 = complex0.log();
      complex3.NaN.multiply((-1757));
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex3.sin();
      complex6.I.divide(0.0);
      complex6.ONE.sqrt1z();
      Complex.valueOf(0.7853981633974483);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex5.log();
      complex8.I.getArgument();
      complex0.atan();
      complex7.getArgument();
      complex3.isInfinite();
      complex1.isNaN();
      Complex complex9 = complex1.sinh();
      complex5.multiply(1.5707963267948966);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.tan();
      Complex.valueOf((-2.0));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1440);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.acos();
      complex2.NaN.subtract(0.0);
      complex0.pow(complex1);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.subtract(6.07014616741277E-8);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.INF.subtract(complex0);
      complex1.ZERO.toString();
      complex0.divide(0.0);
//      try { 
        complex0.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex1.divide((-1175.13984786771));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.subtract(complex0);
      complex1.getArgument();
      complex1.log();
      complex1.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(complex0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(31);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.add((-231.773064));
      complex0.log();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(470.29954832);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.asin();
      complex0.getArgument();
      complex1.NaN.readResolve();
      Complex.valueOf(20.0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.add(470.29954832);
      Complex complex5 = complex4.sin();
      complex4.equals(complex1);
      complex4.INF.sin();
      Complex complex6 = complex2.add(0.0);
      complex6.hashCode();
      complex0.subtract(complex5);
      complex5.exp();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(520);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      complex1.INF.abs();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex1.I.createComplex(0.0, 0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.I.pow(0.0);
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex6.ZERO.subtract(0.0);
      complex1.getField();
      complex3.tanh();
      Complex complex8 = complex2.sqrt();
      complex4.getArgument();
      complex8.equals(")");
      Complex complex9 = complex7.ONE.tanh();
      complex7.negate();
      complex0.getArgument();
      complex7.isInfinite();
      complex3.cosh();
      complex8.negate();
      complex9.nthRoot(3106);
      complex3.getField();
      Complex.valueOf(0.0, 0.7853981633974483);
      complex6.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.negate();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.nthRoot((-4388));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,388
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex.valueOf(485.74, 251.03227508744024);
      Complex complex0 = Complex.valueOf(419.31, 419.31);
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals((Object) null);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(2.0927273441137872);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.tanh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = new Complex((-1989.08562), (-1989.08562));
      complex0.divide((-1989.08562));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add(20.0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN, Double.NaN);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      complex1.conjugate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.tan();
      complex0.negate();
      complex2.divide(complex3);
      Complex complex4 = complex2.multiply(complex1);
      complex1.multiply(0);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex1.sqrt();
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.ZERO;
      Object object0 = complex4.readResolve();
      complex2.equals(object0);
      complex3.multiply(17);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.valueOf(251.03227508744024, 485.74);
      complex0.I.sqrt();
      complex0.toString();
      Complex complex1 = Complex.valueOf(0.0, 69.173436846);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.negate();
      complex3.nthRoot(1215);
      complex2.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, Double.NaN);
      Complex complex1 = new Complex(259.122928932938, 259.122928932938);
      complex1.ONE.toString();
      complex1.ONE.pow(Double.NaN);
      complex0.nthRoot(1665);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1615.7623957827639);
      Complex complex2 = complex0.add(complex1);
      complex0.equals(complex1);
      Complex complex3 = complex2.exp();
      complex3.ZERO.pow(1615.7623957827639);
      Complex complex4 = complex2.exp();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.conjugate();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.nthRoot((-1870));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,870
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1301);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.cosh();
      complex0.ZERO.multiply((-3963));
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex3.ONE.getField();
      complex1.getArgument();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = complex1.atan();
      complex4.add((double) (-3963));
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(6.403477383195494E-34);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = new Complex((-1.1511990258493999E-8), (-1.1511990258493999E-8));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sin();
      complex2.hashCode();
      Complex complex3 = complex1.subtract((-2508.11));
      complex3.tanh();
      Complex complex4 = Complex.INF;
      complex4.log();
      complex2.hashCode();
      complex2.sinh();
      complex4.nthRoot(17);
      Complex complex5 = Complex.I;
      complex5.equals("QaZ2?W[ev;w0/C4On");
      complex3.negate();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.equals((Object) null);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.add(complex1);
      complex2.INF.sin();
      complex2.NaN.toString();
      complex2.INF.getField();
      complex2.createComplex(1.2435453481209945E-123, 1.2435453481209945E-123);
      Complex complex3 = complex1.conjugate();
      complex1.isNaN();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex1.add(0.0);
      Complex complex7 = complex1.sqrt();
      complex7.sqrt1z();
      complex1.getArgument();
      Complex complex8 = Complex.valueOf(0.0, Double.NaN);
      Complex.valueOf(1165.21573, (-1494.6398066));
      complex5.subtract(Double.NaN);
      complex6.isNaN();
      Complex complex9 = new Complex(7.956744351476403E-106, 7.956744351476403E-106);
      complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.ZERO.sin();
      complex1.hashCode();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex3.log();
      complex1.hashCode();
      complex3.sinh();
      complex1.nthRoot(17);
      complex6.equals(complex1);
      complex5.negate();
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.toString();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf(-0.0, -0.0);
      Complex complex5 = complex4.acos();
      complex0.getArgument();
      complex3.pow(-0.0);
      complex4.readResolve();
      complex4.toString();
      Complex complex6 = complex5.pow(420.74266);
      complex1.tanh();
      Complex complex7 = Complex.ONE;
      complex6.getReal();
      Complex complex8 = Complex.ZERO;
      complex3.reciprocal();
      complex8.reciprocal();
      Complex complex9 = complex7.reciprocal();
      complex9.I.sqrt();
      Complex.valueOf(Double.NaN);
      complex4.add(3.2809434163310125E82);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.NaN.tanh();
      complex0.isInfinite();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.tanh();
      complex2.ONE.toString();
      Complex complex4 = complex3.ZERO.acos();
      complex4.ZERO.exp();
      Complex complex5 = complex4.ONE.subtract(complex1);
      complex5.NaN.pow(complex4);
      Complex complex6 = complex3.INF.divide((-1430.971127));
      complex6.INF.getField();
      complex6.pow((-20.0));
      complex3.reciprocal();
      complex3.add(complex0);
      complex0.pow(6.283185307179586);
      complex3.isInfinite();
      complex6.hashCode();
      complex0.abs();
      complex2.isInfinite();
      complex4.cosh();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 2138962978;
      // Undeclared exception!
      complex0.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = new Complex((-1.1511990258493999E-8), (-1.1511990258493999E-8));
      Complex complex1 = Complex.valueOf((-2505.052713939), (-2505.052713939));
      complex0.getField();
      complex0.getArgument();
      complex0.multiply(0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.667695552814763E162);
      Complex complex1 = complex0.cos();
      complex1.INF.toString();
      complex0.getImaginary();
      Complex complex2 = complex0.createComplex((-71.78), 2.667695552814763E162);
      complex2.getArgument();
      complex2.readResolve();
      complex0.INF.pow(complex1);
      complex0.exp();
      Complex complex3 = complex1.acos();
      complex3.NaN.abs();
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf(2.667695552814763E162, (-8.966500602352001E-8));
      Complex complex6 = complex5.ZERO.cosh();
      complex6.NaN.negate();
      complex0.getReal();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      complex1.ONE.cosh();
      Complex complex2 = complex0.NaN.divide(0.0);
      complex0.equals((Object) null);
      complex2.sin();
      Complex complex3 = complex0.I.exp();
      complex3.I.conjugate();
      complex3.ZERO.toString();
      Complex complex4 = complex0.subtract(0.0);
      complex4.ONE.log();
      complex2.getArgument();
      Complex complex5 = complex3.tanh();
      complex2.equals("(0.0, 0.0)");
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      complex0.divide(0.0);
      Complex complex2 = complex1.sqrt();
      complex2.readResolve();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(435.9807);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      complex2.NaN.subtract(6.07014616741277E-8);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex4.INF.toString();
      Complex complex6 = complex4.ONE.tanh();
      complex6.add(0.0);
      complex5.getField();
      complex4.NaN.getField();
      Complex complex7 = complex3.INF.asin();
      complex0.isInfinite();
      Complex complex8 = complex0.I.subtract(complex5);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex1.hashCode();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.subtract(0.0);
      complex10.INF.add(complex6);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex6.getReal(), 0.01);
      
      double double0 = complex3.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex11 = complex9.sin();
      complex11.I.conjugate();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex10));
      
      Complex.valueOf(0.0);
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex12.NaN.pow(0.0);
      assertSame(complex13, complex7);
      
      List<Complex> list0 = complex12.nthRoot(1);
      assertTrue(list0.contains(complex13));
      
      Complex complex14 = complex2.multiply((-507.489885182));
      Complex complex15 = complex4.conjugate();
      assertEquals(Double.NEGATIVE_INFINITY, complex15.getImaginary(), 0.01);
      
      complex14.asin();
      Complex complex16 = complex3.subtract(complex12);
      assertSame(complex16, complex2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2150.3564181));
      assertEquals((-2150.3564181), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1122.540711));
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Complex complex0 = Complex.valueOf(82.463997);
      Complex complex1 = complex0.add(82.463997);
      assertEquals(164.927994, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1.43695591408832E-9);
      Complex complex2 = complex0.ONE.conjugate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.I.multiply(0.0);
      assertEquals(1.0000000014369559, complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex4 = complex0.exp();
      boolean boolean0 = complex4.isInfinite();
      assertEquals(2.718281828459045, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }
}
