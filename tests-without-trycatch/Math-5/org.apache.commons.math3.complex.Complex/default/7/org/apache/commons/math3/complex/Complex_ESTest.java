/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:44:43 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(20.0, 1462.32475);
      complex0.subtract(6.283185307179586);
      Complex complex1 = new Complex((-4801.0065079), 20.0);
      complex1.tan();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0));
      complex1.ONE.multiply((-20.0));
      Complex complex2 = complex1.tanh();
      complex2.sqrt1z();
      Complex complex3 = complex1.atan();
      complex3.multiply((-20.0));
      Complex complex4 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5707963267948513), 2.3900289095512176E-221);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cosh();
      complex0.cos();
      Complex complex3 = new Complex(2.3900289095512176E-221, 1299.0706);
      complex0.tan();
      complex3.pow((-20.0));
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = new Complex(114.748846527);
      complex8.multiply(complex4);
      complex2.asin();
      Complex complex9 = Complex.NaN;
      complex7.tanh();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.NaN.divide(1.6063569876284005E-8);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.I.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(1.2917117341231647E-8, 1.2917117341231647E-8);
      complex0.add(Double.NaN);
      Complex complex1 = complex0.sqrt1z();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.017641481245025E7));
      Complex.valueOf((-1.017641481245025E7));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.asin();
      complex2.asin();
      Complex complex4 = complex0.conjugate();
      complex4.sqrt();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-6.414337408955734E-8), 1188.88437398803);
      Complex complex1 = Complex.valueOf(1188.88437398803, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.pow(1188.88437398803);
      Complex complex3 = Complex.valueOf(1.1189396031849523);
      Complex complex4 = Complex.INF;
      complex4.NaN.acos();
      Complex complex5 = complex2.sin();
      Complex complex6 = Complex.I;
      complex5.tan();
      Complex complex7 = complex0.multiply((-3280.6907206289548));
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.add(2.0);
      complex9.multiply(complex0);
      complex9.subtract(complex3);
      complex8.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2217.238916868348), 1.4674003927811197);
      Complex complex2 = complex0.subtract(complex1);
      complex1.pow(complex2);
      Complex complex3 = new Complex(1.4674003927811197, (-20.0));
      complex3.tan();
      Complex complex4 = new Complex(4.539993096841499E-5);
//      try { 
        complex2.nthRoot((-852));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -852
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2220.544323631231, 2220.544323631231);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.acos();
      complex2.INF.atan();
      complex2.NaN.toString();
      complex0.I.cos();
      complex0.INF.abs();
      Complex complex3 = Complex.valueOf(2220.544323631231, 20.0);
      Complex complex4 = Complex.valueOf((-1.0), 20.0);
      Complex complex5 = complex4.cosh();
      complex5.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.negate();
      complex6.ONE.readResolve();
      complex3.ZERO.add(complex1);
      complex6.ZERO.nthRoot(221);
      Complex complex7 = Complex.valueOf(2220.544323631231, 2129.418516684417);
      Complex complex8 = complex1.sqrt();
      complex8.ZERO.getArgument();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.I.atan();
      complex7.asin();
      Complex complex11 = complex7.sqrt();
      complex10.add(complex6);
      complex10.createComplex(Double.POSITIVE_INFINITY, (-3281.0716));
      Complex complex12 = complex4.pow(complex9);
      complex12.NaN.add(complex11);
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex13.INF.add(1.017641481245025E7);
      complex6.sqrt1z();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.158530500130718E-9, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.reciprocal();
      complex2.I.sqrt();
      complex2.I.tan();
      complex1.ONE.divide(complex0);
      Complex complex3 = complex0.INF.add(complex1);
      complex0.pow(0.9999999870828826);
      Complex.valueOf(2.510812179067931E-272, 9.158530500130718E-9);
      complex0.I.conjugate();
      Complex complex4 = complex3.pow(2.370927333831787);
      complex4.I.multiply(370);
      Complex complex5 = complex0.multiply(415);
      complex5.acos();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      complex0.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf((-453.5638), 6.562319473965767E278);
      complex3.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.sin();
      Complex complex1 = complex0.multiply(37);
      complex0.INF.readResolve();
      Complex.valueOf((-2.3085653185818848E-7), (double) 37);
      Complex complex2 = Complex.valueOf((-2.3085653185818848E-7));
      complex1.add(complex2);
      complex1.multiply((-3351.7508));
      Complex complex3 = new Complex((-9.54468158713835E25), 175.0);
      Complex complex4 = complex3.asin();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.cos();
      complex2.INF.pow(complex1);
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex1.I.negate();
      Complex complex5 = complex4.I.subtract(complex3);
      complex1.toString();
      Complex complex6 = complex0.ZERO.sin();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.multiply(1);
      Complex complex10 = Complex.valueOf((-1871.211));
      Complex complex11 = complex10.NaN.asin();
      Complex complex12 = complex10.INF.createComplex(2546.53781154577, (-1162.505));
      complex12.NaN.tan();
      Complex complex13 = complex8.tan();
      complex6.NaN.createComplex(Double.NaN, (-1477.72780961546));
      Complex.valueOf(169.35);
      complex9.divide(complex7);
      complex13.add(2160.1676234532);
      complex5.readResolve();
      complex5.cos();
      complex11.negate();
      complex3.pow((-2791.7933630526677));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008997);
      complex0.NaN.getField();
      complex0.INF.add(complex0);
      Complex complex1 = complex0.atan();
      complex0.add(617.1888008997);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = new Complex(Double.NaN, 1.0);
      complex0.multiply(complex3);
      complex2.exp();
      Complex complex4 = new Complex(Double.NaN);
      complex4.tanh();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008997);
      complex0.getField();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      complex1.readResolve();
      Complex complex3 = Complex.ONE;
      complex3.toString();
      Complex complex4 = Complex.I;
      complex3.sqrt();
      Complex complex5 = new Complex(3346.0);
      complex2.equals(complex0);
      complex3.subtract(1218.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1795.915758547), 97.7);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = new Complex(1.5985074027507769E7);
      complex0.equals(complex2);
      Complex complex4 = Complex.I;
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.5985074027507769E7);
      complex0.equals(complex0);
      Complex complex2 = Complex.I;
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.017641481245025E7);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.017641481245025E7, 1.1844011798406507E244);
      Complex complex3 = complex1.subtract(complex2);
      complex1.tan();
      Complex complex4 = new Complex(1.017641481245025E7);
      Complex complex5 = Complex.I;
      complex2.sqrt();
      Complex complex6 = new Complex(3876.111197314503);
      Complex complex7 = new Complex((-1779.28243293));
      complex7.equals(complex5);
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex3.abs();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.02475, (-6.414337408955734E-8));
      Complex complex1 = complex0.conjugate();
      complex1.add(complex0);
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(1695.9889588344, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.pow((-6.414337408955734E-8));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex3.divide(complex5);
      complex2.getField();
      complex6.getField();
      Complex complex9 = complex4.reciprocal();
      complex7.conjugate();
      complex9.tanh();
      complex9.atan();
      complex3.log();
      complex8.readResolve();
      complex4.divide(1695.9889588344);
      complex1.readResolve();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2173.3), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3660.65649848), 1.3017010688781738);
      Complex complex1 = complex0.sqrt();
      complex1.ONE.acos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.ZERO.cos();
      complex2.ONE.getArgument();
      complex0.NaN.getField();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.sinh();
      complex0.NaN.getArgument();
      complex5.reciprocal();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex3.sqrt1z();
      complex7.ONE.multiply((-3660.65649848));
      complex5.divide(complex6);
      Complex complex8 = complex4.negate();
      complex8.NaN.getField();
      complex8.ONE.tanh();
      Complex complex9 = complex6.divide(complex2);
      Complex complex10 = complex1.atan();
      complex10.ZERO.acos();
      complex2.I.toString();
      Complex complex11 = Complex.valueOf(0.0, (-2787.617280879052));
      complex11.divide(complex9);
      Complex.valueOf(Double.NaN, 0.48670899868011475);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-3502.377681271659), (-3502.377681271659));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      complex1.add((-3502.377681271659));
      Complex complex3 = complex0.multiply((-1079));
      Complex complex4 = complex3.NaN.pow((-2.360902726650238E-7));
      Complex complex5 = complex4.multiply((-1079));
      complex0.I.nthRoot(37);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex4.ZERO.reciprocal();
      complex1.INF.conjugate();
      Complex complex8 = Complex.valueOf((-3502.377681271659));
      complex8.ONE.add(complex2);
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex3.cosh();
      complex3.sqrt();
      Complex complex12 = complex8.tan();
      Complex complex13 = complex12.INF.subtract((-3502.377681271659));
      Complex complex14 = complex9.tanh();
      complex10.ONE.nthRoot(2713);
      complex14.sinh();
      complex10.add(complex5);
      Complex complex15 = complex7.sin();
      Complex complex16 = complex6.acos();
      complex16.INF.reciprocal();
      complex15.ONE.subtract(complex11);
      complex13.negate();
      complex15.multiply((double) 2713);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      complex0.I.sqrt1z();
      complex0.reciprocal();
      Complex complex1 = complex0.I.add((-1782.827529412));
      Complex complex2 = Complex.NaN;
      complex1.pow(complex0);
      Complex complex3 = complex2.INF.subtract(20.0);
      complex3.multiply(1405);
      complex2.toString();
      complex2.ZERO.add((-1782.827529412));
      Complex complex4 = complex0.multiply(complex2);
      complex4.divide(complex0);
      Complex.valueOf((-1782.827529412));
      Complex complex5 = complex0.sqrt1z();
      complex5.I.conjugate();
      Complex complex6 = complex1.sinh();
      complex6.ONE.abs();
      complex6.toString();
      Complex complex7 = complex5.atan();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1119.997492));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.multiply(58);
      complex2.nthRoot(58);
      Complex complex3 = complex0.add(complex2);
      complex3.asin();
      Complex complex4 = new Complex(3401.77, (-1119.997492));
      Complex complex5 = complex4.pow((-133.763193290684));
      complex1.sqrt1z();
      Complex complex6 = complex0.divide(Double.POSITIVE_INFINITY);
      complex3.atan();
      complex1.divide(complex4);
      complex0.getField();
      complex2.getField();
      complex5.reciprocal();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = Complex.valueOf((-2752.93979347));
      complex8.tanh();
      complex7.atan();
      complex3.log();
      complex6.readResolve();
      complex6.divide(0.0);
      complex2.readResolve();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1813.403721), Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.ONE;
      complex2.tan();
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(6.562319473965767E278);
      Complex complex4 = complex2.cosh();
      Complex complex5 = Complex.INF;
      complex5.cosh();
      Complex complex6 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex7.add(complex8);
      complex6.atan();
      Complex complex10 = complex9.atan();
      Complex complex11 = new Complex(6.562319473965767E278, Double.POSITIVE_INFINITY);
      complex3.sin();
      complex4.abs();
      complex6.log();
      complex10.nthRoot(1656);
      complex10.exp();
      complex8.tanh();
      Complex complex12 = Complex.ZERO;
      complex12.pow(complex1);
      complex0.subtract(complex7);
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(617.1888008996816);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
      complex0.abs();
      complex0.isInfinite();
      complex2.getField();
      Complex complex3 = complex2.reciprocal();
      complex3.hashCode();
      Complex complex4 = Complex.valueOf(3754.5821143535163, 0.0);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex3.divide(315.2679103427783);
      complex7.tan();
      Complex complex8 = complex2.log();
      Complex complex9 = complex6.pow(1595.0244365252097);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex9.divide(1510.2);
      complex1.atan();
      complex12.divide(complex1);
      complex11.getField();
      complex6.getField();
      complex8.reciprocal();
      complex12.conjugate();
      complex4.tanh();
      complex7.subtract(2545.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(617.1888008996816);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
      complex0.abs();
      complex0.isInfinite();
      complex2.getField();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.sqrt1z();
      complex3.toString();
      int int0 = 127;
//      try { 
        complex4.nthRoot((-2148));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,148
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.multiply(58);
      complex3.nthRoot(58);
      complex2.add(complex0);
      complex2.asin();
      Complex complex4 = new Complex(58, 58);
      Complex complex5 = complex4.pow(6.562319473965767E278);
      Complex complex6 = complex2.sqrt1z();
      complex6.divide(0.0);
      complex1.atan();
      Complex complex7 = complex3.divide(complex0);
      complex0.getField();
      complex1.getField();
      complex1.reciprocal();
      Complex complex8 = complex1.conjugate();
      complex8.tanh();
      complex2.atan();
      complex7.log();
      complex5.readResolve();
      complex4.divide((-1187.2));
      complex8.readResolve();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.multiply((-310));
      Complex complex4 = complex1.ONE.sin();
      complex4.ONE.reciprocal();
      Complex complex5 = complex4.NaN.subtract(complex3);
      complex5.I.divide((double) (-310));
      Complex complex6 = complex3.NaN.tan();
      Complex complex7 = complex2.INF.pow(0.0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex3.readResolve();
      complex7.toString();
      complex2.sqrt();
      complex7.divide(complex8);
      Complex complex10 = new Complex((-310));
      Complex complex11 = Complex.NaN;
      Object object0 = complex11.readResolve();
      complex3.equals(object0);
      Complex complex12 = Complex.INF;
      complex12.add(complex9);
      complex6.divide((double) (-310));
      complex9.pow(complex3);
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-6.414337408955734E-8), 1188.88437398803);
      Complex.valueOf(1188.88437398803, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-6.414337408955734E-8));
      Complex complex2 = Complex.I;
      complex1.add(complex2);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.sqrt();
      Complex complex7 = new Complex((-6.414337408955734E-8));
      Complex complex8 = Complex.NaN;
      complex6.equals(complex8);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.460912481998093E-5);
      Complex complex1 = Complex.valueOf(100.64431996160486, (-1162.505));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.multiply((-770));
      complex2.nthRoot(58);
      Complex complex4 = complex3.divide((-1162.505));
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex4.asin();
      complex0.log();
      Complex complex7 = complex3.pow(100.64431996160486);
      Complex complex8 = complex6.sqrt1z();
      complex5.divide(0.0);
      Complex complex9 = complex8.atan();
      Complex complex10 = complex6.divide(complex0);
      complex2.getField();
      complex3.getField();
      Complex complex11 = complex7.reciprocal();
      complex2.conjugate();
      Complex complex12 = Complex.valueOf(6.562319473965767E278, (-5393.91));
      complex12.tanh();
      complex2.atan();
      complex2.log();
      complex11.readResolve();
      complex11.divide((-1187.2));
      complex10.readResolve();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1162.505));
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.tanh();
      Complex.valueOf((-3119.852), 3586.0952);
      complex3.reciprocal();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9653234116333892E-184, (-1042.09));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.NaN.pow((-1400.121062551633));
      complex1.ONE.hashCode();
      complex0.isNaN();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.log();
      Complex complex6 = complex2.pow((-1042.09));
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.divide((-1400.121062551633));
      complex4.atan();
      Complex complex9 = complex6.divide(complex5);
      complex3.getField();
      complex3.getField();
      complex8.reciprocal();
      Complex complex10 = complex0.conjugate();
      complex4.tanh();
      complex10.atan();
      Complex complex11 = Complex.I;
      complex11.createComplex(2562.7701, 20.0);
      complex7.isInfinite();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex2 = complex0.reciprocal();
      complex2.abs();
      complex1.isInfinite();
      complex0.getField();
      Complex complex3 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2406.2963));
      complex4.exp();
      Complex complex5 = complex0.pow((-2406.2963));
      Complex.valueOf(0.0);
      complex1.cos();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex5.multiply(complex4);
      complex8.multiply(4703.481921370852);
      complex6.getField();
      complex6.acos();
      complex9.add((-967.6381994));
      complex9.getField();
      Complex complex10 = Complex.valueOf((-967.6381994));
      Complex complex11 = complex10.multiply(2127.3382712);
      complex7.asin();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(2295.699998481028, 2295.699998481028);
      Complex complex2 = complex0.ONE.multiply((-3177));
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.conjugate();
      complex3.atan();
      Complex complex5 = complex4.add(3.9782728352520784E-85);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = new Complex((-20.0), Double.NaN);
      Complex.valueOf(3729.0, (-20.0));
      complex1.multiply(complex7);
      complex1.exp();
      complex6.tanh();
      Complex complex8 = complex1.pow(complex3);
      complex5.subtract(complex0);
      complex4.readResolve();
      complex8.multiply(2.1705221445447534E-29);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.02475, (-5.385029612967205));
      Complex complex1 = new Complex((-5.385029612967205));
      complex1.acos();
      Complex complex2 = new Complex(1595.02475);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex0.negate();
      complex1.getArgument();
      complex3.divide(3.141592653589793);
      complex2.readResolve();
      Complex complex5 = new Complex(1595.02475);
      Complex complex6 = complex4.tanh();
      complex5.exp();
      Complex complex7 = complex1.multiply(3.732050807568877);
      complex5.tanh();
      complex2.sin();
      Complex complex8 = complex5.add(3108.4571713708524);
      complex7.conjugate();
      Complex complex9 = Complex.valueOf(0.0, (-5.385029612967205));
      complex5.pow(complex9);
      complex5.getReal();
      Complex complex10 = complex8.conjugate();
      complex6.cos();
      complex10.sqrt();
      complex3.isNaN();
      complex6.asin();
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.multiply((-2013.3586));
      complex0.getImaginary();
      complex1.sinh();
      complex3.isNaN();
      complex0.multiply((-5303));
      Complex complex4 = Complex.valueOf((double) 1765, 1301.8796);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = Complex.I;
      complex3.sin();
      Complex complex9 = complex7.log();
      Complex complex10 = complex8.multiply(complex1);
      complex6.exp();
      complex10.divide(complex8);
      complex10.getArgument();
      complex1.isNaN();
      Complex complex11 = complex6.multiply(complex4);
      Complex complex12 = complex5.sinh();
      complex12.subtract(1301.8796);
      complex7.cosh();
      complex1.isNaN();
      complex9.getField();
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(2295.699998481028, 2295.699998481028);
      Complex complex2 = complex0.ONE.multiply((-3177));
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.negate();
      complex6.INF.getArgument();
      Complex complex7 = complex5.ZERO.divide(0.7853981633974483);
      Complex complex8 = (Complex)complex7.ZERO.readResolve();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex0.ONE.exp();
      complex10.ZERO.multiply((-3185.782414655));
      complex9.NaN.tanh();
      complex2.toString();
      complex2.sqrt();
      complex1.divide(complex8);
      Complex complex12 = new Complex(3729.0);
      complex10.equals(complex5);
      Complex complex13 = new Complex(0.0);
      complex11.add(complex13);
      Complex complex14 = complex4.divide(Double.POSITIVE_INFINITY);
      complex14.NaN.cos();
      complex1.pow(complex14);
      complex12.tanh();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-3038.8789856), (-1476.078374));
      Complex complex1 = complex0.ONE.asin();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.subtract(complex0);
      complex1.abs();
      complex1.isInfinite();
      complex0.getField();
      Complex complex4 = complex0.reciprocal();
      complex1.INF.hashCode();
      Complex complex5 = Complex.valueOf((-1476.078374), 0.0);
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.ZERO.pow(0.0);
      Complex complex8 = Complex.valueOf(5891.95685230547);
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.sin();
      complex10.INF.tan();
      Complex complex11 = complex4.tan();
      complex11.ONE.hashCode();
      complex4.multiply(complex9);
      complex11.multiply(2136.725);
      complex2.getField();
      complex3.acos();
      Complex complex12 = complex7.add(Double.POSITIVE_INFINITY);
      complex0.getField();
      complex8.multiply(5891.95685230547);
      complex5.asin();
      complex5.exp();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(617.1888008996816);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
      complex0.abs();
      complex0.isInfinite();
      complex2.getField();
      Complex complex3 = complex2.reciprocal();
      complex3.hashCode();
      Complex.valueOf(3754.5821143535163, 0.0);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.pow(8971247.103694433);
      Complex complex6 = Complex.valueOf(1.1189396031849523);
      complex4.cos();
      Complex complex7 = Complex.INF;
      complex7.sin();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.tan();
      complex7.hashCode();
      Complex complex10 = complex6.multiply(complex1);
      complex3.multiply(728.06893);
      complex5.getField();
      Complex complex11 = complex7.acos();
      complex9.add(6.283185307179586);
      complex2.getField();
      Complex complex12 = complex0.multiply((-3432.4532346));
      complex12.asin();
      complex11.exp();
      complex10.pow((-3432.4532346));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.sqrt();
      complex0.divide((-1014.00601203844));
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex4.add(complex3);
      Complex complex7 = complex4.divide(complex0);
      Complex complex8 = complex6.multiply(4706);
      complex1.abs();
      complex5.negate();
      Complex complex9 = Complex.I;
      complex9.multiply((-4614));
      Complex complex10 = complex7.pow(complex6);
      complex9.isNaN();
      Complex complex11 = Complex.I;
      Complex complex12 = Complex.I;
      complex12.acos();
      complex8.add(complex11);
      complex10.divide(complex8);
      complex9.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.multiply((-310));
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex4.NaN.subtract(complex3);
      Complex complex7 = complex6.I.divide((double) (-310));
      Complex complex8 = complex3.NaN.tan();
      Complex complex9 = complex0.divide((double) (-310));
      Complex complex10 = complex4.asin();
      complex8.asin();
      Complex complex11 = complex5.add(complex2);
      Complex complex12 = complex4.tan();
      Complex.valueOf((double) (-310), 1.0);
      complex11.pow(complex9);
      Complex complex13 = complex4.add(complex2);
      complex7.hashCode();
      complex10.hashCode();
      complex12.reciprocal();
      complex4.toString();
      Complex complex14 = new Complex((-568.0408100402));
      complex13.add(complex0);
      complex10.subtract((-365.85236181784));
      Complex complex15 = Complex.valueOf((-7055977.122930801));
      complex15.createComplex((-1.0), (-806.77678));
      complex1.add(2022.297995767);
      complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3754.5821143535163, 3754.5821143535163);
      Complex complex1 = complex0.createComplex(2099600.0, 2099600.0);
      Complex complex2 = complex0.multiply((-149));
      Complex complex3 = complex1.negate();
      complex3.acos();
      Complex complex4 = complex1.pow(complex3);
      complex3.negate();
      complex1.getArgument();
      complex2.readResolve();
      Complex complex5 = new Complex(0.4190408860825791);
      Complex complex6 = complex0.tanh();
      complex5.exp();
      Complex complex7 = Complex.valueOf(0.7853981633974483, (double) (-3177));
      Complex complex8 = complex7.multiply(22.39);
      complex0.tanh();
      Complex complex9 = complex0.sin();
      complex6.add(3754.5821143535163);
      Complex complex10 = complex7.conjugate();
      Complex complex11 = new Complex(840.1040543, (-3177));
      Complex complex12 = complex4.pow(complex11);
      complex9.getReal();
      complex11.conjugate();
      complex8.cos();
      complex5.sqrt();
      complex10.isNaN();
      complex8.asin();
      complex4.multiply(complex6);
      complex12.divide(1913.5424139054683);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(2295.699998481028, 2295.699998481028);
      Complex complex2 = complex0.multiply((-3177));
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex4.negate();
      complex5.getArgument();
      Complex complex7 = complex2.divide(2295.699998481028);
      complex7.readResolve();
      Complex complex8 = new Complex((-3177));
      complex0.tanh();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex6.multiply(1141.20201);
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex8.sin();
      complex0.add(0.8414709848078965);
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex10.pow(complex9);
      complex13.getReal();
      complex4.conjugate();
      complex11.cos();
      complex14.sqrt();
      complex0.isNaN();
      Complex complex15 = complex12.asin();
      Complex complex16 = Complex.valueOf(20.0, 1.0);
      complex16.multiply(complex15);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.asin();
      complex2.ZERO.multiply((-2013.3586));
      complex2.getImaginary();
      complex2.sinh();
      complex0.isNaN();
      complex0.ZERO.multiply(1765);
      Complex.valueOf(0.0, (-2013.3586));
      Complex complex3 = complex2.negate();
      complex3.ONE.negate();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex6.log();
      Complex complex8 = complex0.ZERO.multiply(complex7);
      Complex complex9 = complex8.ONE.exp();
      complex9.divide(complex5);
      complex8.getArgument();
      complex7.isNaN();
      complex1.multiply(complex7);
      complex6.sinh();
      complex7.subtract((-2096.3));
      complex0.cosh();
      complex3.isNaN();
      complex6.getField();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.multiply((-2013.3586));
      complex1.getImaginary();
      Complex complex3 = complex1.sinh();
      complex0.isNaN();
      Complex complex4 = complex0.ZERO.multiply(1765);
      Complex.valueOf(0.0, (-2013.3586));
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex0.ZERO.reciprocal();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.ZERO.sin();
      Complex complex10 = complex9.log();
      Complex complex11 = complex0.ZERO.multiply(complex10);
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex2.divide(complex3);
      complex0.getArgument();
      Complex complex14 = Complex.valueOf(0.172672301530838, 0.3930181860923767);
      complex14.isNaN();
      complex12.multiply(complex7);
      complex6.sinh();
      complex4.subtract(1859.16263403);
      complex13.cosh();
      complex8.isNaN();
      complex13.getField();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1162.505));
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      complex1.add(complex0);
      Complex complex2 = complex1.tanh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.multiply((-20.0));
//      try { 
        complex1.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(363.8075702692519, 363.8075702692519);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.conjugate();
      complex1.ZERO.toString();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = Complex.valueOf(0.0, 188.7530398878735);
      complex3.I.divide(complex4);
      complex0.INF.cos();
      Complex complex5 = complex3.ZERO.sin();
      complex5.NaN.tan();
      Complex complex6 = complex0.sqrt();
      complex2.INF.divide(0.0);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex3.negate();
      complex8.divide(complex0);
      complex8.INF.multiply(complex7);
      complex6.isInfinite();
      complex6.exp();
      complex2.log();
      double double0 = (-2975.05);
      Complex complex9 = Complex.valueOf((-2975.05));
      Complex.valueOf(0.0, 0.0);
//      try { 
        complex9.ONE.nthRoot((-2882));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,882
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex2.NaN.conjugate();
      complex4.ONE.add((-6.968742825553785E-8));
      complex2.I.log();
      Complex complex5 = complex0.I.subtract((-2137.9));
      Complex complex6 = Complex.valueOf((-1.0356006160554071E245), (-1.0356006160554071E245));
      Complex complex7 = complex5.ONE.sinh();
      complex7.INF.getField();
      Complex complex8 = complex0.multiply(4.406750291994231E-9);
      complex8.ZERO.pow(complex0);
      complex5.ONE.toString();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.NaN.createComplex(0.0, 4.734805892507655E-8);
      Complex complex11 = complex10.sinh();
      complex5.isInfinite();
      Complex complex12 = complex6.log();
      Complex complex13 = complex12.ZERO.reciprocal();
      complex0.getReal();
      complex0.getImaginary();
      Complex complex14 = complex0.tanh();
      complex10.sinh();
      complex2.INF.conjugate();
      complex0.multiply(4.734805892507655E-8);
      complex6.getArgument();
      complex14.divide(complex11);
      complex13.acos();
      complex9.cosh();
      complex3.cosh();
      complex13.cosh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.ONE.multiply(1449);
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.I.getField();
      complex3.I.tanh();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex4.INF.acos();
      complex0.getArgument();
      complex0.nthRoot(1548);
      complex0.abs();
      Complex complex7 = complex2.acos();
      complex4.createComplex(1081.0, (-1525.140821));
      complex4.abs();
      Complex complex8 = complex1.ZERO.add(complex5);
      complex3.tanh();
      Complex complex9 = complex6.divide(complex3);
      complex9.multiply(17);
      complex2.abs();
      complex8.conjugate();
      Complex.valueOf(0.4794800877571106, 1449.0);
      Complex complex10 = complex9.sqrt1z();
      complex10.I.createComplex(0.0, (-1514.7));
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.ONE.subtract(0.0);
      complex3.ONE.tan();
      Complex.valueOf(0.0, 163.5);
      Complex.valueOf(0.0, 157.1213);
      complex0.readResolve();
      complex0.getArgument();
      complex1.I.pow(0.0);
      Complex complex4 = complex0.divide(0.0);
      complex4.hashCode();
      Complex complex5 = complex2.subtract(0.0);
      complex0.ZERO.divide(0.0);
      complex5.reciprocal();
      complex1.conjugate();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.017641481245025E7);
      Complex complex1 = Complex.valueOf(1.017641481245025E7, 1.017641481245025E7);
      Complex complex2 = complex1.subtract(complex0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex4.I.divide((-1014.00601203844));
      Complex complex6 = complex4.I.subtract(complex2);
      Complex complex7 = complex6.I.add(complex3);
      complex3.ONE.divide(complex4);
      complex1.multiply((-1414));
      complex5.abs();
      Complex complex8 = complex0.NaN.negate();
      Complex complex9 = complex8.ZERO.multiply(1095);
      complex2.pow(complex5);
      complex1.isNaN();
      complex2.createComplex(20.0, 9.861874467486796E-4);
      complex7.acos();
      complex5.add(complex3);
      complex9.divide(complex7);
      complex8.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.NaN.divide(complex1);
      complex0.getArgument();
      Complex complex4 = complex0.sinh();
      complex4.subtract((-1.0808162722402073E-8));
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.ONE.divide(0.0);
      complex6.hashCode();
      Complex complex7 = complex0.multiply((-1.0808162722402073E-8));
      Complex complex8 = complex7.tan();
      complex7.INF.acos();
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex9.ZERO.add(0.0);
      Complex complex11 = complex7.subtract(complex5);
      complex11.INF.tanh();
      Complex complex12 = complex7.sqrt1z();
      complex8.sqrt();
      complex8.multiply(complex7);
      complex7.negate();
      complex2.getImaginary();
      complex3.negate();
      complex12.subtract(complex10);
      complex1.conjugate();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract(Double.NaN);
      complex1.I.reciprocal();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.asin();
      complex1.ZERO.multiply((-2013.3586));
      complex1.getImaginary();
      Complex complex2 = complex1.sinh();
      complex0.isNaN();
      complex0.ZERO.multiply(1765);
      Complex.valueOf(0.0, (-2013.3586));
      Complex complex3 = complex1.negate();
      complex3.ONE.negate();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex6.log();
      Complex complex8 = complex0.ZERO.multiply(complex7);
      complex8.ONE.exp();
      Complex complex9 = complex0.divide(complex5);
      complex9.ZERO.getArgument();
      complex4.isNaN();
      Complex complex10 = complex4.multiply(complex2);
      complex4.INF.sinh();
      Complex complex11 = complex1.subtract(Double.NaN);
      complex11.cosh();
      complex11.isNaN();
      complex2.getField();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.toString();
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.toString();
      Complex complex2 = complex1.multiply(complex0);
      complex0.hashCode();
      Complex complex3 = complex2.atan();
      complex3.ZERO.subtract(complex1);
      Complex complex4 = complex2.multiply(complex0);
      complex4.hashCode();
      complex2.sqrt1z();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex5.INF.subtract(0.0);
      complex2.ZERO.hashCode();
      complex7.ONE.abs();
      Complex complex8 = complex2.I.sin();
      Complex complex9 = complex2.tanh();
      complex2.toString();
      complex1.pow(complex9);
      complex2.ONE.reciprocal();
      Complex complex10 = complex5.subtract(0.0);
      complex9.cosh();
      Complex complex11 = complex10.add(complex6);
      complex5.createComplex(0.0, (-2436.16));
      Complex complex12 = complex11.divide((-2436.16));
      complex12.getReal();
      complex8.acos();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-1020.6208));
      complex0.ZERO.exp();
      Complex complex1 = complex0.tan();
      complex1.I.cosh();
      Complex complex2 = complex0.sqrt1z();
      complex1.INF.toString();
      complex1.nthRoot(127);
      Complex complex3 = complex2.add(complex1);
      complex3.INF.multiply(complex1);
      Complex complex4 = complex0.divide((double) 127);
      complex3.cos();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sinh();
      complex0.getImaginary();
      complex1.ONE.getField();
      complex1.I.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      complex2.ZERO.sin();
      double double0 = (-6.97066538508643E-8);
      complex0.ZERO.getArgument();
      complex1.createComplex((-6.97066538508643E-8), 0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.cosh();
      int int0 = 0;
//      try { 
        complex4.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.abs();
      complex0.ONE.nthRoot(1777);
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = complex0.add(0.0);
      complex0.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.subtract(0.0);
      complex1.equals("");
      Complex complex5 = complex4.exp();
      complex5.log();
      complex3.divide(complex4);
      complex0.negate();
      Complex complex6 = Complex.valueOf((double) 1777, (double) 1777);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      complex1.ZERO.tan();
      complex0.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.add((-158.6423820729459));
      complex2.hashCode();
      complex2.atan();
      Complex complex4 = complex0.add((-158.6423820729459));
      complex4.toString();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-723.9161272044017));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.cos();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-20.486824236746287));
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1998.929575, 1859.16263403);
      Complex complex2 = complex1.acos();
      complex2.I.log();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.add(0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex0.INF.reciprocal();
      complex1.acos();
      Complex complex7 = complex1.divide(complex3);
      complex1.abs();
      Complex complex8 = complex7.pow(1859.16263403);
      complex5.I.asin();
      complex6.ZERO.log();
      Complex complex9 = complex1.ZERO.conjugate();
      complex9.I.nthRoot(2763);
      complex5.INF.abs();
      Complex complex10 = complex5.I.acos();
      complex10.I.sin();
      Complex complex11 = complex8.createComplex(2729.872734319871, 1181.83218056);
      Complex complex12 = complex11.ONE.acos();
      complex5.pow(complex3);
      Complex complex13 = complex7.sinh();
      complex13.ONE.sin();
      complex4.sinh();
      complex6.add(complex12);
      complex2.divide(1859.16263403);
      complex7.log();
      Complex.valueOf(2729.872734319871, 1998.929575);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2197.74451259), (-2197.74451259));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2197.74451259));
      complex1.I.readResolve();
      complex1.createComplex((-2197.74451259), 573.4174389);
      complex3.divide((-2197.74451259));
      complex2.pow((-2197.74451259));
      complex2.multiply((-2197.74451259));
      complex0.divide((-2197.74451259));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-3038.8789856), (-1476.078374));
      Complex complex1 = complex0.ONE.asin();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.subtract(complex0);
      complex1.abs();
      complex1.isInfinite();
      complex0.getField();
      Complex complex4 = complex0.reciprocal();
      complex1.INF.hashCode();
      Complex.valueOf((-1476.078374), 0.0);
      Complex complex5 = complex3.exp();
      complex5.ZERO.pow(0.0);
      Complex.valueOf(5891.95685230547);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex4.tan();
      complex9.ONE.hashCode();
      complex4.multiply(complex6);
      Complex complex10 = complex8.multiply((-967.6381994));
      complex10.ZERO.getField();
      complex4.acos();
      complex8.add((-1476.078374));
      complex0.getField();
      Complex complex11 = complex8.multiply(0.0);
      complex11.asin();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      complex0.NaN.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      complex1.I.getField();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.ZERO.multiply(562.14009632);
      complex4.I.add(complex1);
      Complex complex5 = complex0.negate();
      complex2.asin();
      complex5.INF.conjugate();
      complex0.subtract(complex3);
      Complex complex6 = complex0.sin();
      complex5.pow(5.745586744591196E-8);
      Complex complex7 = complex1.NaN.add(complex6);
      complex7.NaN.toString();
      complex7.ZERO.pow(complex3);
      complex3.add((-4.4200075770425176E-8));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.I.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.divide(Double.POSITIVE_INFINITY);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(complex0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1.2917117341231647E-8, Double.POSITIVE_INFINITY);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex1 = complex0.reciprocal();
      int int0 = 58;
      Complex complex2 = complex1.INF.multiply(58);
      complex2.nthRoot(58);
      Complex complex3 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex1.add(complex0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.divide(6.562319473965767E278);
      Complex complex6 = complex5.asin();
      complex5.INF.asin();
      Complex complex7 = complex6.INF.add(complex4);
      complex3.INF.tan();
      Complex.valueOf((-568.0408100402), Double.POSITIVE_INFINITY);
      complex7.pow(complex3);
//      try { 
        complex0.INF.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.multiply(134217729);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(548);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.nthRoot(1);
      Complex complex1 = complex0.INF.sinh();
      complex1.readResolve();
      Complex complex2 = complex0.ZERO.subtract((-1495.8));
      Complex complex3 = complex2.NaN.asin();
      complex3.sin();
      complex0.isNaN();
      Complex complex4 = complex3.ONE.multiply((-1227.399938311706));
      complex4.ONE.tanh();
      Complex complex5 = complex0.subtract((-1546.875214));
      complex0.ZERO.add(1634.030771944549);
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex0.exp();
      complex2.INF.reciprocal();
      Complex complex8 = complex7.I.atan();
      complex7.divide(complex3);
      complex3.hashCode();
      complex0.getField();
      complex3.sqrt();
      complex6.sqrt();
      complex5.cos();
      complex2.abs();
      complex0.pow(1.0);
      complex8.sqrt();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.02475, (-6.414337408955734E-8));
      complex0.conjugate();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.add(1595.02475);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = new Complex((-6.414337408955734E-8), (-20.0));
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.I.exp();
      complex6.ZERO.tanh();
      complex3.pow(complex2);
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(-0.0, -0.0);
      complex0.divide(-0.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(1.1541756557557508E254, 0.0);
      complex0.getReal();
      Complex complex1 = Complex.valueOf(2.0);
      Complex complex2 = complex1.INF.pow(complex0);
      complex0.getArgument();
      Complex complex3 = complex0.ZERO.atan();
      complex3.I.multiply(1.1541756557557508E254);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex4.INF.multiply(0.0);
      complex7.ONE.sinh();
      complex6.NaN.subtract(complex1);
      Complex complex8 = complex6.createComplex(439.3851592093, 0.0);
      complex8.ZERO.exp();
      complex2.I.cosh();
      complex8.I.add(complex5);
      Complex complex9 = complex0.I.sqrt1z();
      Complex complex10 = complex9.pow(complex8);
      complex10.asin();
      complex4.pow(complex6);
      complex2.ZERO.add(0.0);
      Complex complex11 = complex5.multiply((-97.1505542881));
      complex2.asin();
      Complex complex12 = new Complex((-97.1505542881), 0.0);
      complex5.divide(complex12);
      Complex complex13 = complex11.asin();
      complex3.isNaN();
      complex2.multiply(316);
      Complex complex14 = Complex.I;
      complex13.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(complex0);
      complex1.subtract(1526.599314679875);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf((double) 292);
      complex0.multiply(292);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008997, 617.1888008997);
      complex0.INF.add(complex0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(617.1888008997);
      complex2.reciprocal();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008997);
      complex0.NaN.getField();
      Object object0 = complex0.readResolve();
      ((Complex) object0).I.getArgument();
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(617.1888008997);
      complex0.equals(complex0);
      complex0.subtract(617.1888008997);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(complex0);
      Complex complex2 = complex1.ONE.asin();
      complex1.multiply(complex0);
      Complex complex3 = complex2.tan();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex1.add(complex0);
      complex1.readResolve();
      complex1.toString();
      Complex complex3 = Complex.I;
      complex1.sqrt();
      Complex complex4 = new Complex(3.2558720916543104E-263);
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      Complex complex5 = Complex.ONE;
      complex5.subtract(1.017641481245025E7);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals((Object) null);
      Complex complex1 = complex0.tanh();
      complex1.multiply(3708.574185130032);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.NaN.add(0.0);
      complex0.multiply(315);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.asin();
      complex4.I.multiply(0.0);
      Complex complex5 = Complex.valueOf((double) 315, (double) 315);
      Complex complex6 = complex3.subtract(complex5);
      complex3.I.hashCode();
      complex1.multiply(1);
      complex3.subtract(complex6);
      Complex complex7 = complex2.reciprocal();
      complex7.INF.getArgument();
      complex6.equals("|0o.7ME+Vi%YB7 !");
      complex1.getField();
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex1.multiply(103);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.multiply(58);
      complex0.nthRoot(205);
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 58);
      complex0.pow(6.283185307179586);
      Complex complex7 = complex1.sqrt1z();
      complex6.divide(3672.7933613041);
      Complex complex8 = complex5.atan();
      complex1.divide(complex2);
      Complex complex9 = new Complex(205, (-98.642));
      complex9.getField();
      complex4.getField();
      complex5.reciprocal();
      complex9.conjugate();
      complex7.tanh();
      Object object0 = complex0.readResolve();
      complex8.equals(object0);
      complex3.subtract(6.562319473965767E278);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-783.47763452063), 6013.999833721313);
      complex0.ZERO.add(complex1);
      Complex complex2 = Complex.valueOf(1629.47318684787, 2.0352829624900453E7);
      complex0.I.multiply(complex2);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(4801.128606);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide((-8305534.645118983));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(617.1888008996816, 617.1888008996816);
      complex0.subtract(617.1888008996816);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-915.6325592245482));
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.ZERO.readResolve();
      complex0.multiply(0.0);
      complex2.getArgument();
      Complex.valueOf((-20.27516), (-414.96502081975));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((-5478.0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.multiply(complex0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.pow((-152.4643));
      Complex complex4 = complex3.NaN.divide(complex2);
      complex2.ZERO.abs();
      complex1.isNaN();
      Complex.valueOf((-2684.62));
      complex0.isInfinite();
      complex4.nthRoot(17);
      complex3.hashCode();
      complex4.getReal();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex3.add(874.4);
      Complex complex6 = complex5.atan();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(4666);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1590.737485109984;
      Complex complex0 = Complex.valueOf(0.0, 1590.737485109984);
      complex0.ONE.hashCode();
//      try { 
        complex0.nthRoot((-2102));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,102
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(234);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow((double) 4668);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008996816);
      complex0.NaN.getField();
      Complex complex1 = complex0.sqrt();
      complex1.INF.add(complex0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = new Complex(363.7639919205602);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.nthRoot((-1690));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,690
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = new Complex((-35.524), (-35.524));
      Complex.valueOf((-35.524));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.NaN.tanh();
      complex1.INF.pow((-1749.76));
      complex2.I.sqrt1z();
      complex1.INF.createComplex((-35.524), (-1749.76));
      complex0.getArgument();
//      try { 
        complex2.nthRoot((-2917));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,917
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.1349396267483754E184));
      complex0.equals("OUT_OF_RANGE_RIGHT");
      Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      complex3.ZERO.cosh();
      Complex complex4 = complex3.createComplex((-1.1505428993246996E-8), 0.0);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.ONE.tanh();
      complex6.NaN.tan();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.ZERO.multiply(complex3);
      Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex8.ONE.negate();
      complex10.NaN.multiply(264.41687853518);
      complex7.NaN.add(complex4);
      complex3.abs();
      complex2.pow(complex3);
      complex3.pow(complex0);
      complex9.getImaginary();
      complex1.tan();
      complex4.toString();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008997);
      complex0.NaN.getField();
      Complex complex1 = complex0.INF.add(complex0);
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt();
      Complex complex5 = new Complex(617.1888008997);
      complex1.equals(complex0);
      Complex complex6 = Complex.I;
      complex4.exp();
      Complex complex7 = Complex.valueOf(617.1888008997, Double.POSITIVE_INFINITY);
      complex7.tanh();
      Complex complex8 = complex7.pow(complex2);
      complex8.subtract(complex6);
      complex4.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2416.0555084), (-2416.0555084));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = new Complex((-2317.9), (-2317.9));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-2317.9));
      complex2.INF.getArgument();
      Complex complex3 = new Complex(1418.1, 1.998471736907959);
      Complex complex4 = complex2.ONE.divide(complex3);
      Complex complex5 = complex4.I.subtract(1418.1);
      Complex.valueOf(1403.70442);
      complex1.INF.multiply(complex5);
      Complex complex6 = complex2.INF.createComplex(1.998471736907959, 1418.1);
      complex6.acos();
      complex4.NaN.abs();
      Complex complex7 = complex0.ZERO.add(complex1);
      complex1.pow(complex3);
      Complex complex8 = Complex.valueOf(0.7853981633974483, 1.998471736907959);
      complex8.ZERO.getField();
      complex7.NaN.sin();
      complex0.isInfinite();
      complex7.readResolve();
      complex7.getReal();
      complex2.reciprocal();
      complex2.nthRoot(2774);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1213.8967903431985, 15.388);
      complex1.ZERO.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = Complex.valueOf(451.0185);
      complex4.ONE.reciprocal();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex5.ONE.getArgument();
      complex2.I.getField();
      complex4.INF.subtract(complex5);
      Complex complex7 = complex0.atan();
      complex3.NaN.subtract((-869.8437507204131));
      Complex complex8 = complex7.ZERO.asin();
      complex8.NaN.atan();
      complex2.toString();
      Complex complex9 = complex3.multiply(816);
      complex9.NaN.subtract(0.0);
      complex0.exp();
      complex3.asin();
      complex6.readResolve();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.conjugate();
      complex2.ZERO.conjugate();
      Complex complex3 = complex1.add(20.08553695678711);
      complex0.ONE.reciprocal();
      complex1.negate();
      complex3.sinh();
      complex1.tanh();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(1387.73328);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex.valueOf(2.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.NaN.multiply(complex1);
      complex3.I.hashCode();
      Complex complex5 = Complex.ZERO;
      complex0.divide(complex5);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.NaN.add(complex1);
      Complex complex8 = complex0.negate();
      complex2.pow(0.0);
      Object object0 = complex8.readResolve();
      complex7.equals(object0);
      Complex complex9 = complex3.sqrt1z();
      complex9.NaN.multiply(complex4);
      complex9.ZERO.asin();
      complex1.negate();
      complex1.sinh();
      complex8.add((-1447.692879648237));
      complex1.ONE.subtract(2821.952741951);
      Complex.valueOf(1.8836492887460383E270, 1.8836492887460383E270);
      complex7.atan();
      complex1.getReal();
      complex6.sin();
      Complex.valueOf(1.0, 1403.4);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = new Complex(1.2917117341231647E-8, Double.POSITIVE_INFINITY);
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1565);
      complex0.I.hashCode();
      complex0.getImaginary();
      complex0.hashCode();
      Complex complex2 = complex1.tan();
      complex0.nthRoot(1565);
      complex1.readResolve();
      complex1.I.sin();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.ZERO.cos();
      Complex complex6 = new Complex(2.499312400817871, (-2618.369));
      complex1.equals(complex6);
      Complex complex7 = complex2.atan();
      complex7.add(complex4);
      complex6.INF.reciprocal();
      Complex.valueOf((double) 1565);
      Complex complex8 = complex5.cos();
      complex8.INF.add(complex6);
      complex8.abs();
      complex7.NaN.tan();
      Complex complex9 = complex6.multiply((double) 1565);
      complex9.I.multiply(1565);
      complex9.I.nthRoot(1565);
      complex4.getReal();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1162.505));
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      complex1.add(complex0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.divide((-1162.505));
      Complex complex4 = complex2.atan();
      Complex complex5 = complex3.divide(complex4);
      complex5.getField();
      Complex complex6 = new Complex(9.889030935681123E42, 9.889030935681123E42);
      complex6.getField();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = new Complex(9.889030935681123E42);
      complex8.conjugate();
      complex7.pow(9.889030935681123E42);
      Complex.valueOf(36.071404402473284);
      complex5.multiply(Double.NaN);
      complex5.divide(1344.707560425);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9653234116333892E-184, (-1042.09));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.NaN.pow((-1400.121062551633));
      complex1.ONE.hashCode();
      complex0.isNaN();
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex4.INF.multiply((-1042.09));
      complex2.ZERO.multiply(complex5);
      complex0.nthRoot(4800);
      Complex complex6 = complex0.multiply((double) 4800);
      Complex.valueOf(5.184023388254773E-130, 5.184023388254773E-130);
      complex3.readResolve();
      complex6.ONE.toString();
      complex4.I.sqrt();
      complex6.ZERO.divide(complex3);
      Complex complex7 = new Complex(1.9653234116333892E-184);
      complex1.equals(complex7);
      complex4.add(complex6);
      complex5.ONE.divide(5.184023388254773E-130);
      complex5.pow(complex0);
      complex3.tanh();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.multiply((-310));
      Complex complex4 = complex1.ONE.sin();
      complex4.ONE.reciprocal();
      Complex complex5 = complex4.NaN.subtract(complex3);
      complex5.I.divide((double) (-310));
      Complex complex6 = complex3.NaN.tan();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex2.INF.pow(0.0);
      Complex complex9 = complex8.sqrt1z();
      complex9.ZERO.divide((-9.868269632073771E-8));
      Complex complex10 = complex8.ZERO.atan();
      complex10.ONE.divide(complex0);
      complex0.getField();
      complex3.getField();
      Complex complex11 = complex1.reciprocal();
      complex1.INF.conjugate();
      complex11.NaN.tanh();
      Complex complex12 = complex2.atan();
      complex12.ZERO.log();
      complex1.readResolve();
      complex7.divide(1.8510795864289367E226);
      complex1.readResolve();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = new Complex((-3630.24381815), (-3630.24381815));
      Complex complex1 = complex0.multiply((-849.2759128932516));
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.valueOf((-3630.24381815));
      Complex complex4 = complex0.tanh();
      complex1.isInfinite();
      complex0.getImaginary();
      Complex complex5 = complex3.cosh();
      complex4.isInfinite();
      Complex complex6 = complex5.createComplex(1.9809842109680176, (-3630.24381815));
      complex5.ONE.subtract((-3630.24381815));
      complex6.tan();
      complex4.add((-849.2759128932516));
      complex2.ONE.subtract(1.9809842109680176);
      Complex complex7 = complex2.subtract((-3630.24381815));
      Complex complex8 = Complex.valueOf(570.95474);
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex5.exp();
      complex9.negate();
      complex10.cos();
      Complex.valueOf(1.9809842109680176);
      complex8.cosh();
      complex0.multiply(complex3);
      Complex.valueOf((-742.0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.multiply(58);
      complex2.nthRoot(58);
      Complex complex3 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex1.asin();
      complex5.log();
      complex3.sqrt1z();
      Complex.valueOf((-20.87159100204499), Double.NaN);
      complex4.reciprocal();
      complex3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(2295.699998481028, 2295.699998481028);
      Complex complex2 = complex0.ONE.multiply((-3177));
      Complex complex3 = complex1.negate();
      complex3.INF.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.negate();
      complex5.INF.getArgument();
      Complex complex6 = complex4.ZERO.divide(0.7853981633974483);
      complex6.ZERO.readResolve();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.ONE.tanh();
      complex0.ONE.exp();
      complex8.ZERO.multiply((-3185.782414655));
      Complex complex9 = complex7.NaN.tanh();
      complex9.INF.sin();
      complex7.I.add(2295.699998481028);
      complex9.conjugate();
      complex4.pow(complex7);
      complex7.getReal();
      complex0.ONE.conjugate();
      complex4.cos();
      complex1.sqrt();
      complex0.isNaN();
      Complex complex10 = complex2.asin();
      complex10.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.017641481245025E7);
      Complex complex1 = complex0.asin();
      complex0.add(Double.NaN);
      Complex complex2 = Complex.I;
      complex0.multiply(complex1);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.negate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0);
      complex0.add(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      complex2.sqrt();
      Complex complex5 = new Complex(20.0);
      complex2.isNaN();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.NaN.multiply(363);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex0.tan();
      complex0.readResolve();
      Complex complex6 = complex3.acos();
      complex6.ONE.reciprocal();
      Complex.valueOf((-20.0), 0.0);
      Complex complex7 = complex4.NaN.exp();
      complex7.sqrt();
      complex2.NaN.subtract((-1310.63705526));
      complex4.ZERO.divide(complex3);
      complex0.equals((Object) null);
      complex2.cos();
      Complex.valueOf(0.0);
      complex1.reciprocal();
      complex0.divide((-1807.3382671928332));
      complex5.subtract(complex4);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.INF.cos();
      Complex.valueOf((-2831.40786918025), (-1310.63705526));
      complex9.nthRoot(363);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-504.26555), (-504.26555));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.I.multiply(944.28188724);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex0.tan();
      assertEquals((-1.0), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex2.INF.reciprocal();
      Complex complex9 = complex7.I.asin();
      complex5.ONE.createComplex((-504.26555), (-504.26555));
      Complex complex10 = complex9.ONE.subtract(complex2);
      Complex complex11 = complex10.cos();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex7.asin();
      assertEquals((-9.915407390826284E-4), complex12.getReal(), 0.01);
      
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex2.subtract(complex13);
      complex0.getImaginary();
      complex4.log();
      Complex complex15 = complex5.pow(0.0);
      complex15.INF.exp();
      Complex complex16 = complex2.sqrt();
      assertTrue(complex16.equals((Object)complex8));
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex17 = complex1.add((-504.26555));
      Complex complex18 = complex17.acos();
      assertSame(complex18, complex15);
      
      complex13.isNaN();
      complex1.atan();
      complex9.hashCode();
      assertEquals(9.91541064028665E-4, complex7.getImaginary(), 0.01);
      
      Complex complex19 = complex5.negate();
      Complex complex20 = complex19.ONE.conjugate();
      complex20.NaN.asin();
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex19.reciprocal();
      assertEquals(944.28188724, complex3.getImaginary(), 0.01);
      assertSame(complex21, complex14);
      assertTrue(complex4.equals((Object)complex17));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      assertFalse(complex1.isInfinite());
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }
}
