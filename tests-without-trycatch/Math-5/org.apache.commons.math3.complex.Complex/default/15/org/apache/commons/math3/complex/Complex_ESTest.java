/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:48:09 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(149.3552477675604, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.add(3916.8407815);
      Complex complex7 = Complex.valueOf(Double.NaN, 934.4);
      complex5.multiply(complex7);
      complex4.abs();
      complex7.sqrt1z();
      complex6.multiply(0.9999999889336239);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = new Complex(1.0);
      complex1.add(1.0);
      Complex complex2 = new Complex((-20.0));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1.3725786770437066E105);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.add(Double.NaN);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.subtract(Double.NaN);
      Complex complex2 = complex1.conjugate();
      complex0.acos();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(12.967471564275705, 12.967471564275705);
      Complex complex1 = new Complex(Double.NaN);
      complex0.pow(1296.071);
      Complex complex2 = Complex.NaN;
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      
      Complex complex2 = Complex.valueOf((-4158.6939035), 0.0);
      complex2.getArgument();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.tanh();
      complex3.atan();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.exp();
      complex0.abs();
      complex4.sqrt1z();
      complex6.createComplex(Double.NaN, 9.727979174888975E-9);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.201209991636407E25));
      Complex complex1 = complex0.pow((-4.201209991636407E25));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-4.201209991636407E25), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      complex0.toString();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.tan();
      complex1.reciprocal();
      complex0.multiply(353);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.pow(complex0);
      complex0.add(complex3);
      Complex complex4 = Complex.INF;
      complex2.sin();
      complex3.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3255.675));
      complex0.exp();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = new Complex(1.0);
      complex3.add(1.0);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-1990.19734));
      Complex complex2 = complex1.negate();
      complex1.exp();
      complex0.cosh();
      complex0.abs();
      complex1.divide(complex2);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.ONE.tan();
      complex1.ZERO.createComplex(2.5187968110874885E-38, Double.POSITIVE_INFINITY);
      complex1.I.nthRoot(1882);
      complex1.NaN.getField();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-22.61109453702153), (-22.61109453702153));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(43.43726511238352, (-0.26820653676986694));
      complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ZERO.createComplex((-0.26820653676986694), (-1.0002761834266958));
      complex0.ONE.subtract((-6.151751570213211E-240));
      Complex complex3 = Complex.valueOf(3769.182932, 789.998131761144);
      complex1.I.multiply(490);
      Complex complex4 = complex2.divide((-1.0002761834266958));
      complex4.ONE.cos();
      Complex complex5 = Complex.valueOf((-1.0002761834266958));
      complex5.getArgument();
      complex3.ONE.asin();
      complex0.cos();
      Complex complex6 = complex2.multiply(complex3);
      complex5.createComplex(43.43726511238352, (-1.0002761834266958));
      Complex.valueOf(3769.182932, 1047.08);
      Complex complex7 = complex6.tan();
      complex7.negate();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.sinh();
      complex1.pow(complex0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex3.tan();
      complex3.add(complex2);
      Complex.valueOf((-3484.4259207459463), (-4158.6939035));
      Complex complex4 = new Complex((-4158.6939035), 357908.46214699093);
      complex4.getArgument();
      Complex complex5 = Complex.ONE;
      complex1.sqrt();
      complex1.multiply(759);
      Complex complex6 = Complex.INF;
      complex5.pow((double) 759);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.createComplex((-3255.675), 1.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.INF;
      Object object0 = new Object();
      complex6.equals(object0);
      complex4.pow(complex2);
      Complex complex7 = new Complex((-3255.675), (-1019.20304));
      complex7.equals(complex3);
      complex5.cosh();
      Complex.valueOf((-3255.675));
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex.valueOf(Double.NaN, (-4.795525328822851));
      Complex complex0 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = new Complex((-3255.675), Double.NaN);
      Complex complex2 = Complex.valueOf(1735.95);
      complex2.hashCode();
      complex1.toString();
      Complex complex3 = Complex.valueOf(Double.NaN, (-3255.675));
      Complex complex4 = Complex.valueOf(1735.95);
      complex0.add(complex4);
      Complex.valueOf(3014.10476632607, Double.NaN);
      Complex complex5 = Complex.ZERO;
      complex5.getArgument();
      complex1.sqrt();
      complex3.multiply((-1968));
      Complex complex6 = complex0.pow((-3255.675));
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1019.20304));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = Complex.INF;
      complex1.add(complex5);
      Complex complex6 = Complex.INF;
      Object object0 = new Object();
      complex5.equals((Object) null);
      complex4.pow(complex5);
      complex2.subtract(0.0);
      complex2.hashCode();
      Complex complex7 = Complex.INF;
      complex7.multiply(complex2);
      Complex complex8 = Complex.NaN;
      complex8.sqrt1z();
      complex2.sqrt1z();
      complex6.cosh();
      complex5.abs();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.multiply(0.040196798741817474);
      Complex complex3 = complex2.atan();
      complex1.abs();
      Complex complex4 = complex0.cos();
      complex0.readResolve();
      complex3.pow(0.040196798741817474);
      complex4.sinh();
      Complex.valueOf(0.040196798741817474);
      complex2.exp();
      complex1.divide(0.040196798741817474);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = new Complex(1023.3910258838);
      Complex complex2 = complex0.tan();
      complex2.ONE.acos();
      complex1.cosh();
      Complex complex3 = new Complex(6.283185307179586);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20543.14253627462, 1235.61);
      Complex complex1 = complex0.sin();
      complex1.readResolve();
      Complex complex2 = complex1.log();
      complex1.toString();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.createComplex(20543.14253627462, 88.79);
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex5.add(complex6);
      complex2.equals("");
      Complex complex9 = new Complex(942.057417225211, 1.8038406914061554E236);
      Complex complex10 = complex9.pow(complex4);
      complex8.hashCode();
      Complex complex11 = complex9.multiply(complex8);
      complex5.sqrt1z();
      complex11.sqrt1z();
      complex1.tanh();
      Complex.valueOf(88.79, 942.057417225211);
      complex7.getField();
      complex6.tanh();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1742.2129603729732), (-1742.2129603729732));
      complex1.readResolve();
      Complex complex2 = complex1.log();
      complex0.toString();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.negate();
      complex3.createComplex((-1742.2129603729732), (-1742.2129603729732));
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex6.add(complex4);
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      complex7.pow(complex8);
      Complex complex9 = Complex.INF;
      complex9.hashCode();
      complex4.multiply(complex5);
      complex3.sqrt1z();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = Complex.NaN;
      complex11.tanh();
      Complex.valueOf(1.059940875176156E7, 1.958392846081373E-260);
      complex3.getField();
      complex2.getReal();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1735.95, 1735.95);
      Complex complex1 = Complex.valueOf(1735.95, 1735.95);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.createComplex(1735.95, (-1742.2129603729732));
      complex2.abs();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.add(complex5);
      complex3.equals(complex2);
      Complex complex7 = complex5.pow(complex2);
      complex7.hashCode();
      complex4.multiply(complex5);
      complex6.sqrt1z();
      complex1.sqrt1z();
      Complex complex8 = Complex.valueOf(2943.8765, 0.7853981633974483);
      complex8.tanh();
      Complex.valueOf(2.547000388735681E214, (-1.0));
      Complex complex9 = Complex.NaN;
      complex9.ONE.negate();
      complex9.getField();
      complex0.getReal();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 1735.95;
      Complex complex0 = new Complex((-1742.2129603729732));
      Complex complex1 = complex0.log();
      complex0.toString();
      Complex complex2 = complex1.reciprocal();
      complex1.exp();
      complex1.cos();
      complex2.negate();
      complex0.createComplex(859.8032172908105, (-149.27094842770225));
      Complex complex3 = Complex.NaN;
      complex3.pow(complex0);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.ZERO.add(Double.POSITIVE_INFINITY);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(472.7902297655463);
      Complex.valueOf(472.7902297655463, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.abs();
      Complex complex2 = Complex.NaN;
      complex1.add((-38.28174605214712));
      complex0.divide((-38.28174605214712));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(1.0);
      complex2.abs();
      Complex.valueOf((-854.7248880700682), 0.51);
      complex0.pow(0.0);
      Complex complex4 = Complex.valueOf(1877.761368886904, Double.POSITIVE_INFINITY);
      complex0.multiply(complex4);
      Complex.valueOf(1.0, (-627.2961));
      complex2.nthRoot(28);
      complex4.multiply(complex3);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.pow((-20.0));
      complex3.tan();
      complex2.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sin();
      complex5.atan();
      Complex complex6 = Complex.valueOf(131.3339829, 5080.651098);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(1951.234, 2980.33407);
      Complex complex1 = new Complex((-2.3702295314000405E-8));
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(4359.69997185);
      complex0.readResolve();
      Complex complex1 = complex0.log();
      complex0.toString();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.exp();
      complex3.cos();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex2.createComplex(20.0, 20.0);
      complex2.pow(complex0);
      complex3.add(complex0);
      Complex complex6 = Complex.I;
      complex2.equals(complex6);
      complex0.pow(complex4);
      Complex complex7 = Complex.valueOf(1.8998266395808145E7);
      complex7.hashCode();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.multiply(complex5);
      Complex complex10 = Complex.I;
      complex10.sqrt1z();
      Complex complex11 = Complex.ONE;
      complex11.sqrt1z();
      Complex complex12 = complex7.tanh();
      Complex.valueOf(2.0, 4359.69997185);
      complex12.getField();
      complex8.getReal();
      complex9.getArgument();
      complex4.divide(2.4492935982947064E-16);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2259.0346, 2259.0346);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(450.0, 1.5916266807316476E91);
      Complex complex1 = complex0.negate();
      complex1.ZERO.tanh();
      complex0.pow(1.5916266807316476E91);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.atan();
      Complex.valueOf(450.0, (-9.522726334561169E100));
      complex3.cosh();
      complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex0.readResolve();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(2816.01);
      complex3.toString();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.createComplex(1651.3705518437, (-3255.675));
      complex7.pow(complex3);
      complex6.add(complex8);
      Object object0 = new Object();
      complex8.equals(object0);
      Complex complex9 = Complex.ONE;
      complex9.pow(complex4);
      complex2.hashCode();
      Complex complex10 = complex3.multiply(complex0);
      complex2.sqrt1z();
      complex8.sqrt1z();
      complex3.tanh();
      Complex.valueOf(2.018584871269913, 2816.01);
      complex4.getField();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.createComplex((-3255.675), 1.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.INF;
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex7 = complex4.pow(complex2);
      complex7.subtract(3254.675);
      complex5.hashCode();
      Complex complex8 = complex6.multiply(complex0);
      complex4.sqrt1z();
      complex2.sqrt1z();
      complex4.tanh();
      Complex.valueOf((-3255.675), (-3255.675));
      Complex complex9 = Complex.valueOf((-3255.675));
      complex9.getField();
      complex0.getReal();
      complex8.getArgument();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.26820653676986694);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.createComplex(0.26820653676986694, 4358.69997185);
      complex3.log();
      complex2.negate();
      Complex complex4 = Complex.valueOf((-3685.707460898602));
      complex4.getArgument();
      Complex complex5 = complex3.subtract(0.48910707235336304);
      Complex complex6 = Complex.valueOf((-1298.0), 0.26820653676986694);
      complex6.isInfinite();
      Complex complex7 = complex5.asin();
      complex7.ZERO.add(complex2);
      complex6.divide(complex0);
      complex2.negate();
      Complex complex8 = Complex.NaN;
      complex8.multiply(0.26820653676986694);
//      try { 
        complex3.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      assertNotNull(complexField0);
      
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex1.add(complex0);
      complex1.getReal();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.pow(complex2);
      complex2.sin();
      Complex complex6 = complex1.acos();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.add(complex3);
      complex4.hashCode();
      complex0.nthRoot(37);
      complex6.toString();
      Complex complex9 = complex5.pow(complex8);
      complex9.cos();
      Complex.valueOf((-1.0813801247641613E-8), (-1.4271754202157014E-7));
      complex3.getImaginary();
      complex7.multiply(37);
      complex3.conjugate();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(955);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3388.4971));
      complex0.cosh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
      complex2.pow(complex0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.acos();
      Complex complex5 = new Complex(55.8954573031);
      Complex complex6 = new Complex((-0.8309927332840569), 55.8954573031);
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex6.add(complex7);
      complex5.hashCode();
      complex3.nthRoot(37);
      Complex complex9 = Complex.ZERO;
      complex9.toString();
      complex8.pow(complex1);
      Complex complex10 = complex4.cos();
      Complex.valueOf((-3388.4971), Double.POSITIVE_INFINITY);
      complex10.getImaginary();
      complex1.multiply(37);
      complex2.conjugate();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.reciprocal();
      complex4.subtract(complex3);
      Complex complex6 = Complex.valueOf((-0.27907511601964724));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.pow(complex7);
      complex7.divide(1.0);
      Complex complex9 = complex1.negate();
      Complex complex10 = complex3.reciprocal();
      complex9.getReal();
      Complex complex11 = Complex.ZERO;
      complex8.getArgument();
      complex10.toString();
      Complex complex12 = Complex.INF;
      complex8.divide(complex2);
      complex3.asin();
      complex12.pow(complex5);
      Complex complex13 = Complex.I;
      complex12.asin();
      Complex complex14 = Complex.valueOf((-0.27907511601964724), 2418.043339831118);
      complex14.reciprocal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.subtract((-1660.777));
      Complex complex2 = Complex.ZERO;
      complex1.multiply(20.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.valueOf(4335.7, (-2883.2));
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1742.2129603729732), 1735.95);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.valueOf(1735.95, 1735.95);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(1735.95, 1735.95);
      complex0.getArgument();
      complex3.NaN.sqrt();
      complex3.multiply(759);
      complex2.pow((-470.74));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1742.2129603729732), 1735.95);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.valueOf(1735.95, 1735.95);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(1735.95, 1735.95);
      Complex complex4 = Complex.valueOf((-2852.4101644851), (-3508.5044777));
      Complex complex5 = new Complex(0.875);
      complex5.abs();
      complex5.add(complex0);
      Complex.valueOf((-3508.5044777));
      Complex complex6 = Complex.ONE;
      complex4.cosh();
      complex4.getField();
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex4.log();
      complex0.getImaginary();
      Complex complex7 = complex5.sin();
      complex4.getImaginary();
      Complex complex8 = complex0.multiply(complex6);
      Complex complex9 = complex8.divide((-3265.3896534530977));
      Complex complex10 = complex2.multiply(complex1);
      complex7.divide(complex10);
      Complex complex11 = Complex.NaN;
      complex11.asin();
      complex7.sinh();
      complex5.negate();
      Complex.valueOf((-3093.654), (-3093.654));
      complex9.multiply(448);
      complex0.getReal();
      Complex complex12 = Complex.ONE;
      complex12.sqrt();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.getField();
      complex0.readResolve();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.I;
      complex4.getArgument();
      Complex complex5 = complex2.subtract(1.5707963267948966);
      complex1.isInfinite();
      complex2.asin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.divide(complex3);
      complex7.negate();
      complex5.multiply(1.5707963267948966);
//      try { 
        complex4.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = (Complex)complex1.I.readResolve();
      Complex complex4 = complex1.log();
      complex4.I.toString();
      complex2.reciprocal();
      Complex complex5 = complex4.multiply(complex0);
      complex2.exp();
      Complex complex6 = complex5.cos();
      complex3.negate();
      complex4.createComplex((-3265.3896534530977), 1.0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.pow(complex4);
      Complex complex9 = Complex.INF;
      complex6.equals(complex9);
      complex0.pow(complex9);
      complex2.hashCode();
      complex0.ONE.createComplex((-911.01956270426), (-786.548834687795));
      Complex complex10 = Complex.I;
      complex10.multiply(complex0);
      Complex complex11 = new Complex(1663.92801, (-3265.3896534530977));
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex13.sqrt1z();
      complex14.tanh();
      Complex.valueOf(1663.92801, 6.283185307179586);
      complex14.getField();
      complex12.getReal();
      complex8.getArgument();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = (Complex)complex1.I.readResolve();
      Complex complex4 = complex1.log();
      complex4.I.toString();
      complex0.reciprocal();
      Complex complex5 = complex1.multiply(complex2);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex4.negate();
      complex4.createComplex((-3255.675), 6.283185307179586);
      Complex complex9 = complex3.pow(complex4);
      Complex complex10 = Complex.ZERO;
      complex10.add(complex7);
      Object object0 = new Object();
      complex5.equals(object0);
      complex8.pow(complex1);
      complex6.hashCode();
      Complex complex11 = new Complex(6.283185307179586);
      complex0.multiply(complex11);
      complex3.sqrt1z();
      Complex complex12 = Complex.ONE;
      complex12.sqrt1z();
      complex9.tanh();
      Complex.valueOf(1096.633056640625, 6.283185307179586);
      complex3.getField();
      complex11.getReal();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.sqrt1z();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.subtract(2310.459967185749);
      complex0.hashCode();
      complex4.multiply(complex0);
      complex3.sqrt1z();
      complex0.cosh();
      complex2.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex5.pow(2310.459967185749);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(1.0972476870931676E-268, 1.0972476870931676E-268);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.conjugate();
      complex0.readResolve();
      Complex complex3 = new Complex(1.6029126916635028E243);
      Complex complex4 = complex3.log();
      complex1.toString();
      Complex complex5 = complex4.reciprocal();
      complex1.multiply(complex1);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex2.cos();
      complex5.negate();
      Complex complex8 = Complex.ZERO;
      complex8.createComplex(1.0738916397094727, 1.0);
      complex3.pow(complex1);
      complex6.add(complex0);
      complex7.equals(complex0);
      Complex complex9 = complex0.pow(complex8);
      Complex complex10 = new Complex(1.6029126916635028E243, 1.0);
      complex10.hashCode();
      complex2.multiply(complex0);
      complex3.sqrt1z();
      complex9.tanh();
      Complex.valueOf(24.0267, 1.4450790882110596);
      complex1.getField();
      complex5.getReal();
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.26820653676986694);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.createComplex(0.26820653676986694, 4358.69997185);
      Complex complex4 = complex3.add(complex1);
      complex0.getReal();
      Complex complex5 = complex0.cosh();
      complex5.NaN.acos();
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = complex3.NaN.sin();
      Complex complex8 = complex4.subtract(complex6);
      complex8.tanh();
      Complex complex9 = Complex.ONE;
      complex7.equals(complex9);
      Complex complex10 = Complex.ZERO;
      complex9.divide(complex10);
      Complex complex11 = new Complex((-405));
//      try { 
        complex11.nthRoot((-405));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -405
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      complex0.nthRoot(2145412164);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.NaN.cos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex0.atan();
      complex0.subtract(0.0);
      Complex complex7 = complex3.I.subtract(complex5);
      complex7.NaN.add(207.0831982286);
      Complex complex8 = (Complex)complex6.readResolve();
      complex8.tanh();
      complex3.asin();
      complex5.getArgument();
//      try { 
        complex6.nthRoot((-1451));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,451
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.hashCode();
      complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.ZERO.log();
      complex3.toString();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex5.I.cos();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.ONE.exp();
      complex10.I.multiply((-4709.864022088121));
      Complex complex11 = complex8.asin();
      complex11.NaN.sin();
      complex1.equals(complex0);
      complex0.isNaN();
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = complex1.log();
      complex4.getReal();
      Complex complex14 = complex2.sinh();
      complex14.INF.cos();
      complex7.log();
      complex13.subtract(complex8);
      Complex complex15 = complex12.pow(Double.NEGATIVE_INFINITY);
      complex15.I.exp();
      complex6.getReal();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.hashCode();
      complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.ZERO.log();
      complex3.toString();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.I.tanh();
      complex5.NaN.conjugate();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex7.asin();
      Complex complex11 = complex10.NaN.sin();
      complex1.equals(complex0);
      complex0.isNaN();
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex1.log();
      complex4.getReal();
      Complex complex14 = complex2.sinh();
      complex14.INF.cos();
      complex6.log();
      complex13.subtract(complex7);
      complex12.pow(Double.NEGATIVE_INFINITY);
      complex5.multiply(complex12);
      complex9.getArgument();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      complex1.NaN.readResolve();
      complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.atan();
      complex0.pow(1.1712579802975851E287);
      complex2.ONE.sqrt1z();
      complex0.createComplex(0.0, 1.1712579802975851E287);
      Complex complex3 = Complex.valueOf(0.0, 1178.312725876892);
      complex2.equals(complex3);
      complex3.asin();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex4 = complex2.add((-692.0));
      complex2.isNaN();
      Complex complex5 = complex4.ZERO.multiply(209.082809051376);
      Complex.valueOf(0.0);
      complex4.conjugate();
      complex0.reciprocal();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1925.99655), (-1925.99655));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      complex0.nthRoot(1);
      Complex complex2 = Complex.valueOf(1.4450790882110596, 1.4450790882110596);
      Complex complex3 = complex1.INF.multiply(6644.8073);
      Complex complex4 = complex3.ZERO.exp();
      complex0.INF.cosh();
      complex3.ZERO.subtract(6644.8073);
      Complex complex5 = complex1.sqrt1z();
      complex5.pow((-1096.9509080414427));
      complex1.ONE.tan();
      Complex complex6 = complex3.ONE.sqrt();
      Complex complex7 = complex6.NaN.pow(complex1);
      complex7.pow(complex4);
      Complex complex8 = complex4.subtract((double) 1);
      Complex.valueOf((double) 1, 1.4450790882110596);
      Complex complex9 = complex4.NaN.multiply(complex2);
      complex9.toString();
      complex4.ONE.sin();
      complex0.subtract(complex1);
      complex8.getReal();
      complex2.getReal();
      complex2.abs();
      Complex complex10 = Complex.INF;
      complex3.subtract(complex10);
      complex5.subtract((-4.556583652800433E-8));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.divide(0.0);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.474522484905093E189);
      Complex complex1 = complex0.acos();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      complex1.NaN.subtract(complex0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(3467);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-1019.20304));
      Complex complex1 = complex0.add(0.0);
      complex1.ONE.tan();
      Complex complex2 = complex1.sinh();
      complex0.NaN.pow(complex1);
      complex2.subtract((-437.48872541209));
      complex1.multiply(0.0);
      complex1.NaN.subtract(complex2);
      complex0.tanh();
      complex0.equals(complex1);
      complex0.cosh();
      Complex.valueOf((-437.48872541209));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.createComplex((-3255.675), 1.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.add(complex4);
      Object object0 = new Object();
      complex3.equals(object0);
      complex4.pow(complex2);
      Complex complex6 = new Complex((-3255.675), (-1019.20304));
      complex6.equals(complex3);
      complex5.cosh();
      Complex.valueOf((-3255.675));
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(7.785491934690374E-291, (-508.27106608268));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.ONE.divide(7.785491934690374E-291);
      complex1.ONE.getField();
      Complex complex3 = complex0.pow(complex1);
      complex3.INF.subtract(complex0);
      complex3.toString();
      Complex complex4 = Complex.ZERO;
      Complex.valueOf(1.1776625988228244E-9, (-1911.15914298537));
      complex0.equals(complex4);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.I.multiply(complex5);
      complex6.NaN.abs();
      complex4.createComplex(1.4513757076459615E88, 0.0);
      complex0.ONE.createComplex(1.4513757076459615E88, 7.785491934690374E-291);
      complex5.getReal();
      Complex complex7 = complex5.divide(complex4);
      complex7.I.multiply(1.4513757076459615E88);
      complex0.hashCode();
      Complex.valueOf(1.4513757076459615E88);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-1.0));
      Complex complex2 = complex0.ONE.add(2.0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ONE.asin();
      complex2.sin();
      Complex complex5 = complex0.I.exp();
      complex5.NaN.nthRoot(2660);
      Complex complex6 = complex1.pow(1.059309482574463);
      Complex complex7 = complex6.tanh();
      complex7.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = Complex.valueOf((-799.73394043));
      complex9.I.reciprocal();
      complex8.getArgument();
      complex6.getReal();
      complex6.atan();
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1742.2129603729732), 1735.95);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.valueOf(1735.95, 1735.95);
      complex0.add(complex1);
      Complex.valueOf(1735.95, 1735.95);
      complex0.getArgument();
      complex0.multiply(745);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide((-407.4917356));
      Complex complex1 = complex0.NaN.negate();
//      try { 
        complex1.ONE.nthRoot((-1350));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,350
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1209.021727, 1209.021727);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.NaN.createComplex(1209.021727, 1957.842919565364);
      complex2.NaN.divide(1957.842919565364);
      Complex complex3 = complex0.sin();
      complex3.NaN.divide(0.0);
      complex3.getArgument();
      Complex complex4 = complex1.atan();
      complex2.acos();
      Complex.valueOf(0.0);
      complex4.cosh();
      complex4.subtract((-2286.730389314331));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.sinh();
      complex1.readResolve();
      complex2.getArgument();
      complex5.readResolve();
      Complex complex6 = complex0.cos();
      complex4.sqrt1z();
      complex0.getReal();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex4.subtract(Double.NaN);
      Complex complex9 = complex0.reciprocal();
      complex8.getImaginary();
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex9.divide(Double.NaN);
      Complex complex10 = Complex.NaN;
      complex3.multiply(complex10);
      complex7.readResolve();
      Complex complex11 = complex6.multiply(Double.NaN);
      complex8.sin();
      complex3.atan();
      complex11.getImaginary();
      Complex complex12 = Complex.ONE;
      Complex complex13 = Complex.I;
      complex2.acos();
      complex13.getImaginary();
      complex8.pow((-393.23));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(2267.58416871186);
      complex0.isInfinite();
      Complex complex2 = Complex.valueOf(4.201209991636407E25, (-1.0));
      Complex complex3 = complex0.INF.divide(2267.58416871186);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex0.NaN.log();
      complex1.multiply((-31));
      Complex complex6 = complex2.atan();
      complex2.hashCode();
      complex6.ZERO.abs();
      complex2.abs();
      Complex complex7 = complex0.multiply((double) (-31));
      Complex complex8 = complex6.ZERO.cosh();
      complex8.INF.sqrt1z();
      complex1.abs();
      complex7.toString();
      complex6.subtract(4.201209991636407E25);
      complex7.multiply((-1.0));
      Complex complex9 = complex5.negate();
      complex9.ZERO.sin();
      complex1.equals(complex6);
      Complex complex10 = complex4.exp();
      complex3.asin();
      complex10.add(1178.0048725064);
      complex0.divide(4.201209991636407E25);
      Complex.valueOf((-266.0), 0.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.atan();
      complex3.abs();
      complex2.ZERO.acos();
      Complex complex4 = complex3.ONE.subtract(Double.POSITIVE_INFINITY);
      complex4.NaN.sqrt1z();
      complex4.ONE.sqrt();
      Complex complex5 = complex0.add((-1.8613847754677912E-9));
      complex3.isInfinite();
      Complex complex6 = complex5.sinh();
      complex6.readResolve();
      complex1.sqrt1z();
      Complex.valueOf(0.0, (-1.0269233640424235E-292));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.multiply(1489);
      Complex complex3 = complex2.I.reciprocal();
      complex0.abs();
      complex0.acos();
      complex0.negate();
      complex0.getArgument();
      complex3.multiply(7);
      complex1.hashCode();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-79);
//      try { 
        complex0.nthRoot((-79));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -79
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.cosh();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex0.ONE.abs();
      complex0.INF.getField();
      complex1.ONE.hashCode();
      complex0.INF.getArgument();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.NaN.log();
      complex5.NaN.createComplex(2582.0, 1.0);
      complex5.I.abs();
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.valueOf(1.0, 1.0);
      Complex complex8 = complex7.I.subtract(407.16);
      complex8.ZERO.multiply(1.0);
      Complex.valueOf((-892.984344), (-892.984344));
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex8.I.createComplex(0.7853981633974483, 1.8412576154421806E-7);
      complex1.sqrt();
      complex4.isNaN();
      Complex complex11 = complex2.asin();
      complex11.sin();
      complex9.multiply(1);
      complex10.I.multiply(complex0);
      complex2.add((-498.7553));
      complex7.exp();
      Complex complex12 = complex1.sqrt();
      complex10.pow(complex6);
      complex12.tan();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((-1448.434));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.cos();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8396930096213817E290, 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.add(0.0);
      complex1.INF.hashCode();
      Complex.valueOf(1.8396930096213817E290);
      Complex complex3 = complex0.log();
      complex3.ZERO.divide((-2585.960880050135));
      complex3.NaN.getField();
      complex3.readResolve();
      complex0.sinh();
      complex2.getReal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf((-2.2677272333821516E-7));
      complex2.I.add(complex3);
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.NaN.pow(0.0);
      complex0.subtract(complex1);
      complex1.I.reciprocal();
      complex2.tanh();
      complex2.acos();
      complex7.sqrt();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.8582027385248835);
      complex0.add(0.8582027385248835);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-1742.2129603729732), 1735.95);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.valueOf(1735.95, 1735.95);
      complex0.add(complex1);
      complex1.tan();
      Complex complex2 = complex0.cosh();
      complex0.abs();
      Complex complex3 = complex2.tan();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.522726334561169E100));
      complex0.getArgument();
      Complex complex1 = complex0.subtract(1.4101386971763257E-249);
      Complex complex2 = Complex.valueOf(0.48910707235336304, 3.141592653589793);
      complex0.isInfinite();
      Complex complex3 = Complex.valueOf((-1298.0), Double.NaN);
      complex3.asin();
      complex1.add(complex2);
      Complex complex4 = complex3.divide(complex2);
      complex0.negate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.INF;
      complex6.multiply((-1298.0));
//      try { 
        complex4.nthRoot((-2071));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,071
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3589.3552), 894.4);
      Complex complex2 = Complex.ONE;
      complex2.add(Double.NaN);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(1.0972476870931676E-268, 1.0972476870931676E-268);
      Complex complex1 = complex0.tanh();
      complex1.INF.sin();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.add(1951.234);
      Complex complex4 = Complex.valueOf(1951.234, 1951.234);
      Complex complex5 = complex4.I.negate();
      complex5.ONE.pow((-9.522726334561169E100));
      Complex complex6 = complex5.I.tan();
      complex6.NaN.sinh();
      Complex complex7 = complex2.sinh();
      Complex complex8 = Complex.valueOf(1.0972476870931676E-268);
      complex3.ONE.tanh();
      complex8.INF.reciprocal();
      complex5.equals(complex8);
      Complex complex9 = complex3.sinh();
      complex9.toString();
      complex9.readResolve();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.ZERO.sin();
      complex11.ONE.atan();
      complex0.I.multiply(1.0972476870931676E-268);
      Complex complex12 = complex1.multiply(complex10);
      Complex complex13 = Complex.valueOf((-2648.719949), (-3508.5044777));
      complex13.ZERO.abs();
      complex13.INF.add(complex7);
      Complex.valueOf(1.0972476870931676E-268, 0.0);
      complex10.cosh();
      complex12.getField();
      complex12.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.NaN.tan();
      complex0.abs();
      complex1.ZERO.readResolve();
      Complex complex3 = complex0.exp();
      complex3.INF.asin();
      Complex complex4 = complex1.negate();
      complex4.I.hashCode();
      Complex complex5 = complex4.ZERO.tanh();
      complex4.INF.acos();
      complex2.abs();
      complex5.ZERO.sqrt();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex2.tan();
      complex7.ONE.pow(complex6);
      complex7.I.multiply(942.0);
      complex1.hashCode();
      complex7.tan();
      complex5.add(complex0);
      Complex.valueOf(1.0);
      complex1.multiply(17);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1141);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1141);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex.valueOf(8.20011457211383, 8.20011457211383);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-1340.140983363), (-1340.140983363));
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.add(complex0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.ONE.sin();
      complex1.I.readResolve();
      Complex complex3 = complex1.log();
      complex3.I.toString();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.INF.exp();
      complex4.I.cos();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.createComplex(6.283185307179586, (-3255.675));
      Complex complex9 = complex2.pow(complex0);
      complex4.I.add(complex8);
      complex1.equals(complex8);
      complex5.pow(complex4);
      complex1.hashCode();
      Complex complex10 = complex6.multiply(complex9);
      Complex complex11 = complex10.ONE.sqrt1z();
      complex11.NaN.sqrt1z();
      complex3.tanh();
      Complex.valueOf(6.283185307179586, (-3255.675));
      complex1.ONE.getField();
      complex8.getReal();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.divide(Double.POSITIVE_INFINITY);
      complex3.NaN.divide((-1932.798797489045));
      complex1.getArgument();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.divide(Double.POSITIVE_INFINITY);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(5.111952261540649E-283);
      complex2.tan();
      Complex complex3 = Complex.I;
      complex1.pow(complex2);
      complex3.subtract((-21782.596791558433));
      Complex complex4 = complex1.multiply((-298.4118429975));
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex1.subtract(complex5);
      complex5.tanh();
      Complex complex7 = Complex.ONE;
      complex7.equals(complex0);
      complex4.cosh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow((-1399.0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex((-1019.20304));
      Complex complex1 = complex0.add((-1019.20304));
      Complex complex2 = complex1.ONE.tan();
      complex0.NaN.pow(complex1);
      Complex complex3 = complex1.subtract((-437.48872541209));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.NaN.subtract(complex0);
      Complex complex6 = complex3.createComplex((-437.48872541209), (-1019.20304));
      Complex complex7 = complex0.pow(complex2);
      complex1.add(complex7);
      complex1.equals(complex5);
      Complex complex8 = complex2.pow(complex0);
      complex8.hashCode();
      Complex complex9 = complex8.multiply(complex4);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = Complex.I;
      complex11.sqrt1z();
      complex1.tanh();
      Complex.valueOf(1.3389485361963076E123, (-1019.20304));
      complex10.getField();
      complex4.getReal();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(8.20011457211383);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.792783182582235E246);
      Complex complex1 = Complex.valueOf(1.792783182582235E246);
      complex1.I.atan();
      complex0.ONE.nthRoot(571);
      Complex complex2 = complex0.exp();
      Complex.valueOf(1.1342556476593018, 0.0);
      complex2.INF.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex4.ZERO.cosh();
      Complex complex7 = complex3.ZERO.pow(complex4);
      Complex complex8 = complex3.sinh();
      complex8.NaN.nthRoot(571);
      complex2.isInfinite();
      complex3.getArgument();
      complex3.sin();
      Complex complex9 = complex0.divide(complex3);
      Complex complex10 = complex9.tanh();
      complex10.NaN.readResolve();
      complex4.INF.createComplex(0.0, 0.0);
      complex6.readResolve();
      complex5.getArgument();
      complex2.subtract(complex7);
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getField();
      Complex.valueOf(0.034552380442619324, 0.034552380442619324);
      Complex complex1 = complex0.cosh();
      complex1.getField();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.NaN.cos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex3.I.subtract(complex5);
      complex8.NaN.add(207.0831982286);
      complex6.readResolve();
      complex0.sin();
      Complex complex9 = complex2.ONE.subtract(complex1);
      Complex complex10 = complex9.ONE.reciprocal();
      Complex complex11 = complex7.subtract(complex1);
      Complex.valueOf(0.0);
      complex2.negate();
      complex8.ONE.reciprocal();
      complex3.getReal();
      complex3.I.getArgument();
      complex0.toString();
      complex2.divide(complex3);
      complex6.asin();
      complex8.pow(complex11);
      complex10.asin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = new Complex((-1019.20304));
      double double0 = 0.0;
      Complex complex1 = complex0.add(0.0);
      complex1.ONE.tan();
      Complex complex2 = complex1.sinh();
      complex0.NaN.pow(complex1);
      complex2.subtract((-437.48872541209));
      complex1.multiply(0.0);
      complex1.NaN.subtract(complex2);
      Complex complex3 = complex0.tanh();
      complex0.equals(complex1);
      Complex complex4 = complex2.ONE.divide(complex3);
//      try { 
        complex4.nthRoot((-405));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -405
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex2.ZERO.sin();
      complex0.I.add(complex1);
      Complex complex4 = complex3.add(complex1);
      complex0.ZERO.log();
      complex0.getImaginary();
      Complex complex5 = complex2.sin();
      complex0.getImaginary();
      Complex complex6 = complex5.multiply(complex1);
      complex4.I.divide(0.0);
      Complex complex7 = complex1.multiply(complex5);
      Complex complex8 = complex4.divide(complex7);
      complex8.ZERO.asin();
      complex6.sinh();
      complex5.INF.negate();
      Complex.valueOf((-3093.654), (double) (-1976));
      Complex complex9 = complex7.multiply((-1976));
      complex7.getReal();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.26820653676986694);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.createComplex(0.26820653676986694, 4358.69997185);
      Complex complex4 = complex3.add(complex1);
      complex0.getReal();
      Complex complex5 = complex0.cosh();
      complex5.NaN.acos();
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = complex3.NaN.sin();
      Complex complex8 = complex2.acos();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex8.NaN.add(complex9);
      complex5.NaN.hashCode();
      complex4.nthRoot(37);
      complex6.toString();
      complex1.pow(complex5);
      Complex complex11 = complex1.cos();
      Complex.valueOf((-20.0), 0.0);
      complex4.getImaginary();
      complex10.multiply(37);
      complex11.conjugate();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.26820653676986694);
      Complex complex2 = complex1.ZERO.negate();
      complex2.INF.createComplex(0.26820653676986694, 4358.69997185);
      complex0.getReal();
      Complex.valueOf(4358.69997185);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(1298.30891298734);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.hashCode();
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = complex1.sqrt();
      complex2.ONE.tanh();
      Complex complex5 = complex4.INF.negate();
      complex5.INF.acos();
      Complex complex6 = complex4.sinh();
      complex6.ONE.readResolve();
      complex4.INF.getArgument();
      complex4.ZERO.readResolve();
      Complex complex7 = complex1.cos();
      complex7.ZERO.sqrt1z();
      complex1.getReal();
      complex0.divide(complex2);
      Complex complex8 = complex7.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.NaN.reciprocal();
      complex0.getImaginary();
      Complex complex10 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex8.INF.divide(Double.POSITIVE_INFINITY);
      complex11.ONE.multiply(complex9);
      complex7.readResolve();
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex10.sin();
      Complex complex12 = complex8.atan();
      Complex complex13 = Complex.valueOf(967.4709864679778);
      complex4.equals(complex13);
      complex13.divide(complex3);
      complex12.multiply(complex1);
      complex7.abs();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.exp();
      complex6.I.readResolve();
      Complex complex7 = complex2.log();
      Complex complex8 = Complex.valueOf((-1357.674818853272));
      complex1.abs();
      Complex complex9 = complex0.cos();
      complex9.nthRoot(3741);
      complex4.subtract(Double.NaN);
      complex3.readResolve();
      complex9.sin();
      complex4.log();
      Complex complex10 = complex7.tan();
      complex10.ONE.createComplex((-1357.674818853272), (-1357.674818853272));
      Complex complex11 = complex0.cosh();
      complex11.I.log();
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex12.acos();
      complex10.tan();
      complex6.abs();
      complex8.readResolve();
      complex2.multiply(3741);
      complex13.subtract((-1357.674818853272));
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex((-3773.016967606017), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.log();
      complex1.sqrt1z();
      complex2.multiply(2432);
      complex1.sqrt();
      Complex.valueOf((double) 2432, 9.362866914115166E-285);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.I.multiply(Double.NaN);
      Complex complex5 = complex4.I.sqrt();
      complex5.ZERO.atan();
      complex3.sqrt1z();
      Complex complex6 = complex3.ONE.sin();
      complex6.INF.tanh();
      complex6.cosh();
      Complex complex7 = complex2.NaN.negate();
      complex2.getField();
      complex1.multiply(complex7);
      complex3.isNaN();
      complex0.log();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-2230));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.INF.pow(complex0);
      Complex complex7 = complex6.NaN.sqrt();
      complex4.readResolve();
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex3.pow(complex8);
      double double0 = complex4.abs();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      assertTrue(complex10.isInfinite());
      
      Complex complex11 = complex0.divide(complex4);
      assertSame(complex11, complex7);
      
      double double1 = complex3.getReal();
      assertEquals(double1, double0, 0.01);
      
      Complex complex12 = complex6.log();
      Complex.valueOf((-2250.0));
      complex5.getField();
      Complex complex13 = complex12.multiply(286);
      assertSame(complex13, complex9);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex12, complex6);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex12, complex8);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = new Complex((-1742.2129603729732), 1735.95);
      complex0.hashCode();
      String string0 = complex0.toString();
      assertEquals("(-1742.2129603729732, 1735.95)", string0);
      
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sin();
      assertEquals(1742.2128163605482, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(1735.9501434947365, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.cosh();
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(2459.4366025152103, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = new Complex(2209.71841933);
      complex0.abs();
      Complex complex1 = complex0.NaN.sin();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      complex0.createComplex((-6.380305844689076E-8), 1045.15272);
      Complex complex2 = complex0.log();
      boolean boolean0 = complex2.isInfinite();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(7.700620374326318, complex2.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1002);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1002.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf((-0.8414709848078965), Double.POSITIVE_INFINITY);
      double double0 = complex3.getArgument();
      assertEquals(1.5707963267948966, double0, 0.01);
      
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.valueOf((-0.8414709848078965));
      Complex complex6 = complex5.sqrt();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.9173172759781081, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.multiply(759);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      
      Complex complex8 = complex2.tanh();
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-802.1325045166298));
      assertEquals((-802.1325045166298), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      Complex complex1 = (Complex)complex0.INF.readResolve();
      complex0.negate();
      complex0.getArgument();
      Complex complex2 = complex0.subtract(2826.30528107);
      Complex complex3 = complex2.asin();
      assertEquals(8.639872796103337, complex3.getImaginary(), 0.01);
      assertEquals((-1.5704425079672606), complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.atan();
      assertTrue(complex1.isInfinite());
      assertTrue(complex4.isNaN());
      
      Complex complex5 = Complex.valueOf(20.0, 451.961210958);
      Complex complex6 = complex5.cosh();
      assertEquals((-1.0071334770973013E8), complex6.getImaginary(), 0.01);
      assertEquals(2.2068787529530025E8, complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.multiply(0);
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex2.getArgument();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.NaN.multiply(complex4);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.I.sin();
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      
      double double0 = complex3.getReal();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertSame(complex2, complex5);
      assertEquals(1.0, double0, 0.01);
      assertTrue(complex1.equals((Object)complex7));
      
      Object object0 = complex4.readResolve();
      assertTrue(object0.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(10.7689544907848);
      assertEquals((-10.7689544907848), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.reciprocal();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.nthRoot((-3301));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,301
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.sin();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex2.ZERO.sqrt();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      String string0 = complex1.toString();
      assertEquals("(0.0, -1.0)", string0);
      assertFalse(complex1.isInfinite());
      
      Complex complex6 = complex2.asin();
      assertSame(complex6, complex4);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.INF.sqrt1z();
      Object object0 = complex0.INF.readResolve();
      List<Complex> list0 = complex1.INF.nthRoot(800);
      assertTrue(list0.contains(object0));
      
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex1.NaN.divide(complex0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.conjugate();
      assertSame(complex6, complex2);
      
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.NaN.cos();
      assertEquals(0.40950687386030127, complex7.getReal(), 0.01);
      
      complex4.negate();
      assertSame(complex4, complex8);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      
      complex3.cosh();
      assertFalse(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      complex0.INF.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.negate();
      complex1.getArgument();
      Complex complex3 = complex1.subtract(2826.30528107);
      complex3.isInfinite();
      complex3.asin();
      complex2.divide(complex1);
      complex1.ZERO.negate();
      complex3.multiply(0.0);
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.pow(0.0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex2.isInfinite());
      assertTrue(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.readResolve();
      assertTrue(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = new Complex(1023.3910258838);
      complex0.hashCode();
      assertFalse(complex0.isNaN());
      assertEquals(1023.3910258838, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Complex complex0 = new Complex(2882.6583, 2882.6583);
      Complex complex1 = complex0.INF.pow(619.6651);
      assertTrue(complex1.isNaN());
      
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.INF.subtract(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      complex0.hashCode();
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
  }
}
